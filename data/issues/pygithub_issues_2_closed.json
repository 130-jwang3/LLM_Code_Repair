[{"author":{"id":"MDQ6VXNlcjU2ODQ3MjU1","is_bot":false,"login":"henmaisler","name":""},"body":"I am trying to iterate over all (until I reach the rate limit) public repos on GitHub. When I execute the following code, my rate limit will decrease by one for each repository I iterate over. If I query the API manually using curl, I get multiple repositories in the result, and the Link info in the header correctly shows where to continue querying to get the next page of results. Am I doing something wrong? I would expect it to only call the API again after I iterated over 100 repositories.\r\n```\r\ng = Github(\"username\", \"password\", per_page=100)  # Maximum per page seems to be 100\r\nrepos = g.get_repos()\r\n\r\nfor repo in repos:\r\n    rate_limit_remaining = g.rate_limiting[0]\r\n```","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDU0NjA4OTY5Nw==","author":{"login":"henmaisler"},"authorAssociation":"NONE","body":"I was accessing the subscribers_count and forks_count properties, which are not included in the response to /repositories, so I assume PyGithub was issuing additional requests to get this info. Sorry for creating an unnecessary issue!","createdAt":"2019-10-24T20:30:01Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1272#issuecomment-546089697","viewerDidAuthor":false}],"createdAt":"2019-10-24T20:21:55Z","number":1272,"state":"CLOSED","title":"Iterating over PaginatedList of repositories creates too many API requests","url":"https://github.com/PyGithub/PyGithub/issues/1272"},{"author":{"id":"MDQ6VXNlcjQ1MjA4NDEy","is_bot":false,"login":"hopkinsnji","name":""},"body":"I have a job that runs regularly... it threw this error today- `TypeError: encoding or errors without a string argument`. So I pinned the version to v1.43.8 and it works fine. \r\n![Screen Shot 2019-10-21 at 12 46 30 PM](https://user-images.githubusercontent.com/45208412/67234786-5c305600-f40b-11e9-89d9-40cd9da0751e.png)\r\nI wonder if anyone else has experienced the same issue.\r\n","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDU0NDc3OTM0Mw==","author":{"login":"s-t-e-v-e-n-k"},"authorAssociation":"COLLABORATOR","body":"I changed that code explicitly during one of my remove Python 2 only code crusades. I'll investigate.","createdAt":"2019-10-22T02:09:21Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1266#issuecomment-544779343","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDU0NDk4ODk2Mg==","author":{"login":"hopkinsnji"},"authorAssociation":"NONE","body":"Thanks a lot s-t-e-v-e-n-k ","createdAt":"2019-10-22T14:25:32Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1266#issuecomment-544988962","viewerDidAuthor":false}],"createdAt":"2019-10-21T19:03:08Z","number":1266,"state":"CLOSED","title":"After v 1.44, TypeError: encoding or errors without a string argument","url":"https://github.com/PyGithub/PyGithub/issues/1266"},{"author":{"id":"MDQ6VXNlcjk5NTI0","is_bot":false,"login":"tino","name":"Tino de Bruijn"},"body":"This is both a question and a report of what I think is a design flaw. I'm trying to use PyGithub in a webapp that handles Github webhooks. I've set up a Github App for it, and am able to authenticate and perform the actions I want. However, now it is time to deal with token expiration, as Github tokens only live for an hour.\r\n\r\nThe first hurdle is that the `expires_at` property of an `InstallationAuthorization()` returns a naive datetime. Trying to assert the token is still valid is therefor problematic:\r\n```python\r\n>>> import os\r\n... import codecs\r\n... from github import Github, GithubIntegration\r\n... decoder = codecs.getdecoder(\"unicode_escape\")\r\n... PRIVATE_KEY = decoder(os.environ[\"GITHUB_APP_PRIVATE_KEY\"].encode())[0]\r\n... APP_ID = 44107\r\n... INSTALLATION_ID = 3289834\r\n... integration = GithubIntegration(APP_ID, PRIVATE_KEY)\r\n... integration_accessor = integration.get_access_token(INSTALLATION_ID)\r\n\r\n>>> integration_accessor\r\nInstallationAuthorization(expires_at=2019-10-20 09:36:48)\r\n\r\n>>> import datetime\r\n... now = datetime.datetime.now().astimezone()\r\n\r\n>>> integration_accessor.expires_at > now\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\nTypeError: can't compare offset-naive and offset-aware datetimes\r\n```\r\n\r\nIf I *naively* try to do this, the token is \"expired\" the moment I get it:\r\n```python\r\n>>> import time\r\n... integration_accessor = integration.get_access_token(INSTALLATION_ID)\r\n... now = datetime.datetime.now()\r\n... print('valid?', now < integration_accessor.expires_at)\r\n... print(now)\r\n... print(integration_accessor.expires_at)\r\nvalid? False\r\n2019-10-20 09:56:53.049639\r\n2019-10-20 09:56:53\r\n\r\n>>> now.astimezone().tzinfo\r\ndatetime.timezone(datetime.timedelta(0, 3600), 'WEST')\r\n```\r\nThat is of course because I'm in UTC+1, but would be the case for everyone in later-than-UTC timezones. So I really think `expires_at` should be a timezone-aware datetime object.\r\n\r\nBut in general, how do people handle this? Any wrapper code to check a token for being still valid out there? Or a re-auth & retry loop?","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDU0NTQzNDgzNA==","author":{"login":"LeoQuote"},"authorAssociation":"NONE","body":"You can store it in redis and give it an expire time slightly smaller than 3600s.","createdAt":"2019-10-23T13:08:23Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1264#issuecomment-545434834","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDU2ODI2MTAzNw==","author":{"login":"stale"},"authorAssociation":"NONE","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","createdAt":"2019-12-22T13:16:36Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1264#issuecomment-568261037","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDcyMTcwMTc1Mg==","author":{"login":"huwcbjones"},"authorAssociation":"CONTRIBUTOR","body":"Token expiry is in UTC (hence no timezone)\r\nTherefore use `datetime.utcnow()` and you won't have any issues","createdAt":"2020-11-04T12:24:08Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1264#issuecomment-721701752","viewerDidAuthor":false}],"createdAt":"2019-10-20T08:59:06Z","number":1264,"state":"CLOSED","title":"How to deal with token expiration?","url":"https://github.com/PyGithub/PyGithub/issues/1264"},{"author":{"id":"MDQ6VXNlcjEwMzkzNjk=","is_bot":false,"login":"nchammas","name":"Nicholas Chammas"},"body":"If you're iterating through a list of branches by name, it would be handy to be able to delete them directly:\r\n\r\n```python\r\n# Example 1\r\nrepo.get_branch('feature-branch-1').delete()\r\n\r\n# Example 2\r\nfor branch in repo.get_branches():\r\n    if some_condition:\r\n        branch.delete()\r\n```\r\n\r\nI think the only way currently available to delete branches is to call `repo.get_git_ref()` to get a reference to the branch, and then call `.delete()` on the returned object. What I'm proposing would complement this method.","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDU2NTc0MDI3Ng==","author":{"login":"stale"},"authorAssociation":"NONE","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","createdAt":"2019-12-14T18:21:43Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1260#issuecomment-565740276","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDYzMTY2MzU3OQ==","author":{"login":"YuriSilenok"},"authorAssociation":"NONE","body":"> If you're iterating through a list of branches by name, it would be handy to be able to delete them directly:\r\n> \r\n> ```python\r\n> # Example 1\r\n> repo.get_branch('feature-branch-1').delete()\r\n> \r\n> # Example 2\r\n> for branch in repo.get_branches():\r\n>     if some_condition:\r\n>         branch.delete()\r\n> ```\r\n> \r\n> I think the only way currently available to delete branches is to call `repo.get_git_ref()` to get a reference to the branch, and then call `.delete()` on the returned object. What I'm proposing would complement this method.\r\n\r\nPlease add this function, it will be very useful.","createdAt":"2020-05-20T18:59:31Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":16}}],"url":"https://github.com/PyGithub/PyGithub/issues/1260#issuecomment-631663579","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDgyMzA3NDI1MQ==","author":{"login":"abulka"},"authorAssociation":"NONE","body":"A quick workaround function to delete a branch, just in case its useful for anyone:\r\n\r\n```python\r\nfrom github.GithubException import UnknownObjectException\r\n\r\ndef delete_branch(branch_name):\r\n    try:\r\n        ref = repo.get_git_ref(f\"heads/{branch_name}\")\r\n        ref.delete()\r\n    except UnknownObjectException:\r\n        print('No such branch', branch_name)\r\n\r\n\r\nbranch_name = \"br-0004\"\r\ndelete_branch(branch_name)\r\n```\r\n","createdAt":"2021-04-20T08:11:28Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":27}},{"content":"HEART","users":{"totalCount":9}}],"url":"https://github.com/PyGithub/PyGithub/issues/1260#issuecomment-823074251","viewerDidAuthor":false}],"createdAt":"2019-10-15T18:08:42Z","number":1260,"state":"CLOSED","title":"Add a Branch.delete() method","url":"https://github.com/PyGithub/PyGithub/issues/1260"},{"author":{"id":"MDQ6VXNlcjE4MzMxMjcx","is_bot":false,"login":"S-Dutta1","name":"Srijit Dutta"},"body":"How can I access the directories of a branch, after getting it ?\r\nEven after \r\nb = repo.get_branch(branch=\"XYZ\") on downloading repo.get_contents(), I still get master branch contents.","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDU0NDU4NjU2Ng==","author":{"login":"mictram"},"authorAssociation":"NONE","body":"Same issue here. Contents are the master branch version. Steps:\r\n`github = Github(api_key)`\r\n`repo = github.get_repo(f\"{org_name}/{repo_name}\")`\r\n`repo.get_branch(branch=branch)`\r\n`file_contents = repo.get_contents(target)`\r\n\r\nVersions tested:\r\n- 1.44\r\n- 1.43.8\r\n- 1.43.7\r\n\r\nWorkaround:\r\n```\r\ndef get_sha_for_tag(repository, tag):      \r\n    branches = repository.get_branches()                             \r\n    matched_branches = [match for match in branches if match.name == tag]\r\n    if matched_branches:                     \r\n        return matched_branches[0].commit.sha\r\n                                                       \r\n    tags = repository.get_tags()\r\n    matched_tags = [match for match in tags if match.name == tag]\r\n    if not matched_tags:                                 \r\n        raise ValueError(\"No Tag or Branch exists with that name\")\r\n    return matched_tags[0].commit.sha\r\n\r\ngithub = Github(api_key)\r\nrepo = github.get_repo(f\"{org_name}/{repo_name}\")\r\nsha = get_sha_for_tag(repo, branch)\r\nfile_contents = repo.get_contents(target, ref=sha)\r\n```","createdAt":"2019-10-21T16:07:51Z","includesCreatedEdit":true,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":3}}],"url":"https://github.com/PyGithub/PyGithub/issues/1258#issuecomment-544586566","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDU0NTA2MzE3Ng==","author":{"login":"mictram"},"authorAssociation":"NONE","body":"@S-Dutta1 why did you close this? This should still be an open issue.","createdAt":"2019-10-22T17:13:10Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1258#issuecomment-545063176","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDU0NTI0ODA4OA==","author":{"login":"S-Dutta1"},"authorAssociation":"NONE","body":"I thought the workaround you suggested was enough for the purpose, thus closed it. Opening it again.","createdAt":"2019-10-23T03:23:21Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":1}}],"url":"https://github.com/PyGithub/PyGithub/issues/1258#issuecomment-545248088","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDU0ODI5NzEzMQ==","author":{"login":"s-t-e-v-e-n-k"},"authorAssociation":"COLLABORATOR","body":"I don't feel this is a bug.\r\n\r\nrepo.get_branch() only returns the branch object from GitHub, it doesn't change what branch the repository object is pointing to.\r\n\r\nSince repo.get_contents() still operates on the repository itself, it's going to default to master, as the GitHub docs say.\r\n\r\nBuilding on your example:\r\n```\r\nb = repo.get_branch(branch=\"XYZ\")\r\nfile = repo.get_contents(path=\"foo/bar\", ref=b.commit.sha)\r\n```","createdAt":"2019-10-31T10:06:59Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"HOORAY","users":{"totalCount":2}}],"url":"https://github.com/PyGithub/PyGithub/issues/1258#issuecomment-548297131","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDgyOTc4NjgyMA==","author":{"login":"bhushanladdad"},"authorAssociation":"NONE","body":"Hi,\r\nI am trying to download contents of a master branch using the same code snippet. However when I execute get_contents \r\ncontents = repository.get_contents(server_path, ref=sha)\r\n\r\nI get error:\r\n\r\ngithub.GithubException.UnknownObjectException: 404 {\"message\": \"Not Found\", \"documentation_url\": \"https://docs.github.com/rest/reference/repos#get-repository-content\"}\r\nPlease provide some pointer ","createdAt":"2021-04-30T03:54:40Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1258#issuecomment-829786820","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDgzMDAwMjI1MQ==","author":{"login":"ac79308"},"authorAssociation":"NONE","body":"just try like this \r\n\r\n> Hi,\r\n> I am trying to download contents of a master branch using the same code snippet. However when I execute get_contents\r\n> contents = repository.get_contents(server_path, ref=sha)\r\n> \r\n> I get error:\r\n> \r\n> github.GithubException.UnknownObjectException: 404 {\"message\": \"Not Found\", \"documentation_url\": \"[https://docs.github.com/rest/reference/repos#get-repository-content\"}](https://docs.github.com/rest/reference/repos#get-repository-content%22%7D)\r\n> Please provide some pointer\r\n\r\njust try like this it will give you default branch content\r\n**contents = repository.get_contents(\"\")**","createdAt":"2021-04-30T10:31:05Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1258#issuecomment-830002251","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDgzMDEzMzMyMA==","author":{"login":"bhushanladdad"},"authorAssociation":"NONE","body":"Thank you. This worked. However now I get another exception:\n\nCode snippet:\n    contents = repository.get_contents(\"\")\n\n    for content in contents:\n        print(\"Processing %s\" % content.path)\n        if content.type == 'dir':\n            print(content.path)\n            download_directory(repository, sha, content.path)\n        else:\n            try:\n                path = content.path\n                file_content = repository.get_contents(path, ref=sha)\n                file_data = base64.b64decode(file_content.content)\n                file_out = open(content.name, \"w\")\n                file_out.write(file_data)\n                file_out.close()\n            except (GithubException, IOError) as exc:\n                logging.error('Error processing %s: %s', content.path, exc)\n\nException:\n           Traceback (most recent call last):\n  File \"C:\\JobSaga39\\venv\\Scripts\\DumpGit.py\", line 38, in\ndownload_directory\n    download_directory(repository, sha, content.path)\n  File \"C:\\JobSaga39\\venv\\Scripts\\DumpGit.py\", line 38, in\ndownload_directory\n    download_directory(repository, sha, content.path)\n  File \"C:\\JobSaga39\\venv\\Scripts\\DumpGit.py\", line 38, in\ndownload_directory\n    download_directory(repository, sha, content.path)\n  [Previous line repeated 968 more times]\n  File \"C:\\JobSaga39\\venv\\Scripts\\DumpGit.py\", line 32, in\ndownload_directory\n    contents = repository.get_contents(\"\")\n  File \"C:\\JobSaga39\\venv\\lib\\site-packages\\github\\Repository.py\", line\n1756, in get_contents\n    headers, data = self._requester.requestJsonAndCheck(\n  File \"C:\\JobSaga39\\venv\\lib\\site-packages\\github\\Requester.py\", line 316,\nin requestJsonAndCheck\n    *self.requestJson(\n  File \"C:\\JobSaga39\\venv\\lib\\site-packages\\github\\Requester.py\", line 408,\nin requestJson\n    return self.__requestEncode(cnx, verb, url, parameters, headers, input,\nencode)\n  File \"C:\\JobSaga39\\venv\\lib\\site-packages\\github\\Requester.py\", line 484,\nin __requestEncode\n    status, responseHeaders, output = self.__requestRaw(\n  File \"C:\\JobSaga39\\venv\\lib\\site-packages\\github\\Requester.py\", line 511,\nin __requestRaw\n    response = cnx.getresponse()\n  File \"C:\\JobSaga39\\venv\\lib\\site-packages\\github\\Requester.py\", line 108,\nin getresponse\n    r = verb(\n  File \"C:\\JobSaga39\\venv\\lib\\site-packages\\requests\\sessions.py\", line\n555, in get\n    return self.request('GET', url, **kwargs)\n  File \"C:\\JobSaga39\\venv\\lib\\site-packages\\requests\\sessions.py\", line\n542, in request\n    resp = self.send(prep, **send_kwargs)\n  File \"C:\\JobSaga39\\venv\\lib\\site-packages\\requests\\sessions.py\", line\n655, in send\n    r = adapter.send(request, **kwargs)\n  File \"C:\\JobSaga39\\venv\\lib\\site-packages\\requests\\adapters.py\", line\n439, in send\n    resp = conn.urlopen(\n  File \"C:\\JobSaga39\\venv\\lib\\site-packages\\urllib3\\connectionpool.py\",\nline 699, in urlopen\n    httplib_response = self._make_request(\n  File \"C:\\JobSaga39\\venv\\lib\\site-packages\\urllib3\\connectionpool.py\",\nline 445, in _make_request\n    six.raise_from(e, None)\n  File \"<string>\", line 3, in raise_from\n  File \"C:\\JobSaga39\\venv\\lib\\site-packages\\urllib3\\connectionpool.py\",\nline 440, in _make_request\n    httplib_response = conn.getresponse()\n  File \"C:\\Program\nFiles\\WindowsApps\\PythonSoftwareFoundation.Python.3.9_3.9.1264.0_x64__qbz5n2kfra8p0\\lib\\http\\client.py\",\nline 1345, in getresponse\n    response.begin()\n  File \"C:\\Program\nFiles\\WindowsApps\\PythonSoftwareFoundation.Python.3.9_3.9.1264.0_x64__qbz5n2kfra8p0\\lib\\http\\client.py\",\nline 331, in begin\n    self.headers = self.msg = parse_headers(self.fp)\n  File \"C:\\Program\nFiles\\WindowsApps\\PythonSoftwareFoundation.Python.3.9_3.9.1264.0_x64__qbz5n2kfra8p0\\lib\\http\\client.py\",\nline 225, in parse_headers\n    return email.parser.Parser(_class=_class).parsestr(hstring)\n  File \"C:\\Program\nFiles\\WindowsApps\\PythonSoftwareFoundation.Python.3.9_3.9.1264.0_x64__qbz5n2kfra8p0\\lib\\email\\parser.py\",\nline 67, in parsestr\n    return self.parse(StringIO(text), headersonly=headersonly)\n  File \"C:\\Program\nFiles\\WindowsApps\\PythonSoftwareFoundation.Python.3.9_3.9.1264.0_x64__qbz5n2kfra8p0\\lib\\email\\parser.py\",\nline 56, in parse\n    feedparser.feed(data)\n  File \"C:\\Program\nFiles\\WindowsApps\\PythonSoftwareFoundation.Python.3.9_3.9.1264.0_x64__qbz5n2kfra8p0\\lib\\email\\feedparser.py\",\nline 176, in feed\n    self._call_parse()\n  File \"C:\\Program\nFiles\\WindowsApps\\PythonSoftwareFoundation.Python.3.9_3.9.1264.0_x64__qbz5n2kfra8p0\\lib\\email\\feedparser.py\",\nline 180, in _call_parse\n    self._parse()\n  File \"C:\\Program\nFiles\\WindowsApps\\PythonSoftwareFoundation.Python.3.9_3.9.1264.0_x64__qbz5n2kfra8p0\\lib\\email\\feedparser.py\",\nline 295, in _parsegen\n    if self._cur.get_content_maintype() == 'message':\n  File \"C:\\Program\nFiles\\WindowsApps\\PythonSoftwareFoundation.Python.3.9_3.9.1264.0_x64__qbz5n2kfra8p0\\lib\\email\\message.py\",\nline 594, in get_content_maintype\n    ctype = self.get_content_type()\n  File \"C:\\Program\nFiles\\WindowsApps\\PythonSoftwareFoundation.Python.3.9_3.9.1264.0_x64__qbz5n2kfra8p0\\lib\\email\\message.py\",\nline 578, in get_content_type\n    value = self.get('content-type', missing)\n  File \"C:\\Program\nFiles\\WindowsApps\\PythonSoftwareFoundation.Python.3.9_3.9.1264.0_x64__qbz5n2kfra8p0\\lib\\email\\message.py\",\nline 471, in get\n    return self.policy.header_fetch_parse(k, v)\n  File \"C:\\Program\nFiles\\WindowsApps\\PythonSoftwareFoundation.Python.3.9_3.9.1264.0_x64__qbz5n2kfra8p0\\lib\\email\\_policybase.py\",\nline 316, in header_fetch_parse\n    return self._sanitize_header(name, value)\n  File \"C:\\Program\nFiles\\WindowsApps\\PythonSoftwareFoundation.Python.3.9_3.9.1264.0_x64__qbz5n2kfra8p0\\lib\\email\\_policybase.py\",\nline 287, in _sanitize_header\n    if _has_surrogates(value):\n  File \"C:\\Program\nFiles\\WindowsApps\\PythonSoftwareFoundation.Python.3.9_3.9.1264.0_x64__qbz5n2kfra8p0\\lib\\email\\utils.py\",\nline 57, in _has_surrogates\n    s.encode()\nRecursionError: maximum recursion depth exceeded while calling a Python\nobject\n\n\nOn Fri, Apr 30, 2021 at 6:31 AM rahulRB ***@***.***> wrote:\n\n> just try like this\n>\n> Hi,\n> I am trying to download contents of a master branch using the same code\n> snippet. However when I execute get_contents\n> contents = repository.get_contents(server_path, ref=sha)\n>\n> I get error:\n>\n> github.GithubException.UnknownObjectException: 404 {\"message\": \"Not\n> Found\", \"documentation_url\": \"\n> https://docs.github.com/rest/reference/repos#get-repository-content\"}\n> Please provide some pointer\n>\n> just try like this it will give you default branch content\n> *contents = repository.get_contents(\"\")*\n>\n> —\n> You are receiving this because you commented.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/PyGithub/PyGithub/issues/1258#issuecomment-830002251>,\n> or unsubscribe\n> <https://github.com/notifications/unsubscribe-auth/ATYUAMVSZOXJP5OGSFRM4TDTLKBH5ANCNFSM4JAMXZRA>\n> .\n>\n","createdAt":"2021-04-30T14:27:41Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1258#issuecomment-830133320","viewerDidAuthor":false}],"createdAt":"2019-10-14T09:36:02Z","number":1258,"state":"CLOSED","title":"Downloading contents of a specific folder of a branch","url":"https://github.com/PyGithub/PyGithub/issues/1258"},{"author":{"id":"MDQ6VXNlcjU2NjY1MA==","is_bot":false,"login":"impredicative","name":"Ouroboros Chrysopoeia"},"body":"Is the `Github` class and its methods reliably thread safe or not? Or should I necessarily use a unique instance of the class in each thread? Would at least the latter be safe? This also needs to be addressed in the docs.","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDU0ODI5ODMxNQ==","author":{"login":"s-t-e-v-e-n-k"},"authorAssociation":"COLLABORATOR","body":"This hasn't been adequately tested to give a clear answer. I *think* using an instantiated Github object in local threads should work fine, since they're just making stateless HTTP requests and parsing data. Try a proof-of-concept and see what happens? Just mind you, you may burn through your rate limit quotas rather fast. :-)","createdAt":"2019-10-31T10:09:55Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1257#issuecomment-548298315","viewerDidAuthor":false}],"createdAt":"2019-10-13T19:00:28Z","number":1257,"state":"CLOSED","title":"Is Github class and its methods thread safe?","url":"https://github.com/PyGithub/PyGithub/issues/1257"},{"author":{"id":"MDQ6VXNlcjE4NzAzMDY4","is_bot":false,"login":"charris-greatamerica","name":"Chris Harris"},"body":"Maybe missing it or maybe not possible at this time via API but is there currently a way or path to be able to edit Data Services area to the Repository.edit command?\r\n\r\n![image](https://user-images.githubusercontent.com/18703068/66680273-c68c0e00-ec35-11e9-9b59-094453b25b88.png)\r\n\r\n![image](https://user-images.githubusercontent.com/18703068/66680304-d9064780-ec35-11e9-8b0b-e1f8a404f0ad.png)","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDU2NDIzMzI4NQ==","author":{"login":"stale"},"authorAssociation":"NONE","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","createdAt":"2019-12-10T20:20:50Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1255#issuecomment-564233285","viewerDidAuthor":false}],"createdAt":"2019-10-11T19:47:30Z","number":1255,"state":"CLOSED","title":"Data Services Editing","url":"https://github.com/PyGithub/PyGithub/issues/1255"},{"author":{"id":"MDQ6VXNlcjQ3MjYwOA==","is_bot":false,"login":"adambaratz","name":"Adam Baratz"},"body":"I was working on test coverage for topic search (see #1252). When recording an example API response, the test runner got thrown off by a non-breaking space in the content:\r\n```\r\nTraceback (most recent call last):\r\n  File \"tests/Topic.py\", line 67, in testSearch\r\n    self.assertListKeyEqual(self.g.search_topics(\"python\"), attrgetter(\"name\"), expected_names)\r\n  File \"tests/Framework.py\", line 312, in assertListKeyEqual\r\n    realKeys = [key(element) for element in elements]\r\n  File \"github/PaginatedList.py\", line 61, in __iter__\r\n    newElements = self._grow()\r\n  File \"github/PaginatedList.py\", line 73, in _grow\r\n    newElements = self._fetchNextPage()\r\n  File \"github/PaginatedList.py\", line 198, in _fetchNextPage\r\n    headers=self.__headers\r\n  File \"github/Requester.py\", line 268, in requestJsonAndCheck\r\n    return self.__check(*self.requestJson(verb, url, parameters, headers, input, self.__customConnection(url)))\r\n  File \"github/Requester.py\", line 328, in requestJson\r\n    return self.__requestEncode(cnx, verb, url, parameters, headers, input, encode)\r\n  File \"github/Requester.py\", line 381, in __requestEncode\r\n    status, responseHeaders, output = self.__requestRaw(cnx, verb, url, requestHeaders, encoded_input)\r\n  File \"github/Requester.py\", line 405, in __requestRaw\r\n    response = cnx.getresponse()\r\n  File \"tests/Framework.py\", line 129, in getresponse\r\n    self.__writeLine(output)\r\n  File \"tests/Framework.py\", line 140, in __writeLine\r\n    self.__file.write(line + '\\n')\r\nUnicodeEncodeError: 'ascii' codec can't encode character u'\\xa0' in position 2437: ordinal not in range(128)\r\n```\r\n\r\nI haven't looked too closely at the code, but this looks related to the fact that this class treats the response body as ASCII and UTF-8 in different places.\r\n\r\nThere's another issue with the same line in Python 3. Files opened in binary mode expect to receive bytes and `'\\n'` is a string.","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDU0ODI5ODY2OQ==","author":{"login":"s-t-e-v-e-n-k"},"authorAssociation":"COLLABORATOR","body":"Closed via #1254","createdAt":"2019-10-31T10:10:50Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1253#issuecomment-548298669","viewerDidAuthor":false}],"createdAt":"2019-10-09T21:37:45Z","number":1253,"state":"CLOSED","title":"`RecordingConnection` string handling issues","url":"https://github.com/PyGithub/PyGithub/issues/1253"},{"author":{"id":"MDQ6VXNlcjU2MzU4MDcx","is_bot":false,"login":"dontejiggetts","name":""},"body":"Hello,\r\n\r\nI am trying to incorporate this API in my code. I am trying to simply authenticate a Github object using the code from the tutorial. I have a class that looks like this:\r\n\r\nfrom github import Github\r\n\r\ntoken = \"some token\"\r\n\r\n# Github Enterprise with custom hostname\r\ng = Github(\"url\", token)\r\n\r\n# Then play with your Github objects:\r\nfor repo in g.get_user().get_repos():\r\n    print(repo.name)\r\n\r\n\r\nWhen I run this script I get the following:\r\ngithub.GithubException.GithubException: 403 {'message': 'Maximum number of login attempts exceeded. Please try again later.', 'documentation_url': 'https://developer.github.com/v3'}\r\n\r\n\r\nIs there any way to fix this? I got this exception today and I have not tried to run this since yesterday evening. I have tried making new tokens and still get the same problem. Any help would be useful. Thank you","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDU0ODI5OTc2OA==","author":{"login":"s-t-e-v-e-n-k"},"authorAssociation":"COLLABORATOR","body":"The first parameter for Github() is your token, not the URL, so I think that error is coming from Github itself trying to authenticate with a username of your Enterprise install and a password of your token.\r\n\r\nYou should be using:\r\n```\r\ng = Github(token, base_url=\"url\")\r\n```","createdAt":"2019-10-31T10:13:48Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1248#issuecomment-548299768","viewerDidAuthor":false}],"createdAt":"2019-10-09T15:38:40Z","number":1248,"state":"CLOSED","title":"403 {'message': 'Maximum number of login attempts exceeded. Please try again later.","url":"https://github.com/PyGithub/PyGithub/issues/1248"},{"author":{"id":"MDQ6VXNlcjIyMTE4MDYw","is_bot":false,"login":"LeonardoFurtado","name":"Leonardo Furtado"},"body":"I am trying create a repo with PyGithub, and on the [docs](https://pygithub.readthedocs.io/en/latest/github_objects/AuthenticatedUser.html) of AuthenticatedUser is described _An AuthenticatedUser object can be created by calling get_user() on a Github object._ . But get_user is returning a NamedUser, not an AuthenticatedUser.\r\n\r\ncode example:\r\n```python\r\nself._login = login\r\nself._password = password\r\ng = Github(login, password)\r\ng.get_user(self._login).create_repo(\"test\")\r\n```","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDU0MDAzMjE5MA==","author":{"login":"LeonardoFurtado"},"authorAssociation":"NONE","body":"closing #841","createdAt":"2019-10-09T14:40:29Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1247#issuecomment-540032190","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs5cXDO2","author":{"login":"DerSchinken"},"authorAssociation":"NONE","body":"Why is this closed? This is still an issue.","createdAt":"2023-05-16T12:12:34Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1247#issuecomment-1549546422","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs5daqC6","author":{"login":"LeonardoFurtado"},"authorAssociation":"NONE","body":"> Why is this closed? This is still an issue.\r\n\r\ncheck #841 \r\n\r\n> gh.get_user() (without any parameter) will give you AuthenticatedUser. What I mean is, according to the official Github documentation, you simply can't get the issues of the non authenticated user.","createdAt":"2023-05-29T15:19:48Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1247#issuecomment-1567269050","viewerDidAuthor":false}],"createdAt":"2019-10-09T14:30:23Z","number":1247,"state":"CLOSED","title":"get_user() do not return an AuthenticatedUser","url":"https://github.com/PyGithub/PyGithub/issues/1247"},{"author":{"id":"MDQ6VXNlcjQ3MjYwOA==","is_bot":false,"login":"adambaratz","name":"Adam Baratz"},"body":"The GitHub API supports interactions with [Team Discussions](https://developer.github.com/v3/teams/discussions/). It would be helpful to add a `get_discussion` method and a `get_discussions` method to `github.Team.Team` for retrieving this content.","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDU0ODMwMjA5MA==","author":{"login":"s-t-e-v-e-n-k"},"authorAssociation":"COLLABORATOR","body":"Closed via #1249 ","createdAt":"2019-10-31T10:19:48Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1246#issuecomment-548302090","viewerDidAuthor":false}],"createdAt":"2019-10-08T19:19:38Z","number":1246,"state":"CLOSED","title":"Feature Request: Team Discussions","url":"https://github.com/PyGithub/PyGithub/issues/1246"},{"author":{"id":"MDQ6VXNlcjI0MzYyNzE2","is_bot":false,"login":"michaelvincerra","name":"Michael V."},"body":"Similar to GH-1220. \r\n\r\nCan you please advise on how to retrieve the *labels* on 1 pull request?\r\n  \r\nYour revised documentation, April 2018,  makes change to conform to GitHub API v3 in this PR: https://github.com/PyGithub/PyGithub/pull/754/commits/8ff93f5f576dc8d4c5d6afce85c9273e5b97c73f\r\n\r\nWhat's not clear to me is how I could replace `issues` with `pulls` in the above PR.\r\n\r\nI would like an example of how to query the labels in 1 pull request (my example returns a select few).  To do so, the example could be similar to getting specific labels in open issues, like so:\r\n\r\n\r\n```\r\ngH      = Github(\"user\", \"password\")\r\nuser    = gH.get_user('<gh-user>')\r\nrepo    = user.get_repo(\"<repo-name>\")\r\npulls   = repo.get_pulls(state='all', sort='created', base='master', direction=\"desc\")[:5]\r\nissues   =  repo.get_issues(state=\"open\")  \r\n\r\nfor issue in issues:\r\n    labels = issue.labels\r\n    label = [l.name for l in labels if l.name=='P1' or l.name=='P2' or l.name=='P3']\r\n    print(label)\r\n```\r\nAlternate: In example below, I'd like to replace `issues` with `pulls`, but it doesn't work.\r\n\r\n``` \r\n           for issue in issues:\r\n                labels = issue.get_labels()\r\n                label = [l.name for l in labels if l.name=='P1' or l.name=='P2' or l.name=='P3']\r\n                print(label)\r\n```\r\n\r\nAlso, in PyGitHub's docs, `labels` is an attribute of the github.PullRequest.PullRequest class. \r\nIt's not clear whether one can pull labels on a single PR, per docs here:\r\nhttps://pygithub.readthedocs.io/en/latest/github_objects/PullRequest.html#pullrequest","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDUzOTI2OTQzNA==","author":{"login":"michaelvincerra"},"authorAssociation":"NONE","body":"@s-t-e-v-e-n-k requested, please.","createdAt":"2019-10-08T01:09:59Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1244#issuecomment-539269434","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDUzOTM0MzA0Mw==","author":{"login":"s-t-e-v-e-n-k"},"authorAssociation":"COLLABORATOR","body":"Your replacement of issues with pulls still says issues. However, hopefully the below helps you:\r\n\r\n```\r\n>>> repo = g.get_repo('PyGithub/PyGithub')\r\n>>> pr = repo.get_pull(1231)\r\n>>> pr.labels\r\n[Label(name=\"high priority\"), Label(name=\"improvement\")]\r\n>>> for label in pr.get_labels():\r\n...     print label.name\r\n... \r\nhigh priority\r\nimprovement\r\n```","createdAt":"2019-10-08T05:48:31Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":1}}],"url":"https://github.com/PyGithub/PyGithub/issues/1244#issuecomment-539343043","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDUzOTcyNTAxOA==","author":{"login":"michaelvincerra"},"authorAssociation":"NONE","body":"Thanks for your quick response.  I don't quite understand  the leap in logic that you propose. \r\nCan you explain in more detail?\r\n> Your replacement of issues with pulls still says issues. \r\n\r\nGoal:  Systematically expose the `labels` on several PRs (if labels are P1, P2, or P3).\r\nIf I can show the labels on one Pull Request (PR), then I can expose labels on several PRs. \r\nI realize in your example, you use the REPL, whereas I'm writing a function. \r\n\r\nWhen I follow your example, I use PR 844 in my repo, which has been merged.\r\n```\r\npr = repo.get_pull(844)\r\nlabels = pr.get_labels()\r\nprint(type(labels)) # I use `type` to understand how to introspect the object/or iterate  over it.\r\n```\r\nOutput: \r\n```\r\n<class 'github.PaginatedList.PaginatedList'>\r\n```\r\nThe problem is: 1) I don't understand how to iterate over the PaginatedList; and 2) if I use the next modified example, it produces an empty list: `[ ]`\r\n```\r\npr = repo.get_pull(844)\r\nlabels = pr.get_labels()\r\nx = [l.name for l in labels]\r\nprint(x)\r\n```\r\nOutput: \r\n```\r\n[ ]\r\n```\r\nAny advice or pointers would be extremely helpful. \r\n\r\n\r\n>However, hopefully the below helps you:\r\n> ```\r\n> >>> repo = g.get_repo('PyGithub/PyGithub')\r\n> >>> pr = repo.get_pull(1231)\r\n> >>> pr.labels\r\n> [Label(name=\"high priority\"), Label(name=\"improvement\")]\r\n> >>> for label in pr.get_labels():\r\n> ...     print label.name\r\n> ... \r\n> high priority\r\n> improvement\r\n> ```\r\n\r\n","createdAt":"2019-10-08T22:10:12Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1244#issuecomment-539725018","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDUzOTg3MTQ3OQ==","author":{"login":"s-t-e-v-e-n-k"},"authorAssociation":"COLLABORATOR","body":"A PaginatedList is just an iterable, you can iterate over it directly in a for loop or a list comprehension, or you can coerce it to a list by calling list() on it -- ```list(labels)``` in your code above. PR 844 has no labels, which is why it's an empty list. Which is why I picked PR 1231, because it has two set.","createdAt":"2019-10-09T07:14:47Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1244#issuecomment-539871479","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDU0MTQ5NzQxNg==","author":{"login":"mvincerx"},"authorAssociation":"NONE","body":"Thank you @s-t-e-v-e-n-k.  Nothing like scientific proof to humble a man...  I didn't realize that most recent PRs didn't have labels; therefore, an empty list is the expected response. I've since changed that so most recent PRs do have labels. Now the `get_labels()` call returns labels on a PR. I'd like to applaud your team in making that invocation of the Pull Request object available to developers.  ","createdAt":"2019-10-14T04:12:03Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1244#issuecomment-541497416","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDU0MTUwMDQ3Nw==","author":{"login":"s-t-e-v-e-n-k"},"authorAssociation":"COLLABORATOR","body":"You're welcome!","createdAt":"2019-10-14T04:36:52Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1244#issuecomment-541500477","viewerDidAuthor":false}],"createdAt":"2019-10-08T01:08:57Z","number":1244,"state":"CLOSED","title":"get_labels() on a Pull Request ","url":"https://github.com/PyGithub/PyGithub/issues/1244"},{"author":{"id":"MDQ6VXNlcjI0MzYyNzE2","is_bot":false,"login":"michaelvincerra","name":"Michael V."},"body":"Similar to GH-1220. \r\n\r\nCan you please advise on how to retrieve the *labels* on 1 pull request.\r\n  \r\nI see you revised documentation this past July 2019 to conform to GitHub API v3 in this PR: \r\nhttps://github.com/PyGithub/PyGithub/pull/754/commits/8ff93f5f576dc8d4c5d6afce85c9273e5b97c73f\r\n\r\n\r\n","comments":[],"createdAt":"2019-10-08T00:52:40Z","number":1243,"state":"CLOSED","title":"get_labels() on a Pull Request ","url":"https://github.com/PyGithub/PyGithub/issues/1243"},{"author":{"id":"MDQ6VXNlcjE2Mzk3MjI=","is_bot":false,"login":"sweatybridge","name":"Han Qiao"},"body":"When [get_branch](https://github.com/PyGithub/PyGithub/blob/020fbebcaf7067812d35bb16ce55c931f0254725/github/Repository.py#L1374) is called with a non-existent branch, a general `GithubException` is raised. This behaviour is inconsistent with other APIs like `get_repo` which raises the more specific `UnknownObjectException`.\r\n\r\nThe root cause is https://github.com/PyGithub/PyGithub/blob/a0f01cf9cf5521fd034813242727de72eb52df42/github/Requester.py#L307 where the checker is looking for an exact string match but the HTTP response for `get_branch` is instead:\r\n```\r\n{'message': 'Branch not found', 'documentation_url': 'https://developer.github.com/v3/repos/branches/#get-branch'}\r\n```\r\n\r\nThis inconsistent behaviour makes user's error handling code unnecessarily complicated.\r\n\r\nI wonder if there's a good way to fix this?","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDU2MjUzNjM4Mg==","author":{"login":"stale"},"authorAssociation":"NONE","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","createdAt":"2019-12-06T11:24:03Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1242#issuecomment-562536382","viewerDidAuthor":false}],"createdAt":"2019-10-07T06:51:55Z","number":1242,"state":"CLOSED","title":"Inconsistent exception when calling get_branch with non-existent branch","url":"https://github.com/PyGithub/PyGithub/issues/1242"},{"author":{"id":"MDQ6VXNlcjM3MjQwMDc1","is_bot":false,"login":"prasathkumarramachandran","name":""},"body":"I am trying to edit the branch protection for the master branch using edit_branch_protection..\r\nThis returns object not found 404 error.. I am using github enterprise server..\r\n\r\n---> 69     branch.edit_protection(strict=True,require_code_owner_reviews= True, required_approving_review_count=2)\r\n\r\n~\\AppData\\Local\\Continuum\\anaconda3\\lib\\site-packages\\github\\Branch.py in edit_protection(self, strict, contexts, enforce_admins, dismissal_users, dismissal_teams, dismiss_stale_reviews, require_code_owner_reviews, required_approving_review_count, user_push_restrictions, team_push_restrictions)\r\n    178             self.protection_url,\r\n    179             headers={'Accept': Consts.mediaTypeRequireMultipleApprovingReviews},\r\n--> 180             input=post_parameters\r\n    181         )\r\n    182 \r\n\r\n~\\AppData\\Local\\Continuum\\anaconda3\\lib\\site-packages\\github\\Requester.py in requestJsonAndCheck(self, verb, url, parameters, headers, input)\r\n    274 \r\n    275     def requestJsonAndCheck(self, verb, url, parameters=None, headers=None, input=None):\r\n--> 276         return self.__check(*self.requestJson(verb, url, parameters, headers, input, self.__customConnection(url)))\r\n    277 \r\n    278     def requestMultipartAndCheck(self, verb, url, parameters=None, headers=None, input=None):\r\n\r\n~\\AppData\\Local\\Continuum\\anaconda3\\lib\\site-packages\\github\\Requester.py in __check(self, status, responseHeaders, output)\r\n    285         output = self.__structuredFromJson(output)\r\n    286         if status >= 400:\r\n--> 287             raise self.__createException(status, responseHeaders, output)\r\n    288         return responseHeaders, output\r\n    289 \r\n\r\nUnknownObjectException: 404 {'message': 'Not Found', 'documentation_url': 'https://developer.github.com/enterprise/2.17/v3/repos/branches/#update-branch-protection'}","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDU0ODMwMTA1NQ==","author":{"login":"s-t-e-v-e-n-k"},"authorAssociation":"COLLABORATOR","body":"Did you fetch the branches using get_branches()? That does not return enough information to call the protection methods, you must use get_branch() to get the complete information.","createdAt":"2019-10-31T10:17:07Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1239#issuecomment-548301055","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDU2OTYzNzE4Mg==","author":{"login":"stale"},"authorAssociation":"NONE","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","createdAt":"2019-12-30T10:25:26Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1239#issuecomment-569637182","viewerDidAuthor":false}],"createdAt":"2019-10-04T05:24:05Z","number":1239,"state":"CLOSED","title":"edit_branch_protection returns 404 object not found error ","url":"https://github.com/PyGithub/PyGithub/issues/1239"},{"author":{"id":"MDQ6VXNlcjM3MjQwMDc1","is_bot":false,"login":"prasathkumarramachandran","name":""},"body":"","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDUzODI1MTk0Mw==","author":{"login":"s-t-e-v-e-n-k"},"authorAssociation":"COLLABORATOR","body":"Closing this in favour of #1239","createdAt":"2019-10-04T06:05:11Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1238#issuecomment-538251943","viewerDidAuthor":false}],"createdAt":"2019-10-04T05:20:33Z","number":1238,"state":"CLOSED","title":"edit_branch","url":"https://github.com/PyGithub/PyGithub/issues/1238"},{"author":{"id":"MDQ6VXNlcjE5Mjc3ODEz","is_bot":false,"login":"vccolombo","name":"Víctor Colombo"},"body":"Hello!\r\n\r\nI was reading the docs for [create_repo() method](https://pygithub.readthedocs.io/en/latest/github_objects/Organization.html) and couldn't find an option for setting README creation. Is there any way to initialize the created repo with a README using pygithub?\r\n\r\nThank you!","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDU2MDE4MTMzMA==","author":{"login":"stale"},"authorAssociation":"NONE","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","createdAt":"2019-12-02T00:32:24Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1236#issuecomment-560181330","viewerDidAuthor":false}],"createdAt":"2019-10-02T22:19:33Z","number":1236,"state":"CLOSED","title":"create_repo() readme option","url":"https://github.com/PyGithub/PyGithub/issues/1236"},{"author":{"id":"MDQ6VXNlcjgyMDQyOTQ=","is_bot":false,"login":"sargemonkey","name":"SargeMonkey"},"body":"There is no elegant way to implement throttling for github API calls through PyGitHub. The best way I can find to make sure my app doesn't hit the throttling limits is to keep checking before every call, and maintain a count of the number of calls made to the APIs, and then continuously checking if that limit is reached or not - while refreshing the rate limits periodically. It is not simple to implement a wrapper class, or apply decorators/descriptors to the calls because there various classes (like GitHub, Repository, Releases etc) that can make a call to the API endpoint. It seems implementing this feature inside PyGitHub to help throttle/ratelimit/wait calls would be the best approach IMO, since every call the the REST API can be tracked. Will such a feature be encouraged? Does it make sense to work on a pull request?","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDU0MTIyMzQ4Mw==","author":{"login":"sargemonkey"},"authorAssociation":"NONE","body":"anyone? ","createdAt":"2019-10-11T21:04:07Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1235#issuecomment-541223483","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDU0MTMzOTExMw==","author":{"login":"maxsharabayko"},"authorAssociation":"NONE","body":"See also #1233 for excessive requests.","createdAt":"2019-10-12T16:14:51Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1235#issuecomment-541339113","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDU2NDYyMTE5NQ==","author":{"login":"stale"},"authorAssociation":"NONE","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","createdAt":"2019-12-11T16:22:01Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1235#issuecomment-564621195","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDU5NjEwNjUzOQ==","author":{"login":"vlerenc"},"authorAssociation":"NONE","body":"PyGithub is great, many thanks!\r\n\r\nIs there a convenient way to instruct PyGithub not to throw a rate limit exceeded exception, but back-off and retry the operation? Otherwise, I have to do that and wrap each of my calls, which is possible, but feels wrong. That's me then performing a framework/library functionality that would better fit the actual framework/library, in this case PyGithub, then every user doing the same in their code.","createdAt":"2020-03-07T16:40:51Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":6}}],"url":"https://github.com/PyGithub/PyGithub/issues/1235#issuecomment-596106539","viewerDidAuthor":false}],"createdAt":"2019-10-02T22:04:37Z","number":1235,"state":"CLOSED","title":"throttling/backoff for rate limits support for PyGitHub","url":"https://github.com/PyGithub/PyGithub/issues/1235"},{"author":{"id":"MDQ6VXNlcjIyMzYyNDc2","is_bot":false,"login":"teresaliu20","name":"Teresa Liu"},"body":"Hello, I'm having trouble using PyGithub for a Github Enterprise. Our Github Enterprise appliance is private and we have it behind a proxy. \r\n\r\nWhen creating the Github client, I set our `base_url` to `https://git-atlassian.corp.example.com/api/v3`. I then try getting the contents of a repo.\r\n\r\n```\r\n# Successfully returns a Repository instance\r\ngithub_repo = client.get_repo('Example/repo_name')\r\n# Returns an Assertion Error, since the repo contents_url is https://git.corp.example.com/, which doesn't match the original base_url hostname\r\nfile_contents = github_repo.get_contents('/filename.py')\r\n```\r\nWe then get the following AssertionError:\r\n```\r\n    \"traceback\": \"Traceback (most recent call last):\r\n      File \\\"/var/task/handlers/lex/lexhandler.py\\\", line 130, in handler\r\n        resp = self.handle_hook(event)\r\n      File \\\"/var/task/handlers/lex/codehook.py\\\", line 62, in handle_hook\r\n        return intent.handle_intent()\r\n      File \\\"/var/task/handlers/lex/intents/baseintent.py\\\", line 467, in handle_intent\r\n        ret = self._handle_intent()\r\n      File \\\"/var/task/handlers/lex/intents/aws_ecs.py\\\", line 383, in _handle_intent\r\n        for repo in github_repos:\r\n      File \\\"/opt/python/github/PaginatedList.py\\\", line 62, in __iter__\r\n        newElements = self._grow()\r\n      File \\\"/opt/python/github/PaginatedList.py\\\", line 74, in _grow\r\n        newElements = self._fetchNextPage()\r\n      File \\\"/opt/python/github/PaginatedList.py\\\", line 199, in _fetchNextPage\r\n        headers=self.__headers\r\n      File \\\"/opt/python/github/Requester.py\\\", line 276, in requestJsonAndCheck\r\n        return self.__check(*self.requestJson(verb, url, parameters, headers, input, self.__customConnection(url)))\r\n      File \\\"/opt/python/github/Requester.py\\\", line 336, in requestJson\r\n        return self.__requestEncode(cnx, verb, url, parameters, headers, input, encode)\r\n      File \\\"/opt/python/github/Requester.py\\\", line 380, in __requestEncode\r\n        url = self.__makeAbsoluteUrl(url)\r\n      File \\\"/opt/python/github/Requester.py\\\", line 450, in __makeAbsoluteUrl\r\n        assert o.hostname in [self.__hostname, \\\"uplads.github.com\\\", \\\"status.github.com\\\"], o.hostname\r\n        AssertionError: git.corp.example.com\r\n    \",\r\n```\r\n\r\nReference:\r\n- Proxy DNS is `git-atlassian.corp.example.com`\r\n- GHE DNS is `git.corp.example.com`","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDU2MDE0NjAyMw==","author":{"login":"stale"},"authorAssociation":"NONE","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","createdAt":"2019-12-01T19:07:27Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1234#issuecomment-560146023","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDYzMjEyNTkxOA==","author":{"login":"conmurray"},"authorAssociation":"NONE","body":"Can we have this change committed to the main Requester.py?\r\nI can see that two guys have already made the changes to their forks and I had to update my Requester.py locally as I was encountering the same issue.","createdAt":"2020-05-21T14:44:23Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":2}}],"url":"https://github.com/PyGithub/PyGithub/issues/1234#issuecomment-632125918","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDY1MjA5ODI2MA==","author":{"login":"LaikaN57"},"authorAssociation":"NONE","body":"@teresaliu20 Do you have privs to re-open this issue? If not, @conmurray I suggest you re-raise and link back to the fix at https://github.com/Nextdoor/PyGithub/pull/1.","createdAt":"2020-06-30T23:23:17Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1234#issuecomment-652098260","viewerDidAuthor":false}],"createdAt":"2019-10-02T18:37:15Z","number":1234,"state":"CLOSED","title":"Using Github Enterprise behind Proxy, Assertion Error for mismatched hostnames","url":"https://github.com/PyGithub/PyGithub/issues/1234"},{"author":{"id":"MDQ6VXNlcjEyNzAwMTIw","is_bot":false,"login":"maxsharabayko","name":"Maxim Sharabayko"},"body":"Hi everyone.\r\nI am using the library for my pet project. I really like its architecture,\r\nHowever, I ran into an issue or a feature of the library.\r\nI need to retrieve information about all the issues (including pull requests) in a repository. I was surprised by the low performance of the following script.\r\n\r\n```python\r\nimport pandas as pd\r\nfrom github import Github\r\n\r\ndef load(reponame, login, password):\r\n    # Log in to GitHub (see below)\r\n    gh = Github(login, password, per_page=100)\r\n    # Define the repository: reponame=\"user/repo\"\r\n    repo = gh.get_repo(reponame)\r\n\r\n    # Create a pandas dataframe\r\n    column_names = [\"Created\", \"IsPR\"]\r\n    df_issues = pd.DataFrame(columns = column_names)\r\n\r\n    issues = repo.get_issues(state=\"all\")\r\n\r\n    for issue in issues:\r\n        df_issues.loc[issue.number] = [issue.created_at,\r\n                    issue.pull_request != None, issue.labels, issue.milestone]\r\n    \r\n    return df_issues\r\n```\r\n\r\nThe script should load up to 100 issues in one request and process them in a loop.\r\nI have noticed that while in `for issue in issues:`, the script still utilizes network.\r\n\r\nDigging into this weird behavior, it turned out, that PyGithub can send a request to GitHub if a property value is not set:\r\n\r\n```python\r\n@property\r\ndef pull_request(self):\r\n    \"\"\"\r\n    :type: :class:`github.IssuePullRequest.IssuePullRequest`\r\n    \"\"\"\r\n    \r\n    self._completeIfNotSet(self._pull_request)\r\n    if self._pull_request is NotSet:\r\n        return None\r\n    return self._pull_request.value\r\n```\r\n\r\nSo when the script fetches 100 issues, `N` of them are pull requests. For those `100-N` issues the `pull_request` property value is not set. On each such issue a network request to GitHub is performed.\r\n\r\nFor my use case these http requests are useless, significantly decrease performance and sometimes make gthub to reject the request due to rate limiting.\r\nI already have this data. required. If `self._pull_request is NotSet`, then I can safely say it is not a PR, but an issue.\r\n\r\nI have not found a way to turn off this behavior in PyGithub's API.\r\n\r\nI think there should be a way to tell, that I dont want further hidden request when acessing an item (`GithubObject`)\r\nI think there should be an option to tell if hidden requests on an object are allowed.\r\nAt the moment the `_fetchNextPage` function of `PaginatedList` sets all items as not completed:\r\n```\r\nself.__contentClass(self.__requester, headers, element, completed=False)\r\n```\r\n\r\nA workaround might be to use `get_pulls` to retrieve all pull requests, but then the data is retrieved again, although it is already present when retreiving issues.","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDU2MDAwMzgwMg==","author":{"login":"stale"},"authorAssociation":"NONE","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","createdAt":"2019-11-30T17:48:20Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1233#issuecomment-560003802","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDU2MDAxNjY3OA==","author":{"login":"maxsharabayko"},"authorAssociation":"NONE","body":"Up","createdAt":"2019-11-30T20:05:09Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1233#issuecomment-560016678","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDU2MDA3MDc4OQ==","author":{"login":"s-t-e-v-e-n-k"},"authorAssociation":"COLLABORATOR","body":"These \"hidden\" requests are a feature. We want to make access to the GitHub API easy, sadly, this does mean that if the GitHub API hasn't returned enough information, we need to make another request.\r\n\r\nI think the easiest way is via monkey patching by making your request and then overriding g._requester.__structuredFromJson to always return None.","createdAt":"2019-12-01T07:45:49Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1233#issuecomment-560070789","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDU2MDQ1Nzg2Mw==","author":{"login":"maxsharabayko"},"authorAssociation":"NONE","body":"The thing is that repo.get_issues() already has PR flag if it is a PR. Because the whole info about the issue is retrieved.\r\nSo I would suggest adding conditional hidden requests. Certain fields do not need hidden requests.","createdAt":"2019-12-02T15:57:45Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1233#issuecomment-560457863","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDU2MDY5NTcwNg==","author":{"login":"s-t-e-v-e-n-k"},"authorAssociation":"COLLABORATOR","body":"The PaginatedList that is behind get_issues() is generic and we have absolutely no idea if GitHub has returned everything in a list format because we're at the mercy of whatever they send us. So for safety we assume every item in the list is incomplete.","createdAt":"2019-12-02T22:01:24Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1233#issuecomment-560695706","viewerDidAuthor":false}],"createdAt":"2019-10-01T17:22:45Z","number":1233,"state":"CLOSED","title":"Do not allow to perform requests","url":"https://github.com/PyGithub/PyGithub/issues/1233"},{"author":{"id":"MDQ6VXNlcjIzMTU1Mzkz","is_bot":false,"login":"megretson","name":"Meg Anderson"},"body":"Hi all! \r\n\r\nI am trying to use pygithub to get a list of publicly available repos on github. Rather than getting all repos available on github, I'm trying to limit it to a subset of these repos. My code is as follows:\r\n\r\n```\r\nfrom github import Github\r\nimport sys\r\nimport datetime as dt\r\n\r\ng = Github(sys.argv[1]) // token passed as command line argument\r\nsince = dt.datetime.now() - dt.timedelta(minutes=1) // get all repos in the past minute\r\n\r\nfor repo in g.get_repos(visibility='public', since=since):\r\n    print(repo.name)\r\n```\r\n\r\nThis consistently throws the following error:\r\n```\r\n    assert since is github.GithubObject.NotSet or isinstance(since, int), since\r\nAssertionError: 2019-09-30 10:22:20.979714\r\n```\r\n\r\nIn the documentation it's clear the since argument is expecting an integer (see here: https://pygithub.readthedocs.io/en/latest/github.html ) but I cannot see how an integer could be used in this context. Can someone please explain the usage of this argument? ","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDUzNzkzOTk2Ng==","author":{"login":"Chun-Fil-A"},"authorAssociation":"NONE","body":"The method in the MainClass.py referes to the github api v3. \r\nIt is looking for the id of the last repository you have seen.\r\nThis link goes into further detail.  \r\nhttps://developer.github.com/v3/repos/#list-all-public-repositories","createdAt":"2019-10-03T13:13:51Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1232#issuecomment-537939966","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDU2MDM5ODAxMA==","author":{"login":"stale"},"authorAssociation":"NONE","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","createdAt":"2019-12-02T13:32:24Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1232#issuecomment-560398010","viewerDidAuthor":false}],"createdAt":"2019-09-30T14:27:01Z","number":1232,"state":"CLOSED","title":"since arguement of get_repos","url":"https://github.com/PyGithub/PyGithub/issues/1232"},{"author":{"id":"MDQ6VXNlcjc2NDkxOTQ=","is_bot":false,"login":"lwasser","name":"Leah Wasser"},"body":"Hi There 👋 !\r\nI'm new to pygithub and the github api so please let me know if this isn't the right place to ask this question. i've been pouring through the docs and do some some reference to the [authorization](https://pygithub.readthedocs.io/en/latest/github_objects/Authorization.html) object but i'm not exactly sure how to use it. Has anyone implemented authorization as follows:\r\n\r\nuser authenticates with github username and password\r\nToken is created in their account via pygithub\r\nToken string is accessed via pygithub\r\n\r\nMost of the examples start with the user providing the login credentials or the token string. but i'd like to create the string via the api and then access it.\r\n\r\nThank you for any guidance!\r\n","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDUzNjA0OTc5Mw==","author":{"login":"kcranston"},"authorAssociation":"NONE","body":"Working with @lwasser - we're trying to switch from github3 to pygithub, and looking for replacement instructions for gh3's  [authenticating with 2FA](https://github3py.readthedocs.io/en/master/examples/two_factor_auth.html) and [using tokens](https://github3py.readthedocs.io/en/master/examples/oauth.html). I can see how to use pygithub  login with username + password, or how to login with a token, but would like to authenticate with username + password + 2fa_code and then use that authentication to get a token (which I can then save to a local config). \r\n","createdAt":"2019-09-27T18:28:24Z","includesCreatedEdit":true,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1230#issuecomment-536049793","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDU1ODc2NzY0OA==","author":{"login":"stale"},"authorAssociation":"NONE","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","createdAt":"2019-11-26T18:49:25Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_DOWN","users":{"totalCount":5}}],"url":"https://github.com/PyGithub/PyGithub/issues/1230#issuecomment-558767648","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDU2MTgxNjgxNw==","author":{"login":"lwasser"},"authorAssociation":"NONE","body":"we need a sad face github emoji for this!","createdAt":"2019-12-04T20:05:09Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":1}}],"url":"https://github.com/PyGithub/PyGithub/issues/1230#issuecomment-561816817","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDYxNDA4MzA0NQ==","author":{"login":"Zethson"},"authorAssociation":"NONE","body":"Could this issue be reopened?","createdAt":"2020-04-15T14:45:10Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":4}}],"url":"https://github.com/PyGithub/PyGithub/issues/1230#issuecomment-614083045","viewerDidAuthor":false}],"createdAt":"2019-09-25T14:58:47Z","number":1230,"state":"CLOSED","title":"Can I Create Tokens with PyGithub? I can't find any examples and would love some guidance  ","url":"https://github.com/PyGithub/PyGithub/issues/1230"},{"author":{"id":"MDQ6VXNlcjQ4NTMzMTg4","is_bot":false,"login":"GayleJames","name":""},"body":"can a shell script be used to to pass pygithub attributes to a python program? we are trying to pass parameters to a python script that is utilizing pygithub from a shell(bash) script but inside the shell script we get this error:\r\n  File \"<string>\", line 1\r\n    from _pythonprog_ import *; 111111111111._method_('_param1_')\r\n                                                                        ^\r\nSyntaxError: invalid syntax\r\nany ideas why?\r\n","comments":[],"createdAt":"2019-09-18T14:32:36Z","number":1225,"state":"CLOSED","title":"can a shell script be used to to pass pygithub attributes to a python program?","url":"https://github.com/PyGithub/PyGithub/issues/1225"},{"author":{"id":"MDQ6VXNlcjUxMTQ5OQ==","is_bot":false,"login":"pirate","name":"Nick Sweeting"},"body":"**Description:**\r\n\r\nI'm trying to iterate through Github users and get their public keys.  Unfortunately I'm getting an `AttributeError` when trying to access some of the returned `UserKey` object's attributes. \r\n\r\nThis happens whether the attributes are accessed directly or via `.raw_data`.\r\n\r\nIt looks like it's an issue with some of the attributes only being available on `AuthenticatedUser`'s keys vs a `NamedUser`'s keys.\r\n\r\n\r\n**Steps to reproduce:**\r\n```python\r\nfrom github import Github\r\n\r\ng = Github('access_token')\r\n\r\nfor user in g.get_users():\r\n    keys = '\\n'.join(\r\n        f'key: {key.url}'\r\n        for key in user.get_keys()\r\n    )\r\n    print(f'{user.id} {user.login}\\n{keys}')\r\n```\r\n\r\n```python\r\n  File \"./all_github_users.py\", line 27, in <genexpr>\r\n    for key in user.get_keys()\r\n  File \"/usr/local/lib/python3.7/site-packages/github/UserKey.py\", line 82, in verified\r\n    self._completeIfNotSet(self._verified)\r\n  File \"/usr/local/lib/python3.7/site-packages/github/GithubObject.py\", line 265, in _completeIfNotSet\r\n    self._completeIfNeeded()\r\n  File \"/usr/local/lib/python3.7/site-packages/github/GithubObject.py\", line 269, in _completeIfNeeded\r\n    self.__complete()\r\n  File \"/usr/local/lib/python3.7/site-packages/github/GithubObject.py\", line 274, in __complete\r\n    self._url.value\r\n  File \"/usr/local/lib/python3.7/site-packages/github/Requester.py\", line 276, in requestJsonAndCheck\r\n    return self.__check(*self.requestJson(verb, url, parameters, headers, input, self.__customConnection(url)))\r\n  File \"/usr/local/lib/python3.7/site-packages/github/Requester.py\", line 292, in __customConnection\r\n    if not url.startswith(\"/\"):\r\nAttributeError: 'NoneType' object has no attribute 'startswith'\r\n```\r\n\r\n**Line causing the error:**\r\n\r\nhttps://github.com/PyGithub/PyGithub/blob/a0f01cf9cf5521fd034813242727de72eb52df42/github/Requester.py#L284\r\n\r\n\r\n**Expected behavior:**\r\n\r\nThe attributes not available on a `NamedUser`'s keys should be `None` or not present on `UserKey`.","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDUzMzc5MDU0NQ==","author":{"login":"s-t-e-v-e-n-k"},"authorAssociation":"COLLABORATOR","body":"UserKey performs double duty being returned from get_keys(), as well as used for AuthenticatedUser.create_key(), which means we need to handle both cases. I'm reticent to create a special type just for get_keys().\r\n\r\nWhat is happening here is the raw data returned by GitHub gives you the id and the key text only. Since all of the attributes attempt to complete an incomplete object, it attempts to GET self.url, which is None, because GitHub didn't return one.\r\n\r\nThinking on it, we could add an IncompletableObject exception, rather than this traceback.","createdAt":"2019-09-21T11:28:48Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1224#issuecomment-533790545","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDUzMzg0NDgyNA==","author":{"login":"pirate"},"authorAssociation":"NONE","body":"It doesn't need to be a special type, just put None in those values so it doesn't error out, `.raw_data` should still be usable even if the object doesn't have all the values imo, otherwise the UX is frustrating because you can't dump the object without manually iterating over the keys and knowing beforehand which ones will error and which ones wont.","createdAt":"2019-09-22T02:40:56Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1224#issuecomment-533844824","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDUzMzk3ODE1MQ==","author":{"login":"s-t-e-v-e-n-k"},"authorAssociation":"COLLABORATOR","body":".raw_data calls complete() just in case we don't have the complete object, which will lead to the exact traceback you're seeing. You can look under the covers using ._rawData, but everything is terrible when GitHub doesn't return a URL of the object. :-(","createdAt":"2019-09-23T06:48:47Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1224#issuecomment-533978151","viewerDidAuthor":false}],"createdAt":"2019-09-17T22:34:53Z","number":1224,"state":"CLOSED","title":"AttributeError: 'NoneType' object has no attribute 'startswith' when trying to access UserKey attributes","url":"https://github.com/PyGithub/PyGithub/issues/1224"},{"author":{"id":"MDQ6VXNlcjU5MjI0MzA=","is_bot":false,"login":"chanukov","name":"Alon Chanukov"},"body":"The following code works with 1.43.7 and fails on 1.43.8.\r\nGitRepo is our Repo which was initialized elsewhere.\r\nblob_sha = self.git_repo.get_file_contents(self.sf_config_file, \"master\").sha\r\nresults in 15:49:03  AttributeError: 'Repository' object has no attribute 'get_file_contents'\r\n\r\n","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDUzMjA4NTAwMA==","author":{"login":"s-t-e-v-e-n-k"},"authorAssociation":"COLLABORATOR","body":"The method is now called get_contents(). Sorry, this probably should not have been changed in a point release.","createdAt":"2019-09-17T06:46:30Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_DOWN","users":{"totalCount":1}}],"url":"https://github.com/PyGithub/PyGithub/issues/1222#issuecomment-532085000","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDUzMjMzNTA5OA==","author":{"login":"chanukov"},"authorAssociation":"NONE","body":"Can such breaking changes please get a bullet point in the docs in future.\r\nhttps://github.com/PyGithub/PyGithub/pull/1223\r\n","createdAt":"2019-09-17T18:04:45Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"HEART","users":{"totalCount":1}}],"url":"https://github.com/PyGithub/PyGithub/issues/1222#issuecomment-532335098","viewerDidAuthor":false}],"createdAt":"2019-09-16T19:59:41Z","number":1222,"state":"CLOSED","title":"'Repository' object has no attribute 'get_file_contents' in 1.43.8","url":"https://github.com/PyGithub/PyGithub/issues/1222"},{"author":{"id":"MDQ6VXNlcjMyOTk0ODI4","is_bot":false,"login":"jinlx","name":"Lixu Jin"},"body":"Hi there,\r\n\r\nWhen I try to use \"from mpl_toolkits.basemap import Basemap\", the error shows below.\r\n\r\n``Traceback (most recent call last):\r\n  File \"test_prj4.py\", line 3, in <module>\r\n    from mpl_toolkits.basemap import Basemap\r\n  File \"/glade/u/home/lixujin/anaconda3/envs/geoschem/lib/python3.6/site-packages/mpl_toolkits/basemap/__init__.py\", line 155, in <module>\r\n    pyproj_datadir = os.environ['PROJ_LIB']\r\n  File \"/glade/u/home/lixujin/anaconda3/envs/geoschem/lib/python3.6/os.py\", line 669, in __getitem__\r\n    raise KeyError(key) from None\r\nKeyError: 'PROJ_LIB'``\r\n\r\nDo you guys have any advice on it?","comments":[],"createdAt":"2019-09-16T15:33:59Z","number":1221,"state":"CLOSED","title":"KeyError: 'PROJ_LIB'","url":"https://github.com/PyGithub/PyGithub/issues/1221"},{"author":{"id":"MDQ6VXNlcjI0MzYyNzE2","is_bot":false,"login":"michaelvincerra","name":"Michael V."},"body":"I'd really like to see all the files included on a Pull Request (PR) for several PRs, using PyGitHub. \r\nIncidentally, I created a hack to get this information, using the GitHub API v3, but it's not very graceful. And given the anonymous management of queries with PyGithub, it'd be so cool to have this feature in PyGithub vs. the GitHub API.  \r\n\r\nI noticed this unit test only verifies that files on one pr can be retrieved.  \r\nhttps://github.com/PyGithub/PyGithub/blob/master/github/PullRequest.py\r\n\r\nDoes that speak to the intended use case? I'd like to know. Especially because the return value of this method provide a \"Paginated list\" object. \r\n\r\nProblem scenario: This method yields only one document on one PR. \r\n\"\"\"\r\ng = Github(\"username\", \"password\")\r\nuser = g.get_user(\"distro\")\r\nrepo = user.get_repo(\"documentation\")\r\npulls = repo.get_pulls(state='all', sort='created', base='master', direction=\"desc\")\r\nfor pull in pulls: \r\n   files = pull.get_files()\r\n   print(files) \r\n\"\"\"\r\n\r\nThis methods seems to be imagined as if a developer only seeks files on 1 PR, and not all the files on a range of PRs.   If I'm missing some method in your docs that already exists, please let me know. \r\n\r\nHere's where I've looked: \r\nhttps://pygithub.readthedocs.io/en/latest/github_objects/File.html\r\nhttps://pygithub.readthedocs.io/en/latest/github_objects/PullRequest.html\r\n","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDUzMTQzMzg1Mw==","author":{"login":"s-t-e-v-e-n-k"},"authorAssociation":"COLLABORATOR","body":"PaginatedList is an iteratable, since that is what the v3 API gives us to play with for many many return types.  You can either call list() on pull.get_files() or just iterate over it. Other than that, your code should get all files in the range of PRs.","createdAt":"2019-09-14T01:23:41Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1220#issuecomment-531433853","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDUzMTQzNDYzNw==","author":{"login":"michaelvincerra"},"authorAssociation":"NONE","body":"Thanks for the response. If I call `list()', I receive: \r\n\"\"\"\r\nAttributeError                            Traceback (most recent call last)\r\n<ipython-input-35-14e486d3b05d> in <module>()\r\n     59     file = pull.get_files()\r\n     60     for f in file:\r\n---> 61         f = file.list()\r\n     62     print(f)\r\n     63 \r\n\r\nAttributeError: 'PaginatedList' object has no attribute 'list'\r\n\"\"\"","createdAt":"2019-09-14T01:35:09Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1220#issuecomment-531434637","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDUzMTQ3NTcxNg==","author":{"login":"s-t-e-v-e-n-k"},"authorAssociation":"COLLABORATOR","body":"I'm sorry, I'll be more clear.\r\n\r\nYou can either do:\r\n\r\n```\r\nfiles = list(pull.get_files())\r\nprint(files)\r\n```\r\n\r\nor\r\n\r\n```\r\nfor f in pull.get_files():\r\n    print(f)\r\n```","createdAt":"2019-09-14T12:27:01Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1220#issuecomment-531475716","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDUzMTU5NTUzMg==","author":{"login":"michaelvincerra"},"authorAssociation":"NONE","body":"Thank you for the clarification. I'd love to see more examples like this in your docs. ","createdAt":"2019-09-15T20:12:25Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1220#issuecomment-531595532","viewerDidAuthor":false}],"createdAt":"2019-09-14T00:57:34Z","number":1220,"state":"CLOSED","title":"Endpoint / method to retrieve all the files on a range of PRs","url":"https://github.com/PyGithub/PyGithub/issues/1220"},{"author":{"id":"MDQ6VXNlcjQ3NTY2MTI5","is_bot":false,"login":"gjabouley-invn","name":"Geoffroy Jabouley"},"body":"Hello\r\n\r\nGithub is keeping repository redirect url when a repository is renamed.\r\n\r\nCurrently, when calling organization.get_repo(old_repo_name), it follows redirect and return a pointer to the renamed_repo.\r\nIs it possible to know that my request goes through a redirected url using PyGithub?","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDUzMTA4MzI0MQ==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"I guess you can inspect the http status and see whether it's a `30X`?","createdAt":"2019-09-13T03:19:05Z","includesCreatedEdit":true,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1219#issuecomment-531083241","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDUzMTE2MzAxMA==","author":{"login":"gjabouley-invn"},"authorAssociation":"CONTRIBUTOR","body":"Well, i tried it but **github.organization.get_repo(name).raw_header[\"status\"]** gives _200 OK_ for both _old_name_ and _new_name_\r\n\r\nFound solution so far:\r\n```python\r\nrepo = github.organization.get_repo(old_name)\r\nis_redirect = repo.name != old_name\r\n```","createdAt":"2019-09-13T09:10:28Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1219#issuecomment-531163010","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDU1MjgxNzc1Nw==","author":{"login":"stale"},"authorAssociation":"NONE","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","createdAt":"2019-11-12T09:49:49Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1219#issuecomment-552817757","viewerDidAuthor":false}],"createdAt":"2019-09-12T14:18:59Z","number":1219,"state":"CLOSED","title":"Knowing if a repo has been renamed (redirected url)?","url":"https://github.com/PyGithub/PyGithub/issues/1219"},{"author":{"id":"MDQ6VXNlcjkyMTk2MDI=","is_bot":false,"login":"docktermj","name":"Michael Dockter"},"body":"See #512 ","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDUzMDE5NjQxMA==","author":{"login":"docktermj"},"authorAssociation":"NONE","body":"#512 was reopened.   Good enough.","createdAt":"2019-09-11T02:46:11Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1218#issuecomment-530196410","viewerDidAuthor":false}],"createdAt":"2019-09-11T02:45:14Z","number":1218,"state":"CLOSED","title":"datetime returned by (issue and comment) created_at is naive, should be UTC ","url":"https://github.com/PyGithub/PyGithub/issues/1218"},{"author":{"id":"MDQ6VXNlcjMzNjIxMg==","is_bot":false,"login":"PeterJCLaw","name":"Peter Law"},"body":"It would be great if `PyGithub` had type annotations for its types. This would enable users to build safer code around it as well as improving editor suggestions. As `PyGithub` already has a well defined type hierarchy there are already types which could be used, which is great.\r\n\r\n(I actually originally assumed from the description that `PyGithub` was annotated and was surprised that it wasn't).\r\n\r\nIs this something you've considered and/or would be open to?","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDUzMjEzNjQ2MA==","author":{"login":"zer0tonin"},"authorAssociation":"CONTRIBUTOR","body":"If the maintainers are ok with this idea, I wouldn't mind working on it.","createdAt":"2019-09-17T09:17:11Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1217#issuecomment-532136460","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDUzMjE0NDM1Mw==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"I am okay with this, but it's not gonna a small effort. Perhaps before this we should upgrade the project to Python 3 (since Python2 is going away soon), so we can use the Python3 style type annotations everywhere.","createdAt":"2019-09-17T09:38:05Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1217#issuecomment-532144353","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDUzMjE1MzY4MA==","author":{"login":"trickeydan"},"authorAssociation":"NONE","body":"It is possible to use tools like https://github.com/Instagram/MonkeyType to apply type annotations inline from a stub file. So potentially, we could begin working on writing stubs, and then apply them inline after dropping support for Py2.","createdAt":"2019-09-17T10:03:58Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":3}}],"url":"https://github.com/PyGithub/PyGithub/issues/1217#issuecomment-532153680","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDUzMzE4MDcwMg==","author":{"login":"zer0tonin"},"authorAssociation":"CONTRIBUTOR","body":"Ok, I've actually started working on @trickeydan idea. I generated stubs files by running MonkeyType against the unittest and wrote them to .piy files next to the .py files. It will require checking all the stubs by hand because MonkeyType seems to have missed a few details here and there sadly (so it might take a while).\r\n\r\nI think it will also be required to exported more or less every type we have in the module's `__init__.py` for people to include PyGithub's type in their typechecks.\r\n\r\nIf anyone is interested you can check the progress here : https://github.com/zer0tonin/PyGithub/tree/agg/type_stubs\r\n\r\nOnly issue I have noticed so far is that urllib3 doesn't seem to have any typing info available and sadly we use a few of their types.","createdAt":"2019-09-19T15:19:21Z","includesCreatedEdit":true,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":1}}],"url":"https://github.com/PyGithub/PyGithub/issues/1217#issuecomment-533180702","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDUzNTc3NTExMQ==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"@zer0tonin Let's keep the ball rolling. Why not opening a PR from your branch, so we can have a review. \r\n\r\n`urllib3` is only used for the Retry function, which is recently introduced in #1002. Let's see how we can add stub to `urllib3` later. ","createdAt":"2019-09-27T03:52:31Z","includesCreatedEdit":true,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1217#issuecomment-535775111","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDYwMjIwMjIwNg==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"Closed in #1231 \r\nCI enforcement will be added in #1442 ","createdAt":"2020-03-22T13:38:03Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"HOORAY","users":{"totalCount":1}}],"url":"https://github.com/PyGithub/PyGithub/issues/1217#issuecomment-602202206","viewerDidAuthor":false}],"createdAt":"2019-09-08T15:03:58Z","number":1217,"state":"CLOSED","title":"Add type anontations for mypy (etc.)","url":"https://github.com/PyGithub/PyGithub/issues/1217"},{"author":{"id":"MDQ6VXNlcjE4MTIyNQ==","is_bot":false,"login":"crizCraig","name":"Craig Quiter"},"body":"https://developer.github.com/v3/pulls/#create-a-pull-request\r\n\r\nhttps://github.com/PyGithub/PyGithub/blob/74cd6856de404dc3109360860b712d62458c24eb/github/Repository.py#L1190-L1204","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDU5NjA1MzAxMw==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"Closed in #1422 ","createdAt":"2020-03-07T06:27:55Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1213#issuecomment-596053013","viewerDidAuthor":false}],"createdAt":"2019-09-03T22:30:01Z","number":1213,"state":"CLOSED","title":"Support draft pull requests","url":"https://github.com/PyGithub/PyGithub/issues/1213"},{"author":{"id":"MDQ6VXNlcjIyNDMyODIz","is_bot":false,"login":"zume2020","name":"Sumithran"},"body":"I just started with PyGithub, but while while running  the documentation example[ Create a new file in the repository](https://github.com/PyGithub/PyGithub/blob/master/doc/examples/Repository.rst#create-a-new-file-in-the-repository)\r\n\r\n Getting this error \r\n\r\n> Traceback (most recent call last):\r\n>   File \"D:\\g4rdn3r\\app.py\", line 8, in <module>\r\n>     repo.create_file(\"/test.txt\", \"test\", \"test\")\r\n>   File \"C:\\Python27\\lib\\site-packages\\github\\Repository.py\", line 1669, in create_file\r\n>     input=put_parameters\r\n>   File \"C:\\Python27\\lib\\site-packages\\github\\Requester.py\", line 276, in requestJsonAndCheck\r\n>     return self.__check(*self.requestJson(verb, url, parameters, headers, input, self.__customConnection(url)))\r\n>   File \"C:\\Python27\\lib\\site-packages\\github\\Requester.py\", line 287, in __check\r\n>     raise self.__createException(status, responseHeaders, output)\r\n> github.GithubException.GithubException: 422 {u'documentation_url': u'https://developer.github.com/v3/repos/contents/#create-or-update-a-file', u'message': u'path cannot start with a slash', u'errors': [{u'field': u'path', u'code': u'invalid', u'resource': u'Commit'}]}\r\n\r\n\r\n\r\n","comments":[],"createdAt":"2019-09-01T10:32:18Z","number":1210,"state":"CLOSED","title":"ERROR: path cannot start with a slash","url":"https://github.com/PyGithub/PyGithub/issues/1210"},{"author":{"id":"MDQ6VXNlcjE1MTgzMTU=","is_bot":false,"login":"marafa","name":""},"body":"the get_repo example is good.\r\n\r\ni would like though to see the example explain the format of repo name. it must use \"org/repo\" . i saw a couple of posts on github and stackoverflow where this was the user's issue.","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDUyNjgyNDYyMQ==","author":{"login":"s-t-e-v-e-n-k"},"authorAssociation":"COLLABORATOR","body":"All of the repository examples use that format on https://pygithub.readthedocs.io/en/latest/examples/Repository.html ","createdAt":"2019-08-31T11:55:29Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1209#issuecomment-526824621","viewerDidAuthor":false}],"createdAt":"2019-08-31T01:26:23Z","number":1209,"state":"CLOSED","title":"documentation: get_repo example to explain better","url":"https://github.com/PyGithub/PyGithub/issues/1209"},{"author":{"id":"MDQ6VXNlcjk0ODIzOTU=","is_bot":false,"login":"Hanaasagi","name":""},"body":"### Problem\r\n\r\nRecently, I found a problem on getting a repo's topics. If I use the `topics` property, it never work. But if I use the `get_topics` method, it will work.\r\n\r\n```Python\r\nfrom github import Github\r\n\r\ntoken = open('./.token').read().strip()\r\n\r\ng = Github(token)\r\nrepo = g.get_repo('PyGithub/PyGithub')\r\nassert repo.topics is None\r\nassert len(repo.get_topics()) == 4\r\n```\r\n\r\n### Environment\r\n\r\n- PyGithub == 1.43.8\r\n- Python == 3.7.4\r\n\r\nThe master branch (`a0f01cf`) has the same problem.\r\n\r\n----\r\nAfter check the source code of `get_topics`, I find that there should be have a specical header `\"application/vnd.github.mercy-preview+json\"`\r\n\r\nhttps://github.com/PyGithub/PyGithub/blob/a0f01cf9cf5521fd034813242727de72eb52df42/github/Repository.py#L2529-L2539\r\n\r\nThanks, I wanna submit a patch for this. ","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDUyNjQ3NTU4Mg==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"Feel free to send us a PR","createdAt":"2019-08-30T06:27:12Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1208#issuecomment-526475582","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDUzODgwNzA3NA==","author":{"login":"ipfans"},"authorAssociation":"NONE","body":"Same problems here.\r\n@sfdye can we merge this PR and release new version?","createdAt":"2019-10-07T00:58:16Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1208#issuecomment-538807074","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDU2MjM5MDQ4Mw==","author":{"login":"stale"},"authorAssociation":"NONE","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","createdAt":"2019-12-06T01:20:14Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1208#issuecomment-562390483","viewerDidAuthor":false}],"createdAt":"2019-08-30T05:58:28Z","number":1208,"state":"CLOSED","title":"unable to get repo topics when using topics property","url":"https://github.com/PyGithub/PyGithub/issues/1208"},{"author":{"id":"MDQ6VXNlcjM5ODczOTc=","is_bot":false,"login":"adrianbn","name":"Adrian Bravo"},"body":"I'm getting a stack trace when trying to iterate over the organizations in my private GHE instance. The code looks like this:\r\n\r\n```python3\r\ng = Github(base_url=f\"{GHE_URL}/api/v3\", login_or_token=username, password=pwd, per_page=200)\r\norgs = g.get_organizations()\r\nfor i, org in enumerate(orgs):\r\n    print(org.name)\r\n```\r\nAnd the error is as follows:\r\n```\r\nTraceback (most recent call last):\r\n  File \"gh_clone.py\", line 67, in <module>\r\n    print(org.name)\r\n  File \"/usr/local/lib/python3.7/site-packages/github/NamedUser.py\", line 265, in name\r\n    self._completeIfNotSet(self._name)\r\n  File \"/usr/local/lib/python3.7/site-packages/github/GithubObject.py\", line 265, in _completeIfNotSet\r\n    self._completeIfNeeded()\r\n  File \"/usr/local/lib/python3.7/site-packages/github/GithubObject.py\", line 269, in _completeIfNeeded\r\n    self.__complete()\r\n  File \"/usr/local/lib/python3.7/site-packages/github/GithubObject.py\", line 274, in __complete\r\n    self._url.value\r\n  File \"/usr/local/lib/python3.7/site-packages/github/Requester.py\", line 276, in requestJsonAndCheck\r\n    return self.__check(*self.requestJson(verb, url, parameters, headers, input, self.__customConnection(url)))\r\n  File \"/usr/local/lib/python3.7/site-packages/github/Requester.py\", line 292, in __customConnection\r\n    if not url.startswith(\"/\"):\r\nAttributeError: 'NoneType' object has no attribute 'startswith'\r\n```\r\n\r\nI'm using PyGithub 1.43.8 on Python 3.7 / OSX. Other operations, such as listing all repositories directly work fine, but organizations show the error above. \r\n\r\nThanks!","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDUyNjM4MDYwMg==","author":{"login":"adrianbn"},"authorAssociation":"NONE","body":"Never mind, this happens when the host URL has more than one trailing `/`.","createdAt":"2019-08-29T22:07:05Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1207#issuecomment-526380602","viewerDidAuthor":false}],"createdAt":"2019-08-29T21:54:14Z","number":1207,"state":"CLOSED","title":"get_organizations throws exception when accessing the org ","url":"https://github.com/PyGithub/PyGithub/issues/1207"},{"author":{"id":"MDQ6VXNlcjQ4NTMzMTg4","is_bot":false,"login":"GayleJames","name":""},"body":"I am trying to connect to our github url and I get what is below(this is just a portion:\r\n\r\n**github.GithubException.GithubException: 404 {'data': '<!DOCTYPE html>\\n<html>\\n  <head>\\n    <meta http-equiv=\"Content-type\" content=\"text/html; charset=utf-8\">\\n    <meta http-equiv=\"Content-Security-Policy\" content=\"default-src \\'none\\'; base-uri \\'self\\'; connect-src \\'self\\'; form-action \\'self\\'; img-src \\'self\\' data:; script-src \\'self\\'; style-src \\'unsafe-inline\\'\">\\n    <meta content=\"origin\" name=\"referrer\">\\n    <title>Page not found &middot; GitHub</title>\\n    <style type=\"text/css\" media=\"screen\">\\n      body {\\n        background-color: #f1f1f1;\\n        margin: 0;\\n      }\\n      body,\\n      input,\\n      button {\\n\r\n    font-family: \"Helvetica Neue\", Helvetica, Arial, sans-serif;\\n      }\\n      .container { margin: 30px auto 40px auto; width: 800px; text-align: center; }\\n\\n      a { color: #4183c4; text-decoration: none; font-weight: bold; }\\n      a:hover { text-decoration: underline; }\\n\\n      h3 { color: #666; }\\n      ul { list-style: none; padding: 25px 0; }\\n      li {\\n        display: inline;\\n        margin: 10px 50px 10px 0px;\\n      }\\n      input[type=text],\\n      input[type=password] {\\n        font-size: 13px;\\n        min-height: 32px;\\n        margin: 0;\\n        padding: 7px 8px;\\n        outline: none;\\n        color: #333;\\n\r\n      background-color: #fff;\\n        background-repeat: no-repeat;\\n** \r\n\r\n\r\nwhat could be wrong ?  what should be in the base_url?\r\nI have the url of our github in there g=Github(base_url=\"https://www.oururl.com\",login_or_token=\"xxxxx..............\")","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDUyNjE2NDIwMg==","author":{"login":"peterkline"},"authorAssociation":"NONE","body":"This code has worked for me for the past few years.\r\n\r\n```python\r\n# gho is the login context after successful auth\r\ntoken = \"token\"\r\ngithub_url = \"https://my_local_github.domain.com\"\r\ngho = github.Github(login_or_token=token, base_url=github_url)\r\n```","createdAt":"2019-08-29T12:33:38Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1206#issuecomment-526164202","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDUyNjE4NjQ4NQ==","author":{"login":"GayleJames"},"authorAssociation":"NONE","body":"thanks tried this way and i get: github.GithubException.GithubException: 404 {'data': 'Not Found'}\r\ni am also using the enterprise domain name url","createdAt":"2019-08-29T13:32:07Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1206#issuecomment-526186485","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDUyNjE5MTgxNQ==","author":{"login":"peterkline"},"authorAssociation":"NONE","body":"So your URL looks like:\r\n\"https://www.oururl.com/api/v3\"\r\n\r\nwith the api path?\r\n\r\nSorry my example was quickly typed out above.","createdAt":"2019-08-29T13:44:42Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1206#issuecomment-526191815","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDUyNjIwMDUxOA==","author":{"login":"GayleJames"},"authorAssociation":"NONE","body":"no i use the url of our enterprise github site.  That is what i should be using for the base-url correct?","createdAt":"2019-08-29T14:04:46Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1206#issuecomment-526200518","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDUyNjIxMTE3OQ==","author":{"login":"peterkline"},"authorAssociation":"NONE","body":"I use GHE as well. You need the /api/v3 in your URL to create the connection","createdAt":"2019-08-29T14:27:43Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1206#issuecomment-526211179","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDUyNjIxNDUzOA==","author":{"login":"GayleJames"},"authorAssociation":"NONE","body":"so you mean just add that on the end ? like so:?  www.compentrname.com/api/v3","createdAt":"2019-08-29T14:35:09Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1206#issuecomment-526214538","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDUyNjIxNDk5MA==","author":{"login":"GayleJames"},"authorAssociation":"NONE","body":"so instead of this: github_url = \"https://my_local_github.domain.com\"\r\nit should be: github_url = \"https://my_local_github.domain.com/api/v3\"?","createdAt":"2019-08-29T14:36:07Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1206#issuecomment-526214990","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDUyNjIxNjA0Mg==","author":{"login":"peterkline"},"authorAssociation":"NONE","body":"yes","createdAt":"2019-08-29T14:38:24Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1206#issuecomment-526216042","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDUyNjIyMDg0MQ==","author":{"login":"GayleJames"},"authorAssociation":"NONE","body":"now i get :     raise self.__createException(status, responseHeaders, output)\r\ngithub.GithubException.UnknownObjectException: 404 {'message': 'Not Found', 'documentation_url': 'https://developer.github.com/enterprise/2.16/v3/repos/#get'} \r\nhmm any ideas?  i will look at the link there hmm","createdAt":"2019-08-29T14:49:03Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1206#issuecomment-526220841","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDUyNjIyOTM4OQ==","author":{"login":"peterkline"},"authorAssociation":"NONE","body":"Please post your code block if you can.  That will help the most","createdAt":"2019-08-29T15:09:05Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1206#issuecomment-526229389","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDUyNjIzODEyNg==","author":{"login":"GayleJames"},"authorAssociation":"NONE","body":"ok here it is:\r\n**from github import Github\r\nfrom pprint import pprint\r\ntoken=(\"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\")\r\nurl=\"https://www.mycompany.com/api/v3\"\r\ng=Github(login_or_token=token,base_url=url)\r\nprint(\"MADE IT HERE\")\r\nprint(url)\r\nrepo = g.get_repo(\"orgname/reponame.git\")\r\nopen_issues = repo.get_issues(state='open')\r\nfor issue in open_issues:\r\n    print(issue)**","createdAt":"2019-08-29T15:28:23Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1206#issuecomment-526238126","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDUyNjI0MTgwMA==","author":{"login":"peterkline"},"authorAssociation":"NONE","body":"remove the .git from the repo name and give it a try","createdAt":"2019-08-29T15:36:27Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1206#issuecomment-526241800","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDUyNjI0NTMzMw==","author":{"login":"GayleJames"},"authorAssociation":"NONE","body":"OMG i love you! that worked! thanks, I have been trying to get this figured out for days! \r\n\r\n**MADE IT HERE\r\nhttps://www.xxxxx.com/api/v3\r\nIssue(title=\"File Defects\", number=8)**","createdAt":"2019-08-29T15:44:16Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1206#issuecomment-526245333","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDUyNjI0NTc0Ng==","author":{"login":"peterkline"},"authorAssociation":"NONE","body":"great!  Glad I could be of some help.\r\n\r\nPlease don't forget to close out the ticket.","createdAt":"2019-08-29T15:45:13Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1206#issuecomment-526245746","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDUyNjI0NTgyNg==","author":{"login":"GayleJames"},"authorAssociation":"NONE","body":"ok\r\n","createdAt":"2019-08-29T15:45:26Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1206#issuecomment-526245826","viewerDidAuthor":false}],"createdAt":"2019-08-28T15:32:37Z","number":1206,"state":"CLOSED","title":"Getting a 404{data  error cant figure out","url":"https://github.com/PyGithub/PyGithub/issues/1206"},{"author":{"id":"MDQ6VXNlcjUzOTA1MTU=","is_bot":false,"login":"benjiqq","name":"Ben"},"body":"Its not clear to me from the readme whether pygithub supports building oauth2 app or not\r\n\r\nsee #410 \r\nsee #1021 ","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDU0NjY1MjU3OA==","author":{"login":"stale"},"authorAssociation":"NONE","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","createdAt":"2019-10-27T01:05:06Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1205#issuecomment-546652578","viewerDidAuthor":false}],"createdAt":"2019-08-28T00:15:57Z","number":1205,"state":"CLOSED","title":"support of oauth2","url":"https://github.com/PyGithub/PyGithub/issues/1205"},{"author":{"id":"MDQ6VXNlcjQyMTIxODYw","is_bot":false,"login":"benjaminvanrenterghem","name":"Benjamin Van Renterghem"},"body":"Configuration:\r\ng = Github({api_key}, per_page=100, retry=1000)\r\n\r\n**1** - Retries do not execute, the program ends with an error\r\n**2** - For some reason Exception behavior is highly unpredictable and it's maddening.\r\nMy program can effectively cycle and preemptively call the ratelimit api to check if it adheres within the limits for one to two hours before randomly getting a 403/50x .\r\n\r\nSome native rate limit adherence would be a warm welcome here. Having to implement sleeps based on intuition when your application decides to spill the beans after two hours of running smoothly should not be expected behavior.\r\n``` File \"word.py\", line 126, in get_stargazers_inner\r\n    for i in repo.get_stargazers_with_dates():\r\n  File \"/usr/local/lib/python3.6/dist-packages/github/PaginatedList.py\", line 62, in __iter__\r\n    newElements = self._grow()\r\n  File \"/usr/local/lib/python3.6/dist-packages/github/PaginatedList.py\", line 74, in _grow\r\n    newElements = self._fetchNextPage()\r\n  File \"/usr/local/lib/python3.6/dist-packages/github/PaginatedList.py\", line 199, in _fetchNextPage\r\n    headers=self.__headers\r\n  File \"/usr/local/lib/python3.6/dist-packages/github/Requester.py\", line 276, in requestJsonAndCheck\r\n    return self.__check(*self.requestJson(verb, url, parameters, headers, input, self.__customConnection(url)))\r\n  File \"/usr/local/lib/python3.6/dist-packages/github/Requester.py\", line 287, in __check\r\n    raise self.__createException(status, responseHeaders, output)\r\ngithub.GithubException.RateLimitExceededException: 403 {'message': 'API rate limit exceeded for user ID xxxx.', 'documentation_url': 'https://developer.github.com/v3/#rate-limiting'}\r\n```\r\n\r\nAdditionally, one could use the backoff library (function decorator with exponential backoff) -- however **it can not account for the current position in item iteration and will therefore start from scratch again**.\r\n**3** - Incomplete results being returned\r\nExample with keyword 'nyzo':\r\nThe api finds 28 results: https://api.github.com/search/repositories?q=nyzo\r\nThe library finds 15 results: https://i.imgur.com/XfjPI8i.png\r\n","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDUyNTU5MzIwNQ==","author":{"login":"Hanaasagi"},"authorAssociation":"CONTRIBUTOR","body":"For problem 1, I think you can use the `urllib3.util.Retry`, it provide more useful options to custom retry behavior.\r\n\r\nRef https://urllib3.readthedocs.io/en/latest/reference/urllib3.util.html#urllib3.util.retry.Retry\r\n\r\n----\r\nFor problem 3, I could not reproduce. Here my test code.\r\n\r\n```Python\r\nfrom github import Github\r\n\r\ntoken = open('./.token').read().strip()\r\n\r\ng = Github(token, per_page=100, retry=1000)\r\nrepos = g.search_repositories('nyzo')\r\ncount = 0\r\nfor repo in repos:\r\n    print(repo.full_name)\r\n    count += 1\r\nprint(f'\\nTotal: {count}')\r\n```\r\n\r\nI got 28 results.","createdAt":"2019-08-28T05:44:32Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1204#issuecomment-525593205","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDU0NjY2NTc2MQ==","author":{"login":"stale"},"authorAssociation":"NONE","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","createdAt":"2019-10-27T06:25:01Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1204#issuecomment-546665761","viewerDidAuthor":false}],"createdAt":"2019-08-27T16:13:16Z","number":1204,"state":"CLOSED","title":"Incomplete results, retries not working, random exceptions","url":"https://github.com/PyGithub/PyGithub/issues/1204"},{"author":{"id":"MDQ6VXNlcjQ4NTMzMTg4","is_bot":false,"login":"GayleJames","name":""},"body":"I am writing a python script to access the issues in a our team repository.  Here is what my code looks like:\r\n\r\nfrom github import Github\r\ng=Github(\"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\")\r\nrepo = g.get_repo(\"GJ\")\r\nopen_issues = repo.get_issues(state='open')\r\nclosed_issues = repo.get_issues(state='closed')\r\nfor issue in open_issues:\r\n    print(issue)\r\n\r\nbut I get the error below:\r\n    raise self.__createException(status, responseHeaders, output)\r\ngithub.GithubException.BadCredentialsException: 401 {'message': 'Bad credentials', 'documentation_url': 'https://developer.github.com/v3'}\r\n\r\ndo I need the url of the github repository in the code?  Where am i going wrong?","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDUyNTU3MDE2OA==","author":{"login":"s-t-e-v-e-n-k"},"authorAssociation":"COLLABORATOR","body":"Bad credentials exception points to your token being incorrect. Double check your token, or switch to username and password if you do not have 2FA enabled.","createdAt":"2019-08-28T03:35:09Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1203#issuecomment-525570168","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDUyNTc0OTAwNA==","author":{"login":"GayleJames"},"authorAssociation":"NONE","body":"now I get:\r\na 404 error\r\n\r\n raise self.__createException(status, responseHeaders, output)\r\ngithub.GithubException.GithubException: 404 {'data': 'Not Found'}\r\n\r\n**i am using Github(base_url = 'the url i am accessing' , login_or_token='xxxxxxx......')**","createdAt":"2019-08-28T13:37:53Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1203#issuecomment-525749004","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDUyNjQ0ODQ4Ng==","author":{"login":"s-t-e-v-e-n-k"},"authorAssociation":"COLLABORATOR","body":"base_url is for GitHub Enterprise, if you aren't using that, or don't know it is, then don't set it. You'll also need to pass password if you're giving a username.","createdAt":"2019-08-30T04:12:06Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1203#issuecomment-526448486","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDUyNjY2MjY3OQ==","author":{"login":"GayleJames"},"authorAssociation":"NONE","body":"resolved now, I did not have the api/v3 added to my enterprise url.  Thanks","createdAt":"2019-08-30T16:20:36Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1203#issuecomment-526662679","viewerDidAuthor":false}],"createdAt":"2019-08-27T14:47:46Z","number":1203,"state":"CLOSED","title":"first time user of pygithub.  Set up incorrect?  I get error when I run the code ","url":"https://github.com/PyGithub/PyGithub/issues/1203"},{"author":{"id":"MDQ6VXNlcjU0MDcyOTU5","is_bot":false,"login":"Bigbigyoshi","name":""},"body":"I've got a quick question about (hopefully) making my code a lot more efficient. currently I have something like the following:\r\n```\r\ng = Github(base_url = \"https://github.companyName.com/api/v3\" ,login_or_token=\"my_token\")\r\n\r\nrepos = g.get_repos()\r\nfor repo in repos:\r\n    try:\r\n        issues = repo.get_issues()\r\n        for issue in issues:\r\n            i+=1\r\n            print(i)\r\n\r\n```\r\nThis code is just proof that I can access each issue, and in this case, just add up how many there are. As you can imagine this code is very inefficient, and in my opinion, poorly written. \r\n\r\nIs there some sort of function that will allow me to access all issues from all repos in the enterprise Github?  This would hopefully be similar to when you access all issues by going to the following links: https://github.companyName.com/issues\r\nhttps://github.com/issues\r\n","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDU0NjQyNjg0Ng==","author":{"login":"stale"},"authorAssociation":"NONE","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","createdAt":"2019-10-25T16:43:48Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1202#issuecomment-546426846","viewerDidAuthor":false}],"createdAt":"2019-08-26T15:48:17Z","number":1202,"state":"CLOSED","title":"(Question) List all issues on an enterprise Github","url":"https://github.com/PyGithub/PyGithub/issues/1202"},{"author":{"id":"MDQ6VXNlcjk4OTU=","is_bot":false,"login":"retr0h","name":"נυαη נυαηѕση"},"body":"I see the test [mock data](https://github.com/PyGithub/PyGithub/blob/78d283b9b5c5222dd0ca2750db7b56a2a5545a39/tests/ReplayData/Organization.setUp.txt) has the following returned:\r\n\r\n```\r\ndefault_repository_permission: read\r\nhas_organization_projects: true\r\nhas_repository_projects: true\r\nmembers_can_create_repositories: false\r\n```\r\n\r\nHowever, I do not see a way to configure these.\r\n\r\nAm I missing something?","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDU0NTY3Njc3MA==","author":{"login":"stale"},"authorAssociation":"NONE","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","createdAt":"2019-10-23T23:23:23Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1201#issuecomment-545676770","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDU0NjA5Nzg3OA==","author":{"login":"retr0h"},"authorAssociation":"NONE","body":"ping","createdAt":"2019-10-24T20:51:35Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1201#issuecomment-546097878","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDU2ODU4NTM5Mg==","author":{"login":"stale"},"authorAssociation":"NONE","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","createdAt":"2019-12-23T21:26:07Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1201#issuecomment-568585392","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDU2OTU0MDc3Nw==","author":{"login":"retr0h"},"authorAssociation":"NONE","body":"ping","createdAt":"2019-12-29T20:49:20Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1201#issuecomment-569540777","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDU5MjE3MDkxMA==","author":{"login":"stale"},"authorAssociation":"NONE","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","createdAt":"2020-02-27T20:51:53Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1201#issuecomment-592170910","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDY3NDU4NTU5OA==","author":{"login":"ChaiBapchya"},"authorAssociation":"NONE","body":"@retr0h how are you using the mock data in pygithub pypi?","createdAt":"2020-08-16T22:25:32Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1201#issuecomment-674585598","viewerDidAuthor":false}],"createdAt":"2019-08-24T22:59:04Z","number":1201,"state":"CLOSED","title":"Additional org configuration","url":"https://github.com/PyGithub/PyGithub/issues/1201"},{"author":{"id":"MDQ6VXNlcjQwMTQzOA==","is_bot":false,"login":"AstraLuma","name":"Jamie Bliss"},"body":"Looking through https://developer.github.com/v3/previews/ it looks like each individual preview has its own MIME type to enable it, and there's no documented sequence to them (that is, it doesn't say that type U also covers types S and T, and there isn't a type Z that enables everything).\r\n\r\nIt looks like #1188 enables just one of these previews and touches 32 files in the process.\r\n\r\nMaybe there's a better, more systemic way to handle this?\r\n\r\nThe current behavior is a single flag that enables the `moondragon` changes, which are from [2015](https://developer.github.com/changes/2015-01-07-prepare-for-organization-permissions-changes/) and were \"merged\" on June 24 of that year.","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDU0NTU5NzcwNw==","author":{"login":"stale"},"authorAssociation":"NONE","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","createdAt":"2019-10-23T19:23:23Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1200#issuecomment-545597707","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDU0NjYyMTk5Mg==","author":{"login":"AstraLuma"},"authorAssociation":"NONE","body":"Afaik, still an issue","createdAt":"2019-10-26T17:11:57Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1200#issuecomment-546621992","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDU2ODkxOTA5NQ==","author":{"login":"stale"},"authorAssociation":"NONE","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","createdAt":"2019-12-25T17:52:23Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1200#issuecomment-568919095","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDU2OTA4MDQ3Ng==","author":{"login":"AstraLuma"},"authorAssociation":"NONE","body":"afaik, still and issue","createdAt":"2019-12-26T15:57:57Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1200#issuecomment-569080476","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDU2OTA4MDkzMQ==","author":{"login":"AstraLuma"},"authorAssociation":"NONE","body":"#1291 is a specific instance of this.","createdAt":"2019-12-26T16:00:30Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1200#issuecomment-569080931","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDU5MDQwMzY4OA==","author":{"login":"stale"},"authorAssociation":"NONE","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","createdAt":"2020-02-24T16:02:53Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1200#issuecomment-590403688","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDU5MDQwNjUxNA==","author":{"login":"AstraLuma"},"authorAssociation":"NONE","body":"Has this been fixed yet?","createdAt":"2020-02-24T16:07:52Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1200#issuecomment-590406514","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDYxOTMyNDEyOA==","author":{"login":"stale"},"authorAssociation":"NONE","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","createdAt":"2020-04-25T05:27:26Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1200#issuecomment-619324128","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDYxOTQ2NjIzOA==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"Sorry about the stale bot, IIRC the use of custom header is supported (used internally), it's just not exposed for the user to use directly. Which header are looking at specifically?","createdAt":"2020-04-26T01:51:30Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1200#issuecomment-619466238","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDYxOTQ2NjM3Mw==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"> it looks like each individual preview has its own MIME type to enable it, and there's no documented sequence to them (that is, it doesn't say that type U also covers types S and T, and there isn't a type Z that enables everything).\r\n\r\nThis is outside the scope of PyGithub, it should be a question for Github support (which I am also curious to find out)","createdAt":"2020-04-26T01:52:44Z","includesCreatedEdit":true,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1200#issuecomment-619466373","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDY0OTk1MTk0OA==","author":{"login":"stale"},"authorAssociation":"NONE","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","createdAt":"2020-06-26T04:17:06Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1200#issuecomment-649951948","viewerDidAuthor":false}],"createdAt":"2019-08-24T18:47:28Z","number":1200,"state":"CLOSED","title":"Preview Handling","url":"https://github.com/PyGithub/PyGithub/issues/1200"},{"author":{"id":"MDQ6VXNlcjc3NTI4MDU=","is_bot":false,"login":"iamshreeram","name":"Shreeram"},"body":"Is there any API, for checking the availability of organization name? \r\nBelow are the details -\r\nMethod : `POST` \r\nURL : `https://api.github.com/organizations/check_name`\r\nAPI : `check_name`","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDUyNDgwNDc0Ng==","author":{"login":"Hanaasagi"},"authorAssociation":"CONTRIBUTOR","body":"@iamshreeram Do you mean `get_organization` method? If the organization is not existed, it will throw a 404 exception.\r\n\r\nRef: https://pygithub.readthedocs.io/en/latest/examples/MainClass.html#get-organization-by-name","createdAt":"2019-08-26T10:13:10Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":1}}],"url":"https://github.com/PyGithub/PyGithub/issues/1199#issuecomment-524804746","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDUyNDkwMzA0NA==","author":{"login":"iamshreeram"},"authorAssociation":"NONE","body":"@Hanaasagi , Thanks. But, I'm looking for little different one. \r\n\r\n`get_organization` would throw `404 Exception`, even if organization name exists and it is `PRIVATE`. If Org is public, It would give `200 OK`.\r\n \r\nBut with `check_name` gives `200 OK` (same response), If name is doesn't exist (For both public and private). ","createdAt":"2019-08-26T15:19:29Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1199#issuecomment-524903044","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDUyNTExNzI0NA==","author":{"login":"Hanaasagi"},"authorAssociation":"CONTRIBUTOR","body":"Sorry, I never heard that an organization could be privated. I know little about this.","createdAt":"2019-08-27T03:07:24Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1199#issuecomment-525117244","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDUyNTEzMDMxNw==","author":{"login":"s-t-e-v-e-n-k"},"authorAssociation":"COLLABORATOR","body":"That API doesn't exist, and if it did, it would represent an information leak about private organizations. I think @iamshreeram 's suggestion is the correct one, since you are constrained by what you yourself can view.","createdAt":"2019-08-27T04:20:19Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1199#issuecomment-525130317","viewerDidAuthor":false}],"createdAt":"2019-08-24T03:22:12Z","number":1199,"state":"CLOSED","title":"API for checking the availablity of organization name","url":"https://github.com/PyGithub/PyGithub/issues/1199"},{"author":{"id":"MDQ6VXNlcjUyNDA1Njk0","is_bot":false,"login":"shjain0512","name":""},"body":"If i try to include the ref parameter (branch name other than master), i get the below error :\r\nUnknownObjectException: 404 {'message': 'Not Found', 'documentation_url': 'https://developer.github.com/v3/repos/contents/#get-contents'}\r\nIt seems the ref parameter does not take the branch name other than master. \r\nPlease verify","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDUyMzcyMTAzOA==","author":{"login":"Hanaasagi"},"authorAssociation":"CONTRIBUTOR","body":"@shjain0512 For example, in PyGithub v0.1(https://github.com/PyGithub/PyGithub/tree/v0.1). There is a file named  `Design.md` in root dir. But in master branch, the file was removed.\r\n\r\n```Python\r\nimport base64\r\nfrom github import Github\r\n\r\ntoken = open('./.token').read().strip()\r\n\r\ng = Github(token)\r\nrepo = g.get_repo(\"PyGithub/PyGithub\")\r\nprint(base64.b64decode(repo.get_contents('Design.md', ref='v0.1').content))\r\n```\r\n\r\nI can get the file content correctly. Please check the file in your branch.\r\n\r\n\r\n**My Environment**\r\n- PyGithub 1.43.8\r\n- Python 3.7.3","createdAt":"2019-08-22T02:29:45Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1197#issuecomment-523721038","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDUyMzg0MjI5OQ==","author":{"login":"shjain0512"},"authorAssociation":"NONE","body":"> @shjain0512 For example, in PyGithub v0.1(https://github.com/PyGithub/PyGithub/tree/v0.1). There is a file named `Design.md` in root dir. But in master branch, the file was removed.\r\n> \r\n> ```python\r\n> import base64\r\n> from github import Github\r\n> \r\n> token = open('./.token').read().strip()\r\n> \r\n> g = Github(token)\r\n> repo = g.get_repo(\"PyGithub/PyGithub\")\r\n> print(base64.b64decode(repo.get_contents('Design.md', ref='v0.1').content))\r\n> ```\r\n> \r\n> I can get the file content correctly. Please check the file in your branch.\r\n> \r\n> **My Environment**\r\n> \r\n> * PyGithub 1.43.8\r\n> * Python 3.7.3\r\n\r\nThanks for your reply. Yes, you are right it works in this case. It seems to work with the tag names but not the branch names.","createdAt":"2019-08-22T10:16:23Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1197#issuecomment-523842299","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDUyMzg1MDA2MA==","author":{"login":"Hanaasagi"},"authorAssociation":"CONTRIBUTOR","body":"@shjain0512 Branch name also works.\r\n\r\n```Python\r\nimport base64\r\nfrom github import Github\r\n\r\ntoken = open('./.token').read().strip()\r\n\r\ng = Github(token)\r\nrepo = g.get_repo(\"andymccurdy/redis-py\")\r\nprint(base64.b64decode(repo.get_contents('run_tests', ref='logging').content))\r\n```\r\n\r\nBranch `logging` has a file named `run_tests`. And in `master`, it was deleted.\r\n\r\nCould you provide sample code to reproduce it? Thanks!","createdAt":"2019-08-22T10:40:41Z","includesCreatedEdit":true,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1197#issuecomment-523850060","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDUyNjgyNDgzNQ==","author":{"login":"s-t-e-v-e-n-k"},"authorAssociation":"COLLABORATOR","body":"We don't actually mangle ref at all, we pass it as-is, so I would also ask for a test case where this doesn't work on a public repository.","createdAt":"2019-08-31T11:59:17Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1197#issuecomment-526824835","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDU0Nzg4MjQxNg==","author":{"login":"stale"},"authorAssociation":"NONE","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","createdAt":"2019-10-30T12:41:29Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1197#issuecomment-547882416","viewerDidAuthor":false}],"createdAt":"2019-08-20T06:49:20Z","number":1197,"state":"CLOSED","title":"ref parameter does not work on the get_contents() method","url":"https://github.com/PyGithub/PyGithub/issues/1197"},{"author":{"id":"MDQ6VXNlcjU0MDY2NDE3","is_bot":false,"login":"CyvBot","name":""},"body":"This is the issue body","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDUyMDgxODc5Ng==","author":{"login":"s-t-e-v-e-n-k"},"authorAssociation":"COLLABORATOR","body":"Closing as this is clearly a test.","createdAt":"2019-08-13T12:43:20Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1196#issuecomment-520818796","viewerDidAuthor":false}],"createdAt":"2019-08-13T12:38:22Z","number":1196,"state":"CLOSED","title":"This is a new issue","url":"https://github.com/PyGithub/PyGithub/issues/1196"},{"author":{"id":"MDQ6VXNlcjIxOTcxNTA=","is_bot":false,"login":"jpleger","name":"James Pleger"},"body":"This is essentially the same behavior described in #222\r\n\r\nWhen editing/creating/querying labels, some functions require labels to be passed as a Labels object and some require as a string. The preferred behavior would be to accept either a Label object or a string.\r\n\r\nI'll submit a PR for this functionality.","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDUxODMwNjYxOQ==","author":{"login":"davidshepherd7"},"authorAssociation":"NONE","body":"This is particularly odd when doing cross-repository querying of issues by label. Since the github issue querying API only accepts label *names* we can't possibly query by label *identity*, which is what passing a Label object appears to be doing.","createdAt":"2019-08-05T16:34:43Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1187#issuecomment-518306619","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDUzNzE0MjM3OQ==","author":{"login":"stale"},"authorAssociation":"NONE","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","createdAt":"2019-10-01T17:28:14Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1187#issuecomment-537142379","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDgyMDA5MzU1Mw==","author":{"login":"johnandersen777"},"authorAssociation":"NONE","body":"This is still an issue! Can we get this reopened? Create accepts Label objects, edit only works with label names.","createdAt":"2021-04-15T04:52:47Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1187#issuecomment-820093553","viewerDidAuthor":false}],"createdAt":"2019-08-02T17:10:15Z","number":1187,"state":"CLOSED","title":"On issue edit/create/query, labels parameter is inconsistently used","url":"https://github.com/PyGithub/PyGithub/issues/1187"},{"author":{"id":"MDQ6VXNlcjQ2NjM0MzA3","is_bot":false,"login":"FurkanToprak","name":"Furkan Toprak"},"body":"While direct use of the REST API v3 returns the complete enumeration of search results, `g.search_repositories()` returns an incomplete list of results.\r\n\r\nFor example, while `https://api.github.com/search/repositories?q=pony+language:python` shows that `total_count: 286`, `repositories.totalCount` is 111 for `repositories = g.search_repositories(query='pony+language:python')`. Indeed, after traversing through `repositories`, only 111 repositories are returned.\r\n\r\nI hope there isn't something I missed in the documentation, but this is a rather serious issue. Thank you!","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDUxNjAzNjU4Mg==","author":{"login":"FurkanToprak"},"authorAssociation":"NONE","body":"Here is my code for replication: \r\n```\r\nfrom github import Github\r\n\r\ng = Github(\"auth code\")\r\nrepositories = g.search_repositories(query='pony+language:python')\r\nprint(\"There are at least\", repositories.totalCount, \"results under this query.\")\r\ni = 0\r\nfor repo in repositories:\r\n    i += 1\r\n    print(repo.created_at)\r\nprint(i)\r\n```","createdAt":"2019-07-29T15:19:11Z","includesCreatedEdit":true,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1185#issuecomment-516036582","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDUyMjQyMDY5Mg==","author":{"login":"Hanaasagi"},"authorAssociation":"CONTRIBUTOR","body":"@FurkanToprak A simple way to bypass it.\r\n```Python\r\nfrom github import Github\r\n\r\ntoken = open('./.token').read().strip()\r\n\r\ng = Github(token)\r\nrepositories = g.search_repositories(query='pony language:python')\r\nprint(repositories.totalCount)\r\n```\r\n\r\nAfter read the code, I think there are something wrong in url encoding.\r\n\r\nhttps://github.com/PyGithub/PyGithub/blob/7bac694ae5378e51903d38bf7fdd10cbd39cedb9/github/PaginatedList.py#L151-L156\r\n\r\nFinally, call this\r\n\r\nhttps://github.com/PyGithub/PyGithub/blob/7bac694ae5378e51903d38bf7fdd10cbd39cedb9/github/Requester.py#L363-L376\r\n\r\nActually, it will request \r\n\r\n```Bash\r\ncurl \"https://api.github.com/search/repositories?q=pony%2Blanguage%3Apython&per_page=1\"\r\n```\r\n\r\nIt will get `\"total_count\": 111`.\r\n\r\n`+` should not be escaped in above case.","createdAt":"2019-08-19T05:40:21Z","includesCreatedEdit":true,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1185#issuecomment-522420692","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDU0MzUzNzA3Ng==","author":{"login":"stale"},"authorAssociation":"NONE","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","createdAt":"2019-10-18T06:22:56Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1185#issuecomment-543537076","viewerDidAuthor":false}],"createdAt":"2019-07-29T15:17:59Z","number":1185,"state":"CLOSED","title":"search_repositories() returns an incorrect number of results for queries.","url":"https://github.com/PyGithub/PyGithub/issues/1185"},{"author":{"id":"MDQ6VXNlcjE5NzMwNw==","is_bot":false,"login":"meren","name":"A. Murat Eren (Meren)"},"body":"Thanks for the very useful library. I am using the version `1.43.8` with Python version `3.6`.\r\n\r\nI am wondering if there is a way to get all issues associate with a repository project.\r\n\r\nI am unable to find a way to get all issues associated with a repository project (I have also not been able to find projects a given issue is associated with, which is very odd).\r\n\r\nThe raw data for an issue contains information for 'Assignees', 'Labels', and 'Milestone', but not 'Projects', which is shown right before 'Milestone' for every issue on the right-hand side of the GitHub interface, so there must be a straightforward way to get that information.\r\n\r\nAny insights would be most welcome, and thank you very much for your time.","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDUxODUxMTIxMg==","author":{"login":"s-t-e-v-e-n-k"},"authorAssociation":"COLLABORATOR","body":"Getting all issues with a repository is via the Repository object:\r\n\r\n```\r\n>>> for i in list(g.get_repo('PyGithub/PyGithub').get_issues())[:5]:\r\n...     print(i.number)\r\n... \r\n1194\r\n1193\r\n1188\r\n1187\r\n1185\r\n```\r\n\r\nThere is a repository method on Issue that returns the repository, like so:\r\n\r\n```\r\n>>> issue = g.get_repo('PyGithub/PyGithub').get_issue(1183)\r\n>>> print(issue.repository.name)\r\nPyGithub\r\n```","createdAt":"2019-08-06T05:43:24Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1183#issuecomment-518511212","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDUyMjI3NTUwNA==","author":{"login":"meren"},"authorAssociation":"NONE","body":"Thanks for the response, but this is not what I was asking. I am interested in getting all issues associated with, let's say `PROJECT #1`, some of the issues associated with in the following way:\r\n\r\n![image](https://user-images.githubusercontent.com/197307/63217947-11494800-c115-11e9-9970-54e55826c258.png)\r\n\r\nBest,","createdAt":"2019-08-17T22:33:56Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1183#issuecomment-522275504","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDU0MzUzNzA3MQ==","author":{"login":"stale"},"authorAssociation":"NONE","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","createdAt":"2019-10-18T06:22:55Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1183#issuecomment-543537071","viewerDidAuthor":false}],"createdAt":"2019-07-28T18:41:39Z","number":1183,"state":"CLOSED","title":"Missing functionality to get all issues associated with a repository project","url":"https://github.com/PyGithub/PyGithub/issues/1183"},{"author":{"id":"MDQ6VXNlcjMzOTUyOTI=","is_bot":false,"login":"jdmulloy","name":"Joseph Mulloy"},"body":"It seems that Github has changed the text that it sends when rate limiting. I have a script that uses a backoff decorator to retry on RateLimitExceededException, but now because the text has changed it throws a generic GithubException, which my decorator isn't catching.\r\n\r\nThis code here is looking for the strings that no longer exist. https://github.com/PyGithub/PyGithub/blob/828b53b7560b8c2b4e9d7064e0d9ffc442b16548/github/Requester.py#L310-L314\r\n\r\n```\r\ngithub.GithubException.GithubException: 403 {'message': 'You have triggered an abuse detection mechanism. Please wait a few minutes before you try again.', 'documentation_url': 'https://developer.github.com/v3/#abuse-rate-limits'}\r\n```","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDUxNTIwOTI5NA==","author":{"login":"jdmulloy"},"authorAssociation":"NONE","body":"I'm dumb. We were using a much older version (1.29). I knew this and I miss read the code above. I think upgrading will fix us.","createdAt":"2019-07-25T20:50:01Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1182#issuecomment-515209294","viewerDidAuthor":false}],"createdAt":"2019-07-25T19:27:11Z","number":1182,"state":"CLOSED","title":"Rate Limit Detection no longer works, string changed","url":"https://github.com/PyGithub/PyGithub/issues/1182"},{"author":{"id":"MDQ6VXNlcjEzNzEz","is_bot":false,"login":"Ferada","name":"Olof-Joachim Frahm (欧雅福)"},"body":"I have some code that polls for pull requests, then, in some cases,\r\ncreates an automatic approval, like this:\r\n\r\n    checked = set()\r\n    ...\r\n                # n is a Notification\r\n                p = n.get_pull_request()\r\n                if p.state == 'open':\r\n                    print(\"Checking pull request {}.\".format(p.id))\r\n                    if p.id in checked:\r\n                        continue\r\n                    if ...\r\n                        ...\r\n                        p.create_review(event=\"APPROVE\", body=\"\")\r\n                        n.mark_as_read()\r\n                    checked.add(p.id)\r\n    ...\r\n\r\nThis is actually not working like this, because `p.id` is being\r\nmodified!\r\n\r\nThere's this line in `PullRequest.py` in the `create_review` method:\r\n\r\n```\r\n        self._useAttributes(data)\r\n```\r\n\r\nThat looks like it's taking the data from the pull request review and just applies it to itself ... that can't be right, can it? Before I create a PR then, what might have been the reason to have that call in there?","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDUxODUyNzgzOA==","author":{"login":"s-t-e-v-e-n-k"},"authorAssociation":"COLLABORATOR","body":"That pattern is actually used in way more places than just Pull Request, I need to dig into this more.","createdAt":"2019-08-06T06:40:51Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1181#issuecomment-518527838","viewerDidAuthor":false}],"createdAt":"2019-07-24T14:25:26Z","number":1181,"state":"CLOSED","title":"Creating code review changes PR data.","url":"https://github.com/PyGithub/PyGithub/issues/1181"},{"author":{"id":"MDQ6VXNlcjU0OTY0NDM=","is_bot":false,"login":"DragosDumitrache","name":"Dragos Dumitrache"},"body":"Hello,\r\n\r\nI'm raising another issue as even though the fix is potentially quite straightforward, I can't seem to get the project building locally, due to various reasons.\r\n\r\nNoticed it briefly yesterday, but if I obtain the authenticated user and print it as in the example bellow, the representation has no login information. However, if I manually print the login value, I will get the expected result.\r\n\r\n```py\r\n>>> auth_user = git.get_user()\r\n>>> print(auth_user)\r\nAuthenticatedUser(login=None)\r\n\r\n>> print(auth_user.login)\r\ndragosdumitrache\r\n```\r\n\r\nI suspect the issue might be because the `__repr__` method on `AuthenticatedUser` directly references the login value: `self._login.value`, instead of using the property `login()`. However, this is just a guess on my end, since I couldn't run the code locally.\r\n\r\nRegarding local development, I am using Python 3.7.3, and the project only seems compatible with python2, is that correct? I'm asking so that in the future I can be more useful than just raising issues :)\r\n\r\nL.E: Seems to print the correct representation if I manually check the `login` value and then print the entire object.\r\n```py\r\n>>> print(auth_user.login)\r\ndragosdumitrache\r\n>>> print(auth_user)\r\nAuthenticatedUser(login=dragosdumitrache)\r\n```\r\n\r\nFurthermore, as it relates to `AuthenticatedUser`, is there a reason why `AuthenticatedUser` would not be equal to the equivalent `NamedUser`? There's no hash implementation","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDUxODA5OTgzNQ==","author":{"login":"s-t-e-v-e-n-k"},"authorAssociation":"COLLABORATOR","body":"This is actually on purpose. From github/MainClass\r\n\r\n```\r\n        if login is github.GithubObject.NotSet:\r\n            return AuthenticatedUser.AuthenticatedUser(self.__requester, {}, {\"url\": \"/user\"}, completed=False)\r\n```\r\n\r\nWhich means self._login will be NotSet because it's a lazy object, and if __repr__ used self.login, it would round-trip out to github.\r\n\r\nFurthermore, I should have landed code today that makes your experience on Python 3.7 much better.\r\n\r\nAnd NamedUser and AuthenicatedUser implement different methods, methods that anyone can call for any Github user versus methods you can only call for the user you are logged in as.","createdAt":"2019-08-05T06:13:19Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":1}}],"url":"https://github.com/PyGithub/PyGithub/issues/1180#issuecomment-518099835","viewerDidAuthor":false}],"createdAt":"2019-07-23T07:50:30Z","number":1180,"state":"CLOSED","title":"AuthUser lazy login field initialization and equality issue","url":"https://github.com/PyGithub/PyGithub/issues/1180"},{"author":{"id":"MDQ6VXNlcjU0OTY0NDM=","is_bot":false,"login":"DragosDumitrache","name":"Dragos Dumitrache"},"body":"Hello. I have started writting a Git interaction tool for my current workplace. We have our own instance of GHE and organise everything into orgs. I have started used PyGithub, currently using v1.43.7, which should be the latest one.\r\n\r\nApologies if this has been asked before, I did have a look and could find nothing of the sort.\r\n\r\nThe `get_organizations` pydoc on the `MainClass.Github` seems to suggest that the returned type for `get_organizations` is a `PaginatedList` of `Organizations`, as can be seen at the following URL: \r\n[get_organizations docs](https://pygithub.readthedocs.io/en/latest/github.html#github.MainClass.Github.get_organizations)\r\n\r\nHowever, a successful call to `get_organizations` seems to return a `PaginatedList` of `NamedUser`, where each `NamedUser` is actually a git org (so it goes off and finds the right things on GHE, but returns the wrong type).\r\n\r\nA quick fix to get the right type is to do something like this:\r\n\r\n```py\r\nnamed_users = git.get_organizations()\r\nfor named_user in named_users:\r\n\tactual_org = git.get_organization(named_user.login)\r\n```\r\n\r\nThat is not in line with the documentation though, so I am wondering whether I am doing something wrong, or if this is the intended behaviour.\r\n\r\nKind regards,\r\nDragos","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDUxNDA3NjExMw==","author":{"login":"s-t-e-v-e-n-k"},"authorAssociation":"COLLABORATOR","body":"Nice catch! I've pushed up a fix.","createdAt":"2019-07-23T06:43:31Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":1}}],"url":"https://github.com/PyGithub/PyGithub/issues/1177#issuecomment-514076113","viewerDidAuthor":false}],"createdAt":"2019-07-22T11:13:13Z","number":1177,"state":"CLOSED","title":"MainGithub  get_organizations unexpected return type","url":"https://github.com/PyGithub/PyGithub/issues/1177"},{"author":{"id":"MDQ6VXNlcjQzODYxNDA4","is_bot":false,"login":"mwhite98","name":""},"body":"Hello,\r\n\r\nI'm writing a script to look for a directory of a certain name in a given repository, and if that directory doesn't exist, it throws an UnknownObjectException. I'd like to be able to specify the exception I'm catching as an UnknownObjectException, but I'm having trouble figuring out how to access that utility. Here's what I'm trying to do:\r\n```\r\ntry:\r\n    dir_test = repo.get_contents(\"test_directory\")\r\nexcept UnknownObjectException:\r\n    print(\"This directory DNE\")\r\n```\r\n\r\n\r\nAnd here's how I've tried to do it so far, and the resulting outputs:\r\n```\r\nexcept UnknownObjectException:\r\n    # NameError: name 'UnknownObjectException' is not defined\r\n\r\nexcept GithubException as ge:\r\n    # NameError: name 'GithubException' is not defined\r\n\r\nexcept Github(url, token).GithubException as ge:\r\n    # AttributeError: 'Github' object has no attribute 'GithubException'\r\n\r\nimport github\r\nexcept github.GithubException.UnknownObjectException: \r\n    # AttributeError: type object 'GithubException' has no attribute 'UnknownObjectException'\r\n```\r\n\r\nAny help as to how to go about specifying PyGithub exceptions would be greatly appreciated as I haven't found any examples online that have worked for me. Thanks!\r\n","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDUxMjYyODU1Nw==","author":{"login":"s-t-e-v-e-n-k"},"authorAssociation":"COLLABORATOR","body":"```\r\nimport github\r\n...\r\nexcept github.UnknownObjectException as e:\r\n```","createdAt":"2019-07-18T01:27:26Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1176#issuecomment-512628557","viewerDidAuthor":false}],"createdAt":"2019-07-17T21:40:27Z","number":1176,"state":"CLOSED","title":"Specifying UnknownObjectExceptions","url":"https://github.com/PyGithub/PyGithub/issues/1176"},{"author":{"id":"MDQ6VXNlcjEyNzI1OQ==","is_bot":false,"login":"3nids","name":"Denis Rouzaud"},"body":"why `github.GithubObject.NotSet is None` is returning `False`?\r\n\r\ncode would look much nicer and Pythonic if we could use something lilke \r\n\r\n    param or default_value\r\n\r\ninstead  of\r\n \r\n    if param is not github.GithubObject.NotSet:\r\n      return param\r\n    else:\r\n      return default_value","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDUxODUxMTk3NQ==","author":{"login":"s-t-e-v-e-n-k"},"authorAssociation":"COLLABORATOR","body":"Because NotSet is a distinctly implemented object. It neatly shows what we aren't setting versus say explicitly setting things to None, but this decision was taken when the project began which is way before my involvement.","createdAt":"2019-08-06T05:46:24Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1175#issuecomment-518511975","viewerDidAuthor":false}],"createdAt":"2019-07-16T16:31:32Z","number":1175,"state":"CLOSED","title":"NotSet is not None","url":"https://github.com/PyGithub/PyGithub/issues/1175"},{"author":{"id":"MDQ6VXNlcjQ3NTY2MTI5","is_bot":false,"login":"gjabouley-invn","name":"Geoffroy Jabouley"},"body":"Hello\r\nthere are some great improvements waiting to be shipped into a new release.\r\nWhen can we expect a new version?\r\nthanks for your work 👍 ","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDUxMTg3ODIxNQ==","author":{"login":"3nids"},"authorAssociation":"NONE","body":"yes please!!!\r\nmissing the asset file name.","createdAt":"2019-07-16T15:57:41Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1172#issuecomment-511878215","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDUxMTg4Mjk0NQ==","author":{"login":"3nids"},"authorAssociation":"NONE","body":"see #1174","createdAt":"2019-07-16T16:10:09Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1172#issuecomment-511882945","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDUxMzQ3ODg0Mg==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"Released","createdAt":"2019-07-20T15:58:08Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1172#issuecomment-513478842","viewerDidAuthor":false}],"createdAt":"2019-07-16T08:53:14Z","number":1172,"state":"CLOSED","title":"1.43.8?","url":"https://github.com/PyGithub/PyGithub/issues/1172"},{"author":{"id":"MDQ6VXNlcjQ1MDA4NzA5","is_bot":false,"login":"lpiottiJC","name":"Laureano Piotti"},"body":"For Repository class couldn't find get_pending_invitations()\r\nFor Team class couldn't find get_team_by_slug()","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDUxMTE1ODEwMQ==","author":{"login":"lpiottiJC"},"authorAssociation":"NONE","body":"My bad this is an Organization class method -> get_team_by_slug()\r\n\r\nActual exception:\r\nAttributeError: 'Organization' object has no attribute 'get_team_by_slug'","createdAt":"2019-07-13T22:25:29Z","includesCreatedEdit":true,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1170#issuecomment-511158101","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDUxMTI3MTM4MA==","author":{"login":"s-t-e-v-e-n-k"},"authorAssociation":"COLLABORATOR","body":"Both of these have landed -- but you'll either need to wait for the next release, or run from HEAD.","createdAt":"2019-07-15T04:33:39Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":1}}],"url":"https://github.com/PyGithub/PyGithub/issues/1170#issuecomment-511271380","viewerDidAuthor":false}],"createdAt":"2019-07-13T20:35:10Z","number":1170,"state":"CLOSED","title":"Repository and team missing methods","url":"https://github.com/PyGithub/PyGithub/issues/1170"},{"author":{"id":"MDQ6VXNlcjM5MDU4MTQ2","is_bot":false,"login":"MartykQ","name":"Franek Martyka"},"body":"I'm currently working on bug detecting system.\r\n\r\nI need to find a way to get all events for an issue, especially merges that come from the repository, that I'm currently in and from another repository.\r\n\r\nExample: \r\nI have repoA, created an issue #1 there\r\n\r\nIn repoB, someone created a pull request that was merged and referenced to #1 via keyworld 'fixes'\r\n\r\nWhat I would like to get is a way to get a reference to this pull request api link, working from /api/repos/repoA/issues/1\r\n\r\n\r\n\r\n","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDUxMTA4NzgzMw==","author":{"login":"s-t-e-v-e-n-k"},"authorAssociation":"COLLABORATOR","body":"Having a play around with a closed issue, I can get at the commit itself from an event, but I can't see how to get at the PR itself. Perhaps IssueEvent is missing some information, but I can't the PR in the raw data returned from GitHub either.","createdAt":"2019-07-13T04:37:10Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1164#issuecomment-511087833","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDUxMTEwMTk0OA==","author":{"login":"MartykQ"},"authorAssociation":"NONE","body":"@s-t-e-v-e-n-k I figured it out. However, as far as I'm concerned it's impossible to get with api v3. I used grahpQL query (api v4). \r\n\r\n```\r\nquery{\r\n    repository(owner: \"owner\", name: \"repo\") {                \r\n      issue(number: 1) {\r\n      url\r\n      state\r\n      timeline(first: 100) { \r\n        nodes {\r\n          __typename\r\n          ... on CrossReferencedEvent {\r\n            source {  \r\n              ... on PullRequest {\r\n                number\r\n                title\r\n                url\r\n                changedFiles\r\n                additions\r\n                deletions\r\n                author {\r\n                  login\r\n                }\r\n                commits {\r\n                  totalCount\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n```\r\n\r\n","createdAt":"2019-07-13T08:24:38Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1164#issuecomment-511101948","viewerDidAuthor":false}],"createdAt":"2019-07-09T13:52:13Z","number":1164,"state":"CLOSED","title":"General github api question: merge from another repo","url":"https://github.com/PyGithub/PyGithub/issues/1164"},{"author":{"id":"MDQ6VXNlcjE0MTA3MDI5","is_bot":false,"login":"dspechnikov","name":"Dmitry Pechnikov"},"body":"This works correctly (returns `True`):\r\n```python\r\ngithub_client = Github('token')\r\norganization = github_client.get_organization('org')\r\nuser = github_client.get_user('user')\r\norganization.has_in_members(user)\r\n```\r\n\r\nThe same call from repo instance returns `False`:\r\n```python\r\ngithub_client = Github('token')\r\norganization = github_client.get_organization('org')\r\nuser = github_client.get_user('user')\r\nrepo = organization.get_repo('repo')\r\nrepo.organization.has_in_members(user)\r\n```\r\n\r\nThe reason is that requested URL is  referring to `users` namespace instead of `orgs`:\r\n`https://api.github.com/users/...`","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDUwNzYxOTk1Mw==","author":{"login":"s-t-e-v-e-n-k"},"authorAssociation":"COLLABORATOR","body":"I think this is a gotcha that we should document, because we're just going by what data Github returns.\r\n\r\n```\r\n>>> repo_raw_data = repo.organization.raw_data\r\n>>> org_raw_data = org.raw_data\r\n>>> diff = { k : repo_raw_data[k] for k in set(repo_raw_data) - set(org_raw_data) }\r\n>>> diff\r\n{u'bio': None, u'following_url': u'https://api.github.com/users/PyGithub/following{/other_user}', u'gists_url': u'https://api.github.com/users/PyGithub/gists{/gist_id}', u'name': None, u'organizations_url': u'https://api.github.com/users/PyGithub/orgs', u'company': None, u'site_admin': False, u'subscriptions_url': u'https://api.github.com/users/PyGithub/subscriptions', u'blog': u'', u'location': None, u'received_events_url': u'https://api.github.com/users/PyGithub/received_events', u'gravatar_id': u'', u'starred_url': u'https://api.github.com/users/PyGithub/starred{/owner}{/repo}', u'hireable': None, u'email': None, u'followers_url': u'https://api.github.com/users/PyGithub/followers'}\r\n```\r\n\r\nFrom comparing the raw_data, I see you're completely correct, but repo.organization is populated from the Repository object itself, from the JSON returned by GitHub, not by querying the name of org.","createdAt":"2019-07-02T10:36:34Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1161#issuecomment-507619953","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDUwNzYyMzY2OQ==","author":{"login":"dspechnikov"},"authorAssociation":"NONE","body":"Thanks for details on internals. \r\n\r\nStill, we basically have a way to call a method which returns an incorrect result. Shouldn't we at least raise an exception in this case to be explicit about that?\r\n\r\nI spent quite a bit of time trying to figure that out. It would be great if nobody would repeat that in future versions.","createdAt":"2019-07-02T10:49:49Z","includesCreatedEdit":true,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1161#issuecomment-507623669","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDUwNzYyNTMxMg==","author":{"login":"s-t-e-v-e-n-k"},"authorAssociation":"COLLABORATOR","body":"In general if you want to perform an action on any item (be it an org, branch or user), you're much better off fetching it directly. I *think* that is brief enough to document, @sfdye what do you think?","createdAt":"2019-07-02T10:55:36Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1161#issuecomment-507625312","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDUxODUxNDQ1Mw==","author":{"login":"s-t-e-v-e-n-k"},"authorAssociation":"COLLABORATOR","body":"The proper way to fix this would be to have a different Organization class that is used with no methods on it, but we use this pattern all over the code base, so I think you're entirely correct to raise an issue asking for help, but I don't think it's something we can fix.","createdAt":"2019-08-06T05:55:29Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1161#issuecomment-518514453","viewerDidAuthor":false}],"createdAt":"2019-07-02T10:12:37Z","number":1161,"state":"CLOSED","title":"Organization.has_in_members uses incorrect URL if called from repository instance","url":"https://github.com/PyGithub/PyGithub/issues/1161"},{"author":{"id":"MDQ6VXNlcjE2NjkwNzYw","is_bot":false,"login":"sudo-panda","name":"Baidyanath Kundu"},"body":"","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDUwNzQ5ODkzMQ==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"Yes, there is:\r\nhttps://pygithub.readthedocs.io/en/latest/github_objects/Repository.html?highlight=get_content#github.Repository.Repository.get_contents\r\n\r\nthe `ref` is the branch name","createdAt":"2019-07-02T03:01:21Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":5}}],"url":"https://github.com/PyGithub/PyGithub/issues/1157#issuecomment-507498931","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDUwNzUwMDIzMw==","author":{"login":"sudo-panda"},"authorAssociation":"NONE","body":"Ok thanks","createdAt":"2019-07-02T03:08:48Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1157#issuecomment-507500233","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDc1MDQ2NjY3OA==","author":{"login":"vaibhavi1321"},"authorAssociation":"NONE","body":"> Yes, there is:\r\n> https://pygithub.readthedocs.io/en/latest/github_objects/Repository.html?highlight=get_content#github.Repository.Repository.get_contents\r\n> \r\n> the `ref` is the branch name\r\n\r\nThanks a lot, your suggestion helped me as well to figure out how to get content from a specific branch.","createdAt":"2020-12-23T20:44:01Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1157#issuecomment-750466678","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs5O9CO8","author":{"login":"rahul-005"},"authorAssociation":"NONE","body":"URL = \"https://api.github.com/repos/{}/{}/contents/{}{}.csv?ref={}\".format(REPO_OWNER, REPO_NAME, git_file_path, csv_file, BRANCH_NAME)","createdAt":"2022-11-23T06:51:44Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_DOWN","users":{"totalCount":1}}],"url":"https://github.com/PyGithub/PyGithub/issues/1157#issuecomment-1324622780","viewerDidAuthor":false}],"createdAt":"2019-06-28T14:26:47Z","number":1157,"state":"CLOSED","title":"Is there a way to get the content of a file from a specific branch?","url":"https://github.com/PyGithub/PyGithub/issues/1157"},{"author":{"id":"MDQ6VXNlcjEzMTA4NzI=","is_bot":false,"login":"ddevault","name":"Drew DeVault"},"body":"Can you add tests to the PyPI package to make it easier for downstream maintainers to verify the package?","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDUwNTY5NjAzNg==","author":{"login":"s-t-e-v-e-n-k"},"authorAssociation":"COLLABORATOR","body":"They were purposely removed in an earlier PR because the package size is enormous with them included.","createdAt":"2019-06-26T02:49:20Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1152#issuecomment-505696036","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDUwNTY5NjI3Mg==","author":{"login":"ddevault"},"authorAssociation":"NONE","body":"Reviewed the relevant discussion, makes sense, thanks!","createdAt":"2019-06-26T02:50:32Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1152#issuecomment-505696272","viewerDidAuthor":false}],"createdAt":"2019-06-25T19:40:26Z","number":1152,"state":"CLOSED","title":"Add tests to MANIFEST.in","url":"https://github.com/PyGithub/PyGithub/issues/1152"},{"author":{"id":"MDQ6VXNlcjEzMTA4NzI=","is_bot":false,"login":"ddevault","name":"Drew DeVault"},"body":"```python\r\n>>> from github import Github\r\n>>> github = Github(\"oauth token\")\r\n>>> github.get_repo(\"ddevault/test-repo\") # GitHubException (404)\r\n```\r\n\r\nA similar request with curl succeeds:\r\n\r\n```\r\n$ curl -v -A 'PyGitHub/Python' \\\r\n    -H Accept:'application/vnd.github.v3+json' \\\r\n    -H Authorization:'token [redacted]' \\\r\n    https://api.github.com/repos/ddevault/test-repo # works\r\n```\r\n\r\nWhen trying to direct pygithub through mitmproxy to gather more information, it succeeds (200):\r\n\r\n```\r\n$ mitmproxy -m reverse:https:/api.github.com\r\n```\r\n\r\n```python\r\n>>> from github import Github\r\n>>> github = Github(\"oauth token\", base_url=\"http://localhost:8080\")\r\n>>> github.get_repo(\"ddevault/test-repo\") # works\r\n```","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDUwNDU0MDI4MA==","author":{"login":"ddevault"},"authorAssociation":"NONE","body":"Got it, it was reading my ~/.netrc and bunging things up. It probably should not do that.","createdAt":"2019-06-21T19:09:20Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1150#issuecomment-504540280","viewerDidAuthor":false}],"createdAt":"2019-06-21T17:20:28Z","number":1150,"state":"CLOSED","title":"Fetching a private repo fails (404)","url":"https://github.com/PyGithub/PyGithub/issues/1150"},{"author":{"id":"MDQ6VXNlcjIwNzQyOA==","is_bot":false,"login":"mabrowning","name":"Mark Browning"},"body":"I'm attempting to script automatically closing old Pull Requests, but letting users re-open them if they are still working on them. I don't want to *keep* closing PRs, so I want to check that a PR hasn't been re-opened before closing it. One way of doing that is to look through the list of \"issue events\", but first I need to use `PullRequest.as_issue()`, which makes a needless API request. \r\n\r\nOnly the issue number is needed for `GET /repos/:owner/:repo/issues/:issue_number/events`, so it should be possible to do directly from the `PullRequest` object. Any chance you could add that method? Similar to `PullRequest.get_issue_comments()` etc.","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDY1NDg5NjUyMA==","author":{"login":"1sfoerster"},"authorAssociation":"NONE","body":"i am trying to find the pull request reviewers and pull request comment authors\r\ncan run pull.get_issue_events\r\nI get \r\nValue is of type method!\r\nmethod has property \"__call__\" of type \"method-wrapper\"\r\nmethod has property \"__class__\" of type \"type\"\r\nmethod has property \"__delattr__\" of type \"method-wrapper\"\r\nmethod has property \"__dir__\" of type \"builtin_function_or_method\"\r\nmethod has property \"__doc__\" of type \"str\"\r\n  Here's the __doc__ value: \r\n  \"\\n        :calls: `GET /repos/:owner/:repo/issues/:issue_number/events <http://developer.github.com/v3/issues/events>`_\\n        :rtype: :class:`github.PaginatedList.PaginatedList` of :class:`github.IssueEvent.IssueEvent`\\n        \"\r\n\r\nmethod has property \"__eq__\" of type \"method-wrapper\"\r\nmethod has property \"__format__\" of type \"builtin_function_or_method\"\r\nmethod has property \"__func__\" of type \"function\"\r\nmethod has property \"__ge__\" of type \"method-wrapper\"\r\nmethod has property \"__get__\" of type \"method-wrapper\"\r\nmethod has property \"__getattribute__\" of type \"method-wrapper\"\r\nmethod has property \"__gt__\" of type \"method-wrapper\"\r\nmethod has property \"__hash__\" of type \"method-wrapper\"\r\nmethod has property \"__init__\" of type \"method-wrapper\"\r\nmethod has property \"__init_subclass__\" of type \"builtin_function_or_method\"\r\nmethod has property \"__le__\" of type \"method-wrapper\"\r\nmethod has property \"__lt__\" of type \"method-wrapper\"\r\nmethod has property \"__ne__\" of type \"method-wrapper\"\r\nmethod has property \"__new__\" of type \"builtin_function_or_method\"\r\nmethod has property \"__reduce__\" of type \"builtin_function_or_method\"\r\nmethod has property \"__reduce_ex__\" of type \"builtin_function_or_method\"\r\nmethod has property \"__repr__\" of type \"method-wrapper\"\r\nmethod has property \"__self__\" of type \"PullRequest\"\r\nmethod has property \"__setattr__\" of type \"method-wrapper\"\r\nmethod has property \"__sizeof__\" of type \"builtin_function_or_method\"\r\nmethod has property \"__str__\" of type \"method-wrapper\"\r\nmethod has property \"__subclasshook__\" of type \"builtin_function_or_method\"\r\n\r\nI know this pull request has four people involved ... author of the pull request (can get that) pull request merger, but can't find pull request reviewer or commenter\r\n","createdAt":"2020-07-07T14:19:38Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1149#issuecomment-654896520","viewerDidAuthor":false}],"createdAt":"2019-06-21T15:43:08Z","number":1149,"state":"CLOSED","title":"Expose `get_issue_events()` from `PullRequest`","url":"https://github.com/PyGithub/PyGithub/issues/1149"},{"author":{"id":"MDQ6VXNlcjE1MTYzNTk5","is_bot":false,"login":"jppiiroinen","name":""},"body":"There is a missing attribute for the license attribute which is returned when Repository API is called. At the moment there is only get_license function, but that makes another request.\r\n\r\nI have a PR for this issue.","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDUwNDM5NDY2OQ==","author":{"login":"jppiiroinen"},"authorAssociation":"NONE","body":"PR is here https://github.com/PyGithub/PyGithub/pull/1148","createdAt":"2019-06-21T11:36:59Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1147#issuecomment-504394669","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDUyMjk4MzE0NQ==","author":{"login":"stale"},"authorAssociation":"NONE","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","createdAt":"2019-08-20T12:04:32Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1147#issuecomment-522983145","viewerDidAuthor":false}],"createdAt":"2019-06-21T11:33:03Z","number":1147,"state":"CLOSED","title":"Missing support for license attribute in Repository","url":"https://github.com/PyGithub/PyGithub/issues/1147"},{"author":{"id":"MDQ6VXNlcjE4Mzk2NDU=","is_bot":false,"login":"choldgraf","name":"Chris Holdgraf"},"body":"Is there a way for PyGitHub to return results as a bulk data dump?\r\n\r\n## What I'd like\r\n\r\nTo be able to run a search query, and get a list of raw JSON, one for each item.\r\n\r\n## What I've tried\r\n\r\nI'll run a query with something like `search_issues(query)`, this returns a paginated list. I loop through the list, and on each \"Issue\" object I grab `raw_data` and turn it all into a DataFrame.\r\n\r\n## Where I've run into challenges\r\n\r\nI've found that returning a list of, e.g., issue objects and then looping through them individually takes a *lot* longer than if I just grab the JSON from the GitHub API directly. Is there some way to just get the whole dump of JSON objects at once rather than making an individual API request for each one?","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDUwNDYyMDUzOA==","author":{"login":"wangpeipei90"},"authorAssociation":"NONE","body":"You can probably try GitHub V4 graphql.","createdAt":"2019-06-22T02:49:01Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":1}}],"url":"https://github.com/PyGithub/PyGithub/issues/1145#issuecomment-504620538","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDUyMzI3NTkyMA==","author":{"login":"stale"},"authorAssociation":"NONE","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","createdAt":"2019-08-21T03:04:32Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1145#issuecomment-523275920","viewerDidAuthor":false}],"createdAt":"2019-06-20T18:42:25Z","number":1145,"state":"CLOSED","title":"What's the best way to get results in bulk?","url":"https://github.com/PyGithub/PyGithub/issues/1145"},{"author":{"id":"MDQ6VXNlcjU4MDUwODY=","is_bot":false,"login":"ronhab","name":""},"body":"For example:\r\n`g.get_repo('nteract/hydrogen').topics` return `None`\r\n\r\n`g.get_repo('nteract/hydrogen').get_topics()` return `['atom', 'data-science', 'hydrogen', 'ipython', 'jupyter', 'jupyter-kernels', 'nteract', 'repl']`\r\n\r\nIf I add `headers={\"Accept\": Consts.mediaTypeTopicsPreview}` to the repo request, I can get the topics list in the attribute as well.\r\n\r\nI can create a PR if needed.","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDUwMzkxOTg1Nw==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"PR Please, I will review","createdAt":"2019-06-20T07:56:34Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1143#issuecomment-503919857","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDUyMjQ2NTY1OQ==","author":{"login":"stale"},"authorAssociation":"NONE","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","createdAt":"2019-08-19T08:23:12Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1143#issuecomment-522465659","viewerDidAuthor":false}],"createdAt":"2019-06-18T11:44:47Z","number":1143,"state":"CLOSED","title":"topics attribute always return None, even when get_topics() return a list of topics","url":"https://github.com/PyGithub/PyGithub/issues/1143"},{"author":{"id":"MDQ6VXNlcjE4ODYzNjA=","is_bot":false,"login":"michaeldorner","name":"Michael Dorner"},"body":"[According to changes in version 1.19.0 ](https://github.com/PyGithub/PyGithub/blob/master/doc/changes.rst#version-1190-september-8th-2013-akfishs-edition) there should be a `save` method for making `github.GithubObject.GithubObject` persistent. \r\n\r\nHowever, I cannot find the related code [where I would expect it](https://github.com/PyGithub/PyGithub/blob/master/github/GithubObject.py) (the [related documentation](https://pygithub.readthedocs.io/en/latest/github_objects.html#github.GithubObject.GithubObject) does not also not list this functionality). \r\n\r\nWhat happened? I would love to have this feature!\r\n","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDUyMjIxOTU3NQ==","author":{"login":"stale"},"authorAssociation":"NONE","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","createdAt":"2019-08-17T09:05:39Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_DOWN","users":{"totalCount":1}}],"url":"https://github.com/PyGithub/PyGithub/issues/1142#issuecomment-522219575","viewerDidAuthor":false}],"createdAt":"2019-06-17T16:06:21Z","number":1142,"state":"CLOSED","title":"Persistence for PyGithubObjects from v1.19.0?","url":"https://github.com/PyGithub/PyGithub/issues/1142"},{"author":{"id":"MDQ6VXNlcjEwNTgyNDg=","is_bot":false,"login":"sarum9in","name":""},"body":"It would be nice to have a way to use GitRelease.upload_asset() with a blob of data in memory without having to write it to disk first.\r\n\r\nCurrently it is implemented via https://github.com/PyGithub/PyGithub/blob/master/github/Requester.py#L360 which uses `open()`.","comments":[],"createdAt":"2019-06-17T09:59:47Z","number":1140,"state":"CLOSED","title":"Feature request: upload_asset with data in memory","url":"https://github.com/PyGithub/PyGithub/issues/1140"},{"author":{"id":"MDQ6VXNlcjE2ODYwMzUw","is_bot":false,"login":"siddhant1999","name":"Siddhant Jain"},"body":"Since profile are public is there a way to use PyGithub to get the public data on users without needing their password, i.e. only having their username?\r\n\r\n```\r\ng = Github(\"user\", \"password\")\r\ng.get_user()\r\n```\r\n... fails if you do not provide a password\r\n","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDUwMjAxOTYwNg==","author":{"login":"rfverbruggen"},"authorAssociation":"NONE","body":"You should try it this way:\r\n\r\n```\r\n# unauthenticated access\r\ng = Github()\r\n\r\n# get unauthenticated user info\r\ng.get_user(\"username\")\r\n\r\n# get unauthenticated user repo info\r\ng.get_user(\"username\").get_repos():\r\n```","createdAt":"2019-06-14T08:29:06Z","includesCreatedEdit":true,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":2}}],"url":"https://github.com/PyGithub/PyGithub/issues/1138#issuecomment-502019606","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDUwMzI3MDg1NA==","author":{"login":"siddhant1999"},"authorAssociation":"NONE","body":"Thanks","createdAt":"2019-06-18T19:07:42Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1138#issuecomment-503270854","viewerDidAuthor":false}],"createdAt":"2019-06-13T21:36:57Z","number":1138,"state":"CLOSED","title":"Get unauthenticated user's data","url":"https://github.com/PyGithub/PyGithub/issues/1138"},{"author":{"is_bot":true,"login":"app/"},"body":"Hello,\r\n\r\nSorry for the long title.\r\n\r\nEssentially, I am attempting to write a script which will iterate over every repository I own. Then for a specific string and if found in any of the files within the repo; replace it.\r\n\r\nIs this possible? I am aware I need to also use `update_file`. Could somebody point me in the right direction?\r\n\r\nSo far I have got:\r\n\r\n```python\r\n\"\"\"\r\nA Python 3.7 script to remove a specific string from all file(s) and repos containing a specified string.\r\n\"\"\"\r\n\r\nACCESS_TOKEN = \"Sometoken\"\r\nSTR_TO_REPLACE = \"The string to find in a file and remove.\"\r\n\r\nfrom github import Github\r\n\r\ng = Github(ACCESS_TOKEN)\r\nfor repo in g.get_user().get_repos(type=\"owner\"):\r\n    print(repo.name)\r\n    # Fetch all content from the repo.\r\n    repo_contents = repo.get_contents(\"\")\r\n    # Show all repo contents.\r\n    print(repo_contents)\r\n    for file in repo_contents:\r\n        print(file.name)\r\n        try:\r\n            # Search the file for the specified string and replace it with something else.\r\n            # Not sure how to do this yet. This is where I need some help :-)\r\n        except:\r\n            # Some error which occurs if the string is not found. \r\n            # Tell user the string isn't in the file.\r\n            print(f\"The string {STR_TO_REPLACE} wasn't found in {file.name}\")\r\n```\r\n\r\nAny help would be appreciated.\r\n","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDUwMzkyMDc0MA==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"`re`?","createdAt":"2019-06-20T07:59:21Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1137#issuecomment-503920740","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDUwMzk2NDU3NA==","author":{"login":""},"authorAssociation":"NONE","body":"> `re`?\r\n\r\nThanks for replying @sfdye. I believe I need to use [` contents = repo.get_contents()`](https://pygithub.readthedocs.io/en/latest/examples/Repository.html#get-a-specific-content-file) for each file. Obtain the decoded base64 contents `contents = contents.decoded_content` and then use `re` to search it?","createdAt":"2019-06-20T10:02:53Z","includesCreatedEdit":true,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1137#issuecomment-503964574","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDUwMzk2NDg3MQ==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"Yes it should work.","createdAt":"2019-06-20T10:03:48Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1137#issuecomment-503964871","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDUwMzk4Mzk0MQ==","author":{"login":""},"authorAssociation":"NONE","body":"@sfdye Could I not just use `if STR_TO_REMOVE in file_data` ? `file_data` being the base64 decoded contents.","createdAt":"2019-06-20T11:09:01Z","includesCreatedEdit":true,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1137#issuecomment-503983941","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDUwNDAxMTE5OA==","author":{"login":""},"authorAssociation":"NONE","body":"@sfdye I just got the following error:\r\n`github.GithubException.GithubException: 403 {'message': 'This API returns blobs up to 1 MB in size. The requested blob is too large to fetch via the API, but you can use the Git Data API to request blobs up to 100 MB in size.', 'errors': [{'resource': 'Blob', 'field': 'data', 'code': 'too_large'}], 'documentation_url': 'https://developer.github.com/v3/repos/contents/#get-contents'}`\r\n\r\nCan I catch this exception using:\r\n```python\r\ntry:\r\n    pass\r\nexcept github.GithubException:\r\n    pass\r\n```\r\n\r\n?","createdAt":"2019-06-20T12:44:30Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1137#issuecomment-504011198","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDUwNDAyMTQxNw==","author":{"login":""},"authorAssociation":"NONE","body":"Sorted. Thanks for the help.","createdAt":"2019-06-20T13:15:40Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1137#issuecomment-504021417","viewerDidAuthor":false}],"createdAt":"2019-06-13T19:58:49Z","number":1137,"state":"CLOSED","title":"Replacing a specified string, Iterating over every file within every repo.","url":"https://github.com/PyGithub/PyGithub/issues/1137"},{"author":{"id":"MDQ6VXNlcjMxMjU2MjM1","is_bot":false,"login":"micahsteinberg","name":"Micah Steinberg"},"body":"When I do\r\n```\r\ng = Github(\"xxx\")\r\nrepo = g.get_repo(\"xxx\")\r\n\r\nfor comm in repo.get_commits(since=datetime).reversed:\r\n    ....\r\n```\r\nit only goes through the most recent 30 results in reverse order.\r\n\r\nI was able to fix this with\r\n```\r\ndef reverse_github_results(paginated_list):\r\n    for i in range(paginated_list.totalCount//30, -1, -1):\r\n        page = paginated_list.get_page(i)\r\n        page.reverse()\r\n        for item in page:\r\n            yield item\r\n```\r\nbut this possibly runs a bit slower and I thought I should let you guys know\r\n","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDUyMDE2OTUwNA==","author":{"login":"stale"},"authorAssociation":"NONE","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","createdAt":"2019-08-10T18:16:46Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1136#issuecomment-520169504","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs5wCowS","author":{"login":"engn33r"},"authorAssociation":"NONE","body":"This was still an issue with v2.1.1 but the fix above worked for me :+1:\r\n\r\nIt would be great if this could be fixed in the library itself, with an example showing reversed usage in the docs.","createdAt":"2024-01-06T16:04:34Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1136#issuecomment-1879739410","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs5wCuh5","author":{"login":"EnricoMi"},"authorAssociation":"COLLABORATOR","body":"I'd be surprised this does not work, there are some unit tests that cover this. Maybe test data have to be recorded again. Reopening, contribution welcome.","createdAt":"2024-01-06T17:34:11Z","includesCreatedEdit":true,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1136#issuecomment-1879763065","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs53y7ZY","author":{"login":"etiennnr"},"authorAssociation":"NONE","body":"Can confirm this is still a problem for me, using version `1.59.1` though","createdAt":"2024-03-20T15:24:15Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1136#issuecomment-2009839192","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs5366L9","author":{"login":"EnricoMi"},"authorAssociation":"COLLABORATOR","body":"Can you confirm with latest release?","createdAt":"2024-03-21T10:55:14Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1136#issuecomment-2011931389","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs538o2V","author":{"login":"etiennnr"},"authorAssociation":"NONE","body":"Yes, Just tried with v.2.2.0 and got the same result\r\n\r\nHowever, my \"global\" `per_page` setting is set to 40. I tried setting it back to the default (30), and then it actually started from the last item of the `PaginatedList`! \r\n\r\nSo this actually seem to be somehow related to how the `reversed` algorithm deals with a different from the default `per_page` setting.","createdAt":"2024-03-21T14:02:22Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1136#issuecomment-2012384661","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs54NjX1","author":{"login":"engn33r"},"authorAssociation":"NONE","body":"For reference, I did not set `per_page` so I was using the default of 30 when I encountered this issue. But I was testing on only one repo with over 30 issues. It could make sense to test with repos with different numbers of issues to see if that is a factor.","createdAt":"2024-03-24T13:58:57Z","includesCreatedEdit":true,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1136#issuecomment-2016818677","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs54N31S","author":{"login":"EnricoMi"},"authorAssociation":"COLLABORATOR","body":"Confirmed, the `per_page` surfaced a bug: #2929","createdAt":"2024-03-24T18:43:17Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"HEART","users":{"totalCount":1}}],"url":"https://github.com/PyGithub/PyGithub/issues/1136#issuecomment-2016902482","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs6L0gN1","author":{"login":"Felixoid"},"authorAssociation":"CONTRIBUTOR","body":"This is what we faced in https://github.com/ClickHouse/ClickHouse/pull/69538\r\n\r\nOur default is `per_page=100`. With `.reversed`, we only get 100 commits when it's 201.","createdAt":"2024-09-12T09:52:10Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1136#issuecomment-2345796469","viewerDidAuthor":false}],"createdAt":"2019-06-11T17:47:23Z","number":1136,"state":"CLOSED","title":"Paginated list reversed only gives the first page of results backwards","url":"https://github.com/PyGithub/PyGithub/issues/1136"},{"author":{"id":"MDQ6VXNlcjEwMTk2Nzc=","is_bot":false,"login":"shamoons","name":"Shamoon Siddiqui"},"body":"I am doing:\r\n```\r\n            query = \"extension:py+repo:eriklindernoren/PyTorch-GAN\"\r\n            code_files = self.g.search_code(query)\r\n```\r\n\r\nThe error I get, however is:\r\n```\r\nGET https://api.github.com/search/code?q=extension%3Apy%2Brepo%3Aeriklindernoren%2FPyTorch-GAN {'Authorization': 'token (oauth token removed)', 'User-Agent': 'PyGithub/Python'} None ==> 422 {'server': 'GitHub.com', 'date': 'Sun, 09 Jun 2019 18:00:30 GMT', 'content-type': 'application/json; charset=utf-8', 'content-length': '309', 'status': '422 Unprocessable Entity', 'x-ratelimit-limit': '30', 'x-ratelimit-remaining': '9', 'x-ratelimit-reset': '1560103242', 'cache-control': 'no-cache', 'x-oauth-scopes': 'repo', 'x-accepted-oauth-scopes': '', 'x-github-media-type': 'github.v3; format=json', 'access-control-expose-headers': 'ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Reset, X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type', 'access-control-allow-origin': '*', 'strict-transport-security': 'max-age=31536000; includeSubdomains; preload', 'x-frame-options': 'deny', 'x-content-type-options': 'nosniff', 'x-xss-protection': '1; mode=block', 'referrer-policy': 'origin-when-cross-origin, strict-origin-when-cross-origin', 'content-security-policy': \"default-src 'none'\", 'x-github-request-id': 'DF64:1A57:2693796:4CCC116:5CFD493D'} {\"message\":\"Validation Failed\",\"errors\":[{\"message\":\"Search text is required when searching source code. Searches that use qualifiers only are not allowed. Were you searching for something else?\",\"resource\":\"Search\",\"field\":\"q\",\"code\":\"invalid\"}],\"documentation_url\":\"https://developer.github.com/v3/search/\"}\r\n```\r\n\r\nHowever, the URL, when loaded, gives a valid API response.","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDUxOTYzOTk3Mg==","author":{"login":"stale"},"authorAssociation":"NONE","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","createdAt":"2019-08-08T18:40:50Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1134#issuecomment-519639972","viewerDidAuthor":false}],"createdAt":"2019-06-09T18:02:22Z","number":1134,"state":"CLOSED","title":"Issue with search_code","url":"https://github.com/PyGithub/PyGithub/issues/1134"},{"author":{"is_bot":true,"login":"app/"},"body":"Basically, I am trying to upload a zipfile with create_file using pygithub.\r\n\r\nIf I were to use :\r\n```myfork.create_file(path_to_zip, \"Upload Zip\", zipfile_contents)```\r\nHow would I get 'zipfile_contents' to actually be the zipfile, or is there an alternative method.\r\nThanks","comments":[],"createdAt":"2019-06-09T07:32:10Z","number":1133,"state":"CLOSED","title":"How to upload zip file to repository?","url":"https://github.com/PyGithub/PyGithub/issues/1133"},{"author":{"id":"MDQ6VXNlcjE3NDY1ODM3","is_bot":false,"login":"harbya","name":""},"body":"Hi team,\r\nI need to ask a question.\r\nI just following the PyGithub introduction documentation step by step but it looks like I could be facing proxy issues.\r\nfrom github import Github\r\nuser=\"xxx\" \r\nPass=\"xxx\"\r\ng = Github(user,Pass)\r\nor using an access token\r\n#g = Github(\"access_token\")\r\nGithub Enterprise with custom hostname\r\ng = Github(base_url=\"https://github.mylabs.com.au/api/v3\")\r\ng.get_user() \r\nAuthenticatedUser(login=None)\r\nfor repo in g.get_user().get_repos(): \r\nprint(repo.name) \r\nrepo.edit(has_wiki=False) \r\n# to see all the available attributes and methods \r\nprint(dir(repo))\r\n \r\nthen I get a timeout error: \r\n\r\nConnectTimeout: HTTPSConnectionPool(host='github.mylabs.com.au', port=443): Max retries exceeded with url: /api/v3/user/repos (Caused by ConnectTimeoutError(<urllib3.connection.VerifiedHTTPSConnection object at 0x000000000737AAC8>, 'Connection to github.mylabs.com.au timed out. (connect timeout=15)'))\r\n\r\nMy question is whether I can set the proxy used by PyGithub... \r\n\r\nThe problem is that I've been looking everywhere and it looks like a lot of people seems to have hit the same problem but could not see anyone providing a fix. For example before I was testing with the REQUESTS package (as shown below) and there was a way to set the proxy:\r\nimport requests \r\nproxies = { \r\n'http':'http://proxy.mycompany.corp:8080', \r\n'https': 'https://proxy.mycompany.corp:8080', \r\n}\r\nr = requests.get('https://github.mylabs.com.au/iagcl/iag-edh-data/pulls', proxies = proxies)\r\n\r\nIf you please advise me how to do similar thing with the PyGithub would be great... Thanks again ...\r\n","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDUxNjY0OTE5NA==","author":{"login":"stale"},"authorAssociation":"NONE","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","createdAt":"2019-07-31T00:48:15Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1131#issuecomment-516649194","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDUzNDAyNTcxMg==","author":{"login":"yangyang-zhang"},"authorAssociation":"NONE","body":"I have the same problem. Have you solved it?\r\n\r\n","createdAt":"2019-09-23T09:33:07Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1131#issuecomment-534025712","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDUzNDAzMjU4NA==","author":{"login":"harbya"},"authorAssociation":"NONE","body":"make  sure you set the below correctly:\r\ng = Github('git-userid','password')","createdAt":"2019-09-23T09:54:16Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1131#issuecomment-534032584","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDUzNDAzMzUzOQ==","author":{"login":"yangyang-zhang"},"authorAssociation":"NONE","body":"Can I add a proxy?  Because Network barrier\r\n\r\n\r\n","createdAt":"2019-09-23T09:57:12Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":1}}],"url":"https://github.com/PyGithub/PyGithub/issues/1131#issuecomment-534033539","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDUzNDAzNTI2Mg==","author":{"login":"harbya"},"authorAssociation":"NONE","body":"I gave up trying with proxy but also using the base_url seems to work:\r\ng = Github(base_url=\"https://github.company.com/api/v3\")\r\n\r\nAlso maybe raise a tickect to github support. I found out they are quite good...  \r\n","createdAt":"2019-09-23T10:02:22Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1131#issuecomment-534035262","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDUzNDAzNzQxOQ==","author":{"login":"yangyang-zhang"},"authorAssociation":"NONE","body":"Thank you for your advice.\r\n","createdAt":"2019-09-23T10:09:29Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1131#issuecomment-534037419","viewerDidAuthor":false}],"createdAt":"2019-06-01T00:34:56Z","number":1131,"state":"CLOSED","title":"PyGithub and proxy issues","url":"https://github.com/PyGithub/PyGithub/issues/1131"},{"author":{"id":"MDQ6VXNlcjQzMzIwMTE3","is_bot":false,"login":"8-bit-fox","name":""},"body":"I have repositories with >30 webhooks. If i run\r\n```python\r\ncount = 0\r\nfor hook in repository.get_hooks():\r\n   print(count)\r\n   count += 1\r\n```\r\nI end up with 30 hooks. However, if I start requesting additional pages, then I get the full number of hooks.\r\n```python\r\nhooks = []\r\npage = 0\r\nwhile repo.get_hooks().get_page(page):\r\n   hooks += list(repo.get_hooks().get_page(page))\r\n   page += 1\r\nprint( len(hooks) ) # returns, e.g., 58\r\n```\r\n\r\nMy suspicion is that something with the iterator is wrong or I am using the library wrongly. Please provide me with some hints.\r\n\r\nI tried to implement a test case but I couldn't run the create_hook() method successfully. Is there any mock or a documentation available on how to create unit tests for these cases?\r\n\r\nBest regards\r\nSebastian","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDUxNjA3NjY2Mg==","author":{"login":"stale"},"authorAssociation":"NONE","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","createdAt":"2019-07-29T17:05:19Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1130#issuecomment-516076662","viewerDidAuthor":false}],"createdAt":"2019-05-30T16:28:29Z","number":1130,"state":"CLOSED","title":"Repository.get_hooks() returns PaginatedList which does not iterate correctly","url":"https://github.com/PyGithub/PyGithub/issues/1130"},{"author":{"id":"MDQ6VXNlcjU0NTkzMzI=","is_bot":false,"login":"glutanimate","name":"Aristotelis"},"body":"I think it could be quite helpful if we could toggle repository features like Wikis, Issues, and Sponsorships on and off via PyGithub. A possible use case would be setting up multiple new repositories with the same settings.\r\n\r\nP.S.: Thanks for all your hard work on this project. It's been a great boon in my development flow.","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDQ5NjU0MTQyNg==","author":{"login":"res0nance"},"authorAssociation":"CONTRIBUTOR","body":"Wiki and issues can be toggled via https://github.com/PyGithub/PyGithub/blob/4a37860bc4a569a8c3bf6b0ea11fb416d2205c04/github/Repository.py#L1254","createdAt":"2019-05-28T14:29:39Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":2}}],"url":"https://github.com/PyGithub/PyGithub/issues/1128#issuecomment-496541426","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQ5NzI0MTM2Mw==","author":{"login":"glutanimate"},"authorAssociation":"NONE","body":"@res0nance Thanks for the pointer, completely missed that!\r\n\r\nThough it seems like toggling sponsorship state at least is not possible at the moment.\r\n\r\n@sfdye Perhaps we should change the scope of this issue to solely address sponsorships?","createdAt":"2019-05-30T07:56:03Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1128#issuecomment-497241363","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQ5NzI4NjgxMg==","author":{"login":"res0nance"},"authorAssociation":"CONTRIBUTOR","body":"@glutanimate Sponsorships are unfortunately not part of the API yet","createdAt":"2019-05-30T10:38:34Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1128#issuecomment-497286812","viewerDidAuthor":false}],"createdAt":"2019-05-26T18:33:06Z","number":1128,"state":"CLOSED","title":"[Feature Request] Ability to toggle repository features","url":"https://github.com/PyGithub/PyGithub/issues/1128"},{"author":{"id":"MDQ6VXNlcjY5MjI3MDk=","is_bot":false,"login":"ahmad88me","name":"Ahmad Alobaid"},"body":"Is there a way to fake GitHub APIs like some kind of a mock? \r\nsomething like \r\n```\r\ng = Github(fake=True)\r\nrepo = g.get_repo('non-existing/repo', default={'name': 'repo', ...})\r\n```\r\n","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDUxNTAyOTY4NQ==","author":{"login":"stale"},"authorAssociation":"NONE","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","createdAt":"2019-07-25T12:48:26Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1127#issuecomment-515029685","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDU1OTA3NDAyNg==","author":{"login":"nuarhu"},"authorAssociation":"NONE","body":"Any information on this? Or maybe a bit more inline documentation in the test classes could already help to decide whether they can be used for such tests.","createdAt":"2019-11-27T12:48:57Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1127#issuecomment-559074026","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDU1OTQxODA1NQ==","author":{"login":"ahmad88me"},"authorAssociation":"NONE","body":"@nuarhu actually the test cases use the actual github APIs. This mock suggestions wouldn't call GitHub APIs. ","createdAt":"2019-11-28T09:39:36Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1127#issuecomment-559418055","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDY1NTY2NjIwOQ==","author":{"login":"steveoh"},"authorAssociation":"NONE","body":"It would be great to be able to test using some classes without calling actual api's. I'm trying to create a new issue and it is not very intuitive.","createdAt":"2020-07-08T17:51:46Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1127#issuecomment-655666209","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDY3NDU4NTQ5MA==","author":{"login":"ChaiBapchya"},"authorAssociation":"NONE","body":"@ahmad88me did you get a workaround for mocking Github APIs? I scoured the internet but to no avail. ","createdAt":"2020-08-16T22:24:32Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1127#issuecomment-674585490","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDY3NTI3NzQzMg==","author":{"login":"ahmad88me"},"authorAssociation":"NONE","body":"@ChaiBapchya I didn't get around it yet. I will try to do so soon. ","createdAt":"2020-08-18T06:16:37Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1127#issuecomment-675277432","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDY4ODAyMzE1MQ==","author":{"login":"ChaiBapchya"},"authorAssociation":"NONE","body":"Sure thanks. @ahmad88me any update or any pointers?","createdAt":"2020-09-07T04:21:00Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1127#issuecomment-688023151","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDcwODYyNzUyMg==","author":{"login":"ahmad88me"},"authorAssociation":"NONE","body":"@ChaiBapchya  \r\n@steveoh \r\n@nuarhu \r\n\r\nIf you are still interested in the mock option, I've created this pull request.\r\n\r\nhttps://github.com/PyGithub/PyGithub/pull/1720\r\n","createdAt":"2020-10-14T19:58:04Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1127#issuecomment-708627522","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs6HpJw2","author":{"login":"kwk"},"authorAssociation":"NONE","body":"Hello. I'm very interested in this for many reasons:\r\n\r\n* I want to run tests without having access to github, e.g. when working offline.\r\n* I want to be able to create \"golden files\". That is a mode where you actually call the real Github API and store the results for later use in tests. This is helpful in case the API changes.\r\n* I don't want to pass along credentials just to run tests on github.\r\n\r\nIn order to deal with some of the shortcomings of changing API responses, changing UUIDs and time values I've once created a library one can use in the Go programming language: https://github.com/kwk/golden . Some of the ideas I use to this day also in Python. For example the on-the-fly updating of golden files I use [here](https://github.com/fedora-llvm-team/llvm-snapshots/blob/5d8b9af3b0f7e861678ef7825390c44eb2afde23/snapshot_manager/tests/build_status_test.py#L24-L29). This allows me to set the `write_golden_file` argument of the [`get_cause_from_build_log`](https://github.com/fedora-llvm-team/llvm-snapshots/blob/5d8b9af3b0f7e861678ef7825390c44eb2afde23/snapshot_manager/snapshot_manager/build_status.py#L233-L258) function to `True` and have the golden file written that contains the expected output that I want to use [here](https://github.com/fedora-llvm-team/llvm-snapshots/blob/5d8b9af3b0f7e861678ef7825390c44eb2afde23/snapshot_manager/tests/build_status_test.py#L32-L35) where I read the file back in. Of course, you need to run the test twice, one time when you write the golden files and the next time when you just consume the file.\r\n\r\nMaybe this wasn't written as clear as I wanted it to be but luckily a former colleague ([@jarifibrahim](https://github.com/jarifibrahim)) wrote and Article about this here: https://medium.com/@jarifibrahim/golden-files-why-you-should-use-them-47087ec994bf","createdAt":"2024-08-08T12:34:28Z","includesCreatedEdit":true,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":1}}],"url":"https://github.com/PyGithub/PyGithub/issues/1127#issuecomment-2275712054","viewerDidAuthor":false}],"createdAt":"2019-05-26T12:46:33Z","number":1127,"state":"CLOSED","title":"Mock for testing","url":"https://github.com/PyGithub/PyGithub/issues/1127"},{"author":{"id":"MDQ6VXNlcjIyNjMwNjg0","is_bot":false,"login":"Abdur-rahmaanJ","name":"Abdur-Rahmaan Janhangeer"},"body":"How to get followers and following?","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDQ5NjMzNTc1Mw==","author":{"login":"Hanaasagi"},"authorAssociation":"CONTRIBUTOR","body":"@Abdur-rahmaanJ Is this helpful to you?\r\n\r\n```Python\r\nfrom github import Github\r\n\r\naccess_token = open('./.token').read().strip()\r\ng = Github(access_token)\r\nuser = g.get_user(\"ghost\")\r\nfollowers = user.get_followers()  # or get_following()\r\nfor folllower in followers:\r\n    print(f'username: {folllower.login}, nickname: {folllower.name}')\r\n```","createdAt":"2019-05-28T01:47:57Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":1}}],"url":"https://github.com/PyGithub/PyGithub/issues/1126#issuecomment-496335753","viewerDidAuthor":false}],"createdAt":"2019-05-25T03:57:29Z","number":1126,"state":"CLOSED","title":"Get followers","url":"https://github.com/PyGithub/PyGithub/issues/1126"},{"author":{"id":"MDQ6VXNlcjExNTU1MjE3","is_bot":false,"login":"hemanthsavasere","name":"Hemanth Savasere"},"body":"Hi, \r\nI just wanted to know if there is any way to delete a tag using pygithub as after deleting the release, the tag still remains. Searched in docs for git tag, had only methods of creation but not deletion.\r\n\r\nThanks","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDQ5NDY2MjkzNw==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"https://developer.github.com/v3/git/tags/\r\nhttps://developer.github.com/v3/repos/#list-tags\r\n\r\nI just checked the Github API docs, it seems currently no way to delete a tag from API. One work-around is to do it in command line, i.e. delete the tag locally and push to remote, in Python you can use something like `GitPython`.","createdAt":"2019-05-22T05:56:26Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1124#issuecomment-494662937","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQ5NDY2MzM5NQ==","author":{"login":"hemanthsavasere"},"authorAssociation":"NONE","body":"Thanks, @sfdye.","createdAt":"2019-05-22T05:58:34Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1124#issuecomment-494663395","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDUwMjgxNTQ1MQ==","author":{"login":"lukasmiciulis"},"authorAssociation":"NONE","body":"You can find an API supported way to delete a ref, which seems like it is the same thing.\r\n\r\nhttps://stackoverflow.com/questions/7247414/delete-a-tag-with-github-v3-api","createdAt":"2019-06-17T19:18:12Z","includesCreatedEdit":true,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1124#issuecomment-502815451","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs6FQ5LN","author":{"login":"lokesh-wise"},"authorAssociation":"NONE","body":"This is the way to delete a tag in PyGithub\r\n\r\n```\r\nref = repo.get_git_ref('tags/{tag_name}')\r\nref.delete()\r\n```","createdAt":"2024-07-18T07:17:30Z","includesCreatedEdit":true,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1124#issuecomment-2235798221","viewerDidAuthor":false}],"createdAt":"2019-05-22T04:32:18Z","number":1124,"state":"CLOSED","title":"Delete tag in Github ","url":"https://github.com/PyGithub/PyGithub/issues/1124"},{"author":{"id":"MDQ6VXNlcjMzODgy","is_bot":false,"login":"artgoldberg","name":"Arthur P Goldberg"},"body":"At the documentation for [get_branch](https://pygithub.readthedocs.io/en/latest/github_objects/Repository.html#github.Repository.Repository.get_branch), the link to\r\n\r\n    Calls: GET /repos/:owner/:repo/branches/:branch\r\n\r\nin the API should go to this [link](https://developer.github.com/v3/repos/branches/#get-branch) instead of http://developer.github.com/v3/repos\r\n","comments":[],"createdAt":"2019-05-18T14:48:51Z","number":1123,"state":"CLOSED","title":"Small docs problem","url":"https://github.com/PyGithub/PyGithub/issues/1123"},{"author":{"id":"MDQ6VXNlcjUxNjAwNg==","is_bot":false,"login":"g2010a","name":""},"body":"As a developer interested in cutting-edge github API features, I want a way to append custom `Accepts` headers to all requests so that I don't have to wait for them (the headers) to be hard-coded into the library.\r\n\r\nSpecifically, I've been wanting to query with the [starfox preview](https://developer.github.com/v4/previews/) header and been unable to so far.","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDUxMTgyODYzOQ==","author":{"login":"stale"},"authorAssociation":"NONE","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","createdAt":"2019-07-16T14:00:24Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1122#issuecomment-511828639","viewerDidAuthor":false}],"createdAt":"2019-05-17T13:45:47Z","number":1122,"state":"CLOSED","title":"Set custom request headers","url":"https://github.com/PyGithub/PyGithub/issues/1122"},{"author":{"id":"MDQ6VXNlcjEwMTk2Nzc=","is_bot":false,"login":"shamoons","name":"Shamoon Siddiqui"},"body":"Specifically, I'm doing\r\n\r\n```\r\nrepo.get_contents(file_content.path)\r\n```\r\n\r\nAnd I want the returned header as well","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDQ5MzI3MzgyMQ==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"response.raw_headers","createdAt":"2019-05-17T00:17:34Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1121#issuecomment-493273821","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQ5MzQ2OTg2OQ==","author":{"login":"shamoons"},"authorAssociation":"NONE","body":"Is response returned?","createdAt":"2019-05-17T14:16:33Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1121#issuecomment-493469869","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQ5NDAzOTA2Mg==","author":{"login":"shamoons"},"authorAssociation":"NONE","body":"If I do:\r\n```\r\nresponse = repo.get_contents(file_content.path)\r\nprint(response.raw_headers)\r\n```\r\n\r\nIt doesn't work. What am I missing @sfdye ?","createdAt":"2019-05-20T15:35:11Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1121#issuecomment-494039062","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQ5NDA0ODYyNQ==","author":{"login":"wangpeipei90"},"authorAssociation":"NONE","body":"response.raw_headers works at least to me. Check the response object and make sure it is a valid result and not None","createdAt":"2019-05-20T15:59:48Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1121#issuecomment-494048625","viewerDidAuthor":false}],"createdAt":"2019-05-16T17:27:15Z","number":1121,"state":"CLOSED","title":"Is it possible to get back header data from a request?","url":"https://github.com/PyGithub/PyGithub/issues/1121"},{"author":{"id":"MDQ6VXNlcjM0MTI1NDY=","is_bot":false,"login":"thattejada","name":"Diego Tejada"},"body":"I used repo.add_to_collaborators to add massively some users to some repositories, but now I have to revert the action for those who haven't accepted the invitation yet, how can I list the invitations and cancel them?\r\nIs there a way to use with PyGithub this API [example](https://developer.github.com/v3/repos/invitations/#delete-a-repository-invitation)?","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDUwNTY5OTMzMA==","author":{"login":"s-t-e-v-e-n-k"},"authorAssociation":"COLLABORATOR","body":"The invitations API is only partially implemented, but I'll look at adding code to list and delete invitations for repositories today.","createdAt":"2019-06-26T03:08:31Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":1}},{"content":"HOORAY","users":{"totalCount":1}}],"url":"https://github.com/PyGithub/PyGithub/issues/1120#issuecomment-505699330","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDUwNTg2MjQwNg==","author":{"login":"thattejada"},"authorAssociation":"NONE","body":"Thank you so much @s-t-e-v-e-n-k !","createdAt":"2019-06-26T12:55:06Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1120#issuecomment-505862406","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDUwNjMyNzE4OQ==","author":{"login":"s-t-e-v-e-n-k"},"authorAssociation":"COLLABORATOR","body":"https://github.com/PyGithub/PyGithub/pull/1156 is the first part of this work.","createdAt":"2019-06-27T12:34:54Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"HOORAY","users":{"totalCount":1}}],"url":"https://github.com/PyGithub/PyGithub/issues/1120#issuecomment-506327189","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDUwNjMzNzcwOQ==","author":{"login":"thattejada"},"authorAssociation":"NONE","body":"Wow! this feature is going so fast!","createdAt":"2019-06-27T13:06:14Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1120#issuecomment-506337709","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDUxNDQyMjc4Mw==","author":{"login":"thattejada"},"authorAssociation":"NONE","body":"Thank you so much @s-t-e-v-e-n-k, finally I could test the new Repository methods and they work like a charm! ","createdAt":"2019-07-23T23:42:19Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1120#issuecomment-514422783","viewerDidAuthor":false}],"createdAt":"2019-05-15T22:41:34Z","number":1120,"state":"CLOSED","title":"How to remove sent invitations","url":"https://github.com/PyGithub/PyGithub/issues/1120"},{"author":{"id":"MDQ6VXNlcjY0NTAw","is_bot":false,"login":"jamiegs","name":"Jamie Snell"},"body":"It appears that the Deployments API isn't currently in PyGithub. This API has been around for years. Is there any chance it could get added to PyGithub?\r\n\r\nhttps://developer.github.com/v3/repos/deployments/","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDUyMDEzODIyMA==","author":{"login":"s-t-e-v-e-n-k"},"authorAssociation":"COLLABORATOR","body":"I'm going to work on this in my spare time, but I fear it's going to be as large as the branch protection rabbit hole I fell into -- see 171cc567ae4b4850a6270d3ed728a2f995a7462f","createdAt":"2019-08-10T10:32:40Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1117#issuecomment-520138220","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDU4NTIyMzUzOQ==","author":{"login":"eMerzh"},"authorAssociation":"NONE","body":"@s-t-e-v-e-n-k no pressure here, but did you manage to get this working?\r\ni'm very interested in this for a personal project :) ","createdAt":"2020-02-12T14:12:36Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1117#issuecomment-585223539","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDU4NjA0MTg1MQ==","author":{"login":"s-t-e-v-e-n-k"},"authorAssociation":"COLLABORATOR","body":"I worked on this yesterday, and I think I have enough of it implemented, but I need to find some time to write tests before I propose a PR.","createdAt":"2020-02-14T00:40:11Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1117#issuecomment-586041851","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDU4NjA5NTIyMg==","author":{"login":"s-t-e-v-e-n-k"},"authorAssociation":"COLLABORATOR","body":"@eMerzh @jamiegs I've pushed up a branch linked above that implements it, but I'm not certain about a few sharp edges. Are you guys able to test it out in the real world and tell me what feels awkward/wrong?","createdAt":"2020-02-14T04:42:49Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1117#issuecomment-586095222","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDU4NjE0MzE4Mg==","author":{"login":"eMerzh"},"authorAssociation":"NONE","body":"awesome @s-t-e-v-e-n-k ❤️ ... i'll try to give it a go in the next week, but it seems to have everything i need :)","createdAt":"2020-02-14T08:01:37Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1117#issuecomment-586143182","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDU5MjI1MzIyMA==","author":{"login":"s-t-e-v-e-n-k"},"authorAssociation":"COLLABORATOR","body":"@eMerzh Have you had a chance to test this? Merging it soon would be awesome.","createdAt":"2020-02-28T00:47:42Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1117#issuecomment-592253220","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDU5NTY3OTA1NQ==","author":{"login":"eMerzh"},"authorAssociation":"NONE","body":"hey, sorry, bit late, but it seems to work as expected :)\r\n\r\nthanks for this ...\r\n","createdAt":"2020-03-06T09:24:02Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1117#issuecomment-595679055","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDU5NTcwNTE1NA==","author":{"login":"s-t-e-v-e-n-k"},"authorAssociation":"COLLABORATOR","body":"@eMerzh Thanks for the confirmation, I'll push up a PR soon and we can get this in a proper release.","createdAt":"2020-03-06T10:28:34Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":1}},{"content":"HEART","users":{"totalCount":1}}],"url":"https://github.com/PyGithub/PyGithub/issues/1117#issuecomment-595705154","viewerDidAuthor":false}],"createdAt":"2019-05-10T22:30:15Z","number":1117,"state":"CLOSED","title":"Feature Request: Deployments API","url":"https://github.com/PyGithub/PyGithub/issues/1117"},{"author":{"id":"MDQ6VXNlcjE5Njk0NTg=","is_bot":false,"login":"tjoneslo","name":"Thomas Jones-Low"},"body":"https://developer.github.com/v3/teams/#get-team-by-name\r\n\r\nThis API call is missing. ","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDUwMDI2NDUxMw==","author":{"login":"Adarsh-Shrivastava-001"},"authorAssociation":"NONE","body":"Hi I am new to the community and I would like to work on this issue.\r\nCould anyone please explain this issue to me.\r\n\r\nWhat exactly do i need to do ?","createdAt":"2019-06-10T01:38:17Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1116#issuecomment-500264513","viewerDidAuthor":false}],"createdAt":"2019-05-10T13:53:55Z","number":1116,"state":"CLOSED","title":"Organization needs get_team_by_slug()","url":"https://github.com/PyGithub/PyGithub/issues/1116"},{"author":{"id":"MDQ6VXNlcjc0NzI1Njk=","is_bot":false,"login":"242jainabhi","name":"Abhishek Jain"},"body":"I am trying to fetch the number of open issues using the following code in my Flask application.\r\n```\r\ng = Github()\r\n\r\nrepo = g.get_repo(repo_name)\r\n\r\nopen_pulls = repo.get_pulls(state='open')\r\nopen_pull_titles = [pull.title for pull in open_pulls]\r\n\r\nopen_issues = repo.get_issues(state='open')\r\nopen_issues = [issue for issue in open_issues if issue.title not in open_pull_titles]\r\n```\r\nand I get the error `github.GithubException.RateLimitExceededException: `.\r\n\r\n`repo.get_issues()` returns the count of open issues plus pull requests.\r\n\r\n","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDQ5MDEyNDM1OQ==","author":{"login":"wangpeipei90"},"authorAssociation":"NONE","body":"If I understand correctly, the return type of get_issues and get_pulls is PaginatedList.   It uses `yield element` for iteration. So the request is not performed until `open_issues = [issue for issue in open_issues if issue.title not in open_pull_titles]`.  If your token limits are reached, it will throw the RateLimitExceedException.","createdAt":"2019-05-07T15:17:03Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":2}}],"url":"https://github.com/PyGithub/PyGithub/issues/1115#issuecomment-490124359","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQ5MDEzNzgxNw==","author":{"login":"242jainabhi"},"authorAssociation":"NONE","body":"Is there any workaround?","createdAt":"2019-05-07T15:49:51Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1115#issuecomment-490137817","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQ5MDMxNzc0Mw==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"`g = Github()`\r\nDid you authenticate at this step? public api has less rate limits.","createdAt":"2019-05-08T01:58:44Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1115#issuecomment-490317743","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQ5MDQ3ODY3Mg==","author":{"login":"242jainabhi"},"authorAssociation":"NONE","body":"> `g = Github()`\r\n> Did you authenticate at this step? public api has less rate limits.\r\n\r\nYes, I did authenticate that step.","createdAt":"2019-05-08T13:08:14Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1115#issuecomment-490478672","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQ5MDUyOTc3MA==","author":{"login":"wangpeipei90"},"authorAssociation":"NONE","body":"@242jainabhi \r\nThe things I usually do when reaching the rate limit is just holding off the program for some time. \r\n\r\nInstead of using the list comprehension, I may use just a common loop with try-catch. Once a rate limit exception is caught, call the sleep function to wait for a while and check the rate limit with GitHub API again.  The code only proceeds if the rate limit comes back to 5000.","createdAt":"2019-05-08T15:19:51Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1115#issuecomment-490529770","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQ5MDc0ODc3MQ==","author":{"login":"242jainabhi"},"authorAssociation":"NONE","body":"I am sorry for missing a part of the code. Below is the code in continuation to the code in first comment.\r\nI am accessing `created_at` date for all the open issues. This will again access the API for all the issues and hence end up making calls more than the limit.\r\n```\r\nfor issue in open_issues:\r\n    created_at = issue.created_at.timestamp()\r\n```\r\n\r\nI could not find a solution to this problem. Even if I authenticate the requests, the limit will be exhausted if the issues are too many (let's say 2000).","createdAt":"2019-05-09T05:26:55Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1115#issuecomment-490748771","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQ5MzEzOTAwOA==","author":{"login":"shamoons"},"authorAssociation":"NONE","body":"Something like this:\r\n```\r\nrepositories = g.search_repositories(\r\n    query='stars:>=10 fork:true language:python')\r\n```\r\nAlso triggers the rate limit.  I assume, it's doing the pagination automatically and that's triggering the rate limit? Is there any way for me to do it manually so I can pause?","createdAt":"2019-05-16T16:28:40Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1115#issuecomment-493139008","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQ5MzMwNTI0Mw==","author":{"login":"wangpeipei90"},"authorAssociation":"NONE","body":"I now realize that this is a real issue. \r\nOne possible workaround could be code snippet like the below. I have not tried it yet, let me know whether it works or not.\r\n\r\n```python\r\niter_obj=iter(open_issues) ## PaginatedList is a generator\r\n while True:\r\n    try:   \r\n        issue=next(iter_obj) \r\n        ## do something\r\n    except StopIteration:\r\n        break  # loop end\r\n    except github.GithubException.RateLimitExceededException:\r\n        sleep(3600) # sleep 1 hour\r\n        ## check token limits\r\n        continue\r\n```","createdAt":"2019-05-17T03:23:58Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":2}},{"content":"THUMBS_DOWN","users":{"totalCount":4}}],"url":"https://github.com/PyGithub/PyGithub/issues/1115#issuecomment-493305243","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDUwNjczNTE5Mg==","author":{"login":"eelco"},"authorAssociation":"NONE","body":"@wangpeipei90 Does not work.","createdAt":"2019-06-28T13:32:16Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1115#issuecomment-506735192","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDUyNDU4NDYyOA==","author":{"login":"benjaminvanrenterghem"},"authorAssociation":"NONE","body":"For some reason this behavior is highly unpredictable and it's maddening.\r\nMy program can effectively cycle and preemptively call the ratelimit api to check if it adheres within the limits for one to two hours before randomly giving a 403.\r\n\r\nSome native rate limit adherence would be a warm welcome here. Having to implement sleeps based on intuition when your application decides to spill the beans after two hours of running smoothly should not be expected behavior.\r\n\r\n```\r\n File \"word.py\", line 126, in get_stargazers_inner\r\n    for i in repo.get_stargazers_with_dates():\r\n  File \"/usr/local/lib/python3.6/dist-packages/github/PaginatedList.py\", line 62, in __iter__\r\n    newElements = self._grow()\r\n  File \"/usr/local/lib/python3.6/dist-packages/github/PaginatedList.py\", line 74, in _grow\r\n    newElements = self._fetchNextPage()\r\n  File \"/usr/local/lib/python3.6/dist-packages/github/PaginatedList.py\", line 199, in _fetchNextPage\r\n    headers=self.__headers\r\n  File \"/usr/local/lib/python3.6/dist-packages/github/Requester.py\", line 276, in requestJsonAndCheck\r\n    return self.__check(*self.requestJson(verb, url, parameters, headers, input, self.__customConnection(url)))\r\n  File \"/usr/local/lib/python3.6/dist-packages/github/Requester.py\", line 287, in __check\r\n    raise self.__createException(status, responseHeaders, output)\r\ngithub.GithubException.RateLimitExceededException: 403 {'message': 'API rate limit exceeded for user ID xxxx.', 'documentation_url': 'https://developer.github.com/v3/#rate-limiting'}\r\n```\r\n\r\nAdditionally, one could use the backoff library -- however it can not account for the current position in item iteration and will therefore start from scratch again.","createdAt":"2019-08-24T22:15:52Z","includesCreatedEdit":true,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1115#issuecomment-524584628","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDUyNTU0Nzk0Mg==","author":{"login":"docktermj"},"authorAssociation":"NONE","body":"Well,  I visited https://github.com/settings/tokens and did a \"Regenerate token\".   That got me rolling again, but I'm not sure for how long.\r\n\r\nI used the \"token\" method of authentication.  Example:\r\n```python\r\n    github = Github(\"19exxxxxxxxxxxxxxxxxxxxxe3ab065edae6470\")\r\n```","createdAt":"2019-08-28T01:40:27Z","includesCreatedEdit":true,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1115#issuecomment-525547942","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDU0MTMzOTI0Nw==","author":{"login":"maxsharabayko"},"authorAssociation":"NONE","body":"See also #1233 for excessive requests.","createdAt":"2019-10-12T16:16:11Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1115#issuecomment-541339247","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDU2NDYyMTE5MQ==","author":{"login":"stale"},"authorAssociation":"NONE","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","createdAt":"2019-12-11T16:22:00Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1115#issuecomment-564621191","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDU3MjEzMDc0Mg==","author":{"login":"Xiaoven"},"authorAssociation":"NONE","body":"@wangpeipei90 \r\n\r\nIt works for me, but the `RateLimitExceededException` is not under `GithubException` in the version I used. Here is my code.\r\n\r\n```python\r\nfrom github import RateLimitExceededException\r\n\r\nissues = g.search_issues(query=keyword, **{'repo': repo, 'type': 'pr'})\r\n            iter_obj = iter(issues)\r\n            while True:\r\n                try:\r\n                    pr = next(iter_obj)\r\n                    with open(pr_file, 'a+') as f:\r\n                        f.write(pr.html_url + '\\n')\r\n                    count += 1\r\n                    logger.info(count)\r\n                except StopIteration:\r\n                    break  # loop end\r\n                except RateLimitExceededException:\r\n                    search_rate_limit = g.get_rate_limit().search\r\n                    logger.info('search remaining: {}'.format(search_rate_limit.remaining))\r\n                    reset_timestamp = calendar.timegm(search_rate_limit.reset.timetuple())\r\n                    # add 10 seconds to be sure the rate limit has been reset\r\n                    sleep_time = reset_timestamp - calendar.timegm(time.gmtime()) + 10\r\n                    time.sleep(sleep_time)\r\n                    continue\r\n```\r\n\r\nHere is part of the log:\r\n\r\n```\r\n2020/01/08 23:42:09 PM - INFO - search remaining: 0\r\n```","createdAt":"2020-01-08T15:50:00Z","includesCreatedEdit":true,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":8}}],"url":"https://github.com/PyGithub/PyGithub/issues/1115#issuecomment-572130742","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDgwMTU5NTgwMQ==","author":{"login":"sparkingdark"},"authorAssociation":"NONE","body":"Thanks, @Xiaoven I am finally able to solve this with your code.","createdAt":"2021-03-18T03:39:08Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1115#issuecomment-801595801","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs48YYb0","author":{"login":"EnricoMi"},"authorAssociation":"COLLABORATOR","body":"Ideally, PyGithub should throttle its requests transparently so that iterating over the paginated list (and accessing attributes that trigger more requests) does not fire off too quickly and get interrupted by GitHub's secondary rate limit (too frequent requests). Then no user code is required to wrap around these calls: #1989 #2145\r\n\r\nThe overall rate limit still needs to be monitored and obeyed by user code, better pro-actively and not reacting on exceptions.","createdAt":"2022-01-14T11:08:00Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":1}}],"url":"https://github.com/PyGithub/PyGithub/issues/1115#issuecomment-1013024500","viewerDidAuthor":false}],"createdAt":"2019-05-07T13:18:28Z","number":1115,"state":"CLOSED","title":"github.GithubException.RateLimitExceededException","url":"https://github.com/PyGithub/PyGithub/issues/1115"},{"author":{"id":"MDQ6VXNlcjU5MjI0MzA=","is_bot":false,"login":"chanukov","name":"Alon Chanukov"},"body":"I have had a file that i checkout using pygithub\r\nwhich was working great with 1.35\r\nwe tried moving to latest pygithub and the simple line\r\n        self.github_api.git_repo.get_file_contents(urllib.quote('file with spaces.txt') , \"master\")\r\nfails\r\n\r\n        self.github_api.git_repo.get_file_contents(urllib.quote('/iOS/Supporting Files/Info.plist') , \"master\")  \r\nalso fails, yet works in 1.35 \r\n\r\nThis is blocking us from moving to later versions, as it breaks our release automation scripts.\r\n","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDQ4OTg4NDYzOQ==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"See #614 since 1.36 we did the quote for you. Just remove `urllib.quote` and it should work.","createdAt":"2019-05-07T02:38:41Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1114#issuecomment-489884639","viewerDidAuthor":false}],"createdAt":"2019-05-06T18:07:35Z","number":1114,"state":"CLOSED","title":"PyGithub-1.36 and later cannot get files in a folder or file with a space in name","url":"https://github.com/PyGithub/PyGithub/issues/1114"},{"author":{"id":"MDQ6VXNlcjE1MDgxOTk4","is_bot":false,"login":"wangsanshi123","name":"wss"},"body":"  File \"C:\\Users\\lenovo\\AppData\\Local\\conda\\conda\\envs\\python1v3\\lib\\site-packages\\github\\MainClass.py\", line 123, in rate_limiting\r\n    self.get_rate_limit()\r\n  File \"C:\\Users\\lenovo\\AppData\\Local\\conda\\conda\\envs\\python1v3\\lib\\site-packages\\github\\MainClass.py\", line 145, in get_rate_limit\r\n    '/rate_limit'\r\n  File \"C:\\Users\\lenovo\\AppData\\Local\\conda\\conda\\envs\\python1v3\\lib\\site-packages\\github\\Requester.py\", line 172, in requestJsonAndCheck\r\n    return self.__check(*self.requestJson(verb, url, parameters, headers, input, cnx))\r\n  File \"C:\\Users\\lenovo\\AppData\\Local\\conda\\conda\\envs\\python1v3\\lib\\site-packages\\github\\Requester.py\", line 213, in requestJson\r\n    return self.__requestEncode(cnx, verb, url, parameters, headers, input, encode)\r\n  File \"C:\\Users\\lenovo\\AppData\\Local\\conda\\conda\\envs\\python1v3\\lib\\site-packages\\github\\Requester.py\", line 252, in __requestEncode\r\n    status, responseHeaders, output = self.__requestRaw(cnx, verb, url, requestHeaders, encoded_input)\r\n  File \"C:\\Users\\lenovo\\AppData\\Local\\conda\\conda\\envs\\python1v3\\lib\\site-packages\\github\\Requester.py\", line 277, in __requestRaw\r\n    requestHeaders\r\n  File \"C:\\Users\\lenovo\\AppData\\Local\\conda\\conda\\envs\\python1v3\\lib\\http\\client.py\", line 1239, in request\r\n    self._send_request(method, url, body, headers, encode_chunked)\r\n  File \"C:\\Users\\lenovo\\AppData\\Local\\conda\\conda\\envs\\python1v3\\lib\\http\\client.py\", line 1285, in _send_request\r\n    self.endheaders(body, encode_chunked=encode_chunked)\r\n  File \"C:\\Users\\lenovo\\AppData\\Local\\conda\\conda\\envs\\python1v3\\lib\\http\\client.py\", line 1234, in endheaders\r\n    self._send_output(message_body, encode_chunked=encode_chunked)\r\n  File \"C:\\Users\\lenovo\\AppData\\Local\\conda\\conda\\envs\\python1v3\\lib\\http\\client.py\", line 1026, in _send_output\r\n    self.send(msg)\r\n  File \"C:\\Users\\lenovo\\AppData\\Local\\conda\\conda\\envs\\python1v3\\lib\\http\\client.py\", line 964, in send\r\n    self.connect()\r\n  File \"C:\\Users\\lenovo\\AppData\\Local\\conda\\conda\\envs\\python1v3\\lib\\http\\client.py\", line 1400, in connect\r\n    server_hostname=server_hostname)\r\n  File \"C:\\Users\\lenovo\\AppData\\Local\\conda\\conda\\envs\\python1v3\\lib\\ssl.py\", line 407, in wrap_socket\r\n    _context=self, _session=session)\r\n  File \"C:\\Users\\lenovo\\AppData\\Local\\conda\\conda\\envs\\python1v3\\lib\\ssl.py\", line 817, in __init__\r\n    self.do_handshake()\r\n  File \"C:\\Users\\lenovo\\AppData\\Local\\conda\\conda\\envs\\python1v3\\lib\\ssl.py\", line 1077, in do_handshake\r\n    self._sslobj.do_handshake()\r\n  File \"C:\\Users\\lenovo\\AppData\\Local\\conda\\conda\\envs\\python1v3\\lib\\ssl.py\", line 689, in do_handshake\r\n    self._sslobj.do_handshake()\r\nsocket.timeout: _ssl.c:835: The handshake operation timed out\r\n","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDQ4OTM4MTc3OQ==","author":{"login":"wangsanshi123"},"authorAssociation":"NONE","body":"i used pygithub to connect to github three days ago successfully ,but today the same code does not work,it is a problem of github or pygithub? any guys can help ? i will appreciate it.","createdAt":"2019-05-05T02:22:59Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1113#issuecomment-489381779","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQ4OTM4MjI2Ng==","author":{"login":"wangsanshi123"},"authorAssociation":"NONE","body":"it works with browser,but do not with the code that ever works","createdAt":"2019-05-05T02:30:41Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1113#issuecomment-489382266","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDUwODMyMTM0Nw==","author":{"login":"stale"},"authorAssociation":"NONE","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","createdAt":"2019-07-04T03:08:26Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1113#issuecomment-508321347","viewerDidAuthor":false}],"createdAt":"2019-05-05T02:19:50Z","number":1113,"state":"CLOSED","title":"can not connect to github with ssl","url":"https://github.com/PyGithub/PyGithub/issues/1113"},{"author":{"id":"MDQ6VXNlcjEyNDc0OTg=","is_bot":false,"login":"Aricg","name":"Aric Gardner"},"body":"https://pygithub.readthedocs.io/en/latest/github_objects/Team.html#github.Team.Team.remove_membership\r\n\r\nhttps://developer.github.com/v3/teams/members/#remove-team-membership\r\n\r\nCorrect me if I'm wrong, but this does not fully implement the api.\r\nThe API has team_id and username\r\n    DELETE /teams/:team_id/memberships/:username\r\n\r\nPyGithub's Implementation only has username \r\nParameters: | member – github.NamedUser.NamedUser\r\n\r\nI cannot pass team_id so I am forced to remove user from all teams.","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDQ5MDY2OTE4Ng==","author":{"login":"Aricg"},"authorAssociation":"NONE","body":"Okay, this can be closed as invalid.\r\nOnly in trying to write a patch for the code did I see that \r\nin the method remove_membership\r\n(self.url) already has the proper team ID in it.\r\neg: https://api.github.com/teams/SomeNumber\r\nSo I dont need to pass the team id.\r\n\r\n                  team = org.get_team(team_id)\r\n                  team.remove_membership(user_object)\r\n","createdAt":"2019-05-08T22:10:01Z","includesCreatedEdit":true,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1112#issuecomment-490669186","viewerDidAuthor":false}],"createdAt":"2019-05-03T20:39:00Z","number":1112,"state":"CLOSED","title":"remove_from_membership(member) missing team_id","url":"https://github.com/PyGithub/PyGithub/issues/1112"},{"author":{"id":"MDQ6VXNlcjQ0MjY4OTI2","is_bot":false,"login":"c1cloudsafeguarding","name":""},"body":"I am using the search_code function and am occasionally seeing the remaining rate limit for the search API decrease by more than 1 after the function is called. According to the Github API documentation, it should decrease by 1 per request and are allowed 30 requests per minute. So my 1 request using search_code shouldn't be exceeding the rate limit however it often does. Has anyone else experienced this kind of issue or are there any ideas for why this function call is showing as more than 1 request against the rate limit?","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDUwODkzNDI2Mg==","author":{"login":"stale"},"authorAssociation":"NONE","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","createdAt":"2019-07-06T15:27:02Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1109#issuecomment-508934262","viewerDidAuthor":false}],"createdAt":"2019-05-02T14:03:23Z","number":1109,"state":"CLOSED","title":"Rapid decrease of search API rate limit after 1 function call","url":"https://github.com/PyGithub/PyGithub/issues/1109"},{"author":{"id":"MDQ6VXNlcjE0MjcwNjM=","is_bot":false,"login":"Powersource","name":"Powersource"},"body":"The repo this happened on is https://github.com/chromium/chromium\r\n\r\n```\r\nTraceback (most recent call last):\r\n<my code pruned>\r\n    activity = repo.get_stats_commit_activity()\r\n  File \"/usr/local/lib/python3.6/site-packages/github/Repository.py\", line 2384, in get_stats_commit_acti\r\nvity\r\n    self.url + \"/stats/commit_activity\"\r\n  File \"/usr/local/lib/python3.6/site-packages/github/Requester.py\", line 264, in requestJsonAndCheck\r\n    return self.__check(*self.requestJson(verb, url, parameters, headers, input, self.__customConnection(\r\nurl)))\r\n  File \"/usr/local/lib/python3.6/site-packages/github/Requester.py\", line 324, in requestJson\r\n    return self.__requestEncode(cnx, verb, url, parameters, headers, input, encode)\r\n  File \"/usr/local/lib/python3.6/site-packages/github/Requester.py\", line 377, in __requestEncode\r\n    status, responseHeaders, output = self.__requestRaw(cnx, verb, url, requestHeaders, encoded_input)\r\n  File \"/usr/local/lib/python3.6/site-packages/github/Requester.py\", line 416, in __requestRaw\r\n    return self.__requestRaw(original_cnx, verb, url, requestHeaders, input)\r\n  File \"/usr/local/lib/python3.6/site-packages/github/Requester.py\", line 416, in __requestRaw\r\n    return self.__requestRaw(original_cnx, verb, url, requestHeaders, input)\r\n  File \"/usr/local/lib/python3.6/site-packages/github/Requester.py\", line 416, in __requestRaw\r\n    return self.__requestRaw(original_cnx, verb, url, requestHeaders, input)\r\n  [Previous line repeated 956 more times]\r\n  File \"/usr/local/lib/python3.6/site-packages/github/Requester.py\", line 401, in __requestRaw\r\n    response = cnx.getresponse()\r\n  File \"/usr/local/lib/python3.6/site-packages/github/Requester.py\", line 109, in getresponse\r\n    r = verb(url, headers=self.headers, data=self.input, timeout=self.timeout, verify=self.verify, allow_\r\nredirects=False)\r\n  File \"/usr/local/lib/python3.6/site-packages/requests/sessions.py\", line 546, in get\r\n    return self.request('GET', url, **kwargs)\r\n  File \"/usr/local/lib/python3.6/site-packages/requests/sessions.py\", line 533, in request\r\n    resp = self.send(prep, **send_kwargs)\r\n  File \"/usr/local/lib/python3.6/site-packages/requests/sessions.py\", line 646, in send\r\n    r = adapter.send(request, **kwargs)\r\n  File \"/usr/local/lib/python3.6/site-packages/requests/adapters.py\", line 533, in send\r\n    return self.build_response(request, resp)\r\n  File \"/usr/local/lib/python3.6/site-packages/requests/adapters.py\", line 265, in build_response\r\n    response = Response()\r\n  File \"/usr/local/lib/python3.6/site-packages/requests/models.py\", line 607, in __init__\r\n    self.headers = CaseInsensitiveDict()\r\n  File \"/usr/local/lib/python3.6/site-packages/requests/structures.py\", line 44, in __init__\r\n    self.update(data, **kwargs)\r\n  File \"/usr/local/lib/python3.6/_collections_abc.py\", line 839, in update\r\n    if isinstance(other, Mapping):\r\n  File \"/usr/local/lib/python3.6/abc.py\", line 184, in __instancecheck__\r\n    if subclass in cls._abc_cache:\r\n  File \"/usr/local/lib/python3.6/_weakrefset.py\", line 75, in __contains__\r\n    return wr in self.data\r\nRecursionError: maximum recursion depth exceeded in comparison\r\n```\r\n\r\nTbf that page [doesn't even load for me in the browser](https://github.com/chromium/chromium/graphs/contributors) but it would be nice to get a nicer (and earlier, took a while for it to crash) error message.","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDQ4ODY0NjM1Mw==","author":{"login":"Powersource"},"authorAssociation":"NONE","body":"By my measurement it takes at least 40 minutes for it to crash (and to give the user the option to catch it).","createdAt":"2019-05-02T12:02:56Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1108#issuecomment-488646353","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDUzMTA4NzQ0MA==","author":{"login":"stale"},"authorAssociation":"NONE","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","createdAt":"2019-09-13T03:48:28Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1108#issuecomment-531087440","viewerDidAuthor":false}],"createdAt":"2019-05-02T10:13:37Z","number":1108,"state":"CLOSED","title":"Crashing due to recursion when calling get_stats_commit_activity on large repos","url":"https://github.com/PyGithub/PyGithub/issues/1108"},{"author":{"id":"MDQ6VXNlcjczMzI4ODI=","is_bot":false,"login":"ohmkay","name":"Caleb"},"body":"I'm working with Github Enterprise API and I cannot get a full list of private repositories without this parameter being allowed.  Only 'since' works here","comments":[],"createdAt":"2019-05-01T23:26:19Z","number":1106,"state":"CLOSED","title":"Add 'visibility' parameter to get_repos","url":"https://github.com/PyGithub/PyGithub/issues/1106"},{"author":{"id":"MDQ6VXNlcjc0NzI1Njk=","is_bot":false,"login":"242jainabhi","name":"Abhishek Jain"},"body":"```\r\nfrom github import Github\r\ng = Github('Access_Token')\r\nrepo = g.get_repo('pygithub/pygithub')\r\nopen_issues = repo.get_issues(state='open')\r\nprint(open_issues.totalCount)\r\n```\r\n\r\nThis code prints 77, but github repo shows 60 open issues.\r\n\r\nWhat is this extra count about?\r\n![open_issues](https://user-images.githubusercontent.com/7472569/57015479-a3931200-6c32-11e9-82b9-1154567c083d.JPG)\r\n","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDQ4ODUyNzkwMA==","author":{"login":"wangpeipei90"},"authorAssociation":"NONE","body":"My guess is that it counts open pull request as well. By default, pull requests are also regarded as issues.","createdAt":"2019-05-02T01:13:14Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1105#issuecomment-488527900","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQ4ODUzNDYyMg==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"@wangpeipei90 Yes, exactly as explained by the official docs:\r\nhttps://developer.github.com/v3/issues/#list-issues-for-a-repository\r\n\r\n@242jainabhi \r\nSeem this is consistent with the API usage, I am gonna think this is not a bug.\r\n\r\nYou can identify PR by inspecting whether the response contains the `pull_request` key I guess. ","createdAt":"2019-05-02T02:14:12Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1105#issuecomment-488534622","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQ4ODU3MzYwMQ==","author":{"login":"242jainabhi"},"authorAssociation":"NONE","body":"@wangpeipei90 @sfdye \r\nThanks for the clarification. It now makes sense to me.","createdAt":"2019-05-02T07:14:46Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1105#issuecomment-488573601","viewerDidAuthor":false}],"createdAt":"2019-05-01T11:30:51Z","number":1105,"state":"CLOSED","title":"totalCount shows wrong number of open issues","url":"https://github.com/PyGithub/PyGithub/issues/1105"},{"author":{"id":"MDQ6VXNlcjQ3NTY2MTI5","is_bot":false,"login":"gjabouley-invn","name":"Geoffroy Jabouley"},"body":"Hello\r\n\r\nwe are still facing regular 502 API errors although we use 1.43.6 version with a retry set to 10.\r\nIt seems to happen most of the time when getting the \"email\" field of a user.\r\n\r\n```\r\n File \"/home/abalone/abalone_github/git/src/venv/local/lib/python2.7/site-packages/github/NamedUser.py\", line 145, in email\r\n    self._completeIfNotSet(self._email)\r\n  File \"/home/abalone/abalone_github/git/src/venv/local/lib/python2.7/site-packages/github/GithubObject.py\", line 263, in _completeIfNotSet\r\n    self._completeIfNeeded()\r\n  File \"/home/abalone/abalone_github/git/src/venv/local/lib/python2.7/site-packages/github/GithubObject.py\", line 267, in _completeIfNeeded\r\n    self.__complete()\r\n  File \"/home/abalone/abalone_github/git/src/venv/local/lib/python2.7/site-packages/github/GithubObject.py\", line 272, in __complete\r\n    self._url.value\r\n  File \"/home/abalone/abalone_github/git/src/venv/local/lib/python2.7/site-packages/github/Requester.py\", line 275, in requestJsonAndCheck\r\n    return self.__check(*self.requestJson(verb, url, parameters, headers, input, self.__customConnection(url)))\r\n  File \"/home/abalone/abalone_github/git/src/venv/local/lib/python2.7/site-packages/github/Requester.py\", line 286, in __check\r\n    raise self.__createException(status, responseHeaders, output)\r\nGithubException: 502 {u'message': u'Server Error'}\r\n```\r\n\r\nAny suggestions?","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDQ4Njc0NjQ1MA==","author":{"login":"allevin"},"authorAssociation":"CONTRIBUTOR","body":"@gjabouley-invn you might turn on [logging](https://pygithub.readthedocs.io/en/latest/utilities.html#logging) and see what is being sent/received from Github.  \r\n\r\nVerify that the data you are sending meets the api documentation..","createdAt":"2019-04-25T16:34:19Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1103#issuecomment-486746450","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQ4OTYzOTc1OQ==","author":{"login":"gjabouley-invn"},"authorAssociation":"CONTRIBUTOR","body":"it seems that providing an integer to `retry` paramter of __init__ function might not be enough:\r\n```python\r\nGithub.__init__ (self, token, retry = 10)\r\n```\r\n\r\nAfter reading some urllib3 documentation:\r\n- https://urllib3.readthedocs.io/en/latest/reference/urllib3.util.html#module-urllib3.util.retry\r\n- https://stackoverflow.com/a/35504626\r\n\r\nWe are now trying following retry configuration, to enable retry on 502 return status code:\r\n```python\r\nGithub.__init__ (self, token, retry = Retry (total = 10, status_forcelist = (500, 502, 504), backoff_factor = 0.3))\r\n```","createdAt":"2019-05-06T14:24:13Z","includesCreatedEdit":true,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1103#issuecomment-489639759","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQ4OTg3OTE3NQ==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"Adding @isouza-daitan here\r\n\r\nDoes `int` really work? I see the unit test in #1002 only covered `Retry` object case.","createdAt":"2019-05-07T02:10:40Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":1}}],"url":"https://github.com/PyGithub/PyGithub/issues/1103#issuecomment-489879175","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQ5MjY1MDUxNg==","author":{"login":"gjabouley-invn"},"authorAssociation":"CONTRIBUTOR","body":"It has been way more stable in the past week since the change from int to Retry ","createdAt":"2019-05-15T13:18:13Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1103#issuecomment-492650516","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDUxMTIwMzY1OQ==","author":{"login":"stale"},"authorAssociation":"NONE","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","createdAt":"2019-07-14T13:38:03Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1103#issuecomment-511203659","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDUxMTMwMjcxNQ==","author":{"login":"gjabouley-invn"},"authorAssociation":"CONTRIBUTOR","body":"Closing the issue, but i think it could make sense to somehow document that Retry() using only `int` is not enough to deal with regular Github API 50x errors.\r\n\r\nThis seems a reasonable config:\r\n```python\r\nGithub.__init__ (self, token, retry = Retry (total = 10, status_forcelist = (500, 502, 504), backoff_factor = 0.3))```","createdAt":"2019-07-15T07:42:51Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1103#issuecomment-511302715","viewerDidAuthor":false}],"createdAt":"2019-04-25T15:26:12Z","number":1103,"state":"CLOSED","title":"Regular 502 even with 1.43.6","url":"https://github.com/PyGithub/PyGithub/issues/1103"},{"author":{"id":"MDQ6VXNlcjU1NTU0","is_bot":false,"login":"phako","name":"Jens Georg"},"body":"It seems that it is missing the \"Accept\" : \"application/vnd.github.symmetra-preview+json\" header which is added for the edit call\r\n\r\nAdditionally, if you pass it and have \"api_preview = True\" it will be overwritten ","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDUwNDk3NTg0Ng==","author":{"login":"stale"},"authorAssociation":"NONE","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","createdAt":"2019-06-24T11:48:28Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1101#issuecomment-504975846","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDUwNDk5MjI4Mg==","author":{"login":"phako"},"authorAssociation":"NONE","body":"Yes, sorry, I'm still struggling with the tests.","createdAt":"2019-06-24T12:40:01Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1101#issuecomment-504992282","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDUxNTIwNzc3NA==","author":{"login":"WilliamKluge"},"authorAssociation":"NONE","body":"Any known workarounds for this? I'm facing the same issue currently.","createdAt":"2019-07-25T20:45:29Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1101#issuecomment-515207774","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDUxNTM0NTE1OQ==","author":{"login":"phako"},"authorAssociation":"NONE","body":"@WilliamKluge I proposed a fix in https://github.com/PyGithub/PyGithub/pull/1102 but failed to get the tests working afterwards","createdAt":"2019-07-26T07:39:21Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1101#issuecomment-515345159","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDUxNTU0NjAzNQ==","author":{"login":"WilliamKluge"},"authorAssociation":"NONE","body":"I was able to get the test cases working with the added header for the label by modifying the replay data to also have the header. However, despite the test cases passing when I installed it into the project I found this issue in it did not resolve the problem.","createdAt":"2019-07-26T18:00:18Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1101#issuecomment-515546035","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDUzNDY4MjIxNQ==","author":{"login":"stale"},"authorAssociation":"NONE","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","createdAt":"2019-09-24T18:14:08Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1101#issuecomment-534682215","viewerDidAuthor":false}],"createdAt":"2019-04-25T11:26:53Z","number":1101,"state":"CLOSED","title":"get_labels/get_label does not return description","url":"https://github.com/PyGithub/PyGithub/issues/1101"},{"author":{"id":"MDQ6VXNlcjM5ODg5","is_bot":false,"login":"yarikoptic","name":"Yaroslav Halchenko"},"body":"#1031 recently placed `tests/` outside of the `github` package. The main reasoning, if I got it right from #672, is the size -- tests indeed add up to the distribution.  I personally from time to time  do run tests of the package I am \"questioning\", which cannot be done if no `tests/` shipped.  To my knowledge, many (if not most) packages do ship `tests` subpackages as part of their packages. \r\nMoreover, my use case is actually to consider using `github.tests.Framework`  in our ([datalad](http://datalad.org)) tests to verify correct operation of our code which makes use of the `github` package.   I am not sure if that might be advised against, but now I wouldn't even be able to do so since there is no installed `github.tests` module.  If you see `Framework` to be potentially reused by 3rd party packages like ours, and if you insist that no `tests/` shipped as part of the `github` package, may be it makes sense then to move `Framework` components to e.g. `github.testing` (analogous to `numpy.testing` etc)?","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDQ5MTAxNzQ5Mg==","author":{"login":"lmazuel"},"authorAssociation":"CONTRIBUTOR","body":"I have exactly the same problem, I'm importing the Framework and this update broke my CI :(\r\n![image](https://user-images.githubusercontent.com/1050156/57477678-13feec00-724e-11e9-99ff-6ac29fbe4a89.png)\r\n\r\nI have using your class which was part of the public API of the package to record my own high level tests, and now I have to pin the PyGithub version until I have time to replace it with something else (vcrpy?)\r\n\r\nI understand if you don't want to go back to your decision, but at least I wanted to point the impact: since this naming was public (no underscore), it becomes automatically part of the public API and changing it is a breaking change that should required a major version bump (and not a patch version :()","createdAt":"2019-05-09T18:34:36Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1098#issuecomment-491017492","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDUwMjk3Mzg2Mw==","author":{"login":"mgorny"},"authorAssociation":"CONTRIBUTOR","body":"Now that tests are not part of build directory and require 2to3, it's painful to use the same checkout to test both py2 and py3.","createdAt":"2019-06-18T06:58:19Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1098#issuecomment-502973863","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDUyMjIxNTQzOQ==","author":{"login":"stale"},"authorAssociation":"NONE","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","createdAt":"2019-08-17T08:05:38Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1098#issuecomment-522215439","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDUyMjI1NDk5OQ==","author":{"login":"yarikoptic"},"authorAssociation":"NONE","body":"Just to keep stale[bot] fresh ;-)","createdAt":"2019-08-17T17:18:46Z","includesCreatedEdit":true,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1098#issuecomment-522254999","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDUyNjgyNDkzNA==","author":{"login":"s-t-e-v-e-n-k"},"authorAssociation":"COLLABORATOR","body":"The most recent changes no longer require 2to3, so I'm going to close this since it should now be possible to test py2 and py3 in the same checkout.","createdAt":"2019-08-31T12:00:49Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1098#issuecomment-526824934","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDU0MDY2ODA2OA==","author":{"login":"sandrotosi"},"authorAssociation":"NONE","body":"@s-t-e-v-e-n-k but now sadly MANIFEST.in is not updated to include `tests/` in the released tarball, so distributions wont have tests anymore :( can you take care of that? thanks!","createdAt":"2019-10-10T16:31:54Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1098#issuecomment-540668068","viewerDidAuthor":false}],"createdAt":"2019-04-22T18:45:50Z","number":1098,"state":"CLOSED","title":"Move tests/ back into github/tests and ship within tarball, or at least provide github.testing?","url":"https://github.com/PyGithub/PyGithub/issues/1098"},{"author":{"id":"MDQ6VXNlcjIzMTA4NDgw","is_bot":false,"login":"visantillan27","name":"Victor Santillán"},"body":"When try to running the simple demo after doing the installation throws the following:\r\n\r\nTraceback (most recent call last):\r\n  File \"<pyshell#0>\", line 1, in <module>\r\n    from github import Github\r\nModuleNotFoundError: No module named 'github\r\n\r\nOS: macOS Mojave 10.14.4\r\nPython: 3.7.2","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDQ4NTkxNDAxOA==","author":{"login":"maflcko"},"authorAssociation":"NONE","body":"python3.7 is tested by travis, so that shouldn't be the issue: https://github.com/PyGithub/PyGithub/blob/f716df86bbe7dc276c6596699fa9712b61ef974c/.travis.yml#L8\r\n\r\nHow did you install it?","createdAt":"2019-04-23T18:09:25Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1097#issuecomment-485914018","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDUwNDY4NzAwMA==","author":{"login":"stale"},"authorAssociation":"NONE","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","createdAt":"2019-06-22T18:09:33Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1097#issuecomment-504687000","viewerDidAuthor":false}],"createdAt":"2019-04-22T17:05:57Z","number":1097,"state":"CLOSED","title":" PyGithub module does not work with Python 3.7.2","url":"https://github.com/PyGithub/PyGithub/issues/1097"},{"author":{"id":"MDQ6VXNlcjE4NjY1NTc=","is_bot":false,"login":"ricleal","name":"Ricardo Ferraz Leal"},"body":"I wonder if the Beta  \"transfer issue\" will be available any time soon?","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDU1Mzg0NzQ1MA==","author":{"login":"s-t-e-v-e-n-k"},"authorAssociation":"COLLABORATOR","body":"Transferring issues is not done via the API.","createdAt":"2019-11-14T11:30:05Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"CONFUSED","users":{"totalCount":2}}],"url":"https://github.com/PyGithub/PyGithub/issues/1096#issuecomment-553847450","viewerDidAuthor":false}],"createdAt":"2019-04-22T15:58:48Z","number":1096,"state":"CLOSED","title":"transfer issue","url":"https://github.com/PyGithub/PyGithub/issues/1096"},{"author":{"id":"MDQ6VXNlcjEzMjEwOA==","is_bot":false,"login":"retorquere","name":"Emiliano Heyns"},"body":"Currently, PyGithub uses `path.basename` for the `name` of the file assets -- could it be added that I can choose my own name? I can of course rename the file before upload, but it would be easier if I could just specify the name.","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDQ4NTIxODMwNw==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"Hi, can you provide a more detailed example?","createdAt":"2019-04-21T02:07:23Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1095#issuecomment-485218307","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQ4NTIyOTg1NA==","author":{"login":"retorquere"},"authorAssociation":"NONE","body":"I have a local file called \"build.xpi\" that I want to upload as an asset named (not just labeled) \"build-1234.xpi\",bit I do not want to rename it locally before upload (other build stages rely on it being named build.xpi)","createdAt":"2019-04-21T06:56:29Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1095#issuecomment-485229854","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDUwMzkxNDcyMw==","author":{"login":"stale"},"authorAssociation":"NONE","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","createdAt":"2019-06-20T07:39:44Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1095#issuecomment-503914723","viewerDidAuthor":false}],"createdAt":"2019-04-19T21:04:24Z","number":1095,"state":"CLOSED","title":"Allow setting `name` for upload_asset","url":"https://github.com/PyGithub/PyGithub/issues/1095"},{"author":{"id":"MDQ6VXNlcjEyNzk2NDUw","is_bot":false,"login":"yalov","name":"Alexander"},"body":"How to convert this GitPython code to PyGithub?\r\n``` python\r\nfrom git import Repo\r\ngitrepo = Repo(os.getcwd())\r\ngitrepo.remotes.origin.fetch()\r\n```","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDQ4MzkwNTQ1MQ==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"You can't. PyGithub is a Github REST API wrapper, not a Git wrapper. You should be able to do that with GitPython.","createdAt":"2019-04-17T01:46:27Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1092#issuecomment-483905451","viewerDidAuthor":false}],"createdAt":"2019-04-17T00:27:40Z","number":1092,"state":"CLOSED","title":"Can I fetch using PyGithub?","url":"https://github.com/PyGithub/PyGithub/issues/1092"},{"author":{"id":"MDQ6VXNlcjQ2NTAzNzgx","is_bot":false,"login":"achantavy","name":"Alex Chantavy"},"body":"Hi there, I'm able to retrieve a PR but I get an UnknownObjectException when I try to edit it.  Here's my code:\r\n\r\nGetting the PR works:\r\n```\r\nfrom github import Github\r\nghclient = Github(CREDS)\r\nrepo = ghclient.get_repo(REPO_NAME)\r\npull = repo.get_pull(PULL_NUM)\r\nprint(pull)\r\n\r\n# PullRequest(title=\"My title\", number=PULL_NUM)\r\n```\r\n\r\nHowever when I try to edit the PR, it throws an UnknownObjectException:\r\n```\r\nrevised_title = \"My new title\"\r\npull.edit(revised_title)\r\n\r\n# Throws: \r\n---------------------------------------------------------------------------\r\nUnknownObjectException                    Traceback (most recent call last)\r\n<ipython-input-117-449b848bf9f4> in <module>\r\n      5 help(pull.edit)\r\n      6 \r\n----> 7 pull.edit(revised_title)\r\n\r\n~/.virtualenvs/myenv/lib/python3.7/site-packages/github/PullRequest.py in edit(self, title, body, state, base)\r\n    514             \"PATCH\",\r\n    515             self.url,\r\n--> 516             input=post_parameters\r\n    517         )\r\n    518         self._useAttributes(data)\r\n\r\n~/.virtualenvs/myenv/lib/python3.7/site-packages/github/Requester.py in requestJsonAndCheck(self, verb, url, parameters, headers, input)\r\n    273 \r\n    274     def requestJsonAndCheck(self, verb, url, parameters=None, headers=None, input=None):\r\n--> 275         return self.__check(*self.requestJson(verb, url, parameters, headers, input, self.__customConnection(url)))\r\n    276 \r\n    277     def requestMultipartAndCheck(self, verb, url, parameters=None, headers=None, input=None):\r\n\r\n~/.virtualenvs/myenv/lib/python3.7/site-packages/github/Requester.py in __check(self, status, responseHeaders, output)\r\n    284         output = self.__structuredFromJson(output)\r\n    285         if status >= 400:\r\n--> 286             raise self.__createException(status, responseHeaders, output)\r\n    287         return responseHeaders, output\r\n    288 \r\n\r\nUnknownObjectException: 404 {'message': 'Not Found', 'documentation_url': 'https://developer.github.com/v3/pulls/#update-a-pull-request'}\r\n```\r\n\r\nCould this be a permissions problem?  I'm stumped.  Thanks!","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDQ4MzQ4NDg5Mg==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"It may be. Do you have the permission to edit this PR?","createdAt":"2019-04-16T02:16:50Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1091#issuecomment-483484892","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQ4MzgyOTE4Mw==","author":{"login":"achantavy"},"authorAssociation":"NONE","body":"I did some more testing and yeah, it looks like this is a permissions problem.  Bit of a misleading error message; thanks for pointing me in the right direction!","createdAt":"2019-04-16T20:23:43Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1091#issuecomment-483829183","viewerDidAuthor":false}],"createdAt":"2019-04-15T22:38:21Z","number":1091,"state":"CLOSED","title":"PullRequest.edit() throws UnknownObjectException","url":"https://github.com/PyGithub/PyGithub/issues/1091"},{"author":{"id":"MDQ6VXNlcjY5MjI3MDk=","is_bot":false,"login":"ahmad88me","name":"Ahmad Alobaid"},"body":"It would be nice to add the coverage to the readme.\r\n\r\n I can help with that if needed, but someone with admin access need to register the app to codecov. Then, in travis or semaphore-ci the coverage can be generated. ","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDQ4MzA4OTU1MQ==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"@ahmad88me Thank you for the good suggestion, implemented in #1090 ","createdAt":"2019-04-15T02:45:07Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1089#issuecomment-483089551","viewerDidAuthor":false}],"createdAt":"2019-04-14T06:58:50Z","number":1089,"state":"CLOSED","title":"Add Coverage","url":"https://github.com/PyGithub/PyGithub/issues/1089"},{"author":{"id":"MDQ6VXNlcjExMzI4NDk=","is_bot":false,"login":"nowox","name":"Yves Chevallier"},"body":"I would like to get a GitHub Repository URL from a Commit HASH. This is feasible with the API:\r\n\r\n```python\r\n    import json\r\n    import requests\r\n    \r\n    def search_commits(sha):\r\n       headers = {'Accept': 'application/vnd.github.cloak-preview'}\r\n       req = requests.get('http://api.github.com/search/commits',\r\n           {'q': sha},\r\n           headers=headers)\r\n       return json.loads(req.text)\r\n    \r\n    commit = search_commits('e83c5163316f89bfbde7d9ab23ca2e25604af290')['items'][0]\r\n    clone_url = commit['repository']['url']\r\n```\r\n\r\nThen I tried the same with `PyGitHub`:\r\n\r\n```python\r\n    from github import Github\r\n    g = Github()\r\n    \r\n    commit = g.search_commits('e83c5163316f89bfbde7d9ab23ca2e25604af290')[0]\r\n```\r\n\r\nUnfortunately in this result (even in `commit.raw_data`) there is no key `repository`. \r\n\r\nIt seems PyGitHub uses `search/commits` as described here: https://developer.github.com/v3/search/#search-commits\r\n\r\nBut instead of this object it returns a Commit object https://developer.github.com/v3/repos/commits/\r\n\r\nHow can I get the URL of the repository?","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDQ4MjU2NjMyNw==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"Unfortunately since the Commit object does not have a `repository` attribute, I guess the work-around is just to use the `commit['url']` and some string manipulation. ","createdAt":"2019-04-12T13:03:39Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1088#issuecomment-482566327","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQ4MjU2NzMwNg==","author":{"login":"nowox"},"authorAssociation":"NONE","body":"Yeah, it is what I do with: \r\n\r\n```python\r\nimport re\r\n\r\nrepo = g.get_repo(\r\n    re.search('repos/(.*?)/commits', c.raw_data['url']).group(1)\r\n)\r\nclone_url = repo.clone_url\r\n```\r\n\r\nBut I am confused because [search-commits](https://developer.github.com/v3/search/#search-commits)  is not supposed to return a [commit](https://developer.github.com/v3/repos/commits/) object according the API specifications. The proof is that if I query the API directly I get what I need. ","createdAt":"2019-04-12T13:06:46Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1088#issuecomment-482567306","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDUwMDg0MTAyMQ==","author":{"login":"stale"},"authorAssociation":"NONE","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","createdAt":"2019-06-11T13:28:41Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1088#issuecomment-500841021","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs6FZRtf","author":{"login":"deershark"},"authorAssociation":"NONE","body":"I also find this problem, this key is clearly in the public API documentation, but it has not been changed for so long...","createdAt":"2024-07-19T03:11:46Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1088#issuecomment-2237995871","viewerDidAuthor":false}],"createdAt":"2019-04-12T12:24:19Z","number":1088,"state":"CLOSED","title":"search_commits, missing repository key","url":"https://github.com/PyGithub/PyGithub/issues/1088"},{"author":{"id":"MDQ6VXNlcjEyMTM3NzQ=","is_bot":false,"login":"lovato","name":"Marco Lovato"},"body":"Hi,\r\n\r\nI am successfully listing all repos belonging to a person on GHEnterprise, when all of them are public. If all repositories are private, get_repos() lists nothing.\r\n\r\nBy looking at GitHub v3 documentation:\r\nhttps://developer.github.com/v3/repos/#list-organization-repositories\r\n\r\nI tried to find where is the method inside PyGithub for this APIcall, and was unable to find.\r\nI think that this APIcall may work for me.\r\n\r\nI am using my personal access token, which gives me full rights on the organization (I am also org owner).\r\n\r\nBest,\r\nLovato","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDQ4MTczNDkwMQ==","author":{"login":"lovato"},"authorAssociation":"NONE","body":"I ended adding a method on MainClass.py to fulfill my needs.\r\n\r\n```\r\n    def get_organization_repos(self, login):\r\n        \"\"\"\r\n        :calls: `GET /orgs/:org/repos <https://developer.github.com/v3/repos/#list-organization-repositories>`_\r\n        :param login: string\r\n        :rtype: :class:`github.Organization.Organization`\r\n        \"\"\"\r\n        assert isinstance(login, str), login\r\n        headers, data = self.__requester.requestJsonAndCheck(\r\n            \"GET\",\r\n            \"/orgs/\" + login + \"/repos\"\r\n        )\r\n        return data\r\n```\r\nBut it is just returning plain json, instead of a PyGithub object.\r\nAnd I am not sure if this is the place to put this code.\r\n\r\nI can create a PR, if I receive proper instructions.\r\n\r\nIt is working like a charm :-)\r\n\r\nBest","createdAt":"2019-04-10T15:18:06Z","includesCreatedEdit":true,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1087#issuecomment-481734901","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQ4MTc0MzI2MA==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"How about this:\r\nhttps://pygithub.readthedocs.io/en/latest/github_objects/Organization.html#github.Organization.Organization.get_repos","createdAt":"2019-04-10T15:38:07Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":1}}],"url":"https://github.com/PyGithub/PyGithub/issues/1087#issuecomment-481743260","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQ4MjA5MDE1NA==","author":{"login":"lovato"},"authorAssociation":"NONE","body":"Thanks man. Worked perfectly. My bad.","createdAt":"2019-04-11T12:16:22Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1087#issuecomment-482090154","viewerDidAuthor":false}],"createdAt":"2019-04-10T15:03:23Z","number":1087,"state":"CLOSED","title":"Listing GitHub Enterprise Private Repo gets no repo at all","url":"https://github.com/PyGithub/PyGithub/issues/1087"},{"author":{"id":"MDQ6VXNlcjE2NDYwNzc3","is_bot":false,"login":"yangyang-zhang","name":"yangyang"},"body":"I've found a weird thing recently, I couldn't get last_modified unless I called update()function. Is it a bug or something?:\r\n\r\nIn [9]: res = g.search_code('pygithub')\r\n\r\nIn [10]: files = res.get_page(0)\r\n\r\nIn [11]: print(files[0].last_modified)\r\nNone\r\n\r\nIn [12]: files[0].update()\r\nOut[12]: True\r\n\r\nIn [13]: files[0].last_modified\r\nOut[13]: 'Thu, 25 Jan 2018 18:00:05 GMT'\r\n\r\n It takes a long time to call the update function，Do you have a good solution? \r\n","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDUwMDEyNTk1Mw==","author":{"login":"stale"},"authorAssociation":"NONE","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","createdAt":"2019-06-08T13:53:58Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1085#issuecomment-500125953","viewerDidAuthor":false}],"createdAt":"2019-04-09T13:03:57Z","number":1085,"state":"CLOSED","title":"Couldn't get ContentFile's last_modified attribute directly","url":"https://github.com/PyGithub/PyGithub/issues/1085"},{"author":{"id":"MDQ6VXNlcjU1OTMxNw==","is_bot":false,"login":"brianjmurrell","name":"Brian J. Murrell"},"body":"A simple loop such as:\r\n\r\n```\r\n            for review in self.pull_request.get_reviews():\r\n                if review.user and review.user.name and \\\r\n                   review.user.name.startswith(\"foobar\") and \\\r\n                   review.state == \"CHANGES_REQUESTED\":\r\n                    ...\r\n```\r\n\r\nSeems to produce a huge number of repeated `GET https://api.github.com/users/<username>` calls.  I believe this ends up triggering abuse rate-limiting:\r\n\r\n```\r\n[2019-04-09T10:02:14.101Z] 2019-04-09 10:02:11,214 POST https://api.github.com/.../pulls/284/reviews {'Content-Type': 'application/json', 'Authorization': 'Basic (login and password removed)', 'User-Agent': 'PyGithub/Python'} {...} ==> 422 {'status': '422 Unprocessable Entity', 'x-accepted-oauth-scopes': '', 'content-length': '171', 'x-github-media-type': 'github.v3; format=json', 'content-security-policy': \"default-src 'none'\", 'x-content-type-options': 'nosniff', 'access-control-expose-headers': 'ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Reset, X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type', 'x-github-request-id': '9F34:7C5C:3ABC39:7696C8:5CAC6DA0', 'strict-transport-security': 'max-age=31536000; includeSubdomains; preload', 'x-ratelimit-remaining': '4719', 'server': 'GitHub.com', 'x-ratelimit-limit': '5000', 'x-oauth-scopes': 'notifications, public_repo', 'date': 'Tue, 09 Apr 2019 10:02:11 GMT', 'x-frame-options': 'deny', 'access-control-allow-origin': '*', 'referrer-policy': 'origin-when-cross-origin, strict-origin-when-cross-origin', 'content-type': 'application/json; charset=utf-8', 'x-xss-protection': '1; mode=block', 'x-ratelimit-reset': '1554806424'} {\"message\":\"Unprocessable Entity\",\"errors\":[\"was submitted too quickly\"],\"documentation_url\":\"https://developer.github.com/v3/pulls/reviews/#create-a-pull-request-review\"}\r\n```\r\n\r\nSurely the library doesn't need to repeatedly get the same user info from the API and can instead cache it after the first fetch, yes?","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDUwMDEyMjA0Mg==","author":{"login":"stale"},"authorAssociation":"NONE","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","createdAt":"2019-06-08T12:53:58Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1084#issuecomment-500122042","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDUwMDM5ODU5MA==","author":{"login":"brianjmurrell"},"authorAssociation":"CONTRIBUTOR","body":"Just because there has been no activity doesn't mean the issue should be closed.  It's just as valid now as it was 2 months ago when it was opened.\r\n\r\nAnd I am not really sure it helps the issue to have it drowned out in \"not stale\" comments that need to be added just to defeat the stalebot.","createdAt":"2019-06-10T12:27:58Z","includesCreatedEdit":true,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":1}}],"url":"https://github.com/PyGithub/PyGithub/issues/1084#issuecomment-500398590","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDUxOTkxMzcxNg==","author":{"login":"stale"},"authorAssociation":"NONE","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","createdAt":"2019-08-09T13:12:09Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1084#issuecomment-519913716","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDUyMDM5NzUzNg==","author":{"login":"brianjmurrell"},"authorAssociation":"CONTRIBUTOR","body":"I really hate this growing use of stalebot.  Just because nothing has been done with a ticket doesn't make it invalid or complete.  On the contrary, that nothing has been done with it more likely means there is still something to be done.","createdAt":"2019-08-12T12:05:17Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1084#issuecomment-520397536","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDUyMDM5Nzk3Ng==","author":{"login":"brianjmurrell"},"authorAssociation":"CONTRIBUTOR","body":"I wonder why there has been *zero* activity other than all of the stalebot noise.  An acknowledgement from a project maintainer about whether my suggestion is valid or not would be useful.","createdAt":"2019-08-12T12:06:54Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1084#issuecomment-520397976","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDUyMDgxNzcxNw==","author":{"login":"s-t-e-v-e-n-k"},"authorAssociation":"COLLABORATOR","body":"Because we're all volunteers who are giving up our free time to work on this project, and have other responsibilities? However, looking at the API response for all reviews, shows only a subset of the user JSON is returned, without fields that you're querying, like name: https://developer.github.com/v3/pulls/reviews/#list-reviews-on-a-pull-request\r\n\r\nWe are at the mercy of whatever the GitHub API returns here, and will not make further requests for data that an object *may* reference. Teasing out the name out of review.user.html_url or review.user.url may result in less queries, or you could build a dictionary in your code and check that first before making further API calls.","createdAt":"2019-08-13T12:40:10Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1084#issuecomment-520817717","viewerDidAuthor":false}],"createdAt":"2019-04-09T12:29:06Z","number":1084,"state":"CLOSED","title":"Caching API data","url":"https://github.com/PyGithub/PyGithub/issues/1084"},{"author":{"id":"MDQ6VXNlcjQ5MTk2NTgz","is_bot":false,"login":"Mirabell57","name":""},"body":"","comments":[],"createdAt":"2019-04-05T13:16:40Z","number":1083,"state":"CLOSED","title":"This is a new issue","url":"https://github.com/PyGithub/PyGithub/issues/1083"},{"author":{"id":"MDQ6VXNlcjQ5MTk2NTgz","is_bot":false,"login":"Mirabell57","name":""},"body":"","comments":[],"createdAt":"2019-04-05T13:13:31Z","number":1082,"state":"CLOSED","title":"This is a new issue","url":"https://github.com/PyGithub/PyGithub/issues/1082"},{"author":{"id":"MDQ6VXNlcjIyMjk5OTk4","is_bot":false,"login":"ptluisdinis","name":""},"body":"","comments":[],"createdAt":"2019-04-03T22:54:08Z","number":1081,"state":"CLOSED","title":"This is a new issue","url":"https://github.com/PyGithub/PyGithub/issues/1081"},{"author":{"id":"MDQ6VXNlcjQwOTY3ODQ=","is_bot":false,"login":"Jamie-","name":"Jamie Scott"},"body":"I can reproduce this reliably in 1.43.3 and 1.43.5 (latest) I haven't tried 1.43.4. Version 1.43 to 1.43.2 also don't work but with a completely different error.\r\n\r\nTo reproduce:\r\n\r\nIn the snippet below, `[...]` is where I've chopped stuff to keep it readable.\r\n```\r\n$ pip uninstall pygithub\r\n[...]\r\n$ pip install pygithub\r\nCollecting pygithub\r\nRequirement already satisfied: Deprecated in /home/user/.local/share/virtualenvs/venv/lib/python3.5/site-packages (from pygithub) (1.2.5)\r\nRequirement already satisfied: pyjwt in /home/user/.local/share/virtualenvs/venv/lib/python3.5/site-packages (from pygithub) (1.6.4)\r\nRequirement already satisfied: requests>=2.14.0 in /home/user/.local/share/virtualenvs/venv/lib/python3.5/site-packages (from pygithub) (2.19.1)\r\nRequirement already satisfied: wrapt<2,>=1 in /home/user/.local/share/virtualenvs/venv/lib/python3.5/site-packages (from Deprecated->pygithub) (1.11.1)\r\nRequirement already satisfied: urllib3<1.24,>=1.21.1 in /home/user/.local/share/virtualenvs/venv/lib/python3.5/site-packages (from requests>=2.14.0->pygithub) (1.23)\r\nRequirement already satisfied: certifi>=2017.4.17 in /home/user/.local/share/virtualenvs/venv/lib/python3.5/site-packages (from requests>=2.14.0->pygithub) (2018.8.24)\r\nRequirement already satisfied: chardet<3.1.0,>=3.0.2 in /home/user/.local/share/virtualenvs/venv/lib/python3.5/site-packages (from requests>=2.14.0->pygithub) (3.0.4)\r\nRequirement already satisfied: idna<2.8,>=2.5 in /home/user/.local/share/virtualenvs/venv/lib/python3.5/site-packages (from requests>=2.14.0->pygithub) (2.7)\r\nInstalling collected packages: pygithub\r\nSuccessfully installed pygithub-1.43.5\r\n$ python\r\nPython 3.5.3 (default, Sep 27 2018, 17:25:39) \r\n[GCC 6.3.0 20170516] on linux\r\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\r\n>>> from github import Github\r\n>>> gh = Github('<my github api token>')\r\n>>> gh.get_api_status()\r\n[...]\r\n File \"/home/user/.local/share/virtualenvs/venv/lib/python3.5/site-packages/github/Requester.py\", line 420, in __requestRaw\r\n    return self.__requestRaw(original_cnx, verb, o.path, requestHeaders, input)\r\n  File \"/home/user/.local/share/virtualenvs/venv/lib/python3.5/site-packages/github/Requester.py\", line 420, in __requestRaw\r\n    return self.__requestRaw(original_cnx, verb, o.path, requestHeaders, input)\r\n  File \"/home/user/.local/share/virtualenvs/venv/lib/python3.5/site-packages/github/Requester.py\", line 420, in __requestRaw\r\n    return self.__requestRaw(original_cnx, verb, o.path, requestHeaders, input)\r\n  File \"/home/user/.local/share/virtualenvs/venv/lib/python3.5/site-packages/github/Requester.py\", line 401, in __requestRaw\r\n    response = cnx.getresponse()\r\n  File \"/home/user/.local/share/virtualenvs/venv/lib/python3.5/site-packages/github/Requester.py\", line 109, in getresponse\r\n    r = verb(url, headers=self.headers, data=self.input, timeout=self.timeout, verify=self.verify, allow_redirects=False)\r\n  File \"/home/user/.local/share/virtualenvs/venv/lib/python3.5/site-packages/requests/sessions.py\", line 525, in get\r\n    return self.request('GET', url, **kwargs)\r\n  File \"/home/user/.local/share/virtualenvs/venv/lib/python3.5/site-packages/requests/sessions.py\", line 512, in request\r\n    resp = self.send(prep, **send_kwargs)\r\n  File \"/home/user/.local/share/virtualenvs/venv/lib/python3.5/site-packages/requests/sessions.py\", line 622, in send\r\n    r = adapter.send(request, **kwargs)\r\n  File \"/home/user/.local/share/virtualenvs/venv/lib/python3.5/site-packages/requests/adapters.py\", line 530, in send\r\n    return self.build_response(request, resp)\r\n  File \"/home/user/.local/share/virtualenvs/venv/lib/python3.5/site-packages/requests/adapters.py\", line 264, in build_response\r\n    response = Response()\r\n  File \"/home/user/.local/share/virtualenvs/venv/lib/python3.5/site-packages/requests/models.py\", line 603, in __init__\r\n    self.headers = CaseInsensitiveDict()\r\n  File \"/home/user/.local/share/virtualenvs/venv/lib/python3.5/site-packages/requests/structures.py\", line 44, in __init__\r\n    self.update(data, **kwargs)\r\n  File \"/home/user/.local/share/virtualenvs/venv/lib/python3.5/_collections_abc.py\", line 773, in update\r\n    if isinstance(other, Mapping):\r\n  File \"/home/user/.local/share/virtualenvs/venv/lib/python3.5/abc.py\", line 182, in __instancecheck__\r\n    if subclass in cls._abc_cache:\r\n  File \"/home/user/.local/share/virtualenvs/venv/lib/python3.5/_weakrefset.py\", line 75, in __contains__\r\n    return wr in self.data\r\nRecursionError: maximum recursion depth exceeded in comparison\r\n>>> \r\n```\r\n\r\nI will try to debug further later but I've already spent hours trying to fix my issues with version 1.43 and I've had enough for today.","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDQ3OTc1Njc1MA==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"Looks like the old `status.github.com` was deprecated in Feb 2019:\r\nhttps://github.blog/changelog/2018-12-11-new-github-status-site/","createdAt":"2019-04-04T05:35:29Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1080#issuecomment-479756750","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQ3OTc2MDY0Mg==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"Since the status API has migrated to a third-party site powered by statuspage.io, it is now outside the scope of this project. To check the latest API status, please use:\r\nhttps://www.githubstatus.com/api","createdAt":"2019-04-04T05:56:17Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":1}}],"url":"https://github.com/PyGithub/PyGithub/issues/1080#issuecomment-479760642","viewerDidAuthor":false}],"createdAt":"2019-04-03T16:32:20Z","number":1080,"state":"CLOSED","title":"Unable to get GitHub API status, fails with RecursionError: maximum recursion depth exceeded in comparison","url":"https://github.com/PyGithub/PyGithub/issues/1080"},{"author":{"id":"MDQ6VXNlcjI4ODUwOTU=","is_bot":false,"login":"Jie-Yang","name":"Jie Yang"},"body":"Hi All,\r\nI am trying to use this to connect to a enterprise Github exposed at a port different than 443. \r\nFor example, when I try this URL below, I get errors. It seems there is a port checking in the code, and only accept 443 by default. And there is no way to change it? Is there a way to use custom port in the API url? Thanks. \r\n\r\n**Example URL**\r\n\"https://github.company.com:3690/api/v3\"\r\n**Errors:**\r\n File \"/var/task/github/Requester.py\", line 440, in __makeAbsoluteUrl\r\n    assert o.port == self.__port\r\nAssertionError","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDQ3OTQ5OTQ5Mw==","author":{"login":"Jie-Yang"},"authorAssociation":"NONE","body":"Or, may I ask what is the reason behind the port check here?\r\nassert o.port == self.__port\r\nthanks.","createdAt":"2019-04-03T13:54:20Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1078#issuecomment-479499493","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQ3OTc1NTMxNA==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"How did you initialize the Github object? It should work like this:\r\n`g = Github(base_url=\"https://github.company.com:3690/api/v3\", login_or_token=\"token\")`","createdAt":"2019-04-04T05:27:55Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1078#issuecomment-479755314","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQ3OTc4Njk2Ng==","author":{"login":"Jie-Yang"},"authorAssociation":"NONE","body":"Hi sfdye,\r\n\r\nThanks for the help. Yes that is the way I use. Once I comment out that assert line code, it start to work. ","createdAt":"2019-04-04T07:41:08Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1078#issuecomment-479786966","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQ5ODE2NjEwNQ==","author":{"login":"stale"},"authorAssociation":"NONE","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","createdAt":"2019-06-03T08:38:47Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1078#issuecomment-498166105","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDgxNTMwODYwMA==","author":{"login":"atorrescogollo"},"authorAssociation":"NONE","body":"This issue seems not to be fixed.\r\n\r\nHere, there is an assertion that forces the requested port to be equals to the base_url port:\r\nhttps://github.com/PyGithub/PyGithub/blob/babcbcd04fd5605634855f621b8558afc5cbc515/github/Requester.py#L590-L598\r\n\r\n`urllib.parse.urlparse` only returns port when explicitly set:\r\n```python\r\n>>> import urllib.parse\r\n>>> urllib.parse.urlparse(\"https://example.com:443\").port\r\n443\r\n>>> urllib.parse.urlparse(\"https://example.com\").port == None\r\nTrue\r\n```\r\n\r\nIt should not be a problem, but all the URLs for the API are only taking the URL into account so the most of the times the assertion is `None == None`. For example:\r\nhttps://github.com/PyGithub/PyGithub/blob/babcbcd04fd5605634855f621b8558afc5cbc515/github/Organization.py#L578-L580\r\n\r\nOn the other hand, [`Requester.__createConnection`](https://github.com/PyGithub/PyGithub/blob/babcbcd04fd5605634855f621b8558afc5cbc515/github/Requester.py#L610-L626) already creates the connectionClass so, why not use relative paths exclusively for all `requestJsonAndCheck` calls? This is already done for some requests:\r\nhttps://github.com/PyGithub/PyGithub/blob/babcbcd04fd5605634855f621b8558afc5cbc515/github/Organization.py#L922-L924","createdAt":"2021-04-07T22:42:49Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1078#issuecomment-815308600","viewerDidAuthor":false}],"createdAt":"2019-04-03T11:13:36Z","number":1078,"state":"CLOSED","title":"Custom Port Number in API URL","url":"https://github.com/PyGithub/PyGithub/issues/1078"},{"author":{"id":"MDQ6VXNlcjMwNTg2MDA0","is_bot":false,"login":"super1207","name":"super1207"},"body":"","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDQ3ODQwOTI5Mw==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"use `repo.delete_file(dir)`:\r\nhttps://developer.github.com/v3/repos/contents/#delete-a-file","createdAt":"2019-04-01T01:50:54Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1077#issuecomment-478409293","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDUyMzMxMzk3NQ==","author":{"login":"WqyJh"},"authorAssociation":"NONE","body":"How to delete a directory recursively?\r\n\r\nThought I can delete all of the files one by one, it would create many commits. How can I delete all those files with one commit?","createdAt":"2019-08-21T06:18:52Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1077#issuecomment-523313975","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDUyMzMxNTg0OA==","author":{"login":"s-t-e-v-e-n-k"},"authorAssociation":"COLLABORATOR","body":"Don't use PyGithub for that, use git rm -r from the command line and then commit and push that.","createdAt":"2019-08-21T06:26:11Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1077#issuecomment-523315848","viewerDidAuthor":false}],"createdAt":"2019-03-31T12:01:32Z","number":1077,"state":"CLOSED","title":"I want to delete a directory. What should I do?","url":"https://github.com/PyGithub/PyGithub/issues/1077"},{"author":{"id":"MDQ6VXNlcjE0MjcwNjM=","is_bot":false,"login":"Powersource","name":"Powersource"},"body":"Right now if you call `repo.get_license()` on a repo that doesn't even have a license file, you get an exception: `github.GithubException.UnknownObjectException: 404 {'message': 'Not Found', 'documentation_url': 'https://developer.github.com/v3/licenses/#get-the-contents-of-a-repositorys-license'}`.\r\n\r\nPersonally, I would prefer to just get a `None` returned instead. Idk what's most pythonic?","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDQ4MjQ0MzQxNA==","author":{"login":"Powersource"},"authorAssociation":"NONE","body":"The proper way [seems to be](https://github.com/spdx/spdx-spec/issues/50#issuecomment-456264240) to return 'NONE'.","createdAt":"2019-04-12T05:33:56Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1073#issuecomment-482443414","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQ4MjQ4ODIyOQ==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"Understand your concern, but PyGithub is just wrapper for Github REST v3:\r\nhttps://developer.github.com/v3/licenses/#get-the-contents-of-a-repositorys-license\r\n\r\n> If a license is matched, the license key and name returned conforms to the SPDX specification.\r\n\r\nWhen there is no license, Github indeed returns a 404. Guess you will have to catch this exception in your code.","createdAt":"2019-04-12T08:32:36Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1073#issuecomment-482488229","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDUwMDc0OTcyMA==","author":{"login":"stale"},"authorAssociation":"NONE","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","createdAt":"2019-06-11T08:51:19Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1073#issuecomment-500749720","viewerDidAuthor":false}],"createdAt":"2019-03-28T07:40:40Z","number":1073,"state":"CLOSED","title":"Handle repos with missing licenses","url":"https://github.com/PyGithub/PyGithub/issues/1073"},{"author":{"id":"MDQ6VXNlcjI5MDc5NDQx","is_bot":false,"login":"malhanpraveen","name":"Praveen Malhan"},"body":"When I use PyGithub to make API calls to GitHub, the max results for a query are only 1000. Is there a way to have pagination or get the total number of results that the Github UI displays?","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDQ3NTg0NDc2Mw==","author":{"login":"MyriadSecurity"},"authorAssociation":"NONE","body":"This seems to be caused by how the the results of the search are pulled.\r\nA single search can take up the entire allotment of the search rate limit.\r\nRunning this:\r\n`rate = g.get_rate_limit()`\r\n`print (rate, rate.search, rate.graphql)`\r\n`res = g.search_users('type:org '+TARGET)`\r\n`rate = g.get_rate_limit()`\r\n`print (rate, rate.search, rate.graphql)`\r\n\r\nResults in:\r\n`RateLimit(core=Rate(remaining=5000, limit=5000)) Rate(remaining=29, limit=30) Rate(remaining=5000, limit=5000)`\r\n`Verizon Media`\r\n`RateLimit(core=Rate(remaining=5000, limit=5000)) Rate(remaining=1, limit=30) Rate(remaining=5000, limit=5000)`","createdAt":"2019-03-23T06:37:12Z","includesCreatedEdit":true,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1072#issuecomment-475844763","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQ4MzEyMDMwNQ==","author":{"login":"wangpeipei90"},"authorAssociation":"NONE","body":"I am also looking for a solution to this limitation. From the GitHub API, it says \"Just like searching on Google, you sometimes want to see a few pages of search results so that you can find the item that best meets your needs. **To satisfy that need, the GitHub Search API provides up to 1,000 results for each search.**\".   \r\nThe GitHub UI displays the same number, too.\r\nI would be very glad if anyone can provide a solution.\r\n","createdAt":"2019-04-15T06:12:21Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1072#issuecomment-483120305","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQ5OTE3NzU2Nw==","author":{"login":"dantron0"},"authorAssociation":"NONE","body":"+1 to what is said above, the actual value that is desired is being discarded.\r\n @wangpeipei90:\r\nFor a work around, you can use the `_PaginatedList__requester..requestJsonAndCheck()` method which returns a tuple: (headers, data). If this tuple is `r`, then `r[1][total_count]` will give you what you want.","createdAt":"2019-06-05T17:23:30Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1072#issuecomment-499177567","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQ5OTIxMTQ4Ng==","author":{"login":"wangpeipei90"},"authorAssociation":"NONE","body":"@dantonrodriguez \r\nFrom my understanding of [PaginatedList,](https://github.com/PyGithub/PyGithub/blob/master/github/PaginatedList.py)  \"data['total_count']\" returns the total number of records, but not all results. That is to say, you know that you have over 1000 records but can only retrieve the first 1000. \r\nCorrect me if I am wrong.","createdAt":"2019-06-05T18:56:23Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1072#issuecomment-499211486","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQ5OTI3OTk3NA==","author":{"login":"dantron0"},"authorAssociation":"NONE","body":"@wangpeipei90: yes, I believe you're correct. I misunderstood your goal, sorry.","createdAt":"2019-06-05T22:31:09Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1072#issuecomment-499279974","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDUxODA0MTc2MA==","author":{"login":"stale"},"authorAssociation":"NONE","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","createdAt":"2019-08-04T22:37:10Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1072#issuecomment-518041760","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDUyMDcwMzQwOQ==","author":{"login":"MyriadSecurity"},"authorAssociation":"NONE","body":"> @dantonrodriguez\r\n> From my understanding of [PaginatedList,](https://github.com/PyGithub/PyGithub/blob/master/github/PaginatedList.py) \"data['total_count']\" returns the total number of records, but not all results. That is to say, you know that you have over 1000 records but can only retrieve the first 1000.\r\n> Correct me if I am wrong.\r\n\r\nThat should be correct, however there is still a problem here.\r\n\r\nSee my example.\r\n\r\nA single call to the search returns the 1000 results as expected, but uses *29* search calls to the API.\r\n\r\nFor 29 search API calls I should be getting 29,000 results.\r\n\r\n\r\nAs it is, it was easier to implement my own search functionality with _requests_ as a solution to the issue.\r\n\r\n\r\n","createdAt":"2019-08-13T06:15:23Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1072#issuecomment-520703409","viewerDidAuthor":false}],"createdAt":"2019-03-22T17:53:23Z","number":1072,"state":"CLOSED","title":"Search results limited to 1000 per search query","url":"https://github.com/PyGithub/PyGithub/issues/1072"},{"author":{"id":"MDQ6VXNlcjM1NzEwMTA3","is_bot":false,"login":"CH-DanReif","name":"Dan Reif"},"body":"https://github.com/PyGithub/PyGithub/blob/118def30a3ee69e203113cc64dceea27ece12e13/github/Repository.py#L1666\r\n\r\nThis should read: \"The updated file content, either Base64 encoded or ready to be encoded\".","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDQ5Mzc4NjkyMA==","author":{"login":"stale"},"authorAssociation":"NONE","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","createdAt":"2019-05-19T19:59:56Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1069#issuecomment-493786920","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDUxNTI4MTQxOA==","author":{"login":"stale"},"authorAssociation":"NONE","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","createdAt":"2019-07-26T02:12:50Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1069#issuecomment-515281418","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDUxNjIwMDY5Nw==","author":{"login":"CH-DanReif"},"authorAssociation":"NONE","body":"Not stale.  Stop it.","createdAt":"2019-07-29T23:31:51Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1069#issuecomment-516200697","viewerDidAuthor":false}],"createdAt":"2019-03-20T19:54:13Z","number":1069,"state":"CLOSED","title":"`update_file` says to base64 encode your input, but that's not necessary","url":"https://github.com/PyGithub/PyGithub/issues/1069"},{"author":{"id":"MDQ6VXNlcjM5NDYyNDQy","is_bot":false,"login":"WofWca","name":""},"body":"`get_contributors(self, anon=False):`\r\nhttps://github.com/PyGithub/PyGithub/blob/118def30a3ee69e203113cc64dceea27ece12e13/github/Repository.py#L1802-L1812","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDQ3OTk4Mjc2NQ==","author":{"login":"alexmusa"},"authorAssociation":"CONTRIBUTOR","body":"I needed that feature 6 days ago. The modifications I ended up making are in the Pull Request #1075. Was the pull request made correctly ? I am not familiar with the mode of operation of Github and open source projects.","createdAt":"2019-04-04T17:06:17Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1065#issuecomment-479982765","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQ4MTUwNzQ5NA==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"Closed in #1075 ","createdAt":"2019-04-10T02:19:38Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1065#issuecomment-481507494","viewerDidAuthor":false}],"createdAt":"2019-03-17T13:45:25Z","number":1065,"state":"CLOSED","title":"Feature request: fetch anonymous contributors","url":"https://github.com/PyGithub/PyGithub/issues/1065"},{"author":{"id":"MDQ6VXNlcjI5MzgyMjE=","is_bot":false,"login":"jemaf","name":"João Eduardo Montandon"},"body":"## The problem\r\n\r\nHey there, \r\n\r\nIt seems that the value returned by the `last_modified` attribute of a given commit differs if we obtain this commit from the repository's tags list.\r\n\r\n## Example\r\n\r\n ```{python}\r\nfrom github import Github\r\ngh = Github()\r\nrepo = gh.get_repo(\"PyGithub/PyGithub\")\r\ntag_commit = repo.get_tags()[0].commit\r\ncommit = repo.get_commit(tag_commit.sha)\r\n\r\n# same commit sha\r\nprint(\"{} -- {}\".format(tag_commit.sha, commit.sha))\r\n\r\n# different last_modified dates\r\nprint(\"{} -- {}\".format(tag_commit.last_modified, commit.last_modified))\r\n```\r\n\r\n## Environment\r\n\r\n* Python: 3.7\r\n* PyGithub: 1.43.5","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDQ3OTkzNzQxNA==","author":{"login":"rgerkin"},"authorAssociation":"NONE","body":"This is related to #629 and I fixed this in #1032. It works for all practical purposes but some unrelated tests are failing so I will see if I can fix those.  ","createdAt":"2019-04-04T15:08:34Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1064#issuecomment-479937414","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQ3OTk3NjIwMg==","author":{"login":"jakubLangr"},"authorAssociation":"NONE","body":"+1 for the problem. Thank you for all the great work! Was just about to report it. I'm looking forward to seeing this working from PyPI. \r\n\r\nOn another note, if there's an easier way to figure out who last modified a repository _without_ making a separate request for commits, I'd also love to hear that.","createdAt":"2019-04-04T16:47:52Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1064#issuecomment-479976202","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQ3OTk3NzcxMQ==","author":{"login":"rgerkin"},"authorAssociation":"NONE","body":"The pypi problems are related to the process of retrieving the commits either leaving a file open somewhere or editing some sort of metadata, which then conflicts with the unit test's expectations.  I'm not sure it has any practical implication, but if someone is able to track this down (I wrote a more detailed note about it #1032) it would probably help get the PR accepted and this long-standing bug fixed.  ","createdAt":"2019-04-04T16:52:11Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1064#issuecomment-479977711","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQ3OTk4MjMyNA==","author":{"login":"jakubLangr"},"authorAssociation":"NONE","body":"Hi, thanks for your quick reply, but I am not sure I understand it. So I thought this was already fixed in the repo and will be fixed for everyone once it gets deployed onto PyPI in a next release or something. \r\n\r\nOr any other suggestions on figuring out who did the last commit?  ","createdAt":"2019-04-04T17:05:07Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1064#issuecomment-479982324","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQ3OTk5NDk4MA==","author":{"login":"rgerkin"},"authorAssociation":"NONE","body":"As far as I know, it is still a problem in master and the only fix is the one I submitted in #1032 that hasn't been accepted yet because of unrelated unit test failures.  ","createdAt":"2019-04-04T17:41:44Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1064#issuecomment-479994980","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQ5ODM3NTkwOA==","author":{"login":"stale"},"authorAssociation":"NONE","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","createdAt":"2019-06-03T18:38:47Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1064#issuecomment-498375908","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQ5ODM5MzgwOA==","author":{"login":"rgerkin"},"authorAssociation":"NONE","body":"This really is fixed in #1032, but no one has yet figured out why the unit tests are failing on Travis.  ","createdAt":"2019-06-03T19:29:38Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1064#issuecomment-498393808","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDUxNzgyNDc3OQ==","author":{"login":"stale"},"authorAssociation":"NONE","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","createdAt":"2019-08-02T19:52:42Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1064#issuecomment-517824779","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDUxNzgyODg0OA==","author":{"login":"rgerkin"},"authorAssociation":"NONE","body":"Fixed in #1032.  ","createdAt":"2019-08-02T20:07:24Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1064#issuecomment-517828848","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDUzNzIxNTIxNQ==","author":{"login":"stale"},"authorAssociation":"NONE","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","createdAt":"2019-10-01T20:28:14Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1064#issuecomment-537215215","viewerDidAuthor":false}],"createdAt":"2019-03-16T02:47:00Z","number":1064,"state":"CLOSED","title":"commit.last_modified returns wrong date when retrieved from tags list","url":"https://github.com/PyGithub/PyGithub/issues/1064"},{"author":{"id":"MDQ6VXNlcjExNTU4MDE=","is_bot":false,"login":"nicoonoclaste","name":"nicoo"},"body":"The Github v3 API now supports a first-class notion of [check runs] and [check suites] that can be used to gate whether a pull-request should be merged or not.\r\n\r\nAdding support for this part of the API to PyGithub would be useful for users who want to develop custom checks.  As I'm in that case, I might have a stab at this, but simply didn't make the time yet.\r\n\r\n[check runs]: https://developer.github.com/v3/checks/runs/\r\n[check suites]: https://developer.github.com/v3/checks/suites/","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDQ3NzkwODU4Mg==","author":{"login":"wichtounet"},"authorAssociation":"NONE","body":"It would be really great to support this API indeed 👍 \r\n\r\nWe are currently using pygithub to add comments automatically to our PRs from our CI jobs. However, we would like to switch to the Checks API in order to keep the discussion cleaner. ","createdAt":"2019-03-29T08:14:17Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":2}}],"url":"https://github.com/PyGithub/PyGithub/issues/1063#issuecomment-477908582","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDUyNDU1OTMzMQ==","author":{"login":"singh811"},"authorAssociation":"CONTRIBUTOR","body":"@sfdye, I would like to work on this feature request.","createdAt":"2019-08-24T15:26:39Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1063#issuecomment-524559331","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDUyNDU1OTM2Nw==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"Go ahead 👍 ","createdAt":"2019-08-24T15:27:15Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1063#issuecomment-524559367","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDU2NzU1MzM5NA==","author":{"login":"hawkins"},"authorAssociation":"NONE","body":"@singh811 Have you made any progress on this? I'd like to see this feature in too, so I'm happy to help if you have started, else I'll start and open a draft PR.\n\nEdit 4mo later: was not able to figure out how to structure the code in this repo, so I did not make significant progress.","createdAt":"2019-12-19T16:07:50Z","includesCreatedEdit":true,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"CONFUSED","users":{"totalCount":1}}],"url":"https://github.com/PyGithub/PyGithub/issues/1063#issuecomment-567553394","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDYzNTk2NDcwMw==","author":{"login":"szewczykmira"},"authorAssociation":"NONE","body":"Hi @singh811 how's the work going? It's the feature I'm dreaming about ;)","createdAt":"2020-05-29T13:12:25Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1063#issuecomment-635964703","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDY1MzMxMjQ3OQ==","author":{"login":"aztlan2k"},"authorAssociation":"NONE","body":"@sfdye @singh811  @hawkins @nbraud \r\nDoes anyone have any idea how difficult a task this would be?  is it a major task?\r\n\r\nI'm wondering if there's any guidance on how to get it done?","createdAt":"2020-07-03T03:01:39Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1063#issuecomment-653312479","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDY2Nzg5NjU1MQ==","author":{"login":"s-t-e-v-e-n-k"},"authorAssociation":"COLLABORATOR","body":"Closing in favour of #1621 ","createdAt":"2020-08-03T08:50:29Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1063#issuecomment-667896551","viewerDidAuthor":false}],"createdAt":"2019-03-15T19:22:21Z","number":1063,"state":"CLOSED","title":"Add support for the Checks API","url":"https://github.com/PyGithub/PyGithub/issues/1063"},{"author":{"id":"MDQ6VXNlcjIyNjMwNjg0","is_bot":false,"login":"Abdur-rahmaanJ","name":"Abdur-Rahmaan Janhangeer"},"body":"currently you get issue title and number. add author info / who opened issue and when","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDQ5MjE5MTkyMg==","author":{"login":"stale"},"authorAssociation":"NONE","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","createdAt":"2019-05-14T11:05:31Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1062#issuecomment-492191922","viewerDidAuthor":false}],"createdAt":"2019-03-15T10:14:12Z","number":1062,"state":"CLOSED","title":"add issue author and time opened to get_issue()","url":"https://github.com/PyGithub/PyGithub/issues/1062"},{"author":{"id":"MDQ6VXNlcjIyNjMwNjg0","is_bot":false,"login":"Abdur-rahmaanJ","name":"Abdur-Rahmaan Janhangeer"},"body":"https://github.com/PyGithub/PyGithub/issues/825 describes how to get closed issues, but how to get number of closed issues? i see a totalCount but how to use it?","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDQ3MzIzMTcwOQ==","author":{"login":"Abdur-rahmaanJ"},"authorAssociation":"NONE","body":"this can be done by repo.get_issues(state='open')[0] - total_open_count but native better","createdAt":"2019-03-15T10:17:20Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1061#issuecomment-473231709","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQ5MjE5MTkxOA==","author":{"login":"stale"},"authorAssociation":"NONE","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","createdAt":"2019-05-14T11:05:30Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1061#issuecomment-492191918","viewerDidAuthor":false}],"createdAt":"2019-03-14T08:17:43Z","number":1061,"state":"CLOSED","title":"get number of closed issues","url":"https://github.com/PyGithub/PyGithub/issues/1061"},{"author":{"id":"MDQ6VXNlcjIyNjMwNjg0","is_bot":false,"login":"Abdur-rahmaanJ","name":"Abdur-Rahmaan Janhangeer"},"body":"the examples all use login to get public info, i.e. info you can get without login. or did  i get it wrong?","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDQ5MTczNTU2OQ==","author":{"login":"stale"},"authorAssociation":"NONE","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","createdAt":"2019-05-13T08:52:51Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1060#issuecomment-491735569","viewerDidAuthor":false}],"createdAt":"2019-03-14T07:45:14Z","number":1060,"state":"CLOSED","title":"add without auth examples","url":"https://github.com/PyGithub/PyGithub/issues/1060"},{"author":{"id":"MDQ6VXNlcjQyNjc4NA==","is_bot":false,"login":"remram44","name":"Remi Rampin"},"body":"```\r\nPython 3.6.7 (default, Oct 22 2018, 11:32:17) \r\n[GCC 8.2.0] on linux\r\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\r\n>>> import github\r\n>>> gh = github.Github('mytoken')\r\n>>> repo = gh.get_repo('VIDA-NYU/reprozip')\r\n>>> repo.get_commit('master')\r\nCommit(sha=\"a9f1ea3767e2ae357d8e67d77554845d65f4c2e7\")\r\n>>> repo.get_contents('/', 'a9f1ea3767e2ae357d8e67d77554845d65f4c2e7')\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"lib/python3.6/site-packages/github/Repository.py\", line 1479, in get_contents\r\n    return self.get_file_contents(path, ref)\r\n  File \"lib/python3.6/site-packages/github/Repository.py\", line 1503, in get_file_contents\r\n    return github.ContentFile.ContentFile(self._requester, headers, data, completed=True)\r\n  File \"lib/python3.6/site-packages/github/GithubObject.py\", line 252, in __init__\r\n    GithubObject.__init__(self, requester, headers, attributes, completed)\r\n  File \"lib/python3.6/site-packages/github/GithubObject.py\", line 86, in __init__\r\n    self._storeAndUseAttributes(headers, attributes)\r\n  File \"lib/python3.6/site-packages/github/GithubObject.py\", line 98, in _storeAndUseAttributes\r\n    self._useAttributes(attributes)\r\n  File \"lib/python3.6/site-packages/github/ContentFile.py\", line 192, in _useAttributes\r\n    if \"content\" in attributes:  # pragma no branch\r\nTypeError: argument of type 'NoneType' is not iterable\r\n```\r\n*[edit: removed my token (and revoked it). Doh!]*\r\n\r\nSeems to be a regression.","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDQ3NTUzNDg4NA==","author":{"login":"s-t-e-v-e-n-k"},"authorAssociation":"COLLABORATOR","body":"I can reproduce this, looks like GitHub is returning a 302 redirect for contents of '/', currently thinking about how to solve this.","createdAt":"2019-03-22T08:34:36Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1059#issuecomment-475534884","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQ5NDMwNTA5NA==","author":{"login":"stale"},"authorAssociation":"NONE","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","createdAt":"2019-05-21T09:02:04Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1059#issuecomment-494305094","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQ5NDM4MzEzNg==","author":{"login":"remram44"},"authorAssociation":"NONE","body":"This is still an issue. Using stale bot when you don't reply to users is incredibly rude.","createdAt":"2019-05-21T13:07:21Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":1}}],"url":"https://github.com/PyGithub/PyGithub/issues/1059#issuecomment-494383136","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs4_LqXc","author":{"login":"rjackoby-r7"},"authorAssociation":"NONE","body":"Any updates?","createdAt":"2022-03-06T19:13:00Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_DOWN","users":{"totalCount":1}}],"url":"https://github.com/PyGithub/PyGithub/issues/1059#issuecomment-1060021724","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs5C9Lj-","author":{"login":"RomanMytsko"},"authorAssociation":"NONE","body":"I got a similar issue.","createdAt":"2022-05-11T08:17:42Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1059#issuecomment-1123334398","viewerDidAuthor":false}],"createdAt":"2019-03-11T19:36:36Z","number":1059,"state":"CLOSED","title":"Exception raised in get_contents()","url":"https://github.com/PyGithub/PyGithub/issues/1059"},{"author":{"id":"MDQ6VXNlcjY1MzI1MTA=","is_bot":false,"login":"shyam334","name":"Shyam Sundar"},"body":"Hello Guys,\r\n\r\nI was using the library to automate a bit of the Project board feature, and noticed that there isn't a `get_column` method. I thought I'd report it as an issue/feature request.\r\nThe intent is to select a particular column in the Project board.\r\n\r\nCorresponding GH api : `GET /projects/columns/:column_id`\r\n\r\nhttps://developer.github.com/v3/projects/columns/#get-a-project-column\r\nhttps://developer.github.com/enterprise/2.16/v3/projects/columns/#get-a-project-column\r\n\r\nThanks.","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDUwNzE3Nzc2NQ==","author":{"login":"viv2793"},"authorAssociation":"NONE","body":"@sfdye @shyam334 Can anyone assign this to me ?","createdAt":"2019-07-01T08:55:18Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1057#issuecomment-507177765","viewerDidAuthor":false}],"createdAt":"2019-03-05T05:33:37Z","number":1057,"state":"CLOSED","title":"Missing api for selecting a column in the Project board","url":"https://github.com/PyGithub/PyGithub/issues/1057"},{"author":{"id":"MDQ6VXNlcjM5ODg5","is_bot":false,"login":"yarikoptic","name":"Yaroslav Halchenko"},"body":"Originally reported/troubleshooted in https://github.com/datalad/datalad/pull/3180#issuecomment-468321921\r\n\r\nUnfortunately I didn't come up with a fix or bisection, so no PR - only the \"issue\".  \r\nI am doing smth like (code, now with the workaround, is actually [here](https://github.com/datalad/datalad/pull/3180/files#diff-2700e603a7dcfb78502b8d5bd5c3a532R171))\r\n```\r\nses = gh.Github(user_name, password=password)\r\nuser = ses.get_user()\r\n```\r\nand then asking for `user.name` to sense if 2FA is needed.  It used (with 1.40.0 in Debian) to throw TwoFactorException but with 1.43.5 I am getting a generic GtihubException with code 401 and data `{u'documentation_url': u'https://developer.github.com/v3/auth#working-with-two-factor-authentication', u'message': u'Must specify two-factor authentication OTP code.'} `.\r\nHere is a pdb of the relevant piece and header if would be of any value\r\n```\r\n(Pdb) re.match(r'.*required.*', headers[Consts.headerOTP])\r\n*** KeyError: 'X-GitHub-OTP'\r\n(Pdb) p Consts.headerOTP\r\n'X-GitHub-OTP'\r\n(Pdb) import pprint\r\n(Pdb) pprint.pprint(headers)\r\n{'access-control-allow-origin': '*',\r\n 'access-control-expose-headers': 'ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Reset, X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type',\r\n 'content-length': '160',\r\n 'content-security-policy': \"default-src 'none'\",\r\n 'content-type': 'application/json; charset=utf-8',\r\n 'date': 'Mon, 04 Mar 2019 05:03:04 GMT',\r\n 'referrer-policy': 'origin-when-cross-origin, strict-origin-when-cross-origin',\r\n 'server': 'GitHub.com',\r\n 'status': '401 Unauthorized',\r\n 'strict-transport-security': 'max-age=31536000; includeSubdomains; preload',\r\n 'x-content-type-options': 'nosniff',\r\n 'x-frame-options': 'deny',\r\n 'x-github-media-type': 'github.v3; format=json',\r\n 'x-github-otp': 'required; app',\r\n 'x-github-request-id': 'ACEE:29A3:6BF31F:12E65BD:5C7CB188',\r\n 'x-ratelimit-limit': '60',\r\n 'x-ratelimit-remaining': '57',\r\n 'x-ratelimit-reset': '1551679384',\r\n 'x-xss-protection': '1; mode=block'}\r\n(Pdb) n\r\n> /home/yoh/proj/misc/PyGithub/github/Requester.py(295)__createException()\r\n-> elif status == 401 and Consts.headerOTP in headers and re.match(r'.*required.*', headers[Consts.headerOTP]):\r\n(Pdb) n\r\n```","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDQ4ODkzOTcxOQ==","author":{"login":"stale"},"authorAssociation":"NONE","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","createdAt":"2019-05-03T05:16:13Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1056#issuecomment-488939719","viewerDidAuthor":false}],"createdAt":"2019-03-04T05:12:30Z","number":1056,"state":"CLOSED","title":"Regular GithubException gets raised instead of TwoFactorException in 1.43.5","url":"https://github.com/PyGithub/PyGithub/issues/1056"},{"author":{"id":"MDQ6VXNlcjI5OTQyNDYy","is_bot":false,"login":"mchrusci","name":"Michal Chruscinski"},"body":"Calling `get_api_status()` raises exception:\r\n```\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"/home/mchrusci/venv3/lib/python3.5/site-packages/github/MainClass.py\", line 718, in get_api_status_messages\r\n    DEFAULT_STATUS_URL + \"/api/messages.json\"\r\n  File \"/home/mchrusci/venv3/lib/python3.5/site-packages/github/Requester.py\", line 264, in requestJsonAndCheck\r\n    return self.__check(*self.requestJson(verb, url, parameters, headers, input, self.__customConnection(url)))\r\n  File \"/home/mchrusci/venv3/lib/python3.5/site-packages/github/Requester.py\", line 275, in __check\r\n    raise self.__createException(status, responseHeaders, output)\r\ngithub.GithubException.GithubException: 404 {'data': '<h1>Not Found</h1>'}\r\n```\r\n\r\nstatus.github.com says it has been deprecated:\r\n![image](https://user-images.githubusercontent.com/29942462/53645048-53023700-3c38-11e9-8e6e-9584840a66b9.png)\r\n","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDQ4ODAwMDcxMQ==","author":{"login":"stale"},"authorAssociation":"NONE","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","createdAt":"2019-04-30T15:34:21Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1055#issuecomment-488000711","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQ5MDMxNzM0Mw==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"This has been fixed in 6efd631","createdAt":"2019-05-08T01:56:41Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1055#issuecomment-490317343","viewerDidAuthor":false}],"createdAt":"2019-03-01T14:40:44Z","number":1055,"state":"CLOSED","title":"Exception raised during get_api_status() ","url":"https://github.com/PyGithub/PyGithub/issues/1055"},{"author":{"id":"MDQ6VXNlcjU3NDkx","is_bot":false,"login":"TimGebhardt","name":"Tim Gebhardt"},"body":"I would like to query the information about GitHub nested teams.  The \"parent\" field on a Team resource seems to be missing: \r\nhttps://developer.github.com/v3/teams/","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDQ2ODU0MzQyOQ==","author":{"login":"s-t-e-v-e-n-k"},"authorAssociation":"COLLABORATOR","body":"Nested Teams is still in beta, we don't current use the custom media type of hellcat-preview anywhere, so our API responses won't include them.","createdAt":"2019-03-01T05:00:59Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1054#issuecomment-468543429","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQ4NzgyNTk2Mw==","author":{"login":"stale"},"authorAssociation":"NONE","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","createdAt":"2019-04-30T05:34:20Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1054#issuecomment-487825963","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDU3NzcwNDEyMw==","author":{"login":"radykal-com"},"authorAssociation":"NONE","body":"I think nested teams went out of beta since this issue was created","createdAt":"2020-01-23T14:27:03Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1054#issuecomment-577704123","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDU3NzkzOTA2NQ==","author":{"login":"s-t-e-v-e-n-k"},"authorAssociation":"COLLABORATOR","body":"This has also been fixed since in master.","createdAt":"2020-01-24T00:18:41Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1054#issuecomment-577939065","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDU3ODAyOTQ4OA==","author":{"login":"radykal-com"},"authorAssociation":"NONE","body":"Nice, so the next release will include it","createdAt":"2020-01-24T07:58:07Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1054#issuecomment-578029488","viewerDidAuthor":false}],"createdAt":"2019-02-27T22:23:49Z","number":1054,"state":"CLOSED","title":"Missing \"parent\" field from Teams","url":"https://github.com/PyGithub/PyGithub/issues/1054"},{"author":{"id":"MDQ6VXNlcjI1NjgxNjQ=","is_bot":false,"login":"vaMuchenje","name":""},"body":"I can't find any documentation on how i can do a `git diff` between commits. How would i go about doing this and what does it return?","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDQ4MDUxNjY0Mg==","author":{"login":"Photonios"},"authorAssociation":"NONE","body":"You can use the `compare` method as documented here:\r\n\r\nhttps://pygithub.readthedocs.io/en/latest/github_objects/Repository.html#github.Repository.Repository.compare","createdAt":"2019-04-06T16:16:30Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":3}}],"url":"https://github.com/PyGithub/PyGithub/issues/1052#issuecomment-480516642","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQ5OTE1NjgzMQ==","author":{"login":"stale"},"authorAssociation":"NONE","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","createdAt":"2019-06-05T16:26:26Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1052#issuecomment-499156831","viewerDidAuthor":false}],"createdAt":"2019-02-23T19:12:44Z","number":1052,"state":"CLOSED","title":"How to do a 'git diff' between commits using PyGithub?","url":"https://github.com/PyGithub/PyGithub/issues/1052"},{"author":{"id":"MDQ6VXNlcjQ0MDc3ODc=","is_bot":false,"login":"rs2","name":"Pav A"},"body":"E.g. there is no way to access existing `PullRequestComments` in https://github.com/PyGithub/PyGithub/blob/6a89eb645dc219b8c2cab6eeb283e05d3f279616/github/PullRequestReview.py#L142. \r\n\r\nFor newly created reviews, these are supplied in https://github.com/PyGithub/PyGithub/blob/b51227681df37d056415a237746e68c18c05c786/github/PullRequest.py#L439.\r\n\r\nXREF: https://github.com/PyGithub/PyGithub/issues/941, https://github.com/PyGithub/PyGithub/issues/645\r\n","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDQ2NjM3NTc3Ng==","author":{"login":"rs2"},"authorAssociation":"NONE","body":"More spec needed","createdAt":"2019-02-22T12:09:12Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1051#issuecomment-466375776","viewerDidAuthor":false}],"createdAt":"2019-02-22T11:49:33Z","number":1051,"state":"CLOSED","title":"[FEATURE REQUEST]: complete a set of methods and properties for PullRequestReview","url":"https://github.com/PyGithub/PyGithub/issues/1051"},{"author":{"id":"MDQ6VXNlcjU1OTMxNw==","is_bot":false,"login":"brianjmurrell","name":"Brian J. Murrell"},"body":"Am I reading the docs correctly and understanding that there is no support for [dismissing a PR review](https://developer.github.com/v3/pulls/reviews/#dismiss-a-pull-request-review)?","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDQ2NjQwMzgwMQ==","author":{"login":"brianjmurrell"},"authorAssociation":"CONTRIBUTOR","body":"Lacking this functionality, is there any functionality to use the PyGithub context or repo object, etc. to POST an arbitrary payload to an arbitrary URL, to temporarily fill gaps in functionality like this?","createdAt":"2019-02-22T13:55:10Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1050#issuecomment-466403801","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQ2ODQ1MTY2MQ==","author":{"login":"brianjmurrell"},"authorAssociation":"CONTRIBUTOR","body":"Cheers!","createdAt":"2019-02-28T21:47:57Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1050#issuecomment-468451661","viewerDidAuthor":false}],"createdAt":"2019-02-22T01:36:28Z","number":1050,"state":"CLOSED","title":"dismiss a PR review?","url":"https://github.com/PyGithub/PyGithub/issues/1050"},{"author":{"id":"MDQ6VXNlcjU3ODU0Mw==","is_bot":false,"login":"webknjaz","name":"🇺🇦 Sviatoslav Sydorenko (Святослав Сидоренко)"},"body":"It should use `base_url` supplied by the user. Otherwise, it's unusable with GitHub Enterprise.","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDQ2OTMwNjY4OQ==","author":{"login":"KVGarg"},"authorAssociation":"NONE","body":"I would like to work upon this issue. Need some information regarding solving this issue. Should an extra argument be passed to `get_access_token()` named - `base_url` with a default value of `DEFAULT_BASE_URL` ? ","createdAt":"2019-03-04T16:00:23Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1049#issuecomment-469306689","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDUyNjgyNTEwMQ==","author":{"login":"s-t-e-v-e-n-k"},"authorAssociation":"COLLABORATOR","body":"Which version are you looking at? The current master of GithubIntegration.get_access_token() uses self.base_url to construct the URL.","createdAt":"2019-08-31T12:03:26Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1049#issuecomment-526825101","viewerDidAuthor":false}],"createdAt":"2019-02-20T23:48:47Z","number":1049,"state":"CLOSED","title":"[BUG] get_access_token uses hardcoded github URL","url":"https://github.com/PyGithub/PyGithub/issues/1049"},{"author":{"id":"MDQ6VXNlcjQyNzU2MjYx","is_bot":false,"login":"NarenR21","name":""},"body":"","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDQ2NTIxODM2OA==","author":{"login":"NarenR21"},"authorAssociation":"NONE","body":"I'm using repl.it and am trying to use discord to control github. How do I get github .py?","createdAt":"2019-02-19T16:57:20Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1048#issuecomment-465218368","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQ4NTE0NTg4MQ==","author":{"login":"stale"},"authorAssociation":"NONE","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","createdAt":"2019-04-20T17:37:16Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1048#issuecomment-485145881","viewerDidAuthor":false}],"createdAt":"2019-02-19T16:56:06Z","number":1048,"state":"CLOSED","title":"How do I get github.py?","url":"https://github.com/PyGithub/PyGithub/issues/1048"},{"author":{"id":"MDQ6VXNlcjQzMDYy","is_bot":false,"login":"kdeloach","name":"Kevin DeLoach"},"body":"### Description\r\n\r\n**Version**: 1.43.5\r\n\r\nThe `get_git_ref` function doesn't handle the case where `ref` is not found, but other refs prefixed by `ref` exist. The `get_git_ref` function should either return a list of `GitRefs` in this case or raise `UnknownObjectException`.\r\n\r\nFrom the [documentation](https://developer.github.com/v3/git/refs/):\r\n\r\n> If the ref doesn't exist in the repository, but existing refs start with ref they will be returned as an array. For example, a call to get the data for a branch named feature, which doesn't exist, would return head refs including featureA and featureB which do.\r\n\r\n### Demonstration\r\n\r\nSingle object returned when ref exists, as expected:\r\n```py\r\nIn [23]: ref = repo.get_git_ref('tags/bar')\r\n\r\nIn [24]: ref\r\nOut[24]: GitRef(ref=\"refs/tags/bar\")\r\n\r\nIn [25]: ref._rawData\r\nOut[25]:\r\n{'node_id': 'MDM6UmVmNTE5NjI3MzpiYXI=',\r\n 'object': {'sha': '70ed626e0fec6d033b5066a322ce77565e67f0ff',\r\n  'type': 'commit',\r\n  'url': 'https://api.github.com/repos/repo/www/git/commits/70ed626e0fec6d033b5066a322ce77565e67f0ff'},\r\n 'ref': 'refs/tags/bar',\r\n 'url': 'https://api.github.com/repos/repo/www/git/refs/tags/bar'}\r\n```\r\n\r\n\"Null\" ref returned when ref not found, but multiple prefix matches found:\r\n\r\n```py\r\nIn [26]: ref = repo.get_git_ref('heads/bar')\r\n\r\nIn [27]: ref\r\nOut[27]: GitRef(ref=None)\r\n\r\nIn [28]: ref._rawData\r\nOut[28]:\r\n[{'node_id': 'MDM6UmVmNTE5NjI3MzpiYXJfMQ==',\r\n  'object': {'sha': '70ed626e0fec6d033b5066a322ce77565e67f0ff',\r\n   'type': 'commit',\r\n   'url': 'https://api.github.com/repos/repo/www/git/commits/70ed626e0fec6d033b5066a322ce77565e67f0ff'},\r\n  'ref': 'refs/heads/bar_1',\r\n  'url': 'https://api.github.com/repos/repo/www/git/refs/heads/bar_1'},\r\n {'node_id': 'MDM6UmVmNTE5NjI3MzpiYXJfMg==',\r\n  'object': {'sha': 'baf8b0ebbe4c9974a6a255557efd61f2c51751e3',\r\n   'type': 'commit',\r\n   'url': 'https://api.github.com/repos/repo/www/git/commits/baf8b0ebbe4c9974a6a255557efd61f2c51751e3'},\r\n  'ref': 'refs/heads/bar_2',\r\n  'url': 'https://api.github.com/repos/repo/www/git/refs/heads/bar_2'}]\r\n```\r\n### Conclusion\r\nI understand this is an edge case, but most people probably don't expect to ever receive a \"null\" ref in this case. The least surprising thing to do here may be to raise `UnknownObjectException` if there is no exact match for `ref`. Additionally, there may be value in providing a flag to return prefix match results instead of throwing an exception.\r\n","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDQ4Mzk0OTc0Ng==","author":{"login":"stale"},"authorAssociation":"NONE","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","createdAt":"2019-04-17T06:06:37Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1047#issuecomment-483949746","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDUwNDE2Nzg1Ng==","author":{"login":"stale"},"authorAssociation":"NONE","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","createdAt":"2019-06-20T20:18:46Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1047#issuecomment-504167856","viewerDidAuthor":false}],"createdAt":"2019-02-16T05:57:08Z","number":1047,"state":"CLOSED","title":"Repository.get_git_ref doesn't handle prefix matches","url":"https://github.com/PyGithub/PyGithub/issues/1047"},{"author":{"id":"MDQ6VXNlcjE0MjcwNjM=","is_bot":false,"login":"Powersource","name":"Powersource"},"body":"I just got an error `TypeError: '_Slice' object does not support indexing` when I tried to\r\n\r\n```python3\r\ntags = repo.get_tags()[:25]\r\ntags[0]\r\n```","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDQ4MzUyMTc2Ng==","author":{"login":"stale"},"authorAssociation":"NONE","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","createdAt":"2019-04-16T05:57:08Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1046#issuecomment-483521766","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQ4MzUyMjY0NA==","author":{"login":"Powersource"},"authorAssociation":"NONE","body":"Still applies","createdAt":"2019-04-16T06:01:27Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1046#issuecomment-483522644","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDUwMjMzOTk1MA==","author":{"login":"stale"},"authorAssociation":"NONE","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","createdAt":"2019-06-15T06:33:01Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1046#issuecomment-502339950","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDUwMzkyMTQwMQ==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"convert to list first?","createdAt":"2019-06-20T08:01:17Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1046#issuecomment-503921401","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDUwNDczMjE4Ng==","author":{"login":"Powersource"},"authorAssociation":"NONE","body":"Due to some missing feature in `PyGithub||the github api` relating to tags, we switched to using the graphql api for this task. You can close this issue if you want.","createdAt":"2019-06-23T08:45:46Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1046#issuecomment-504732186","viewerDidAuthor":false}],"createdAt":"2019-02-15T05:15:42Z","number":1046,"state":"CLOSED","title":"Allow indexing in PaginatedList _Slice objects","url":"https://github.com/PyGithub/PyGithub/issues/1046"},{"author":{"id":"MDQ6VXNlcjIyNDY5NA==","is_bot":false,"login":"walbon","name":"Gustavo Walbon"},"body":"So, I have a list of issues and there are some links there for files that attaches. I can not find out a direct method to capture the files in a specific comments of an issue.","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDQ4MzMzMzg3NA==","author":{"login":"stale"},"authorAssociation":"NONE","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","createdAt":"2019-04-15T16:57:07Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1045#issuecomment-483333874","viewerDidAuthor":false}],"createdAt":"2019-02-14T16:13:28Z","number":1045,"state":"CLOSED","title":"Getting files from issue comments","url":"https://github.com/PyGithub/PyGithub/issues/1045"},{"author":{"id":"MDQ6VXNlcjMxNDkyNDIy","is_bot":false,"login":"YakDriver","name":"Dirk Avery"},"body":"Fixed by #1043 \r\n\r\nURL of Satsuki, a project using PyGithub, has changed. ","comments":[],"createdAt":"2019-02-12T13:39:00Z","number":1044,"state":"CLOSED","title":"Satsuki, project using PyGithub, updated URL","url":"https://github.com/PyGithub/PyGithub/issues/1044"},{"author":{"id":"MDQ6VXNlcjEyMDAyMjA=","is_bot":false,"login":"merlink01","name":""},"body":"It seems there is no cleanup function for releasing old connections.\r\n\r\nResourceWarning: unclosed <ssl.SSLSocket fd=464, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=0, laddr=('192.168.....8', 53250), raddr=('192.30.....', 443)>\r\n\r\nAm I wrong?","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDQ4MDUyMTAxMg==","author":{"login":"stale"},"authorAssociation":"NONE","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","createdAt":"2019-04-06T17:13:20Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1040#issuecomment-480521012","viewerDidAuthor":false}],"createdAt":"2019-02-05T16:26:14Z","number":1040,"state":"CLOSED","title":"No .close() command","url":"https://github.com/PyGithub/PyGithub/issues/1040"},{"author":{"id":"MDQ6VXNlcjE4MTczNTY5","is_bot":false,"login":"KatarzynaSzlachetka","name":"KatarzynaSzlachetka"},"body":"dsd","comments":[],"createdAt":"2019-02-03T15:14:42Z","number":1037,"state":"CLOSED","title":"Test2","url":"https://github.com/PyGithub/PyGithub/issues/1037"},{"author":{"id":"MDQ6VXNlcjE4MTczNTY5","is_bot":false,"login":"KatarzynaSzlachetka","name":"KatarzynaSzlachetka"},"body":"sdsd","comments":[],"createdAt":"2019-02-03T15:09:37Z","number":1036,"state":"CLOSED","title":"Test2","url":"https://github.com/PyGithub/PyGithub/issues/1036"},{"author":{"id":"MDQ6VXNlcjE4MTczNTY5","is_bot":false,"login":"KatarzynaSzlachetka","name":"KatarzynaSzlachetka"},"body":"sdsd","comments":[],"createdAt":"2019-02-03T15:08:06Z","number":1035,"state":"CLOSED","title":"Test2","url":"https://github.com/PyGithub/PyGithub/issues/1035"},{"author":{"id":"MDQ6VXNlcjI2MzM2NTE0","is_bot":false,"login":"whoopsmith","name":"Richard A. Smith"},"body":"I'm using pyGithub to automate building of a testing branch from outstanding PRs marked as ready for testing.\r\n\r\nTo do that I query all the commits in the ref associated with the PR and build a pick list of commits to cherry-pick on to the upstream base.\r\n\r\nIn general its working great, however the commits in the commit list of a PR come seem to be listed in the same order that github shows them in.  This is ordered by commit date instead of by parent child (a \"feature\" I really don't like BTW)\r\n\r\nBecause of this my tool will build a cherry-pick list of commits in the wrong order which causes merge conflicts. \r\n\r\nIs there a way to get the list of commits associated with the PR in parent child order instead of date? ","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDQ3OTA1Nzc2NA==","author":{"login":"stale"},"authorAssociation":"NONE","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","createdAt":"2019-04-02T15:40:37Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1033#issuecomment-479057764","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQ3OTA3Nzk0Mw==","author":{"login":"whoopsmith"},"authorAssociation":"NONE","body":"Bump.  Stale bot wants to close this.","createdAt":"2019-04-02T16:22:37Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1033#issuecomment-479077943","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQ5Nzk2MDc4OA==","author":{"login":"stale"},"authorAssociation":"NONE","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","createdAt":"2019-06-01T16:57:09Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1033#issuecomment-497960788","viewerDidAuthor":false}],"createdAt":"2019-02-01T14:42:06Z","number":1033,"state":"CLOSED","title":"Retreive commits in ref in parent child order","url":"https://github.com/PyGithub/PyGithub/issues/1033"},{"author":{"id":"MDQ6VXNlcjYzMjQwNw==","is_bot":false,"login":"stpierre","name":"Chris St. Pierre"},"body":"https://pygithub.readthedocs.io/en/latest/github_objects/Organization.html#github.Organization.Organization.add_to_members passes the role as part of the query string: https://github.com/PyGithub/PyGithub/blob/master/github/Organization.py#L316\r\n\r\nBut Github expects it as a JSON payload. As a result, all new members are created as `member` (not as `admin`), and you can't update an organization member to `admin` with PyGithub.","comments":[],"createdAt":"2019-01-31T13:29:59Z","number":1030,"state":"CLOSED","title":"Organization.add_to_members() doesn't pass role correctly","url":"https://github.com/PyGithub/PyGithub/issues/1030"},{"author":{"id":"MDQ6VXNlcjI2NDQ=","is_bot":false,"login":"jd","name":"Julien Danjou"},"body":"Looks like the fix in #1010 only fixed a part of the problem(s) introduced in 1.43.4. With 1.43.5 I get:\r\n\r\n```\r\nFile \"/.tox/test/lib/python3.7/site-packages/github/MainClass.py\", line 790, in get_access_token\r\nresponse_text = response_text.decode('utf-8')\r\nAttributeError: 'str' object has no attribute 'decode'\r\n```\r\n","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDQ2MTE1MjIyNQ==","author":{"login":"webknjaz"},"authorAssociation":"CONTRIBUTOR","body":"I just hit the same issue...","createdAt":"2019-02-06T19:21:14Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1023#issuecomment-461152225","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQ2MjYzNTM2OQ==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"Looping in @Hanaasagi","createdAt":"2019-02-12T06:36:35Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1023#issuecomment-462635369","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQ2MjY2NjAyMA==","author":{"login":"Hanaasagi"},"authorAssociation":"CONTRIBUTOR","body":"After review #998, I think https://github.com/PyGithub/PyGithub/blob/master/github/MainClass.py#L789 should be removed.\r\n```Python\r\n        if atLeastPython3:\r\n            response_text = response_text.decode('utf-8')\r\n```\r\n\r\nBecause `httplib.HTTPResponse.read` returns `bytes`, but `requests.models.Response.text` returns `str`(Python3) or `unicode`(Python2) using, and the encoding is determined by HTTP header or `chardet`.\r\n\r\nReference:\r\n- https://github.com/python/cpython/blob/a31f4cc881992e84d351957bd9ac1a92f882fa39/Lib/http/client.py#L457\r\n- https://github.com/kennethreitz/requests/blob/c9309e4c59acfa757b34619205794e18f2009c43/requests/models.py#L861\r\n\r\nI will pull request to fix.","createdAt":"2019-02-12T08:32:49Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":1}}],"url":"https://github.com/PyGithub/PyGithub/issues/1023#issuecomment-462666020","viewerDidAuthor":false}],"createdAt":"2019-01-30T09:51:30Z","number":1023,"state":"CLOSED","title":"get_access_token is broken >= 1.43.3","url":"https://github.com/PyGithub/PyGithub/issues/1023"},{"author":{"id":"MDQ6VXNlcjI4ODA5MDM5","is_bot":false,"login":"SalvoPizzimento","name":"Salvo Pizzimento"},"body":"Hi all, i tried to get closed issues of PyGithub since 1st January 2019 with this simple code\r\n```\r\nPyGit = client.get_repo(\"PyGithub/PyGithub\")\r\n\r\ndate = datetime(2019, 1, 1, 0, 0)\r\nissues = PyGit.get_issues(state=\"closed\", since=date, sort=\"closed-desc\")\r\nfor issue in issues:\r\n\tprint(issue, issue.closed_at)\r\n```\r\nbut what i get is this\r\n\r\n> Issue(title=\"Github App unable to invite to org\", number=1018) 2019-01-16 15:37:19\r\n> Issue(title=\"dummy issue #911\", number=1017) 2019-01-15 08:29:21\r\n> Issue(title=\"GithubException: Repository access blocked\", number=1015) 2019-01-15 19:50:33\r\n> Issue(title=\"Add missing import to PullRequest\", number=1007) 2019-01-04 14:28:54\r\n> Issue(title=\"get_review_comments() method fails due to missing import\", number=1004) 2019-01-04 14:28:54\r\n> Issue(title=\"user.node_id missing\", number=1001) 2019-01-10 12:49:53\r\n> Issue(title=\"user.node_id missing \", number=999) 2019-01-10 12:50:52\r\n> Issue(title=\"raise BadCredentialException when using Github enterprise\", number=950) 2019-01-01 13:21:15\r\n> Issue(title=\"BadCredentialsException not raised on GitHub enterprise\", number=934) 2019-01-15 22:53:42\r\n> Issue(title=\"create PullRequest between forked repo to original\", number=792) 2018-05-18 02:52:21\r\n> Issue(title=\"Implement `__len__` (and/or `__bool__`) on PaginatedList\", number=579) 2019-01-15 22:53:41\r\n> Issue(title=\"GitHub integrations support\", number=449) 2017-01-27 16:34:41\r\n\r\nhow is this possible if I specified date with \"since\" option?","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDQ1NTQxNjUxNw==","author":{"login":"Hanaasagi"},"authorAssociation":"CONTRIBUTOR","body":"From GitHub API doc [List issues section](https://developer.github.com/v3/issues/#list-issues), we can know more info:\r\n>since: Only issues **updated** at or after this time are returned. This is a timestamp in ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ.\r\n\r\nFor example, in your output:\r\n```\r\nIssue(title=\"create PullRequest between forked repo to original\", number=792) 2018-05-18 02:52:21\r\n```\r\n[issues/792](https://github.com/PyGithub/PyGithub/issues/792) was closed on 18 May 2018, but  updated 12 days ago. So it will return.\r\n","createdAt":"2019-01-18T03:34:02Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1019#issuecomment-455416517","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQ1NTQ2MzU1Mg==","author":{"login":"SalvoPizzimento"},"authorAssociation":"NONE","body":"@Hanaasagi thanks for you explanation :D. Yesterday I was so sleepy that I totally missread doc, my bad.","createdAt":"2019-01-18T08:20:33Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1019#issuecomment-455463552","viewerDidAuthor":false}],"createdAt":"2019-01-17T21:05:35Z","number":1019,"state":"CLOSED","title":"get_issues() since=date gets older issues","url":"https://github.com/PyGithub/PyGithub/issues/1019"},{"author":{"id":"MDQ6VXNlcjExNjM3MjEy","is_bot":false,"login":"alex036","name":"Alex"},"body":"Python 3.6\r\nCode I'm using:\r\n``` \r\nfrom github import GithubIntegration, Github\r\n\r\nprivate_key = open('pem.pem').read()\r\n\r\nintegration_id = XXX\r\ninstallation_id = YYY\r\n\r\nintegration = GithubIntegration(integration_id, private_key)\r\nauth = integration.get_access_token(installation_id)\r\ng = Github(auth.token)\r\n\r\norg = g.get_organization('<org-name>')\r\n\r\norg.invite_user(email=\"email@email.com\")\r\n```\r\n\r\nI'm unable to invite a user/email, I get the following error:\r\n`{\r\n    \"message\": \"Validation Failed\",\r\n    \"errors\": [\r\n        {\r\n            \"resource\": \"OrganizationInvitation\",\r\n            \"code\": \"unprocessable\",\r\n            \"field\": \"data\",\r\n            \"message\": \"Inviter must be an organization admin\"\r\n        }\r\n    ],\r\n    \"documentation_url\": \"https://developer.github.com/v3/orgs/members/#create-organization-invitation\"\r\n}`\r\n\r\nUsing that token though I'm able to list teams within the org, list repos, etc. Only thing I'm unable to do is invite users, which is what this whole app is meant to do.\r\n\r\nEDIT: Wanted to add that I'm an admin/owner in the org, and I'm the one who created and added the Github App to the Org.\r\n\r\nThe App has the following permissions:\r\nOrganization members : Read & Write","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDQ1NDgyMzcyNw==","author":{"login":"alex036"},"authorAssociation":"NONE","body":"There are two different types of requests that can be made by GitHub Apps:\r\n\r\nServer-to-server requests: This is when a GitHub App authenticates as itself or as an installation to a repository. Authenticating as a GitHub App or installation is covered in Authenticating with GitHub Apps documentation. https://developer.github.com/apps/building-github-apps/authenticating-with-github-apps/\r\n\r\nUser-to-server requests: This is when a GitHub App acts on behalf of a user. Authenticating on behalf of a user for GitHub Apps is covered in Identifying and authorizing users for GitHub Apps documentation. https://developer.github.com/apps/building-github-apps/identifying-and-authorizing-users-for-github-apps/#identifying-and-authorizing-users-for-github-apps\r\n\r\nIn this case, since I am trying to create an invitation to an organization, I will need to make a user-to-server API request to get and use the user's access token.\r\n\r\nClosing this.","createdAt":"2019-01-16T15:37:19Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1018#issuecomment-454823727","viewerDidAuthor":false}],"createdAt":"2019-01-15T16:09:39Z","number":1018,"state":"CLOSED","title":"Github App unable to invite to org","url":"https://github.com/PyGithub/PyGithub/issues/1018"},{"author":{"id":"MDQ6VXNlcjM4MzIzNjU=","is_bot":false,"login":"jschueller","name":"Julien Schueller"},"body":"please ignore","comments":[],"createdAt":"2019-01-15T08:28:52Z","number":1017,"state":"CLOSED","title":"dummy issue #911","url":"https://github.com/PyGithub/PyGithub/issues/1017"},{"author":{"id":"MDQ6VXNlcjQ2NjAwNzQ5","is_bot":false,"login":"TestSMM","name":""},"body":"Hi everybody, I get this error when I try to retrieve all public repositories on Github (not single user) with `get_repos() `function:\r\n`\r\ngithub.GithubException.GithubException: 403 {'message': 'Repository access blocked', 'block': {'reason': 'unavailable', 'created_at': '2014-01-31T22:32:14Z', 'html_url': 'https://github.com/tos'}}`\r\n","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDQ1NDUyNzAzMg==","author":{"login":"TestSMM"},"authorAssociation":"NONE","body":"I found that this error was related to a repository deleted but still in GitHub's database of all public repositories. To avoid this error I simply catched the exception and bypassed the broken record.","createdAt":"2019-01-15T19:50:18Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":5}}],"url":"https://github.com/PyGithub/PyGithub/issues/1015#issuecomment-454527032","viewerDidAuthor":false}],"createdAt":"2019-01-11T14:34:37Z","number":1015,"state":"CLOSED","title":"GithubException: Repository access blocked","url":"https://github.com/PyGithub/PyGithub/issues/1015"},{"author":{"id":"MDQ6VXNlcjE5MzQ4MDA=","is_bot":false,"login":"vivek14632","name":"Vivek Kumar Singh"},"body":"I am using following code to get the number of contributors of a repository\r\n\r\n```\r\nfrom github import Github\r\ng = Github(\"*****github Access token****\")\r\nrepo = g.get_repo('mui-org/material-ui')\r\ncontributors_count = repo.get_contributors().totalCount\r\n```\r\nIt is giving number of contributors as **443**, however, the correct number of contributors on the github website is **1077**.\r\n\r\nCan some one tell why am I getting different values?\r\n\r\nAlso, is there any other function in PyGithub to get correct number of contributors?\r\n\r\n","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDQ1Mzk1MTExMA==","author":{"login":"Hanaasagi"},"authorAssociation":"CONTRIBUTOR","body":"In PyGithub 1.43.4, `get_contributors` method return a [`PaginatedList`](https://github.com/PyGithub/PyGithub/blob/v1.43.4/github/PaginatedList.py#L100) Object\r\n\r\nWhen get `totalCount`,  it add querystring `per_page=1` in request to make sure the total page is the total count\r\n\r\nLike this:\r\n\r\n`https://api.github.com/repos/mui-org/material-ui/contributors?per_page=1`\r\n\r\nAnd the response header has the link field the show next page url and last page url. More detail, please see [PaginatedList.py#L146](https://github.com/PyGithub/PyGithub/blob/v1.43.4/github/PaginatedList.py#L146)\r\n\r\n```Python\r\n    @property\r\n    def totalCount(self):\r\n        if not self.__totalCount:\r\n            params = {} if self.__nextParams is None else self.__nextParams.copy()\r\n            # set per_page = 1 so the totalCount is just the number of pages\r\n            params.update({\"per_page\": 1})\r\n            headers, data = self.__requester.requestJsonAndCheck(\r\n                \"GET\",\r\n                self.__firstUrl,\r\n                parameters=params,\r\n                headers=self.__headers\r\n            )\r\n            if 'link' not in headers:\r\n                if data and \"total_count\" in data:\r\n                    self.__totalCount = data[\"total_count\"]\r\n                elif data:\r\n                    self.__totalCount = len(data)\r\n                else:\r\n                    self.__totalCount = 0\r\n            else:\r\n                links = self.__parseLinkHeader(headers)\r\n                lastUrl = links.get(\"last\")\r\n                self.__totalCount = int(parse_qs(lastUrl)['page'][0])\r\n        return self.__totalCount\r\n```\r\n\r\nIn your code, it has the following `link` field\r\n\r\n```\r\n{\r\n 'link': '<https://api.github.com/repositories/23083156/contributors?per_page=1&page=2>; '\r\n         'rel=\"next\", '\r\n         '<https://api.github.com/repositories/23083156/contributors?per_page=1&page=443>; '\r\n         'rel=\"last\"'\r\n}\r\n```\r\n\r\nThe `totalCount` is 443. So where is the problem?\r\n\r\nGithub has the **anonymous contributors**.\r\n\r\n> GitHub identifies contributors by author email address. This endpoint groups contribution counts by GitHub user, which includes all associated email addresses. To improve performance, only the first 500 author email addresses in the repository link to GitHub users. The rest will appear as anonymous contributors without associated GitHub user information.\r\n-- [GitHub list-contributors API](https://developer.github.com/v3/repos/#list-contributors)\r\n\r\nAlso, there are some explanations in [GitHub Community](https://github.community/t5/GitHub-API-Development-and/API-Github-list-contributors/td-p/9631)","createdAt":"2019-01-14T09:59:14Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":1}}],"url":"https://github.com/PyGithub/PyGithub/issues/1014#issuecomment-453951110","viewerDidAuthor":false}],"createdAt":"2019-01-09T23:29:05Z","number":1014,"state":"CLOSED","title":"The number of contributors not correct using PyGithub","url":"https://github.com/PyGithub/PyGithub/issues/1014"},{"author":{"id":"MDQ6VXNlcjEyNzk2NDUw","is_bot":false,"login":"yalov","name":"Alexander"},"body":"There are \"lightweight tag\" and \"annotated tag\".\r\n\r\nThe tag `0.3.6` was created in the app as \"lightweight\". (Git Extensions app)\r\nThe tag `4.0.0`, I believe, is marked as annotated with `[...]` string. \r\n\r\n![](https://i.imgur.com/1wcjhJt.png)\r\n\r\n\r\nThe tag `4.0.0` was created as:\r\n``` py\r\nsha = repo.get_commits()[0].sha\r\nt = repo.create_git_tag(tag=\"4.0.0\", message=\"Test\", object=sha, type=\"commit\")\r\nrepo.create_git_ref('refs/tags/{}'.format(t.tag), t.sha)\r\n```\r\nHow to create a \"lightweight\" tag?\r\n\r\n------------\r\nUPD.\r\nAnswer:\r\n``` py\r\nsha = repo.get_commits()[0].sha\r\nrepo.create_git_ref('refs/tags/{}'.format(\"4.0.0\"), sha)\r\n```\r\n","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDQ1NTQ1NTEwMA==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"> Note that creating a tag object does not create the reference that makes a tag in Git. If you want to create an annotated tag in Git, you have to do this call to create the tag object, and then create the refs/tags/[tag] reference. If you want to create a lightweight tag, you only have to create the tag reference - this call would be unnecessary.\r\n\r\nhttps://developer.github.com/v3/git/tags/#create-a-tag-object\r\n\r\nso i think you can just use `create_git_ref`\r\n\r\n","createdAt":"2019-01-18T07:41:42Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":4}},{"content":"HOORAY","users":{"totalCount":1}}],"url":"https://github.com/PyGithub/PyGithub/issues/1011#issuecomment-455455100","viewerDidAuthor":false}],"createdAt":"2019-01-08T09:02:10Z","number":1011,"state":"CLOSED","title":"how to create \"lightweight\" tag?","url":"https://github.com/PyGithub/PyGithub/issues/1011"},{"author":{"id":"MDQ6VXNlcjUyMDk3NTc=","is_bot":false,"login":"xmnlab","name":"Ivan Ogasawara"},"body":"hey everyone!\r\n\r\nI am trying to use GithubIntegration and get the access token:\r\n\r\n```\r\ngi.get_access_token(\r\n    installation_id=app_installations[0]['id']\r\n)\r\n```\r\n\r\nbut it is raising this error:\r\n\r\n```\r\n...\r\n/mnt/sda1/storage/miniconda/envs/openteam/lib/python3.6/site-packages/requests/api.py in request(method='post', url='https://api.github.com/installations/<app_install_id>/access_tokens', **kwargs={'body': None, 'data': None, 'headers': {'Accept': 'application/vnd.github.machine-man-preview+json', 'Authorization': 'Bearer <jwt>', 'User-Agent': 'PyGithub/Python'}, 'json': None})\r\n     58     # cases, and look like a memory leak in others.\r\n     59     with sessions.Session() as session:\r\n---> 60         return session.request(method=method, url=url, **kwargs)\r\n        session.request = <bound method Session.request of <requests.sessions.Session object at 0x7fcf4f6b3080>>\r\n        method = 'post'\r\n        url = 'https://api.github.com/installations/<app_install_id>/access_tokens'\r\n        kwargs = {'data': None, 'json': None, 'headers': {'Authorization': 'Bearer <jwt>', 'Accept': 'application/vnd.github.machine-man-preview+json', 'User-Agent': 'PyGithub/Python'}, 'body': None}\r\n     61 \r\n     62 \r\n\r\nTypeError: request() got an unexpected keyword argument 'body'\r\n```\r\n\r\n** <app_install_id> and <jwt> original was replaced here\r\n\r\nusing `requests` lib directly works fine.\r\n\r\nany thoughts?\r\n\r\n---\r\n\r\nPKG INFO:\r\n\r\nPyGithub                  1.43.4                    < pip >\r\nrequests                  2.21.0                py36_1000    conda-forge","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDQ1MjI2MDI5OA==","author":{"login":"Hanaasagi"},"authorAssociation":"CONTRIBUTOR","body":"Maybe it's a typo. `requests.post` should accept `json` or `data` as keyword argument instead of `body`.\r\n\r\nFor more detail, please see [requests/api.py#L108](https://github.com/requests/requests/blob/v2.21.0/requests/api.py#L108)","createdAt":"2019-01-08T11:04:56Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1010#issuecomment-452260298","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQ1MjM0MDQ2NA==","author":{"login":"xmnlab"},"authorAssociation":"NONE","body":"@Hanaasagi thank you so much for the feedback!","createdAt":"2019-01-08T15:32:00Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1010#issuecomment-452340464","viewerDidAuthor":false}],"createdAt":"2019-01-07T23:36:57Z","number":1010,"state":"CLOSED","title":"GithubIntegrations get_access_token: TypeError: request() got an unexpected keyword argument 'body'","url":"https://github.com/PyGithub/PyGithub/issues/1010"},{"author":{"id":"MDQ6VXNlcjUzMzIxNTg=","is_bot":false,"login":"evandrocoan","name":""},"body":"![image](https://user-images.githubusercontent.com/5332158/50737362-54bafb80-11af-11e9-8dad-74ab04d8dcae.png)\r\n\r\n```python\r\nfork_user = github_api.get_user('user')\r\nfork_repo = fork_user.get_repo('repo')\r\n\r\nfork_pullrequest = fork_repo.create_pull(\"Title\", \"Body\", 'master', \r\n          '{}:{}'.format('otheruser', 'master'), False)\r\n```\r\n\r\nAfter running this code, I got the pull_request object. Looking over its documentation at:\r\n1. https://pygithub.readthedocs.io/en/latest/github_objects/PullRequest.html\r\n\r\nI could not find a method to assign a user to the pull request like:\r\n```python\r\nfork_pullrequest.assign(fork_user)\r\n```\r\n\r\n","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDQ1Mzc0NjM2MQ==","author":{"login":"rallytime"},"authorAssociation":"NONE","body":"Hi @evandrocoan - I implemented this feature request in #1016.","createdAt":"2019-01-12T13:10:51Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"HOORAY","users":{"totalCount":1}}],"url":"https://github.com/PyGithub/PyGithub/issues/1009#issuecomment-453746361","viewerDidAuthor":false}],"createdAt":"2019-01-06T14:35:22Z","number":1009,"state":"CLOSED","title":"How to assign a user to a pull request recently created?","url":"https://github.com/PyGithub/PyGithub/issues/1009"},{"author":{"id":"MDQ6VXNlcjExNzY2NzQ=","is_bot":false,"login":"bpostlethwaite","name":"Ben Postlethwaite"},"body":"Specifically this line:\r\nhttps://github.com/PyGithub/PyGithub/blob/master/github/PullRequest.py#L552\r\nrequires that the `datetime` module be loaded. It isn't.\r\n\r\nAdding a \r\n```python\r\nimport datetime\r\n```\r\nat the top of `github/PullRequest.py` fixes this bug.\r\n\r\nI checked the test coverage and indeed there doesn't seem to be a test of this method.\r\n","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDQ1MDU5OTMxOQ==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"👍 ","createdAt":"2018-12-31T01:22:43Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1004#issuecomment-450599319","viewerDidAuthor":false}],"createdAt":"2018-12-28T17:48:24Z","number":1004,"state":"CLOSED","title":"get_review_comments() method fails due to missing import","url":"https://github.com/PyGithub/PyGithub/issues/1004"},{"author":{"id":"MDQ6VXNlcjY4MDcxNjk=","is_bot":false,"login":"liangzai-cool","name":"薛亮"},"body":"```\r\nF:\\sourcecode\\github.com\\PyGithub\\PyGithub (master -> origin)\r\nλ python scripts/add_attribute.py NamedUser node_id string\r\nTraceback (most recent call last):\r\n  File \"scripts/add_attribute.py\", line 141, in <module>\r\n    f.write(line + \"\\n\")\r\nTypeError: a bytes-like object is required, not 'str'\r\n\r\nF:\\sourcecode\\github.com\\PyGithub\\PyGithub (master -> origin)\r\nλ python --version\r\nPython 3.7.0\r\n\r\nF:\\sourcecode\\github.com\\PyGithub\\PyGithub (master -> origin)\r\nλ git log -n 1\r\ncommit 4a6daf6b9f78c8119841e825c36cb2739bca44dc (HEAD -> master, tag: v1.43.4, origin/master, origin/HEAD)\r\nAuthor: Wan Liuyang <tsfdye@gmail.com>\r\nDate:   Fri Dec 21 17:29:21 2018 +0800\r\n\r\n    Publish version 1.43.4\r\n```","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDQ0OTc3OTEzMg==","author":{"login":"s-t-e-v-e-n-k"},"authorAssociation":"COLLABORATOR","body":"A better title for this issue is \"add_attribute.py raises TypeError with Python 3\" or something similar.","createdAt":"2018-12-24T23:58:32Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1000#issuecomment-449779132","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQ0OTkwNjk3Mg==","author":{"login":"suryasr007"},"authorAssociation":"CONTRIBUTOR","body":"I will work on this","createdAt":"2018-12-26T05:31:47Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1000#issuecomment-449906972","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQ2NjczNzYyMA==","author":{"login":"stale"},"authorAssociation":"NONE","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","createdAt":"2019-02-24T06:05:39Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1000#issuecomment-466737620","viewerDidAuthor":false}],"createdAt":"2018-12-23T07:47:38Z","number":1000,"state":"CLOSED","title":"add_attribute.py raises TypeError with Python 3","url":"https://github.com/PyGithub/PyGithub/issues/1000"},{"author":{"id":"MDQ6VXNlcjY4MDcxNjk=","is_bot":false,"login":"liangzai-cool","name":"薛亮"},"body":"https://api.github.com/users api has `node_id` but when I get user detail, miss it, why? please be sure all attrs from list can be contained on get user detail, thanks!","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDQ0OTkwNjkxNA==","author":{"login":"suryasr007"},"authorAssociation":"CONTRIBUTOR","body":"I will work on this.","createdAt":"2018-12-26T05:31:14Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/999#issuecomment-449906914","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQ1MDQ4MzIxNA==","author":{"login":"suryasr007"},"authorAssociation":"CONTRIBUTOR","body":"Hi @sfdye, Any update on above pull request? ","createdAt":"2018-12-29T10:35:52Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/999#issuecomment-450483214","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQ1MzA4NTIwNA==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"Closed by #1001 ","createdAt":"2019-01-10T12:50:52Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/999#issuecomment-453085204","viewerDidAuthor":false}],"createdAt":"2018-12-23T07:08:50Z","number":999,"state":"CLOSED","title":"user.node_id missing ","url":"https://github.com/PyGithub/PyGithub/issues/999"},{"author":{"id":"MDQ6VXNlcjM5OTAxOTY2","is_bot":false,"login":"leadelngalame1611","name":""},"body":"I am having some issues while using the github.search_repository API. During a search_repository call, it sometime returns all repositories which is fine, and few minutes later it return a list with some repositories missing.\r\nHere is a log output to be able to visualize where issue lies:\r\n\r\n```\r\n10:02:44  Iterate through all github repositories found with query: github.search_repository(query_string)\r\n\r\n10:02:45 github repository list  ['si_test2', 'si_test3', 'si_github', 'si_ece', **'si_test1'**, 'si_test5', 'si_circleci-automate', 'si_ece-ami-factory', 'si_aws-sam-skeleton', 'si_training_account_mgmt']\r\n\r\n10:04:44 Iterate through all github repositories found with query: github.search_repository(query_string)\r\n\r\n10:04:45 github repository list ['si_test3', 'si_test2', 'si_test5', 'si_circleci-automate', 'si_aws-sam-skeleton', 'si_ece-ami-factory', 'si_training_account_mgmt']\r\n\r\n10:06:44 Iterate through all github repositories found with query: github.search_repository(query_string)\r\n\r\n10:06:44 github repository list ['si_test2', 'si_test3', 'si_github', 'si_ece', **'si_test1'**, 'si_test5', 'si_circleci-automate', 'si_ece-ami-factory', 'si_aws-sam-skeleton', 'si_training_account_mgmt']\r\n```\r\n\r\nNotice that at \r\n10:02:45 si_test1 repository was found in the returned list.\r\n10:04:45 si_test1 repository not found in the list\r\n10:06:44 si_test1 was again found in the list\r\n\r\nAs i mentioned, this happens sporadically and si_test1 repository was never deleted during the 3 api calls.\r\nCould someone help me understand this? Or is there a better was to search for repositories and get a consistent set of result.\r\n","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDQ0ODgzMzM4OA==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"Can you reproduce on web search and curl?","createdAt":"2018-12-20T02:14:35Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/997#issuecomment-448833388","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQ0ODkzOTg1NA==","author":{"login":"leadelngalame1611"},"authorAssociation":"NONE","body":"Hallo @sfdye,\r\nyes, this can be reproduced on curl.\r\n``` \r\nwhile true; do curl -s \"https://api.github.com/search/repositories?q=query_string\" -u <TOKEN>: | jq -r '.total_count'; echo $(date);  sleep 3; done\r\n\r\nWed Dec 19 15:18:39 CET 2018\r\n9\r\nWed Dec 19 15:18:43 CET 2018\r\n9\r\nWed Dec 19 15:18:47 CET 2018\r\n9\r\nWed Dec 19 15:18:51 CET 2018\r\n5\r\nWed Dec 19 15:18:55 CET 2018\r\n9\r\nWed Dec 19 15:18:59 CET 2018\r\n9\r\nWed Dec 19 15:19:03 CET 2018\r\n9\r\n```\r\n\r\nYou will realize that at 15:18:51, we had a return count of 5 repositories which does not match the amount to the request prio and after the call.","createdAt":"2018-12-20T09:56:44Z","includesCreatedEdit":true,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/997#issuecomment-448939854","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQ0ODk0MDE3Mw==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"If this can be reproduced by curl, then it's not a PyGithub issue. You wanna raise an issue with Github support.","createdAt":"2018-12-20T09:57:54Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/997#issuecomment-448940173","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQ0ODk0MDU1Ng==","author":{"login":"leadelngalame1611"},"authorAssociation":"NONE","body":"You are right. \r\nThanks for your support","createdAt":"2018-12-20T09:59:09Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/997#issuecomment-448940556","viewerDidAuthor":false}],"createdAt":"2018-12-19T13:38:11Z","number":997,"state":"CLOSED","title":"search_repositories: sporadically missing some repositories during search request","url":"https://github.com/PyGithub/PyGithub/issues/997"},{"author":{"id":"MDQ6VXNlcjEzNTgyNTQ3","is_bot":false,"login":"shibasisp","name":"Shibasis Patel"},"body":"Although the user is being authenticated by using access token or (username, password), get_user() method returns `AuthenticatedUser(login=None)`. I think the required behavior should be `AuthenticatedUser(login=<username>)`\r\n\r\nExample\r\n```python\r\nfrom github import Github\r\n>>> client = Github(ACCESS_TOKEN)\r\n>>> client.get_user()\r\nAuthenticatedUser(login=None)","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDQ0NjQ5MjY1OQ==","author":{"login":"shibasisp"},"authorAssociation":"CONTRIBUTOR","body":"I would like to solve this issue.","createdAt":"2018-12-12T07:44:20Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/992#issuecomment-446492659","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQ0NjgxMDY5MA==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"I believe this is due to the lazy retrieving behavior","createdAt":"2018-12-13T01:40:27Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_DOWN","users":{"totalCount":1}}],"url":"https://github.com/PyGithub/PyGithub/issues/992#issuecomment-446810690","viewerDidAuthor":false}],"createdAt":"2018-12-12T07:33:17Z","number":992,"state":"CLOSED","title":"get_user() method returns AuthenticatedUser(login=None) although the user is authenticated.","url":"https://github.com/PyGithub/PyGithub/issues/992"},{"author":{"id":"MDQ6VXNlcjI2NTYzMA==","is_bot":false,"login":"jgehrcke","name":"Dr. Jan-Philip Gehrcke"},"body":"This strongly relates to https://github.com/PyGithub/PyGithub/issues/653 and shows that https://github.com/PyGithub/PyGithub/pull/857 did not entirely fix #653.\r\n\r\nCC @allevin \r\n\r\nI am processing events. Fetched them with `pr.as_issue().get_events()` where `pr` is a `PullRequest` object. I am then filtering `labeled` events, and want to look up the label name.\r\n\r\nSo I use `event.label.name` where `event` is an `IssueEvent` object.\r\n\r\nWith PyGithub 1.43.3 for hundreds of events this goes fine. For a small number of events in the same repository this raises an `AttributeError`:\r\n\r\n```\r\n  File \"/home/xxx/lib/python3.6/site-packages/github/IssueEvent.py\", line 125, in label\r\n    self._completeIfNotSet(self._label)\r\nAttributeError: 'IssueEvent' object has no attribute '_label'\r\n```\r\n\r\nNotably, with 1.40.x this failed for most (all?) of the events. So, things vastly improved in release 1.43.3, but seemingly pull/857 might not have addressed all edge cases.\r\n\r\nI looked at the raw data, at the raw HTTP response, but could not find the decisive difference between \"good\" events and \"bad\" events. However, for those events where the `event.label.name` lookup fails the raw data is actually *good*, and I could work around the problem by using `event._rawData['label']['name']`. Which suggests that this is actually a bug in the code.\r\n\r\nFor an example for a \"bad\" event, I hope to have the relevant details here:\r\n`pprint(vars(event))` yields:\r\n```\r\n{'_CompletableGithubObject__completed': False,\r\n '_actor': <github.GithubObject._ValuedAttribute object at 0x7f8147b19a58>,\r\n '_commit_id': <github.GithubObject._ValuedAttribute object at 0x7f8147b21320>,\r\n '_created_at': <github.GithubObject._ValuedAttribute object at 0x7f8147b21358>,\r\n '_event': <github.GithubObject._ValuedAttribute object at 0x7f8147b213c8>,\r\n '_headers': {'access-control-allow-origin': '*',\r\n              'access-control-expose-headers': 'ETag, Link, Location, '\r\n                                               'Retry-After, X-GitHub-OTP, '\r\n                                               'X-RateLimit-Limit, '\r\n                                               'X-RateLimit-Remaining, '\r\n                                               'X-RateLimit-Reset, '\r\n                                               'X-OAuth-Scopes, '\r\n                                               'X-Accepted-OAuth-Scopes, '\r\n                                               'X-Poll-Interval, '\r\n                                               'X-GitHub-Media-Type',\r\n              'cache-control': 'private, max-age=60, s-maxage=60',\r\n              'content-encoding': 'gzip',\r\n              'content-security-policy': \"default-src 'none'\",\r\n              'content-type': 'application/json; charset=utf-8',\r\n              'date': 'Mon, 10 Dec 2018 17:57:41 GMT',\r\n              'etag': 'W/\"893019cad2bd8f15c85852166424be95\"',\r\n              'referrer-policy': 'origin-when-cross-origin, '\r\n                                 'strict-origin-when-cross-origin',\r\n              'server': 'GitHub.com',\r\n              'status': '200 OK',\r\n              'strict-transport-security': 'max-age=31536000; '\r\n                                           'includeSubdomains; preload',\r\n              'transfer-encoding': 'chunked',\r\n              'vary': 'Accept, Authorization, Cookie, X-GitHub-OTP',\r\n              'x-accepted-oauth-scopes': 'repo',\r\n              'x-content-type-options': 'nosniff',\r\n              'x-frame-options': 'deny',\r\n              'x-github-media-type': 'github.v3; format=json',\r\n              'x-github-request-id': 'D1CE:1F6C:7612C6:119A43C:5C0EA915',\r\n              'x-oauth-scopes': 'repo',\r\n              'x-ratelimit-limit': '5000',\r\n              'x-ratelimit-remaining': '4638',\r\n              'x-ratelimit-reset': '1544468192',\r\n              'x-xss-protection': '1; mode=block'},\r\n '_id': <github.GithubObject._ValuedAttribute object at 0x7f8147b21438>,\r\n '_issue': NotSet,\r\n '_rawData': {'actor': {'avatar_url': 'https://avatars3.githubusercontent.com/u/22822961?v=4',\r\n                        'events_url': 'https://api.github.com/users/mesosphere-mergebot/events{/privacy}',\r\n                        'followers_url': 'https://api.github.com/users/mesosphere-mergebot/followers',\r\n                        'following_url': 'https://api.github.com/users/mesosphere-mergebot/following{/other_user}',\r\n                        'gists_url': 'https://api.github.com/users/mesosphere-mergebot/gists{/gist_id}',\r\n                        'gravatar_id': '',\r\n                        'html_url': 'https://github.com/mesosphere-mergebot',\r\n                        'id': 22822961,\r\n                        'login': 'mesosphere-mergebot',\r\n                        'node_id': 'MDQ6VXNlcjIyODIyOTYx',\r\n                        'organizations_url': 'https://api.github.com/users/mesosphere-mergebot/orgs',\r\n                        'received_events_url': 'https://api.github.com/users/mesosphere-mergebot/received_events',\r\n                        'repos_url': 'https://api.github.com/users/mesosphere-mergebot/repos',\r\n                        'site_admin': False,\r\n                        'starred_url': 'https://api.github.com/users/mesosphere-mergebot/starred{/owner}{/repo}',\r\n                        'subscriptions_url': 'https://api.github.com/users/mesosphere-mergebot/subscriptions',\r\n                        'type': 'User',\r\n                        'url': 'https://api.github.com/users/mesosphere-mergebot'},\r\n              'commit_id': None,\r\n              'commit_url': None,\r\n              'created_at': '2018-11-07T22:44:52Z',\r\n              'event': 'labeled',\r\n              'id': 1952934725,\r\n              'label': {'color': 'c5def5', 'name': 'Work In Progress'},\r\n              'node_id': 'MDEyOkxhYmVsZWRFdmVudDE5NTI5MzQ3MjU=',\r\n              'url': 'https://api.github.com/repos/dcos/dcos/issues/events/1952934725'},\r\n '_requester': <github.Requester.Requester object at 0x7f815b6689e8>,\r\n '_url': <github.GithubObject._ValuedAttribute object at 0x7f8147b21470>}\r\n```\r\n\r\nAs can be seen above the event is publicly visible through GitHub at https://api.github.com/repos/dcos/dcos/issues/events/1952934725, and at least to me it looks sane; and definitely has `'label': {'color': 'c5def5', 'name': 'Work In Progress'}` set.","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDQ0NjIzMjU1OQ==","author":{"login":"allevin"},"authorAssociation":"CONTRIBUTOR","body":"@jgehrcke  I have moved to a different organization and no longer involved with PyGithub. I am keeping watch on my PR's, but cannot spend any cycles working on it anymore.  \r\n\r\nIf you come up with a solution I strongly recommend that you generate a PR to correct the code.  ","createdAt":"2018-12-11T14:59:59Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/991#issuecomment-446232559","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQ0NjI4MTQwMA==","author":{"login":"jgehrcke"},"authorAssociation":"NONE","body":"Does anyone have a pointer about where the problem might be?","createdAt":"2018-12-11T17:07:13Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/991#issuecomment-446281400","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQ2MjA2MTUzOA==","author":{"login":"stale"},"authorAssociation":"NONE","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","createdAt":"2019-02-09T17:09:42Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/991#issuecomment-462061538","viewerDidAuthor":false}],"createdAt":"2018-12-11T12:41:21Z","number":991,"state":"CLOSED","title":"`AttributeError: 'IssueEvent' object has no attribute '_label'` for very few events","url":"https://github.com/PyGithub/PyGithub/issues/991"},{"author":{"id":"MDQ6VXNlcjMzMTgyMjM=","is_bot":false,"login":"Bluscream","name":"Bluscream"},"body":"```py\r\nfrom github import Github, GithubException\r\nusername = \"\"; password = \"\"; token = \"\"\r\n# from credentials import username, password, token\r\nheaders = { 'Authorization': \"Bearer %s\"%token,'Cache-Control': \"no-cache\" }\r\n\r\ng = Github(username, password)\r\n# g = Github(token)\r\n\r\nrepos = 0\r\nprocessed = 0\r\n# referrers = {}\r\nme = g.get_user()\r\nfor repo in me.get_repos():\r\n    repos += 1\r\n    failed = False\r\n    repo_str = \"Repository: %s [repo_dl]\"%repo.full_name\r\n    repo_downloads = 0\r\n    releases = repo.get_releases()\r\n    try:\r\n        for release in releases:\r\n            repo_str += \"\\n\\tRelease: %s (%s) [release_dl]\"%(release.title, release.tag_name)\r\n            assets = release.get_assets()\r\n            release_downloads = 0\r\n            for asset in assets:\r\n                release_downloads += asset.download_count\r\n                repo_str += \"\\n\\t\\tAsset: %s [%s]\" % (asset.name, asset.download_count)\r\n            repo_str = repo_str.replace(\"release_dl\", str(release_downloads))\r\n            repo_downloads += release_downloads\r\n    except GithubException:\r\n        failed = True\r\n        pass\r\n    repo_str = repo_str.replace(\"repo_dl\", str(repo_downloads))\r\n    print(repo_str)\r\n    if not failed: processed += 1\r\nprint(\"Repositories processed: %s / %s\"%(processed, repos))\r\n```","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDQ0NTQ0MTgwOQ==","author":{"login":"Bluscream"},"authorAssociation":"NONE","body":"https://gist.github.com/Bluscream/97efa37c5c00d6069dd77106dc00e48d#file-all-my-downloads-txt","createdAt":"2018-12-08T08:22:38Z","includesCreatedEdit":true,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/989#issuecomment-445441809","viewerDidAuthor":false}],"createdAt":"2018-12-08T08:22:06Z","number":989,"state":"CLOSED","title":"[Snippet] Get all your downloads","url":"https://github.com/PyGithub/PyGithub/issues/989"},{"author":{"id":"MDQ6VXNlcjMzMTgyMjM=","is_bot":false,"login":"Bluscream","name":"Bluscream"},"body":"```py\r\nfrom github import Github, GithubException\r\nfrom requests import request\r\nfrom collections import OrderedDict\r\nfrom json import dumps\r\ntoken = \"\"\r\n# from credentials import token\r\nheaders = { 'Authorization': \"Bearer %s\"%token,'Cache-Control': \"no-cache\" }\r\n\r\ng = Github(token)\r\n\r\nrepos = 0\r\nreferrers = {}\r\nme = g.get_user()\r\nfor repo in me.get_repos():\r\n    repos += 1\r\n    referers_ = request(\"GET\", \"https://api.github.com/repos/%s/%s/traffic/popular/referrers\"%(me.name, repo.name), headers=headers).json()\r\n    if not isinstance(referers_, list):\r\n        continue\r\n    for referrer in referers_:\r\n        name = referrer['referrer']\r\n        if not name in referrers.keys():\r\n            referrers[name] = 0\r\n        referrers[name] += referrer['count']\r\n        print(referrers)\r\n    # if repos > 3: break\r\nprint(\"Repositories processed:\",repos)\r\nasdict = OrderedDict(sorted(referrers.items()))\r\nprint(asdict)\r\nasjson = dumps(asdict)\r\nprint(asjson)\r\n```","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDQ0NTQ0MTA2NA==","author":{"login":"Bluscream"},"authorAssociation":"NONE","body":"\r\n```json\r\n{\r\n\t\"Bing\": 27,\r\n\t\"DuckDuckGo\": 7,\r\n\t\"Google\": 1026,\r\n\t\"automagic4android.com\": 3,\r\n\t\"briskgram.net\": 82,\r\n\t\"confluence.nexon.com\": 16,\r\n\t\"devhub.io\": 7,\r\n\t\"ecosia.org\": 13,\r\n\t\"facebook.com\": 4,\r\n\t\"forum.scssoft.com\": 1,\r\n\t\"forum.teamspeak.com\": 95,\r\n\t\"fr.gta5-mods.com\": 7,\r\n\t\"gist.github.com\": 56,\r\n\t\"github.com\": 641,\r\n\t\"gta5-mods.com\": 23,\r\n\t\"gtainside.com\": 6,\r\n\t\"habr.com\": 2,\r\n\t\"id.search.yahoo.com\": 5,\r\n\t\"it.gta5-mods.com\": 6,\r\n\t\"myteamspeak.ru\": 28,\r\n\t\"pl.search.yahoo.com\": 2,\r\n\t\"qwant.com\": 2,\r\n\t\"r4p3.net\": 490,\r\n\t\"reddit.com\": 6,\r\n\t\"safelinku.net\": 41,\r\n\t\"start.duckduckgo.com\": 4,\r\n\t\"swiftviz.net\": 376,\r\n\t\"tr.search.yahoo.com\": 2,\r\n\t\"yandex.by\": 2,\r\n\t\"yandex.ru\": 114,\r\n\t\"yougame.biz\": 31,\r\n\t\"youtube.com\": 263\r\n}\r\n```","createdAt":"2018-12-08T08:07:43Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/988#issuecomment-445441064","viewerDidAuthor":false}],"createdAt":"2018-12-08T07:52:25Z","number":988,"state":"CLOSED","title":"[Snippet] Get top overall referrers","url":"https://github.com/PyGithub/PyGithub/issues/988"},{"author":{"id":"MDQ6VXNlcjMzMTgyMjM=","is_bot":false,"login":"Bluscream","name":"Bluscream"},"body":"```py\r\nfrom github import Github\r\nusername = \"\"\r\npassword = \"\"\r\ntoken = \"\"\r\n\r\ng = Github(username, password)\r\n# g = Github(token)\r\n\r\nrepos = 0\r\nprocessed = 0\r\nme = g.get_user()\r\nfor repo in me.get_repos():\r\n    repos += 1\r\n    failed = False\r\n    try:\r\n        repo.edit(private=False)\r\n        print(repo.name,\"is now public\")\r\n    except:\r\n        failed = True\r\n        print(\"Failed to make\",repo.full_name,\"public!\")\r\n    if not failed: processed += 1\r\nprint(\"Repositories processed: %s / %s\"%(processed, repos))\r\n```","comments":[],"createdAt":"2018-12-08T07:48:09Z","number":987,"state":"CLOSED","title":"[Snippet] Unprivate Repos (In case you plan to switch to github free)","url":"https://github.com/PyGithub/PyGithub/issues/987"},{"author":{"id":"MDQ6VXNlcjMzMTgyMjM=","is_bot":false,"login":"Bluscream","name":"Bluscream"},"body":"```py\r\nfrom github import Github, GithubException\r\nusername = \"\"\r\npassword = \"\"\r\ntoken = \"\"\r\n\r\ng = Github(username, password)\r\n# g = Github(token)\r\n\r\nrepos = 0\r\nprocessed = 0\r\nme = g.get_user()\r\nfor repo in me.get_repos():\r\n    repos += 1\r\n    failed = False\r\n    str = \"\"\r\n    try:\r\n        me.add_to_starred(repo)\r\n        str += \"Starred, \"\r\n    except:\r\n        failed = True\r\n        str += \"Failed to star, \"\r\n    try:\r\n        me.add_to_subscriptions(repo)\r\n        str += \"Subscribed, \"\r\n    except:\r\n        failed = True\r\n        str += \"Failed to subscribe, \"\r\n    try:\r\n        me.add_to_watched(repo)\r\n        str += \"Watched, \"\r\n    except:\r\n        failed = True\r\n        str += \"Failed to watch, \"\r\n    print(repo.full_name, \":\", str )\r\n    if not failed: processed += 1\r\nprint(\"Repositories processed: %s / %s\"%(processed, repos))\r\n```","comments":[],"createdAt":"2018-12-08T07:44:19Z","number":986,"state":"CLOSED","title":"[Snippet] Sub, Watch, Start all your repos","url":"https://github.com/PyGithub/PyGithub/issues/986"},{"author":{"id":"MDQ6VXNlcjM5OTkyMjE=","is_bot":false,"login":"pawamoy","name":"Timothée Mazzucotelli"},"body":"I've been trying for 20 minutes to do a simple thing: get the list of all issues I created. Just like what you get at https://github.com/issues.\r\n\r\nSo, it should be something like:\r\n\r\n```\r\nfrom github import Github\r\ng = Github('my_token')\r\nuser = g.get_user()\r\nissues = list(user.get_issues(state='all', filter='created'))\r\n```\r\n...right?\r\n\r\nExcept with this I get only the issues for the repositories I own or I am a member of. I don't get the issues I created on visible repositories I don't own or am not a member of.\r\n\r\nAm I missing something? I quote the docs from GitHub API:\r\n\r\n> List all issues assigned to the authenticated user across all visible repositories including owned repositories, member repositories, and organization repositories.\r\n\r\nIt seems that what I get is the result of `GET /user/issues`, not `GET /issues`.","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDQ2MDQyOTEwNg==","author":{"login":"stale"},"authorAssociation":"NONE","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","createdAt":"2019-02-04T21:56:21Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/985#issuecomment-460429106","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs5AZO8O","author":{"login":"Diwasdrpm"},"authorAssociation":"NONE","body":"...","createdAt":"2022-03-28T08:36:12Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"LAUGH","users":{"totalCount":1}}],"url":"https://github.com/PyGithub/PyGithub/issues/985#issuecomment-1080356622","viewerDidAuthor":false}],"createdAt":"2018-12-06T21:50:41Z","number":985,"state":"CLOSED","title":"Get issues I created across all visible repositories + owned + member","url":"https://github.com/PyGithub/PyGithub/issues/985"},{"author":{"id":"MDQ6VXNlcjUxODI3MA==","is_bot":false,"login":"peterkline","name":"Peter Kline"},"body":"I have a context started and sometimes we have a slow network going to our Github Enterprise installation.  So 95% of the time the following code is fine but I will hit an error on occasion:\r\n\r\n    The read operation timed out\r\n\r\nThe code is very simple \r\n\r\n\r\n```python     \r\n# Where self.gho is my github object is connected.\r\ncontents = self.gho.get_repo(repo).get_file_contents(lookup_file, commit)\r\n```\r\n\r\nIs there any way to change the options where there is a retry, a longer timeout?   I know there is the timeout during the initial login but that doesn't help me.","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDQ0NDkxOTAyNw==","author":{"login":"allevin"},"authorAssociation":"CONTRIBUTOR","body":"@peterkline my project had similar problems.  We had a  very unreliable network and we needed to retry any failed comms to ensure that it was a real failure.   I had developed some nasty wrappers (using lambda functions) around all the PyGithub calls to resolve the issue.  This worked, but I was never happy with the solution.  I always felt that PyGithub should provide some sort of retry feature.\r\n\r\nMy solution is in PR #860.  It uses the urllib3 retry feature to support low level comms retries.  I believe that @mfonville is using the PR in production code.  I know that the maintainers are interested in this code, but everyone is too busy to move it forward.  The PR is starting to get stale and now looks to have a merge conflict (hopefully, should be easy to fix).  You might try to use the PR and see if it solves your problem.  Any feedback or suggested changes to the PR would be appreciated.\r\n\r\nBest of luck.\r\n\r\n","createdAt":"2018-12-06T15:50:06Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/984#issuecomment-444919027","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQ0NDkyMzY1NA==","author":{"login":"peterkline"},"authorAssociation":"NONE","body":"Thanks, I will take a look at the mentioned PR and see if I can move it forward or adapt.  At worst, I will have to wrap the file lookups in a dumb function that just retries until I get a valid response.","createdAt":"2018-12-06T16:01:50Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/984#issuecomment-444923654","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQ2MDQyOTEwOA==","author":{"login":"stale"},"authorAssociation":"NONE","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","createdAt":"2019-02-04T21:56:22Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/984#issuecomment-460429108","viewerDidAuthor":false}],"createdAt":"2018-12-05T22:54:36Z","number":984,"state":"CLOSED","title":"Timeout on reading file contents from repo.  Retry option?","url":"https://github.com/PyGithub/PyGithub/issues/984"},{"author":{"id":"MDQ6VXNlcjE5NjYyODk1","is_bot":false,"login":"jl-yang-arm","name":"Jilin Yang"},"body":"```python\r\ncommits = repo.get_commits(\"master\", since=datetime.datetime.utcnow() - datetime.timedelta(days=30)).reversed\r\n\r\n# this could be 100\r\ntotal_count = commits.totalCount\r\n\r\n# but actually during iteration, actual count does not equal to 100, most likely less\r\ncount = 0\r\nfor c in commits.reversed:\r\n    count += 1\r\n\r\n# mismatch\r\nassert total_count == count","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDQ0NDU0MDQ2NA==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"Can you give an example repo?","createdAt":"2018-12-05T16:06:22Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/982#issuecomment-444540464","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQ0NTc5MTE4NQ==","author":{"login":"jl-yang-arm"},"authorAssociation":"NONE","body":"sorry atm didn't have an example repo, since the issue was found when working at a private repo","createdAt":"2018-12-10T11:58:19Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/982#issuecomment-445791185","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQ2MTc4NzQ5NQ==","author":{"login":"stale"},"authorAssociation":"NONE","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","createdAt":"2019-02-08T12:27:28Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/982#issuecomment-461787495","viewerDidAuthor":false}],"createdAt":"2018-12-05T09:13:07Z","number":982,"state":"CLOSED","title":"reversed commits (with 'since' defined) actual count and total count mismatch ","url":"https://github.com/PyGithub/PyGithub/issues/982"},{"author":{"id":"MDQ6VXNlcjE4Njc0NjQ=","is_bot":false,"login":"labrys","name":"Labrys of Knossos"},"body":"Various tests differ between python 2 and python 3.  Tests should not differ between python versions as it can lead to subtle errors between implementation.  Different test strategies could be used to support both with the same set of tests.\r\n\r\nFor example the following comment:\r\n\r\n```python\r\n        # In Python 3.4+, dicts are not output in the same order as in Python 2.7.\r\n        # So, logging is not deterministic and we cannot test it.\r\n```\r\n\r\nTesting `dicts` could easily be made deterministic with a little bit of thought.  For example `sorted(dictionary.items())` would result in an ordered list of key, value tuples that would retain the order regardless of Python version.","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDQ2MDA2Mzg2OA==","author":{"login":"stale"},"authorAssociation":"NONE","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","createdAt":"2019-02-03T16:00:19Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/981#issuecomment-460063868","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQ2MDA2Njc0Nw==","author":{"login":"labrys"},"authorAssociation":"NONE","body":"Closing because upstream does not care to fix issues with code.","createdAt":"2019-02-03T16:35:56Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/981#issuecomment-460066747","viewerDidAuthor":false}],"createdAt":"2018-12-05T02:39:33Z","number":981,"state":"CLOSED","title":"Tests for Python 2 differ from Python 3","url":"https://github.com/PyGithub/PyGithub/issues/981"},{"author":{"id":"MDQ6VXNlcjg5NTgwMjg=","is_bot":false,"login":"astikanand","name":"Astik Anand"},"body":"There is an option to **archive a repository** in \"Web Interface of Github\" but I think the same is not available with the **PyGithub API.**","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDQ0MzYxODk0Ng==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"It is. You can use `repo.edit()` method by changing the `archived` attribute.\r\n\r\nSee #843","createdAt":"2018-12-03T07:52:25Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/976#issuecomment-443618946","viewerDidAuthor":false}],"createdAt":"2018-12-03T06:58:53Z","number":976,"state":"CLOSED","title":"Archive a Github repository instead of delete.","url":"https://github.com/PyGithub/PyGithub/issues/976"},{"author":{"id":"MDQ6VXNlcjE0MTMxODcy","is_bot":false,"login":"keinen87","name":"Nurbek Kuspanov"},"body":"I think that in an algorithm below an error because not all files will be printed\r\n```bash\r\n>>> repo = g.get_repo(\"PyGithub/PyGithub\")\r\n>>> contents = repo.get_contents(\"\")\r\n>>> while len(contents) > 1:\r\n...     file_content = contents.pop(0)\r\n...     if file_content.type == \"dir\":\r\n...         contents.extend(repo.get_contents(file_content.path))\r\n...     else:\r\n...         print(file_content)\r\n...\r\nContentFile(path=\".gitignore\")\r\nContentFile(path=\".travis.yml\")\r\nContentFile(path=\"CONTRIBUTING.md\")\r\n...\r\nContentFile(path=\"github/tests/ReplayData/Team.testRepoPermission.txt\")\r\nContentFile(path=\"github/tests/ReplayData/Team.testRepos.txt\")\r\nContentFile(path=\"github/tests/ReplayData/UserKey.setUp.txt\")\r\n```\r\nThis fix will correct a problem, isn't it?\r\n```bash\r\n>>> while contents:\r\n...     file_content = contents.pop(0)\r\n...     if file_content.type == \"dir\":\r\n...         contents.extend(repo.get_contents(file_content.path))\r\n...     else:\r\n...         print(file_content)\r\n...\r\n```\r\n","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDQ0MzA2Njc5OA==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"Where did you see this example? ","createdAt":"2018-11-30T02:19:23Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/974#issuecomment-443066798","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQ0MzE1MDY5OA==","author":{"login":"keinen87"},"authorAssociation":"NONE","body":"https://pygithub.readthedocs.io/en/latest/examples/Repository.html#get-all-of-the-contents-of-the-repository-recursively","createdAt":"2018-11-30T09:51:57Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/974#issuecomment-443150698","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQ0MzE1MzI1MA==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"Actually I just took a closer look, this is not recursive at all.","createdAt":"2018-11-30T10:01:02Z","includesCreatedEdit":true,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/974#issuecomment-443153250","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQ1ODQ5MTQxMQ==","author":{"login":"stale"},"authorAssociation":"NONE","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","createdAt":"2019-01-29T10:37:15Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/974#issuecomment-458491411","viewerDidAuthor":false}],"createdAt":"2018-11-29T11:52:12Z","number":974,"state":"CLOSED","title":"Get all of the contents of the repository recursively","url":"https://github.com/PyGithub/PyGithub/issues/974"},{"author":{"id":"MDQ6VXNlcjEzNzQ5NjQx","is_bot":false,"login":"Carles-Figuerola","name":""},"body":"On a brand new repo, for most other options, the `edit_something()` calls will enable them but `branch.edit_required_status_checks(strict=True)` is failing with a 404:\r\n\r\n```{u'documentation_url': u'https://developer.github.com/enterprise/2.14/v3/repos/branches/#update-required-status-checks-of-protected-branch', u'message': u'Required status checks not enabled'}```\r\n\r\nUsing github enterprise 2.14, API v3 and pygithub 1.43.3","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDQ0MjY1NjA1NA==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"> Required status checks not enabled\r\n\r\nYou need to enable this from the repo settings.","createdAt":"2018-11-29T00:14:48Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/973#issuecomment-442656054","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQ0Mjg3NjAwMw==","author":{"login":"Carles-Figuerola"},"authorAssociation":"NONE","body":"For anyone finding this in the future, this is how a required status check is enabled:\r\n```master_branch.edit_protection(required_approving_review_count=1, strict=True, contexts=[])```","createdAt":"2018-11-29T15:31:13Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":4}}],"url":"https://github.com/PyGithub/PyGithub/issues/973#issuecomment-442876003","viewerDidAuthor":false}],"createdAt":"2018-11-28T22:13:49Z","number":973,"state":"CLOSED","title":"There is no way to create a required_status_checks in a branch","url":"https://github.com/PyGithub/PyGithub/issues/973"},{"author":{"id":"MDQ6VXNlcjIyNTEyNjM0","is_bot":false,"login":"Mum1996","name":"Matt_MH"},"body":"This is the issue body","comments":[],"createdAt":"2018-11-26T02:35:23Z","number":972,"state":"CLOSED","title":"This is a new issue","url":"https://github.com/PyGithub/PyGithub/issues/972"},{"author":{"id":"MDQ6VXNlcjIyNTEyNjM0","is_bot":false,"login":"Mum1996","name":"Matt_MH"},"body":"This is the issue body","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDQ0MTUwMzgzMQ==","author":{"login":"Bluscream"},"authorAssociation":"NONE","body":"Ehm?","createdAt":"2018-11-26T02:50:36Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/971#issuecomment-441503831","viewerDidAuthor":false}],"createdAt":"2018-11-26T02:34:51Z","number":971,"state":"CLOSED","title":"This is a new issue","url":"https://github.com/PyGithub/PyGithub/issues/971"},{"author":{"id":"MDQ6VXNlcjM3ODA2NTIw","is_bot":false,"login":"skilldeliver","name":"Vladislav Mihov"},"body":"","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDQ0MTg4MTc1Nw==","author":{"login":"Bluscream"},"authorAssociation":"NONE","body":"Not much of a conversation happening here, hm? :D","createdAt":"2018-11-27T03:05:41Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/970#issuecomment-441881757","viewerDidAuthor":false}],"createdAt":"2018-11-24T13:34:53Z","number":970,"state":"CLOSED","title":"Show commits, additions and deletions of a contributor in a repo","url":"https://github.com/PyGithub/PyGithub/issues/970"},{"author":{"id":"MDQ6VXNlcjU2NzA3MDA=","is_bot":false,"login":"JiangXL","name":"H.F."},"body":"","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDQ0MTM0NjM0Mg==","author":{"login":"yuchenlichuck"},"authorAssociation":"NONE","body":"china","createdAt":"2018-11-24T06:07:14Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/968#issuecomment-441346342","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQ0MTM0NjM3Mw==","author":{"login":"yuchenlichuck"},"authorAssociation":"NONE","body":"I just do some lab design","createdAt":"2018-11-24T06:08:08Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/968#issuecomment-441346373","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQ0MTM0NjY2Ng==","author":{"login":"yuchenlichuck"},"authorAssociation":"NONE","body":"SUSTC","createdAt":"2018-11-24T06:15:32Z","includesCreatedEdit":true,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/968#issuecomment-441346666","viewerDidAuthor":false}],"createdAt":"2018-11-24T05:09:09Z","number":968,"state":"CLOSED","title":"It is a good project.","url":"https://github.com/PyGithub/PyGithub/issues/968"},{"author":{"id":"MDQ6VXNlcjM3MDk3MTU=","is_bot":false,"login":"cclauss","name":"Christian Clauss"},"body":"https://travis-ci.org/PyGithub/PyGithub/jobs/458702933#L1517\r\n\r\n$ flake8 . --count --select=E901,E999,F822,F823 --show-source --statistics\r\n```\r\n./github/GithubObject.py:141:29: E999 SyntaxError: invalid syntax\r\n            except Exception, e:\r\n                            ^\r\n./github/Requester.py:317:30: E999 SyntaxError: invalid syntax\r\n            except ValueError, e:\r\n                             ^\r\n./github/tests/AuthenticatedUser.py:247:87: E999 SyntaxError: invalid token\r\n        self.user.mark_notifications_as_read(datetime.datetime(2018, 10, 18, 18, 20, 01, 0))\r\n                                                                                      ^\r\n./github/tests/ExposeAllAttributes.py:137:31: E999 SyntaxError: invalid syntax\r\n                print className, attrName, \"->\", repr(value)\r\n                              ^\r\n./github/tests/Framework.py:96:18: E999 SyntaxError: invalid syntax\r\n        print verb, url, input, headers,\r\n                 ^\r\n./scripts/fix_headers.py:158:50: E999 SyntaxError: invalid syntax\r\n                print \"Don't know what to do with\", filename\r\n                                                 ^\r\n6     E999 SyntaxError: invalid syntax\r\n```","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDQ1NjM1MDkxNw==","author":{"login":"stale"},"authorAssociation":"NONE","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","createdAt":"2019-01-22T10:34:09Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/965#issuecomment-456350917","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQ1NjM1Njc4OA==","author":{"login":"cclauss"},"authorAssociation":"CONTRIBUTOR","body":"These are syntax errors in Python.  Can we please get some reviews on this PR?","createdAt":"2019-01-22T10:53:26Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/965#issuecomment-456356788","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQ2OTMxMTAzMw==","author":{"login":"KVGarg"},"authorAssociation":"NONE","body":"There are 3 more lines that is still using Python2 syntax\r\n1. https://github.com/PyGithub/PyGithub/blob/master/github/tests/ExposeAllAttributes.py#L137\r\n2. https://github.com/PyGithub/PyGithub/blob/master/github/tests/Framework.py#L96\r\n3. https://github.com/PyGithub/PyGithub/blob/master/github/tests/Framework.py#L119\r\n\r\nDo they also need to be changed?","createdAt":"2019-03-04T16:11:22Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/965#issuecomment-469311033","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQ4OTE2NDI2NA==","author":{"login":"stale"},"authorAssociation":"NONE","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","createdAt":"2019-05-03T16:50:53Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/965#issuecomment-489164264","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQ4OTI5ODA4Mw==","author":{"login":"KVGarg"},"authorAssociation":"NONE","body":"@cclauss Can I create a PR? that extends the Python 3 compatibility","createdAt":"2019-05-04T06:08:57Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/965#issuecomment-489298083","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQ4OTI5ODY1Mw==","author":{"login":"cclauss"},"authorAssociation":"CONTRIBUTOR","body":"Both @labrys and I have done so repeatedly:\r\n* https://github.com/PyGithub/PyGithub/pulls?q=is%3Apr+author%3Alabrys+is%3Aclosed\r\n* https://github.com/PyGithub/PyGithub/pulls?q=is%3Apr+author%3Acclauss+is%3Aclosed\r\n\r\nbut those PRs are never merged because I believe this project's maintainers like depending on __use_2to3=True__ in ___setup.py___:\r\n* https://github.com/PyGithub/PyGithub/blob/master/setup.py#L100\r\n\r\nwhich is deprecated / no longer recommended but it does still work:\r\n* https://setuptools.readthedocs.io/en/latest/python3.html","createdAt":"2019-05-04T06:18:20Z","includesCreatedEdit":true,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":1}}],"url":"https://github.com/PyGithub/PyGithub/issues/965#issuecomment-489298653","viewerDidAuthor":false}],"createdAt":"2018-11-23T09:18:36Z","number":965,"state":"CLOSED","title":"Python 3 syntax errors","url":"https://github.com/PyGithub/PyGithub/issues/965"},{"author":{"id":"MDQ6VXNlcjQzODkxOTc1","is_bot":false,"login":"dbolack","name":""},"body":"In building an audit reporter using pyGitHub, I found that  many \"outside\" contributors per repo.get_collaborators(affiliation=\"outside\") would also show up on affiliation=\"direct\"\r\n\r\nThese users only show as outside contributors in the github UI. My guess is this is an api problem, but I have no idea how to validate that.","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDUzMTA4NzQ1MQ==","author":{"login":"stale"},"authorAssociation":"NONE","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","createdAt":"2019-09-13T03:48:31Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/962#issuecomment-531087451","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDUzMTgzNjg4Ng==","author":{"login":"dbolack"},"authorAssociation":"NONE","body":"This continues to occur, FWIW,","createdAt":"2019-09-16T15:46:45Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/962#issuecomment-531836886","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDU1NDQzMzI0MA==","author":{"login":"stale"},"authorAssociation":"NONE","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","createdAt":"2019-11-15T16:35:55Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/962#issuecomment-554433240","viewerDidAuthor":false}],"createdAt":"2018-11-20T16:56:08Z","number":962,"state":"CLOSED","title":"Duplicated collaborators","url":"https://github.com/PyGithub/PyGithub/issues/962"},{"author":{"id":"MDQ6VXNlcjk3MTg5NzA=","is_bot":false,"login":"isouza-daitan","name":"Isac Souza"},"body":"Self-contained test:\r\n```\r\nfrom github import Github\r\n\r\ngithub = Github()\r\nrepos = github.search_repositories('shouldreturn0repos')\r\n\r\nassert repos.totalCount == 0\r\n```\r\n\r\nThe `totalCount` method has this code:\r\n```\r\n    def totalCount(self):\r\n        if not self.__totalCount:\r\n            [...]\r\n            if 'link' not in headers:\r\n                self.__totalCount = len(data) if data else 0\r\n            [...]\r\n```\r\nThe response has no `link` header but it has this data:\r\n```\r\n{\"total_count\":0,\"incomplete_results\":false,\"items\":[]}\r\n```\r\nand `totalCount` returns 3 because there are 3 items inside the data dict.\r\n\r\nI'm not sure why the `total_count` value in the response is not used directly.","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDQ0MDE2NDU4OA==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"Good catch. Probably a bug in the code.\r\n\r\n> I'm not sure why the total_count value in the response is not used directly.\r\n\r\nIt's because for some response (I think for all non-search related API), the response json did not contain the `total_count` key, so we have to get it from the `link` header.","createdAt":"2018-11-20T06:55:22Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/960#issuecomment-440164588","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQ0MTAzNjQxMQ==","author":{"login":"s-t-e-v-e-n-k"},"authorAssociation":"COLLABORATOR","body":"I think @sfdye is right. We should check the returned JSON for a total_count item first, and then fall back if the key doesn't exist. I'll dig into this later today.","createdAt":"2018-11-22T13:49:42Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/960#issuecomment-441036411","viewerDidAuthor":false}],"createdAt":"2018-11-19T13:51:56Z","number":960,"state":"CLOSED","title":"PaginatedList.totalCount is broken when there are 0 results","url":"https://github.com/PyGithub/PyGithub/issues/960"},{"author":{"id":"MDQ6VXNlcjc3MjExMTk=","is_bot":false,"login":"Ayub-Khan","name":"Ayub"},"body":"We were using github commit combined status to check the status of pr tests. Those were travis based tests and every thing was working fine. Recently we started using github based tests and that is not working any more. Is there any way we can get the combined status of github checks. ","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDQzODEwNTU4Mw==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"Yes, call `get_combined_status()` on the `Commit` object you wanna check against","createdAt":"2018-11-13T02:23:36Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/958#issuecomment-438105583","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQzODE5MzYyNA==","author":{"login":"Ayub-Khan"},"authorAssociation":"NONE","body":"get_combined_status() was working fine regarding travis based checks but its failing in case of github based checks. ","createdAt":"2018-11-13T09:18:43Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/958#issuecomment-438193624","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQzODE5NDMwMA==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"By Github checks you mean this? https://developer.github.com/v3/checks/\r\n\r\nSee #813 ","createdAt":"2018-11-13T09:20:56Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/958#issuecomment-438194300","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQzODU5NjQ2NQ==","author":{"login":"Ayub-Khan"},"authorAssociation":"NONE","body":"Yes. ","createdAt":"2018-11-14T09:31:13Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/958#issuecomment-438596465","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQzODU5OTc1OQ==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"Then it's feature request.\r\n\r\nClosing in favor of #813 ","createdAt":"2018-11-14T09:41:30Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/958#issuecomment-438599759","viewerDidAuthor":false}],"createdAt":"2018-11-12T10:33:52Z","number":958,"state":"CLOSED","title":"How to get pull request checks status?","url":"https://github.com/PyGithub/PyGithub/issues/958"},{"author":{"id":"MDQ6VXNlcjMzMTgyMjM=","is_bot":false,"login":"Bluscream","name":"Bluscream"},"body":"I can get notified of people forkinb my repos but thats not half as interesting as knowing when the actually get modified.\nIs there a way to get a iterable with all repos on github that are forked from one of my or my organisations repos?","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDQzNjI0Nzc5Mw==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"I am afraid you have to do it one by one.\r\n\r\nhttps://developer.github.com/v3/repos/forks/#list-forks\r\nhttps://pygithub.readthedocs.io/en/latest/github_objects/Repository.html#github.Repository.Repository.get_forks","createdAt":"2018-11-06T13:13:14Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/955#issuecomment-436247793","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQ0MTg3ODQ1MA==","author":{"login":"Bluscream"},"authorAssociation":"NONE","body":"Wouldn't that quickly exceed the api limits?","createdAt":"2018-11-27T02:48:52Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/955#issuecomment-441878450","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQ0MTg4MDQ2Mg==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"Unless you can think of a better way? The Github API rate limit is quite generous actually.","createdAt":"2018-11-27T03:00:00Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/955#issuecomment-441880462","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQ0MTg4MTQzMw==","author":{"login":"Bluscream"},"authorAssociation":"NONE","body":"Can pygithub be split in shards? So that two servers share the same tasks","createdAt":"2018-11-27T03:04:42Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/955#issuecomment-441881433","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQ0MTg4MjE4OA==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"Don’t think so","createdAt":"2018-11-27T03:07:00Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/955#issuecomment-441882188","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQ0MTkwMjMwOQ==","author":{"login":"Bluscream"},"authorAssociation":"NONE","body":"Okay, thanks ^^","createdAt":"2018-11-27T04:20:07Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/955#issuecomment-441902309","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQ0MTkwMjMxMg==","author":{"login":"Bluscream"},"authorAssociation":"NONE","body":"Okay, thanks ^^","createdAt":"2018-11-27T04:20:07Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/955#issuecomment-441902312","viewerDidAuthor":false}],"createdAt":"2018-11-06T10:27:27Z","number":955,"state":"CLOSED","title":"Get all forks of my source repos?","url":"https://github.com/PyGithub/PyGithub/issues/955"},{"author":{"id":"MDQ6VXNlcjE4NjY1Mzcw","is_bot":false,"login":"letelete","name":"Bruno Kawka"},"body":"Hi,\r\nI'm using PyGithub for some boring tasks automatization where I need to check for a specific issue in the repository if any of pull requests reference it. Furthermore, if true, I would like to see if referencing pull request is already merged or not.\r\n\r\nIs there any way to do that with PyGithub? I've been looking in documentation and couldn't find anything related.\r\n\r\nI will be grateful if you can send me this information.","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDQ1MDExMjIxOQ==","author":{"login":"stale"},"authorAssociation":"NONE","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","createdAt":"2018-12-27T09:21:32Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/952#issuecomment-450112219","viewerDidAuthor":false}],"createdAt":"2018-10-28T08:59:00Z","number":952,"state":"CLOSED","title":"How to get informations about reference in issue?","url":"https://github.com/PyGithub/PyGithub/issues/952"},{"author":{"id":"MDQ6VXNlcjIxNzkwNTE=","is_bot":false,"login":"DylanMeeus","name":"Dylan Meeus"},"body":"I couldn't find this in the examples (or I overlooked it), but I can't see if it is possible to clone the repository using PyGithub.","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDQzMzYzMzk2NQ==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"Don't think it was provided by Github REST API. You will need a python git client.","createdAt":"2018-10-27T16:16:17Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/951#issuecomment-433633965","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQzMzY1NTA3NA==","author":{"login":"DylanMeeus"},"authorAssociation":"NONE","body":"Alrighty, Thank you!\r\n\r\nI went the route of just using python to execute git clone with `system.os(\"..\")` :) ","createdAt":"2018-10-27T21:03:47Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":1}},{"content":"THUMBS_DOWN","users":{"totalCount":1}}],"url":"https://github.com/PyGithub/PyGithub/issues/951#issuecomment-433655074","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDUwMTIyMzg2NA==","author":{"login":""},"authorAssociation":"NONE","body":"Will there be an option within pygithub to eventually do this?","createdAt":"2019-06-12T10:59:52Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/951#issuecomment-501223864","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDUxMzc4NDc2NQ==","author":{"login":"perreault-m"},"authorAssociation":"NONE","body":"I don't think so , the PYGithub API seems to be used only to control the remote and not work locally.","createdAt":"2019-07-22T13:11:16Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/951#issuecomment-513784765","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDYyMjQwNjY0Ng==","author":{"login":"mpennington-te"},"authorAssociation":"NONE","body":"I find myself with a similar question... I work for a company that uses GitHub as their online source repository.\r\n\r\nThis means I work with two Github repositories:\r\n* One repo under our shared corporate username (thousandeyes)\r\n* I frequently clone a thousandeyes repo to mpennington-te (my github account)\r\n\r\nI have to clone repos like this practically every day.  It would be quite useful to have a github API to do this.","createdAt":"2020-05-01T14:18:48Z","includesCreatedEdit":true,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/951#issuecomment-622406646","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDYyMjQwOTUzMQ==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"First question, why? What's the use case for?\r\n\r\nIf you simply want to clone them locally, why not just write a shell script or use [GitPython](https://github.com/gitpython-developers/GitPython)\r\n","createdAt":"2020-05-01T14:26:12Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/951#issuecomment-622409531","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDYyMjQzNTAwOQ==","author":{"login":"mpennington-te"},"authorAssociation":"NONE","body":"> First question, why?  What's the use case for?\r\n\r\nThose questions (and the solution) are answered here:\r\nhttps://stackoverflow.com/q/61544909/667301","createdAt":"2020-05-01T15:30:43Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":2}}],"url":"https://github.com/PyGithub/PyGithub/issues/951#issuecomment-622435009","viewerDidAuthor":false}],"createdAt":"2018-10-27T14:05:10Z","number":951,"state":"CLOSED","title":"Clone repository","url":"https://github.com/PyGithub/PyGithub/issues/951"},{"author":{"id":"MDQ6VXNlcjUwODcyMw==","is_bot":false,"login":"007pig","name":""},"body":"In reversed(), 'headers' parameter is not passed to PaginatedList(). It makes some APIs not reversible. For example, get_stargazers_with_dates() which requires \"Accept: application/vnd.github.v3.star+json\" header in the API call.","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDQzMjkxMzkzNw==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"Makes sense. PR welcome.","createdAt":"2018-10-25T04:51:22Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/945#issuecomment-432913937","viewerDidAuthor":false}],"createdAt":"2018-10-25T04:42:43Z","number":945,"state":"CLOSED","title":"PaginatedList reversed property loses http headers","url":"https://github.com/PyGithub/PyGithub/issues/945"},{"author":{"id":"MDQ6VXNlcjMzMTgyMjM=","is_bot":false,"login":"Bluscream","name":"Bluscream"},"body":"```\r\nC:\\Users\\blusc\\AppData\\Local\\Programs\\Python\\Python36\\python.exe C:/Users/blusc/PycharmProjects/github-api/main.py\r\nTraceback (most recent call last):\r\n  File \"C:/Users/blusc/PycharmProjects/github-api/main.py\", line 14, in <module>\r\n    repo.edit(private=False)\r\n  File \"C:\\Users\\blusc\\AppData\\Local\\Programs\\Python\\Python36\\lib\\site-packages\\github\\Repository.py\", line 1284, in edit\r\n    input=post_parameters\r\n  File \"C:\\Users\\blusc\\AppData\\Local\\Programs\\Python\\Python36\\lib\\site-packages\\github\\Requester.py\", line 262, in requestJsonAndCheck\r\n    return self.__check(*self.requestJson(verb, url, parameters, headers, input, self.__customConnection(url)))\r\n  File \"C:\\Users\\blusc\\AppData\\Local\\Programs\\Python\\Python36\\lib\\site-packages\\github\\Requester.py\", line 273, in __check\r\n    raise self.__createException(status, responseHeaders, output)\r\ngithub.GithubException.UnknownObjectException: 404 {'message': 'Not Found', 'documentation_url': 'https://developer.github.com/v3/repos/#edit'}\r\n\r\nProcess finished with exit code 1\r\n```\r\n\r\nI get this for no reason? Is the library broken?\r\n\r\n```py\r\nfrom github import Github\r\ng = Github(\"correctusername\", \"correctpassword\")\r\nrepos = 0\r\nfor repo in g.get_user().get_repos():\r\n    repo.edit(private=False)\r\n    repos += 1\r\n    print(repo.name)\r\nprint(\"Repositories processed: %s\"%repos)\r\n```","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDQzMjIzNzU2MA==","author":{"login":"Bluscream"},"authorAssociation":"NONE","body":"I added some prints to `C:/Users/blusc/AppData/Local/Programs/Python/Python36/Lib/site-packages/github/Repository.py`\r\n```py\r\n    def requestJsonAndCheck(self, verb, url, parameters=None, headers=None, input=None):\r\n        print(verb, url, parameters, headers, input)\r\n        return self.__check(*self.requestJson(verb, url, parameters, headers, input, self.__customConnection(url)))\r\n```\r\nand got this:\r\n```\r\nGET /user/repos {} None None\r\nPATCH https://api.github.com/repos/alex720/Stalker None None {'name': 'Stalker', 'private': False}\r\n```","createdAt":"2018-10-23T13:03:10Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/944#issuecomment-432237560","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQ0MTMzOTY4NQ==","author":{"login":"labrys"},"authorAssociation":"NONE","body":"This may be caused by the relative imports. Python 3 requires absolute imports. This should be fixed by #967","createdAt":"2018-11-24T03:06:06Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/944#issuecomment-441339685","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQ1NjY1OTM1NA==","author":{"login":"stale"},"authorAssociation":"NONE","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","createdAt":"2019-01-23T03:46:32Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/944#issuecomment-456659354","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDY2ODk5MDYxMQ==","author":{"login":"MikhailTH"},"authorAssociation":"NONE","body":"Same issue, no idea whats happening","createdAt":"2020-08-05T05:37:27Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":4}}],"url":"https://github.com/PyGithub/PyGithub/issues/944#issuecomment-668990611","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDY2ODk5MTU0NA==","author":{"login":"s-t-e-v-e-n-k"},"authorAssociation":"COLLABORATOR","body":"@MikhailTH Would you mind opening a new issue with more detail, such as a traceback?","createdAt":"2020-08-05T05:40:45Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":1}}],"url":"https://github.com/PyGithub/PyGithub/issues/944#issuecomment-668991544","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDc5NTM3NjI4Mw==","author":{"login":"dzharylgapov"},"authorAssociation":"NONE","body":"I think you can write your login into `get_user()` function like this:\r\n`for repo in g.get_user('arutoriusu').get_repos():`\r\nAlso this error may occur due trying to access private repositories. My suggestion - using github access token.\r\nYou can create the access token ([use this link](https://github.com/settings/tokens) or **github settings -> Developer settings -> Personal access tokens -> Generate new token**) and select the scope:\r\n![image](https://user-images.githubusercontent.com/55809196/110631105-9ac0df00-81bf-11eb-8c3d-9de3efc2b014.png)\r\nAnd paste token instead login and password:\r\n`g = Github(\"-access-token-here-\")`\r\nI hope it hepls.","createdAt":"2021-03-10T12:57:30Z","includesCreatedEdit":true,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/944#issuecomment-795376283","viewerDidAuthor":false}],"createdAt":"2018-10-23T12:51:43Z","number":944,"state":"CLOSED","title":"github.GithubException.UnknownObjectException","url":"https://github.com/PyGithub/PyGithub/issues/944"},{"author":{"id":"MDQ6VXNlcjExMTkwMTc=","is_bot":false,"login":"pconrad","name":"Phill Conrad"},"body":"\r\n\r\n\r\n\r\nI want to ask \"is the current user C a member of organization O.\"\r\n\r\nI tried using the /orgs/:org/members/:user end point and simply specifying the current user as the parameter for `named_user`.   \r\n– GET: github.Organization.Organization.has_in_members()\r\n\r\nUsing code such as:\r\n\r\n```python\r\n        g = Github(resp['access_token'])\r\n        org = g.get_organization(org_name)\r\n        named_user = g.get_user(github_userid)\r\n       isMember = org.has_in_members(named_user)\r\n```\r\n\r\nBut that isn't working for me, for reasons I can't figure out.  (I used to work, but doesn't any more).\r\nI had a similar problem in a Java app based on https://github.com/jcabi/jcabi-github ... where I got it working using the alternative endpoint:\r\n\r\n \"GET /user/memberships/orgs/:org\" from \r\n\r\nhttps://developer.github.com/v3/orgs/members/#get-your-organization-membership\r\n\r\nBut that one does not seem to be implemented in PyGithub    It wasn't implemented in https://github.com/jcabi/jcabi-github  either, but I was able to find an example of how to \"go around\" the OO interface and interact with the underlying endpoints.  I'm wondering if there is some similar code for PyGithub?  Something like the PyGithub equivalent of this? \r\n\r\n```java\r\nJsonResponse jr = github.entry()\r\n\t\t\t\t.uri().path(\"/user/memberships/orgs/\" + orgname)\r\n\t\t\t\t.back()\r\n\t\t\t\t.method(Request.GET)\r\n\t\t\t\t.fetch()\r\n\t\t\t\t.as(JsonResponse.class);\r\n\r\n\t\t\tString role = jr.json().readObject().getString(\"role\");\r\n```\r\n\r\nOr, alternatively, perhaps adding a get_org_role(org_name) method to named_user?","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDQzMjA2NjAzMg==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"I agree, this endpoint needs to be implemented.\r\n\r\nFor now you can use `org.has_in_members(current NamedUser)` as a work-around. (or `has_in_public_members`)","createdAt":"2018-10-23T02:37:17Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/942#issuecomment-432066032","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQzNDQ4NTMyNg==","author":{"login":"pconrad"},"authorAssociation":"NONE","body":"Unfortunately I need to be able to check regardless of whether the membership is public or not.   The `org.has_in_members(current NamedUser)` was not working for some reason, but to be fair, the day I tried, in retrospect was also the day of the GitHub general service meltdown.  So I will try that again.\r\n\r\nAny pointers to code that starts with PyGithub for authentication, but then switches to raw json through the endpoint?","createdAt":"2018-10-30T21:58:43Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/942#issuecomment-434485326","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQzNDUxNDc0Mw==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"Just add that implementation I guess? Let me know if you need any help","createdAt":"2018-10-31T00:04:07Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/942#issuecomment-434514743","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDUzNzEyMDA3OA==","author":{"login":"sudhir512kj"},"authorAssociation":"NONE","body":"@pconrad I would like to work on it. Assign me.","createdAt":"2019-10-01T16:35:58Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/942#issuecomment-537120078","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDUzNzkyNTEwNw==","author":{"login":"s-t-e-v-e-n-k"},"authorAssociation":"COLLABORATOR","body":"Closed via #1237","createdAt":"2019-10-03T12:33:31Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/942#issuecomment-537925107","viewerDidAuthor":false}],"createdAt":"2018-10-22T18:42:45Z","number":942,"state":"CLOSED","title":"Endpoint \"GET /user/memberships/orgs/:org\" not implemented","url":"https://github.com/PyGithub/PyGithub/issues/942"},{"author":{"id":"MDQ6VXNlcjI3NTU1MzQ2","is_bot":false,"login":"jaxinye","name":""},"body":"I was trying to use following python code to get reviews of one repository. But 'raw_data' method of PullRequestReview object returns 'NoneType' object has no attribute 'startswith' error message.\r\n\r\n`    g = Github(token, per_page=100)`\r\n`    res = g.get_repo(id).get_pull(num).get_reviews()`\r\n`    page = res.get_page(0)`\r\n`    for review in page:`\r\n`        review_json = json.dumps(review.raw_data)`","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDQzMTg0MjcwNQ==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"Closing in favor of #940","createdAt":"2018-10-22T13:55:16Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/941#issuecomment-431842705","viewerDidAuthor":false}],"createdAt":"2018-10-22T03:07:29Z","number":941,"state":"CLOSED","title":"'raw_data' method of PullRequestReview returns Nonetype error","url":"https://github.com/PyGithub/PyGithub/issues/941"},{"author":{"id":"MDQ6VXNlcjI3NTU1MzQ2","is_bot":false,"login":"jaxinye","name":""},"body":"I've been trying to use below python codes to get pull request reviews of one repository. But the methods raw_data returns 'NoneType' object has no attribute 'startswith' error message.\r\n`    g = Github(token, per_page=100)`\r\n`    res = g.get_repo(int(66293963)).get_pull(46).get_reviews()`\r\n`    page = res.get_page(0)`\r\n`    for review in page:`\r\n`        review_json = json.dumps(review.raw_data)`","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDQzMTg0MjY1MQ==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"Normally you don't need to use the `get_page`.\r\n`get_reviews()` returns a PaginatedList, you can just do:\r\n```python\r\nfirst_review = get_reviews()[0]\r\n# or\r\nfor review in get_reviews():\r\n\tprint(review)\r\n```","createdAt":"2018-10-22T13:55:03Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/940#issuecomment-431842651","viewerDidAuthor":false}],"createdAt":"2018-10-22T02:47:13Z","number":940,"state":"CLOSED","title":"review.raw_data returns NoneType on PullRequestReviewObject","url":"https://github.com/PyGithub/PyGithub/issues/940"},{"author":{"id":"MDQ6VXNlcjQwODA3Mjcw","is_bot":false,"login":"ss-remygreinhofer","name":"Rémy Greinhofer"},"body":"The GitHub API call for retrieving repository collaborators[allows for [filtering by affiliation](https://developer.github.com/v3/repos/collaborators/#list-collaborators).\r\n\r\nThis is not possible with the current [github.Repository.Repository.get_collaborators()](https://github.com/PyGithub/PyGithub/blob/0a10d7cdf0f69ebac6d99e9699df5696cb1e9bea/github/Repository.py#L1343-L1353) function.","comments":[],"createdAt":"2018-10-19T17:54:11Z","number":937,"state":"CLOSED","title":"Add the ability to filter repository collaborators","url":"https://github.com/PyGithub/PyGithub/issues/937"},{"author":{"id":"MDQ6VXNlcjExMTc0MTc5","is_bot":false,"login":"slinkymanbyday","name":""},"body":"On Github Enterprise, the API message does not read \"Bad credentials\" when incorrect credentials are supplied. It reads \"Must authenticate to access this API.\"\r\n\r\nMight be better to just go off of the 401 code as opposed to the error message.\r\n\r\n if status == 401 and output.get(\"message\") == \"Bad credentials\":\r\n\r\nshould be\r\n if status == 401:","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDQzMDU0ODAzMA==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"PR please I will review","createdAt":"2018-10-17T09:00:20Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/934#issuecomment-430548030","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQzNjY4OTQ4OA==","author":{"login":"Zoom67"},"authorAssociation":"NONE","body":"I think this may have broken something. If I run v1.43.2, my script works; if I run 1.43.3, I get 401 {u'documentation_url': u'https://developer.github.com/v3', u'message': u'Bad credentials'}. The credentials are good.","createdAt":"2018-11-07T16:38:18Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/934#issuecomment-436689488","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQzNjk3OTMzMA==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"@Zoom67 Can you share the script? ","createdAt":"2018-11-08T12:34:33Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/934#issuecomment-436979330","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQzNzAxMDYyNQ==","author":{"login":"Zoom67"},"authorAssociation":"NONE","body":"I can share a snippet with some values fudged. It's very simple. Creating this object throws an exception, and the error message contains the JSON above.\r\n\r\n```\r\nfrom github import Github\r\n\r\nclass GitConnection(object):\r\n    base_url = 'https://<our-gh-server>/api/v3'\r\n    repo_id = '<repo-name>'\r\n\r\n    def __init__(self, username, password):\r\n        self._connection = Github(username, password, self.base_url)\r\n        self._repo = self._connection.get_repo(self.repo_id)\r\n```","createdAt":"2018-11-08T14:24:25Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/934#issuecomment-437010625","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQzNzA0ODk3Mw==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"@Zoom67 Found the culprit #948\r\n\r\nThis PR changes the relative positions of the arguments, so you might want to use keyword arguments instead of positional ones.\r\n\r\nThis should solve your problem:\r\n`self._connection = Github(username, password, base_url=self.base_url)`","createdAt":"2018-11-08T16:00:44Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/934#issuecomment-437048973","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQzNzA5NjE1OA==","author":{"login":"Zoom67"},"authorAssociation":"NONE","body":"Yep, that did it - thanks! I changed that line to be fully qualified, just to be sure.\r\n\r\n```\r\n        self._connection = Github(login_or_token=username,\r\n                                  password=password,\r\n                                  base_url=self.base_url)\r\n```","createdAt":"2018-11-08T17:57:20Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":2}}],"url":"https://github.com/PyGithub/PyGithub/issues/934#issuecomment-437096158","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQ1MjEyMjY4Mw==","author":{"login":"stale"},"authorAssociation":"NONE","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","createdAt":"2019-01-07T23:43:41Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/934#issuecomment-452122683","viewerDidAuthor":false}],"createdAt":"2018-10-17T08:37:16Z","number":934,"state":"CLOSED","title":"BadCredentialsException not raised on GitHub enterprise","url":"https://github.com/PyGithub/PyGithub/issues/934"},{"author":{"id":"MDQ6VXNlcjEwMzg1NjI4","is_bot":false,"login":"AnYeMoWang","name":"暗夜膜王"},"body":"I've found a weird thing recently, I couldn't get ```last_modified``` unless I called ```update()```function. Is it a bug or something?:\r\n```\r\nIn [9]: res = g.search_code('pygithub')\r\n\r\nIn [10]: files = res.get_page(0)\r\n\r\nIn [11]: print(files[0].last_modified)\r\nNone\r\n\r\nIn [12]: files[0].update()\r\nOut[12]: True\r\n\r\nIn [13]: files[0].last_modified\r\nOut[13]: 'Thu, 25 Jan 2018 18:00:05 GMT'\r\n```\r\n","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDQ0NzU0OTk1OA==","author":{"login":"stale"},"authorAssociation":"NONE","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","createdAt":"2018-12-15T08:35:38Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/933#issuecomment-447549958","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQ4MTIzNjE5Mw==","author":{"login":"yangyang-zhang"},"authorAssociation":"NONE","body":"@AnYeMoWang  I have the same problem. Do you have a good solution? It takes a long time to call the update function.\r\n\r\n","createdAt":"2019-04-09T12:46:41Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/933#issuecomment-481236193","viewerDidAuthor":false}],"createdAt":"2018-10-16T08:02:31Z","number":933,"state":"CLOSED","title":"Couldn't get ContentFile's last_modified attribute directly","url":"https://github.com/PyGithub/PyGithub/issues/933"},{"author":{"id":"MDQ6VXNlcjUzNjAyMjI=","is_bot":false,"login":"amine-lah","name":"Amine"},"body":"Hello,\r\n\r\nI was trying to fetch a list of repositories with a specific topic and then play with the returned attributes, but the Repository objects returned in the PaginatedList throw an error when trying to fetch unknown data:\r\n```bash\r\nTraceback (most recent call last):\r\n  File \"github-crawler.py\", line 6, in <module>\r\n    print(i, repo.archive_url)\r\n  File \"/home/user/.local/lib/python3.6/site-packages/github/Repository.py\", line 2407, in get_topics\r\n    self.url + \"/topics\",\r\n  File \"/home/user/.local/lib/python3.6/site-packages/github/Repository.py\", line 745, in url\r\n    self._completeIfNotSet(self._url)\r\n  File \"/home/user/.local/lib/python3.6/site-packages/github/GithubObject.py\", line 259, in _completeIfNotSet\r\n    self._completeIfNeeded()\r\n  File \"/home/user/.local/lib/python3.6/site-packages/github/GithubObject.py\", line 263, in _completeIfNeeded\r\n    self.__complete()\r\n  File \"/home/user/.local/lib/python3.6/site-packages/github/GithubObject.py\", line 268, in __complete\r\n    self._url.value\r\n  File \"/home/user/.local/lib/python3.6/site-packages/github/Requester.py\", line 262, in requestJsonAndCheck\r\n    return self.__check(*self.requestJson(verb, url, parameters, headers, input, self.__customConnection(url)))\r\n  File \"/home/user/.local/lib/python3.6/site-packages/github/Requester.py\", line 278, in __customConnection\r\n    if not url.startswith(\"/\"):\r\nAttributeError: 'NoneType' object has no attribute 'startswith'\r\n```\r\n\r\nBelow is an example of the code:\r\n```python\r\nfrom github import Github\r\n\r\ng = Github(per_page=300)\r\ni = 1\r\nfor repo in g.search_topics('security'):\r\n    print(i, repo.archive_url)\r\n    i += 1\r\n```\r\n\r\nIt can be tested here: [https://repl.it/repls/LawngreenPlushBetaversion](https://repl.it/repls/LawngreenPlushBetaversion)\r\n\r\nEnvironment:\r\nLinux ubuntu 4.15.0-36-generic x86_64 GNU/Linux\r\nPython 3.6.6\r\nPyGithub 1.43.2\r\n\r\nAny help with that ?\r\nAnd thanks","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDQyOTYwMTY0MA==","author":{"login":"pqiaohaoq"},"authorAssociation":"NONE","body":"I will fix it later :p","createdAt":"2018-10-14T06:56:56Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":1}}],"url":"https://github.com/PyGithub/PyGithub/issues/929#issuecomment-429601640","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQyOTYyMjU2Ng==","author":{"login":"pqiaohaoq"},"authorAssociation":"NONE","body":"Maybe, wrong code is [here](https://github.com/PyGithub/PyGithub/blob/ac8966cc8cb0b9acf3c9ea14162ae800474d4265/github/GithubObject.py#L272). @jacquerie ","createdAt":"2018-10-14T12:30:45Z","includesCreatedEdit":true,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/929#issuecomment-429622566","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQyOTYyNDQyMA==","author":{"login":"jacquerie"},"authorAssociation":"CONTRIBUTOR","body":"> Maybe, wrong code is [here](https://github.com/PyGithub/PyGithub/blob/ac8966cc8cb0b9acf3c9ea14162ae800474d4265/github/GithubObject.py#L272). @jacquerie\r\n\r\nUhm? I don't think I contributed code to any of this...","createdAt":"2018-10-14T12:58:11Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"CONFUSED","users":{"totalCount":1}}],"url":"https://github.com/PyGithub/PyGithub/issues/929#issuecomment-429624420","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQzMzk4MzM3OQ==","author":{"login":"schreck61"},"authorAssociation":"NONE","body":"Just glancing at the code.  It appears that search_topics is returning a paginated list of GitHub repositories, but the API seems to return a list of topics, including the following properties:\r\n\r\n- name\r\n- display_name\r\n- short_description\r\n- description\r\n- created_by\r\n- released\r\n- created_at\r\n- updated_at\r\n- featured\r\n- curated\r\n- score\r\n\r\nI think this may be the root problem.\r\n","createdAt":"2018-10-29T16:39:36Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":1}}],"url":"https://github.com/PyGithub/PyGithub/issues/929#issuecomment-433983379","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQzNDYxMDE0Mw==","author":{"login":"amine-lah"},"authorAssociation":"NONE","body":"Yes indeed, the API endpoint /search/topics returns a list of topics that are related to the provided keyword and not a list of repositories tagged with that topic (which is a little bit confusing, maybe ?).\r\nIn my code I used the other API endpoints and it worked fine.\r\n\r\nBut still, the method in PyGithub should be fixed.","createdAt":"2018-10-31T09:00:46Z","includesCreatedEdit":true,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/929#issuecomment-434610143","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQzNDYyNjgzNA==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"PR welcome","createdAt":"2018-10-31T09:56:30Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":2}}],"url":"https://github.com/PyGithub/PyGithub/issues/929#issuecomment-434626834","viewerDidAuthor":false}],"createdAt":"2018-10-12T10:03:01Z","number":929,"state":"CLOSED","title":"Github.search_topics returning list of repos that throw an error when trying to fetch undefined data","url":"https://github.com/PyGithub/PyGithub/issues/929"},{"author":{"id":"MDQ6VXNlcjEzMDg1MjQ=","is_bot":false,"login":"loganknecht","name":"Logan Knecht"},"body":"Hello there,\r\n\r\nLove the work that's being done here.\r\n\r\nIt appears that there is a set of endpoints that are from the traffic endpoints.\r\n\r\nSpecifically\r\n`GET /repos/:owner/:repo/traffic/popular/referrers`\r\n`GET /repos/:owner/:repo/traffic/popular/paths`\r\n`GET /repos/:owner/:repo/traffic/views`\r\n`GET /repos/:owner/:repo/traffic/clones`\r\n\r\nThese can be found here:\r\nhttps://developer.github.com/v3/repos/traffic/\r\n\r\nWould love to see these added!\r\n\r\nKeep up the great work!","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDQzOTcxMjcxNw==","author":{"login":"minno917"},"authorAssociation":"NONE","body":"I am part of a group of five and we would like to attempt to implement this.","createdAt":"2018-11-18T18:05:39Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/926#issuecomment-439712717","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQzOTcyOTE3Nw==","author":{"login":"miguelgfierro"},"authorAssociation":"NONE","body":"@minno917 maybe this can help you https://github.com/miguelgfierro/codebase/blob/master/python/utilities/git_stats.py#L167","createdAt":"2018-11-18T21:53:53Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/926#issuecomment-439729177","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQzOTc0NzM3Nw==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"@minno917 awesome, PR welcome","createdAt":"2018-11-19T01:41:55Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/926#issuecomment-439747377","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQ0MjE4Mjk1Mg==","author":{"login":"minno917"},"authorAssociation":"NONE","body":"Thank you for the responses. We were all busy over Thanksgiving break, but we are now actively working on the issue! Expect a PR in the next week.","createdAt":"2018-11-27T19:19:36Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":1}}],"url":"https://github.com/PyGithub/PyGithub/issues/926#issuecomment-442182952","viewerDidAuthor":false}],"createdAt":"2018-10-10T19:36:59Z","number":926,"state":"CLOSED","title":"GitHub Repo Traffic Endpoints are Missing","url":"https://github.com/PyGithub/PyGithub/issues/926"},{"author":{"id":"MDQ6VXNlcjEzMzk0MTYx","is_bot":false,"login":"elfosardo","name":"Riccardo Pittau"},"body":"this is more a feature request than an issue\r\npipenv is the new python packaging tool that solves different known problems using the old pip + virtualenv + requirements.txt mode\r\nwould be nice to add the configuration files to the repo and remove requirements.txt","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDQyODEzODUzNg==","author":{"login":"elfosardo"},"authorAssociation":"CONTRIBUTOR","body":"PR with simple pipenv config files #924 ","createdAt":"2018-10-09T10:16:07Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/923#issuecomment-428138536","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDYwMjkzMDI3OQ==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"👇 \r\nhttps://github.com/pypa/pipenv/issues/3369","createdAt":"2020-03-24T00:21:44Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/923#issuecomment-602930279","viewerDidAuthor":false}],"createdAt":"2018-10-08T15:11:49Z","number":923,"state":"CLOSED","title":"deprecate requirements in favor of pipenv","url":"https://github.com/PyGithub/PyGithub/issues/923"},{"author":{"id":"MDQ6VXNlcjU4MDA3MjY=","is_bot":false,"login":"0x48piraj","name":"Piyush Raj"},"body":"Refer #808\r\n\r\n```\r\n\r\nTraceback (most recent call last):\r\n  File \"run.py\", line 28, in <module>\r\n    if p.merged:\r\n  File \"C:\\Python34\\lib\\site-packages\\github\\PullRequest.py\", line 225, in merged\r\n    self._completeIfNotSet(self._merged)\r\n  File \"C:\\Python34\\lib\\site-packages\\github\\GithubObject.py\", line 251, in _completeIfNotSet\r\n    self._completeIfNeeded()\r\n  File \"C:\\Python34\\lib\\site-packages\\github\\GithubObject.py\", line 255, in _completeIfNeeded\r\n    self.__complete()\r\n  File \"C:\\Python34\\lib\\site-packages\\github\\GithubObject.py\", line 260, in __complete\r\n    self._url.value\r\n  File \"C:\\Python34\\lib\\site-packages\\github\\Requester.py\", line 172, in requestJsonAndCheck\r\n    return self.__check(*self.requestJson(verb, url, parameters, headers, input, cnx))\r\n  File \"C:\\Python34\\lib\\site-packages\\github\\Requester.py\", line 213, in requestJson\r\n    return self.__requestEncode(cnx, verb, url, parameters, headers, input, encode)\r\n  File \"C:\\Python34\\lib\\site-packages\\github\\Requester.py\", line 252, in __requestEncode\r\n    status, responseHeaders, output = self.__requestRaw(cnx, verb, url, requestHeaders, encoded_input)\r\n  File \"C:\\Python34\\lib\\site-packages\\github\\Requester.py\", line 277, in __requestRaw    requestHeaders\r\n  File \"C:\\Python34\\lib\\http\\client.py\", line 1090, in request    self._send_request(method, url, body, headers)  \r\n  File \"C:\\Python34\\lib\\http\\client.py\", line 1128, in _send_request\r\n    self.endheaders(body)\r\n  File \"C:\\Python34\\lib\\http\\client.py\", line 1086, in endheaders\r\n    self._send_output(message_body)\r\n  File \"C:\\Python34\\lib\\http\\client.py\", line 924, in _send_output\r\n    self.send(msg)\r\n  File \"C:\\Python34\\lib\\http\\client.py\", line 859, in send\r\n    self.connect()\r\n  File \"C:\\Python34\\lib\\http\\client.py\", line 1230, in connect\r\n    server_hostname=sni_hostname)\r\n  File \"C:\\Python34\\lib\\ssl.py\", line 364, in wrap_socket\r\n    _context=self)\r\n  File \"C:\\Python34\\lib\\ssl.py\", line 578, in __init__\r\n    self.do_handshake()\r\n  File \"C:\\Python34\\lib\\ssl.py\", line 805, in do_handshake\r\n    self._sslobj.do_handshake()\r\nsocket.timeout: _ssl.c:584: The handshake operation timed out\r\n\r\n```","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDQzMjA2NjM5NQ==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"Please use the latest version and try again","createdAt":"2018-10-23T02:38:59Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":1}}],"url":"https://github.com/PyGithub/PyGithub/issues/919#issuecomment-432066395","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQ0OTU0NTQyMg==","author":{"login":"stale"},"authorAssociation":"NONE","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","createdAt":"2018-12-22T04:58:23Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/919#issuecomment-449545422","viewerDidAuthor":false}],"createdAt":"2018-10-07T18:48:00Z","number":919,"state":"CLOSED","title":"Timeout exception in request for PRs from a Repository","url":"https://github.com/PyGithub/PyGithub/issues/919"},{"author":{"id":"MDQ6VXNlcjQzMzM3NDQ5","is_bot":false,"login":"anuj-reef","name":""},"body":"Is there a way to do this - https://developer.github.com/v3/activity/events/#list-public-events?","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDQyNTkwODQwNw==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"Don't think there is. PR are welcome.","createdAt":"2018-10-01T13:31:13Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/913#issuecomment-425908407","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQyODU1NDg5MQ==","author":{"login":"elfosardo"},"authorAssociation":"CONTRIBUTOR","body":"I noticed there's a function get_event in [AuthenticatedUser.py](https://github.com/PyGithub/PyGithub/blob/ade78ffb2dc78f02e7ebc3db704900c70e401341/github/AuthenticatedUser.py#L671)\r\nis that what you're looking for ?","createdAt":"2018-10-10T12:37:16Z","includesCreatedEdit":true,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/913#issuecomment-428554891","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQyODU1NjE1OQ==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"Looks promising, could you try?","createdAt":"2018-10-10T12:41:16Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/913#issuecomment-428556159","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQyODk5Njc5Nw==","author":{"login":"elfosardo"},"authorAssociation":"CONTRIBUTOR","body":"I did a quick test and it looks like it's getting all the public events\r\n@anuj-reef if you could also check if that is what you were looking for","createdAt":"2018-10-11T15:20:57Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/913#issuecomment-428996797","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQzMTMxNDgwMA==","author":{"login":"anuj-reef"},"authorAssociation":"NONE","body":"@elfosardo This works but then this supposed to be returning the public events by a user and not all public events.\r\n\r\nhttps://developer.github.com/v3/activity/events/#list-events-performed-by-a-user","createdAt":"2018-10-19T10:11:11Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/913#issuecomment-431314800","viewerDidAuthor":false}],"createdAt":"2018-10-01T11:25:23Z","number":913,"state":"CLOSED","title":"How to get public events?","url":"https://github.com/PyGithub/PyGithub/issues/913"},{"author":{"id":"MDQ6VXNlcjEwMTA0NTgy","is_bot":false,"login":"fabianbaier","name":"Fabian Baier"},"body":"Hi,\r\n\r\nWhen using ```\r\nrepo = g.get_repo(\"some/repo\")\r\nrepo.get_issues(sort='created', direction='desc', state='closed')``` it fails after a few seconds with:\r\n```\r\n---------------------------------------------------------------------------\r\nGithubException                           Traceback (most recent call last)\r\n<timed exec> in <module>()\r\n\r\n/opt/conda/lib/python3.6/site-packages/github/PaginatedList.py in __iter__(self)\r\n     62             yield element\r\n     63         while self._couldGrow():\r\n---> 64             newElements = self._grow()\r\n     65             for element in newElements:\r\n     66                 yield element\r\n\r\n/opt/conda/lib/python3.6/site-packages/github/PaginatedList.py in _grow(self)\r\n     74 \r\n     75     def _grow(self):\r\n---> 76         newElements = self._fetchNextPage()\r\n     77         self.__elements += newElements\r\n     78         return newElements\r\n\r\n/opt/conda/lib/python3.6/site-packages/github/PaginatedList.py in _fetchNextPage(self)\r\n    194             self.__nextUrl,\r\n    195             parameters=self.__nextParams,\r\n--> 196             headers=self.__headers\r\n    197         )\r\n    198         data = data if data else []\r\n\r\n/opt/conda/lib/python3.6/site-packages/github/Requester.py in requestJsonAndCheck(self, verb, url, parameters, headers, input)\r\n    260 \r\n    261     def requestJsonAndCheck(self, verb, url, parameters=None, headers=None, input=None):\r\n--> 262         return self.__check(*self.requestJson(verb, url, parameters, headers, input, self.__customConnection(url)))\r\n    263 \r\n    264     def requestMultipartAndCheck(self, verb, url, parameters=None, headers=None, input=None):\r\n\r\n/opt/conda/lib/python3.6/site-packages/github/Requester.py in __check(self, status, responseHeaders, output)\r\n    271         output = self.__structuredFromJson(output)\r\n    272         if status >= 400:\r\n--> 273             raise self.__createException(status, responseHeaders, output)\r\n    274         return responseHeaders, output\r\n    275 \r\n\r\nGithubException: 500 None\r\n```\r\nAny way to work around this?\r\n\r\nInterestingly when using `repo.get_issues(sort='created', direction='desc', state=\"open\")` it works fine.\r\n\r\nAny pointing in the right direction appreciated.","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDQyNTczMDE2Mw==","author":{"login":"singh811"},"authorAssociation":"CONTRIBUTOR","body":"I tried the same thing on my end, but didn't get any error. I don't have much deeper knowledge of how Github api works, but can you please look out for the Silly Mistakes in your code which might be causing this. \r\nAnd if there is no such case then you can try the below given code in order to debug what may be causing the error.\r\n```\r\nimport github\r\n\r\nlogin = 'REDACTED' # replace it with your username\r\npassword = 'REDACTED' # replace it with your password\r\n\r\ngithub.enable_console_debug_logging()\r\n\r\ng = github.Github(login, password)\r\nrepo = g.get_repo('someuser/some-repo')\r\n\r\n# This is just a seperator to seperate requests logs.\r\nprint(\"========================================================================\")\r\n\r\nissues = repo.get_issues(sort='created', direction='desc', state='closed')\r\n\r\nfor issue in issues:\r\n    print issue.id\r\n```\r\n\r\nIn the logs you can see which request is breaking and then we can investigate the issue further.","createdAt":"2018-09-30T15:47:28Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/912#issuecomment-425730163","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQyNjA0MjIxOQ==","author":{"login":"fabianbaier"},"authorAssociation":"NONE","body":"Thanks @singh811 for your response! The repo I am testing it with is `kubernetes/kubernetes` and the more verbose output with `Python 3.6` looks like: \r\n\r\n```\r\nGET https://api.github.com/repositories/20580498/issues?state=closed&sort=created&direction=desc&page=2 {'Authorization': 'token (oauth token removed)', 'User-Agent': 'PyGithub/Python'} None ==> 500 {'date': 'Mon, 01 Oct 2018 19:52:03 GMT', 'content-type': 'application/json; charset=utf-8', 'content-length': '0', 'server': 'GitHub.com', 'status': '500 Internal Server Error', 'x-ratelimit-limit': '5000', 'x-ratelimit-remaining': '3960', 'x-ratelimit-reset': '1538424013', 'x-oauth-scopes': 'repo', 'x-accepted-oauth-scopes': 'repo', 'x-github-media-type': 'github.v3; format=json', 'access-control-expose-headers': 'ETag, Link, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Reset, X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Poll-Interval', 'access-control-allow-origin': '*', 'strict-transport-security': 'max-age=31536000; includeSubdomains; preload', 'x-frame-options': 'deny', 'x-content-type-options': 'nosniff', 'x-xss-protection': '1; mode=block', 'referrer-policy': 'origin-when-cross-origin, strict-origin-when-cross-origin', 'content-security-policy': \"default-src 'none'\", 'x-runtime-rack': '6.739544', 'x-github-request-id': 'DGFD:06B5:266F949:3127690:5BBA7ADD'} \r\n---------------------------------------------------------------------------\r\nGithubException                           Traceback (most recent call last)\r\n<timed exec> in <module>()\r\n\r\n/opt/conda/lib/python3.6/site-packages/github/PaginatedList.py in __iter__(self)\r\n     62             yield element\r\n     63         while self._couldGrow():\r\n---> 64             newElements = self._grow()\r\n     65             for element in newElements:\r\n     66                 yield element\r\n\r\n/opt/conda/lib/python3.6/site-packages/github/PaginatedList.py in _grow(self)\r\n     74 \r\n     75     def _grow(self):\r\n---> 76         newElements = self._fetchNextPage()\r\n     77         self.__elements += newElements\r\n     78         return newElements\r\n\r\n/opt/conda/lib/python3.6/site-packages/github/PaginatedList.py in _fetchNextPage(self)\r\n    194             self.__nextUrl,\r\n    195             parameters=self.__nextParams,\r\n--> 196             headers=self.__headers\r\n    197         )\r\n    198         data = data if data else []\r\n\r\n/opt/conda/lib/python3.6/site-packages/github/Requester.py in requestJsonAndCheck(self, verb, url, parameters, headers, input)\r\n    260 \r\n    261     def requestJsonAndCheck(self, verb, url, parameters=None, headers=None, input=None):\r\n--> 262         return self.__check(*self.requestJson(verb, url, parameters, headers, input, self.__customConnection(url)))\r\n    263 \r\n    264     def requestMultipartAndCheck(self, verb, url, parameters=None, headers=None, input=None):\r\n\r\n/opt/conda/lib/python3.6/site-packages/github/Requester.py in __check(self, status, responseHeaders, output)\r\n    271         output = self.__structuredFromJson(output)\r\n    272         if status >= 400:\r\n--> 273             raise self.__createException(status, responseHeaders, output)\r\n    274         return responseHeaders, output\r\n    275 \r\n\r\nGithubException: 500 None\r\n```\r\n\r\nHope that helps somehow for troubleshooting. I tried same code on `tensorflow/tensorflow` and it works just fine.","createdAt":"2018-10-01T19:59:03Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/912#issuecomment-426042219","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQyNjI1MjQ0Nw==","author":{"login":"singh811"},"authorAssociation":"CONTRIBUTOR","body":"@fabianbaier is this output generated via the script I posted earlier?","createdAt":"2018-10-02T12:21:01Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/912#issuecomment-426252447","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQyNjM2NDIxMA==","author":{"login":"fabianbaier"},"authorAssociation":"NONE","body":"the output is identical with your script. I had to modify your script to work in Python 3.6 (yours is in Python 2.x) and used token authentication instead of username/password.\r\n\r\n```\r\nimport github\r\n\r\ngithub.enable_console_debug_logging()\r\n\r\n# using personalized Github access token to read public repos\r\ng = github.Github(\"mytoken\")\r\n# declare which repo to look at\r\nrepo = g.get_repo(\"kubernetes/kubernetes\")\r\n\r\n# This is just a seperator to seperate requests logs.\r\nprint(\"========================================================================\")\r\n\r\nissues = repo.get_issues(sort='created', direction='desc', state='closed')\r\n\r\nfor issue in issues:\r\n    print(issue.id)\r\n```\r\n\r\nOutput (same problem):\r\n```\r\nGET https://api.github.com/repos/kubernetes/kubernetes {'Authorization': 'token (oauth token removed)', 'User-Agent': 'PyGithub/Python'} None ==> 200 {'date': 'Tue, 02 Oct 2018 17:19:51 GMT', 'content-type': 'application/json; charset=utf-8', 'transfer-encoding': 'chunked', 'server': 'GitHub.com', 'status': '200 OK', 'x-ratelimit-limit': '5000', 'x-ratelimit-remaining': '4999', 'x-ratelimit-reset': '1538504391', 'cache-control': 'private, max-age=60, s-maxage=60', 'vary': 'Accept, Authorization, Cookie, X-GitHub-OTP, Accept-Encoding', 'etag': 'W/\"70c897ac9639a7ffea2ded9983104771\"', 'last-modified': 'Tue, 02 Oct 2018 17:11:51 GMT', 'x-oauth-scopes': 'repo', 'x-accepted-oauth-scopes': 'repo', 'x-github-media-type': 'github.v3; format=json', 'access-control-expose-headers': 'ETag, Link, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Reset, X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Poll-Interval', 'access-control-allow-origin': '*', 'strict-transport-security': 'max-age=31536000; includeSubdomains; preload', 'x-frame-options': 'deny', 'x-content-type-options': 'nosniff', 'x-xss-protection': '1; mode=block', 'referrer-policy': 'origin-when-cross-origin, strict-origin-when-cross-origin', 'content-security-policy': \"default-src 'none'\", 'x-runtime-rack': '0.081719', 'content-encoding': 'gzip', 'x-github-request-id': 'CC09:06B3:1242B9D:17234A7:5BB3A8B7'} {\"id\":20580498,\"node_id\":\"MDEwOlJlcG9zaXRvcnkyMDU4MDQ5OA==\",\"name\":\"kubernetes\",\"full_name\":\"kubernetes/kubernetes\",\"private\":false,\"owner\":{\"login\":\"kubernetes\",\"id\":13629408,\"node_id\":\"MDEyOk9yZ2FuaXphdGlvbjEzNjI5NDA4\",\"avatar_url\":\"https://avatars2.githubusercontent.com/u/13629408?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/kubernetes\",\"html_url\":\"https://github.com/kubernetes\",\"followers_url\":\"https://api.github.com/users/kubernetes/followers\",\"following_url\":\"https://api.github.com/users/kubernetes/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/kubernetes/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/kubernetes/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/kubernetes/subscriptions\",\"organizations_url\":\"https://api.github.com/users/kubernetes/orgs\",\"repos_url\":\"https://api.github.com/users/kubernetes/repos\",\"events_url\":\"https://api.github.com/users/kubernetes/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/kubernetes/received_events\",\"type\":\"Organization\",\"site_admin\":false},\"html_url\":\"https://github.com/kubernetes/kubernetes\",\"description\":\"Production-Grade Container Scheduling and Management\",\"fork\":false,\"url\":\"https://api.github.com/repos/kubernetes/kubernetes\",\"forks_url\":\"https://api.github.com/repos/kubernetes/kubernetes/forks\",\"keys_url\":\"https://api.github.com/repos/kubernetes/kubernetes/keys{/key_id}\",\"collaborators_url\":\"https://api.github.com/repos/kubernetes/kubernetes/collaborators{/collaborator}\",\"teams_url\":\"https://api.github.com/repos/kubernetes/kubernetes/teams\",\"hooks_url\":\"https://api.github.com/repos/kubernetes/kubernetes/hooks\",\"issue_events_url\":\"https://api.github.com/repos/kubernetes/kubernetes/issues/events{/number}\",\"events_url\":\"https://api.github.com/repos/kubernetes/kubernetes/events\",\"assignees_url\":\"https://api.github.com/repos/kubernetes/kubernetes/assignees{/user}\",\"branches_url\":\"https://api.github.com/repos/kubernetes/kubernetes/branches{/branch}\",\"tags_url\":\"https://api.github.com/repos/kubernetes/kubernetes/tags\",\"blobs_url\":\"https://api.github.com/repos/kubernetes/kubernetes/git/blobs{/sha}\",\"git_tags_url\":\"https://api.github.com/repos/kubernetes/kubernetes/git/tags{/sha}\",\"git_refs_url\":\"https://api.github.com/repos/kubernetes/kubernetes/git/refs{/sha}\",\"trees_url\":\"https://api.github.com/repos/kubernetes/kubernetes/git/trees{/sha}\",\"statuses_url\":\"https://api.github.com/repos/kubernetes/kubernetes/statuses/{sha}\",\"languages_url\":\"https://api.github.com/repos/kubernetes/kubernetes/languages\",\"stargazers_url\":\"https://api.github.com/repos/kubernetes/kubernetes/stargazers\",\"contributors_url\":\"https://api.github.com/repos/kubernetes/kubernetes/contributors\",\"subscribers_url\":\"https://api.github.com/repos/kubernetes/kubernetes/subscribers\",\"subscription_url\":\"https://api.github.com/repos/kubernetes/kubernetes/subscription\",\"commits_url\":\"https://api.github.com/repos/kubernetes/kubernetes/commits{/sha}\",\"git_commits_url\":\"https://api.github.com/repos/kubernetes/kubernetes/git/commits{/sha}\",\"comments_url\":\"https://api.github.com/repos/kubernetes/kubernetes/comments{/number}\",\"issue_comment_url\":\"https://api.github.com/repos/kubernetes/kubernetes/issues/comments{/number}\",\"contents_url\":\"https://api.github.com/repos/kubernetes/kubernetes/contents/{+path}\",\"compare_url\":\"https://api.github.com/repos/kubernetes/kubernetes/compare/{base}...{head}\",\"merges_url\":\"https://api.github.com/repos/kubernetes/kubernetes/merges\",\"archive_url\":\"https://api.github.com/repos/kubernetes/kubernetes/{archive_format}{/ref}\",\"downloads_url\":\"https://api.github.com/repos/kubernetes/kubernetes/downloads\",\"issues_url\":\"https://api.github.com/repos/kubernetes/kubernetes/issues{/number}\",\"pulls_url\":\"https://api.github.com/repos/kubernetes/kubernetes/pulls{/number}\",\"milestones_url\":\"https://api.github.com/repos/kubernetes/kubernetes/milestones{/number}\",\"notifications_url\":\"https://api.github.com/repos/kubernetes/kubernetes/notifications{?since,all,participating}\",\"labels_url\":\"https://api.github.com/repos/kubernetes/kubernetes/labels{/name}\",\"releases_url\":\"https://api.github.com/repos/kubernetes/kubernetes/releases{/id}\",\"deployments_url\":\"https://api.github.com/repos/kubernetes/kubernetes/deployments\",\"created_at\":\"2014-06-06T22:56:04Z\",\"updated_at\":\"2018-10-02T17:11:51Z\",\"pushed_at\":\"2018-10-02T17:11:50Z\",\"git_url\":\"git://github.com/kubernetes/kubernetes.git\",\"ssh_url\":\"git@github.com:kubernetes/kubernetes.git\",\"clone_url\":\"https://github.com/kubernetes/kubernetes.git\",\"svn_url\":\"https://github.com/kubernetes/kubernetes\",\"homepage\":\"https://kubernetes.io\",\"size\":811870,\"stargazers_count\":42115,\"watchers_count\":42115,\"language\":\"Go\",\"has_issues\":true,\"has_projects\":true,\"has_downloads\":true,\"has_wiki\":false,\"has_pages\":false,\"forks_count\":14605,\"mirror_url\":null,\"archived\":false,\"open_issues_count\":3181,\"license\":{\"key\":\"apache-2.0\",\"name\":\"Apache License 2.0\",\"spdx_id\":\"Apache-2.0\",\"url\":\"https://api.github.com/licenses/apache-2.0\",\"node_id\":\"MDc6TGljZW5zZTI=\"},\"forks\":14605,\"open_issues\":3181,\"watchers\":42115,\"default_branch\":\"master\",\"permissions\":{\"admin\":false,\"push\":false,\"pull\":true},\"organization\":{\"login\":\"kubernetes\",\"id\":13629408,\"node_id\":\"MDEyOk9yZ2FuaXphdGlvbjEzNjI5NDA4\",\"avatar_url\":\"https://avatars2.githubusercontent.com/u/13629408?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/kubernetes\",\"html_url\":\"https://github.com/kubernetes\",\"followers_url\":\"https://api.github.com/users/kubernetes/followers\",\"following_url\":\"https://api.github.com/users/kubernetes/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/kubernetes/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/kubernetes/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/kubernetes/subscriptions\",\"organizations_url\":\"https://api.github.com/users/kubernetes/orgs\",\"repos_url\":\"https://api.github.com/users/kubernetes/repos\",\"events_url\":\"https://api.github.com/users/kubernetes/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/kubernetes/received_events\",\"type\":\"Organization\",\"site_admin\":false},\"network_count\":14605,\"subscribers_count\":2746}\r\n========================================================================\r\nGET https://api.github.com/repos/kubernetes/kubernetes/issues?state=closed&sort=created&direction=desc {'Authorization': 'token (oauth token removed)', 'User-Agent': 'PyGithub/Python'} None ==> 500 {'date': 'Tue, 02 Oct 2018 17:20:00 GMT', 'content-type': 'application/json; charset=utf-8', 'content-length': '0', 'server': 'GitHub.com', 'status': '500 Internal Server Error', 'x-ratelimit-limit': '5000', 'x-ratelimit-remaining': '4998', 'x-ratelimit-reset': '1538504391', 'x-oauth-scopes': 'repo', 'x-accepted-oauth-scopes': 'repo', 'x-github-media-type': 'github.v3; format=json', 'access-control-expose-headers': 'ETag, Link, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Reset, X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Poll-Interval', 'access-control-allow-origin': '*', 'strict-transport-security': 'max-age=31536000; includeSubdomains; preload', 'x-frame-options': 'deny', 'x-content-type-options': 'nosniff', 'x-xss-protection': '1; mode=block', 'referrer-policy': 'origin-when-cross-origin, strict-origin-when-cross-origin', 'content-security-policy': \"default-src 'none'\", 'x-runtime-rack': '9.309939', 'x-github-request-id': 'CC09:06B3:1242BA6:17234B3:5BB3A8B7'} \r\n---------------------------------------------------------------------------\r\nGithubException                           Traceback (most recent call last)\r\n<ipython-input-6-dd0c03de4039> in <module>()\r\n     13 issues = repo.get_issues(sort='created', direction='desc', state='closed')\r\n     14 \r\n---> 15 for issue in issues:\r\n     16     print(issue.id)\r\n\r\n/opt/conda/lib/python3.6/site-packages/github/PaginatedList.py in __iter__(self)\r\n     62             yield element\r\n     63         while self._couldGrow():\r\n---> 64             newElements = self._grow()\r\n     65             for element in newElements:\r\n     66                 yield element\r\n\r\n/opt/conda/lib/python3.6/site-packages/github/PaginatedList.py in _grow(self)\r\n     74 \r\n     75     def _grow(self):\r\n---> 76         newElements = self._fetchNextPage()\r\n     77         self.__elements += newElements\r\n     78         return newElements\r\n\r\n/opt/conda/lib/python3.6/site-packages/github/PaginatedList.py in _fetchNextPage(self)\r\n    194             self.__nextUrl,\r\n    195             parameters=self.__nextParams,\r\n--> 196             headers=self.__headers\r\n    197         )\r\n    198         data = data if data else []\r\n\r\n/opt/conda/lib/python3.6/site-packages/github/Requester.py in requestJsonAndCheck(self, verb, url, parameters, headers, input)\r\n    260 \r\n    261     def requestJsonAndCheck(self, verb, url, parameters=None, headers=None, input=None):\r\n--> 262         return self.__check(*self.requestJson(verb, url, parameters, headers, input, self.__customConnection(url)))\r\n    263 \r\n    264     def requestMultipartAndCheck(self, verb, url, parameters=None, headers=None, input=None):\r\n\r\n/opt/conda/lib/python3.6/site-packages/github/Requester.py in __check(self, status, responseHeaders, output)\r\n    271         output = self.__structuredFromJson(output)\r\n    272         if status >= 400:\r\n--> 273             raise self.__createException(status, responseHeaders, output)\r\n    274         return responseHeaders, output\r\n    275 \r\n\r\nGithubException: 500 None\r\n```\r\n\r\nAs you can see same output as the above in my last post. Is there a problem with the request itself and its endpoint?\r\n\r\nI am asking because \r\n```\r\nnobody@621b826296ea:~/work$ curl -s -v https://api.github.com/repos/kubernetes/kubernetes/issues?state=closed&sort=created&direction=desc\r\n*   Trying 192.30.255.116...\r\n* TCP_NODELAY set\r\n* Connected to api.github.com (192.30.255.116) port 443 (#0)\r\n* ALPN, offering http/1.1\r\n* Cipher selection: ALL:!EXPORT:!EXPORT40:!EXPORT56:!aNULL:!LOW:!RC4:@STRENGTH\r\n* successfully set certificate verify locations:\r\n*   CAfile: /opt/conda/ssl/cacert.pem\r\n  CApath: none\r\n* TLSv1.2 (OUT), TLS header, Certificate Status (22):\r\n* TLSv1.2 (OUT), TLS handshake, Client hello (1):\r\n* TLSv1.2 (IN), TLS handshake, Server hello (2):\r\n* TLSv1.2 (IN), TLS handshake, Certificate (11):\r\n* TLSv1.2 (IN), TLS handshake, Server key exchange (12):\r\n* TLSv1.2 (IN), TLS handshake, Server finished (14):\r\n* TLSv1.2 (OUT), TLS handshake, Client key exchange (16):\r\n* TLSv1.2 (OUT), TLS change cipher, Client hello (1):\r\n* TLSv1.2 (OUT), TLS handshake, Finished (20):\r\n* TLSv1.2 (IN), TLS change cipher, Client hello (1):\r\n* TLSv1.2 (IN), TLS handshake, Finished (20):\r\n* SSL connection using TLSv1.2 / ECDHE-RSA-AES128-GCM-SHA256\r\n* ALPN, server accepted to use http/1.1\r\n* Server certificate:\r\n*  subject: C=US; ST=California; L=San Francisco; O=GitHub, Inc.; CN=*.github.com\r\n*  start date: Jun 19 00:00:00 2018 GMT\r\n*  expire date: Jul 10 12:00:00 2019 GMT\r\n*  subjectAltName: host \"api.github.com\" matched cert's \"*.github.com\"\r\n*  issuer: C=US; O=DigiCert Inc; OU=www.digicert.com; CN=DigiCert SHA2 High Assurance Server CA\r\n*  SSL certificate verify ok.\r\n> GET /repos/kubernetes/kubernetes/issues?state=closed HTTP/1.1\r\n> Host: api.github.com\r\n> User-Agent: curl/7.61.0\r\n> Accept: */*\r\n>\r\n< HTTP/1.1 500 Internal Server Error\r\n< Date: Tue, 02 Oct 2018 17:34:19 GMT\r\n< Content-Type: application/json; charset=utf-8\r\n< Content-Length: 0\r\n< Server: GitHub.com\r\n< Status: 500 Internal Server Error\r\n< X-RateLimit-Limit: 60\r\n< X-RateLimit-Remaining: 44\r\n< X-RateLimit-Reset: 1538504749\r\n< X-GitHub-Media-Type: github.v3; format=json\r\n< Access-Control-Expose-Headers: ETag, Link, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Reset, X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Poll-Interval\r\n< Access-Control-Allow-Origin: *\r\n< Strict-Transport-Security: max-age=31536000; includeSubdomains; preload\r\n< X-Frame-Options: deny\r\n< X-Content-Type-Options: nosniff\r\n< X-XSS-Protection: 1; mode=block\r\n< Referrer-Policy: origin-when-cross-origin, strict-origin-when-cross-origin\r\n< Content-Security-Policy: default-src 'none'\r\n< X-Runtime-rack: 5.830364\r\n< X-GitHub-Request-Id: CC70:06B4:255217F:301BA4A:5BB3AC15\r\n<\r\n* Connection #0 to host api.github.com left intact\r\n```\r\n\r\nWhy would api.github.com return `500` when I am authenticated and not rate-limited ?\r\n\r\nI can now reproduce `500` pretty steady, its almost like every other request ends up in a `500`.","createdAt":"2018-10-02T17:37:54Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/912#issuecomment-426364210","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQ0MzQ0NzU3Mg==","author":{"login":"stale"},"authorAssociation":"NONE","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","createdAt":"2018-12-01T18:31:55Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/912#issuecomment-443447572","viewerDidAuthor":false}],"createdAt":"2018-09-26T22:51:24Z","number":912,"state":"CLOSED","title":"GithubException: 500 None when using get_issues","url":"https://github.com/PyGithub/PyGithub/issues/912"},{"author":{"id":"MDQ6VXNlcjU3ODU0Mw==","is_bot":false,"login":"webknjaz","name":"🇺🇦 Sviatoslav Sydorenko (Святослав Сидоренко)"},"body":"So I've got a call to `github.MainClass.get_repo()` (repo in question is `ansible/ansible`). The error message pointed to \"mdash\" (long dash/`—`) being an offender.\r\n\r\nAfter some digging I've reached call to `github.Requester.__log()` https://github.com/PyGithub/PyGithub/blob/a18eeb3/github/Requester.py#L460-L470\r\n\r\nIt became obvious that `str(output)` is trying to decode `utf-8` text using `ascii` codec, which is fine as long as there's only latin1 chars in that `unicode` string.\r\n\r\n### Workaround\r\nI explicitly lowered log level\r\n```python\r\nlogging.getLogger('github.Requester').setLevel(logging.INFO)\r\n```","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDQyNDczOTEwOA==","author":{"login":"webknjaz"},"authorAssociation":"CONTRIBUTOR","body":"Another workaround would be:\r\n```python\r\nimport sys\r\nreload(sys)\r\nsys.setdefaultencoding('utf-8')\r\n```","createdAt":"2018-09-26T14:35:21Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/911#issuecomment-424739108","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQyNTE3Nzg5Mg==","author":{"login":"fabianbaier"},"authorAssociation":"NONE","body":"Unfortunate, both proposed workarounds are not working for me.\r\n\r\n> Workaround\r\n>\r\n> ```logging.getLogger('github.Requester').setLevel(logging.INFO)```\r\n>\r\n> Another workaround would be:\r\n> \r\n> ```python\r\n> import sys\r\n> reload(sys)\r\n> sys.setdefaultencoding('utf-8')\r\n> ```\r\n\r\nBoth workarounds don't work for me, see also https://stackoverflow.com/questions/45252305/attributeerror-module-sys-has-no-attribute-setdefaultencoding?rq=1\r\n\r\nNot clear what I am doing wrong here.\r\n","createdAt":"2018-09-27T17:32:30Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/911#issuecomment-425177892","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQyNTcxMTg3NQ==","author":{"login":"webknjaz"},"authorAssociation":"CONTRIBUTOR","body":"@fabianbaier well, `reload()` is a built-in under Python 2 and moved to `imp`/`importlib` in Python3.\r\n\r\nBut anyway it's just a workaround and not a fix. Meaning it might be dependent on the env. Reducing level should work though. But you need to do this before calling pyGitHub's functions or better before importing it, just to be sure nothing triggers error before you're ready.\r\n\r\nThe proper fix would be a PR to this repo and handling unicode properly.","createdAt":"2018-09-30T10:50:30Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":1}}],"url":"https://github.com/PyGithub/PyGithub/issues/911#issuecomment-425711875","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDUzMTA4NzQ1NA==","author":{"login":"stale"},"authorAssociation":"NONE","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","createdAt":"2019-09-13T03:48:32Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/911#issuecomment-531087454","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDUzMTQyODQ5NA==","author":{"login":"webknjaz"},"authorAssociation":"CONTRIBUTOR","body":"unstale","createdAt":"2019-09-14T00:23:14Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/911#issuecomment-531428494","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDU1MzE4NjA0NA==","author":{"login":"stale"},"authorAssociation":"NONE","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","createdAt":"2019-11-13T00:49:50Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/911#issuecomment-553186044","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDU1MzE4NjE2Nw==","author":{"login":"webknjaz"},"authorAssociation":"CONTRIBUTOR","body":"unstale","createdAt":"2019-11-13T00:50:26Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/911#issuecomment-553186167","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDU1MzcyODQ3Nw==","author":{"login":"s-t-e-v-e-n-k"},"authorAssociation":"COLLABORATOR","body":"This has been fixed in a recent release:\r\n\r\n```\r\nPython 2.7.15rc1 (default, Apr 15 2018, 21:51:34) \r\n[GCC 7.3.0] on linux2\r\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\r\n>>> from github import Github, enable_console_debug_logging\r\n>>> enable_console_debug_logging()\r\n>>> g = Github(TOKEN)\r\n>>> g.get_repo('ansible/ansible')\r\nGET https://api.github.com/repos/ansible/ansible {'Authorization': 'token (oauth token removed)', 'User-Agent': 'PyGithub/Python'} None ==> 200 {'vary': 'Accept, Authorization, Cookie, X-GitHub-OTP, Accept-Encoding', 'x-oauth-scopes': 'public_repo, repo:status', 'x-xss-protection': '1; mode=block', 'x-content-type-options': 'nosniff', 'x-accepted-oauth-scopes': 'repo', 'etag': 'W/\"52c9f455f1ce5ba9d78973519c68a5ff\"', 'cache-control': 'private, max-age=60, s-maxage=60', 'referrer-policy': 'origin-when-cross-origin, strict-origin-when-cross-origin', 'status': '200 OK', 'x-ratelimit-remaining': '4999', 'x-github-media-type': 'github.v3; format=json', 'access-control-expose-headers': 'ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Reset, X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type', 'transfer-encoding': 'chunked', 'x-github-request-id': 'C6AE:6C9C:128DC8:15776A:5DCCE297', 'last-modified': 'Thu, 14 Nov 2019 05:10:43 GMT', 'date': 'Thu, 14 Nov 2019 05:14:00 GMT', 'access-control-allow-origin': '*', 'content-security-policy': \"default-src 'none'\", 'content-encoding': 'gzip', 'strict-transport-security': 'max-age=31536000; includeSubdomains; preload', 'server': 'GitHub.com', 'x-ratelimit-limit': '5000', 'x-frame-options': 'deny', 'content-type': 'application/json; charset=utf-8', 'x-ratelimit-reset': '1573712040'} {\"id\":3638964,\"node_id\":\"MDEwOlJlcG9zaXRvcnkzNjM4OTY0\",\"name\":\"ansible\",\"full_name\":\"ansible/ansible\",\"private\":false,\"owner\":{\"login\":\"ansible\",\"id\":1507452,\"node_id\":\"MDEyOk9yZ2FuaXphdGlvbjE1MDc0NTI=\",\"avatar_url\":\"https://avatars2.githubusercontent.com/u/1507452?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/ansible\",\"html_url\":\"https://github.com/ansible\",\"followers_url\":\"https://api.github.com/users/ansible/followers\",\"following_url\":\"https://api.github.com/users/ansible/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/ansible/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/ansible/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/ansible/subscriptions\",\"organizations_url\":\"https://api.github.com/users/ansible/orgs\",\"repos_url\":\"https://api.github.com/users/ansible/repos\",\"events_url\":\"https://api.github.com/users/ansible/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/ansible/received_events\",\"type\":\"Organization\",\"site_admin\":false},\"html_url\":\"https://github.com/ansible/ansible\",\"description\":\"Ansible is a radically simple IT automation platform that makes your applications and systems easier to deploy. Avoid writing scripts or custom code to deploy and update your applications — automate in a language that approaches plain English, using SSH, with no agents to install on remote systems. https://docs.ansible.com/ansible/\",\"fork\":false,\"url\":\"https://api.github.com/repos/ansible/ansible\",\"forks_url\":\"https://api.github.com/repos/ansible/ansible/forks\",\"keys_url\":\"https://api.github.com/repos/ansible/ansible/keys{/key_id}\",\"collaborators_url\":\"https://api.github.com/repos/ansible/ansible/collaborators{/collaborator}\",\"teams_url\":\"https://api.github.com/repos/ansible/ansible/teams\",\"hooks_url\":\"https://api.github.com/repos/ansible/ansible/hooks\",\"issue_events_url\":\"https://api.github.com/repos/ansible/ansible/issues/events{/number}\",\"events_url\":\"https://api.github.com/repos/ansible/ansible/events\",\"assignees_url\":\"https://api.github.com/repos/ansible/ansible/assignees{/user}\",\"branches_url\":\"https://api.github.com/repos/ansible/ansible/branches{/branch}\",\"tags_url\":\"https://api.github.com/repos/ansible/ansible/tags\",\"blobs_url\":\"https://api.github.com/repos/ansible/ansible/git/blobs{/sha}\",\"git_tags_url\":\"https://api.github.com/repos/ansible/ansible/git/tags{/sha}\",\"git_refs_url\":\"https://api.github.com/repos/ansible/ansible/git/refs{/sha}\",\"trees_url\":\"https://api.github.com/repos/ansible/ansible/git/trees{/sha}\",\"statuses_url\":\"https://api.github.com/repos/ansible/ansible/statuses/{sha}\",\"languages_url\":\"https://api.github.com/repos/ansible/ansible/languages\",\"stargazers_url\":\"https://api.github.com/repos/ansible/ansible/stargazers\",\"contributors_url\":\"https://api.github.com/repos/ansible/ansible/contributors\",\"subscribers_url\":\"https://api.github.com/repos/ansible/ansible/subscribers\",\"subscription_url\":\"https://api.github.com/repos/ansible/ansible/subscription\",\"commits_url\":\"https://api.github.com/repos/ansible/ansible/commits{/sha}\",\"git_commits_url\":\"https://api.github.com/repos/ansible/ansible/git/commits{/sha}\",\"comments_url\":\"https://api.github.com/repos/ansible/ansible/comments{/number}\",\"issue_comment_url\":\"https://api.github.com/repos/ansible/ansible/issues/comments{/number}\",\"contents_url\":\"https://api.github.com/repos/ansible/ansible/contents/{+path}\",\"compare_url\":\"https://api.github.com/repos/ansible/ansible/compare/{base}...{head}\",\"merges_url\":\"https://api.github.com/repos/ansible/ansible/merges\",\"archive_url\":\"https://api.github.com/repos/ansible/ansible/{archive_format}{/ref}\",\"downloads_url\":\"https://api.github.com/repos/ansible/ansible/downloads\",\"issues_url\":\"https://api.github.com/repos/ansible/ansible/issues{/number}\",\"pulls_url\":\"https://api.github.com/repos/ansible/ansible/pulls{/number}\",\"milestones_url\":\"https://api.github.com/repos/ansible/ansible/milestones{/number}\",\"notifications_url\":\"https://api.github.com/repos/ansible/ansible/notifications{?since,all,participating}\",\"labels_url\":\"https://api.github.com/repos/ansible/ansible/labels{/name}\",\"releases_url\":\"https://api.github.com/repos/ansible/ansible/releases{/id}\",\"deployments_url\":\"https://api.github.com/repos/ansible/ansible/deployments\",\"created_at\":\"2012-03-06T14:58:02Z\",\"updated_at\":\"2019-11-14T05:10:43Z\",\"pushed_at\":\"2019-11-14T05:10:39Z\",\"git_url\":\"git://github.com/ansible/ansible.git\",\"ssh_url\":\"git@github.com:ansible/ansible.git\",\"clone_url\":\"https://github.com/ansible/ansible.git\",\"svn_url\":\"https://github.com/ansible/ansible\",\"homepage\":\"https://www.ansible.com/\",\"size\":194997,\"stargazers_count\":40336,\"watchers_count\":40336,\"language\":\"Python\",\"has_issues\":true,\"has_projects\":true,\"has_downloads\":true,\"has_wiki\":false,\"has_pages\":false,\"forks_count\":17412,\"mirror_url\":null,\"archived\":false,\"disabled\":false,\"open_issues_count\":6189,\"license\":{\"key\":\"gpl-3.0\",\"name\":\"GNU General Public License v3.0\",\"spdx_id\":\"GPL-3.0\",\"url\":\"https://api.github.com/licenses/gpl-3.0\",\"node_id\":\"MDc6TGljZW5zZTk=\"},\"forks\":17412,\"open_issues\":6189,\"watchers\":40336,\"default_branch\":\"devel\",\"permissions\":{\"admin\":false,\"push\":false,\"pull\":true},\"organization\":{\"login\":\"ansible\",\"id\":1507452,\"node_id\":\"MDEyOk9yZ2FuaXphdGlvbjE1MDc0NTI=\",\"avatar_url\":\"https://avatars2.githubusercontent.com/u/1507452?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/ansible\",\"html_url\":\"https://github.com/ansible\",\"followers_url\":\"https://api.github.com/users/ansible/followers\",\"following_url\":\"https://api.github.com/users/ansible/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/ansible/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/ansible/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/ansible/subscriptions\",\"organizations_url\":\"https://api.github.com/users/ansible/orgs\",\"repos_url\":\"https://api.github.com/users/ansible/repos\",\"events_url\":\"https://api.github.com/users/ansible/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/ansible/received_events\",\"type\":\"Organization\",\"site_admin\":false},\"network_count\":17412,\"subscribers_count\":2026}\r\nRepository(full_name=\"ansible/ansible\")\r\n```\r\n\r\nThe &mdash; is visible in the output and no exception.","createdAt":"2019-11-14T05:16:11Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/911#issuecomment-553728477","viewerDidAuthor":false}],"createdAt":"2018-09-26T14:19:18Z","number":911,"state":"CLOSED","title":"get_repo crashes with UnicodeEncodeError if log level is DEBUG when GitHub response contains unicode symbol","url":"https://github.com/PyGithub/PyGithub/issues/911"},{"author":{"id":"MDQ6VXNlcjE4MzA3MjU=","is_bot":false,"login":"guyer","name":"Jonathan Guyer"},"body":"`Commit.author` and `Commit.committer` are converted to `NamedUser`, which gives information about the GitHub account, not about the commit.\r\n\r\nIn the raw json query, something like this is returned\r\n```\r\n    ...    \r\n    \"commit\": {\r\n      \"author\": {\r\n        \"name\": \"Author Name\",\r\n        \"email\": \"author.name@institution.org\",\r\n        \"date\": \"2018-08-30T18:22:26Z\"\r\n      },\r\n     ...\r\n```\r\nwhere `date` is the time stamp the commit was made, but `Commit.author.created_at` appears to return the date the GitHub account was opened.\r\n\r\nAs a result, there appears to be no way to determine when a commit was made or repository was tagged, even though this information is trivially obtained with `git log`.","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDQyMzM5MTU3OQ==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"What about `Commit.commit`?","createdAt":"2018-09-21T02:12:32Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/907#issuecomment-423391579","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQyMzYyMzI1OQ==","author":{"login":"guyer"},"authorAssociation":"NONE","body":"Thanks @sfdye, `Commit.commit.author.date` does the trick.","createdAt":"2018-09-21T18:02:32Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/907#issuecomment-423623259","viewerDidAuthor":false}],"createdAt":"2018-09-20T19:12:31Z","number":907,"state":"CLOSED","title":"Commit.author and Commit.committer lose information","url":"https://github.com/PyGithub/PyGithub/issues/907"},{"author":{"id":"MDQ6VXNlcjQzMjQzODg3","is_bot":false,"login":"nv-tc-tp-test","name":""},"body":"## Issue\r\n\r\nWhen I want to retrieve a repo that has been moved, the subsequent request is sent to a badly constructed url.\r\n\r\n## Reproduction\r\n\r\n```\r\nclient = Github(user, pass)\r\nclient.get_repo('protoncoin/protoncoin')  # at the time of writing\r\n```\r\n\r\n## Suspected cause\r\n\r\nThe location parameter of a 301 response returns the full URL, while the `_requestRaw` method only expects the path part which it then appends to the api host name.\r\n\r\n## Logs and trace\r\n\r\n```\r\nGET https://api.github.com/repos/protoncoin/protoncoin {'Authorization': 'Basic (login and password removed)', 'User-Agent': 'PyGithub/Python'} None ==> 301 {'server': 'GitHub.com', 'date': 'Tue, 18 Sep 2018 08:19:03 GMT', 'content-type': 'application/json; charset=utf-8', 'content-length': '155', 'status': '301 Moved Permanently', 'x-ratelimit-limit': '5000', 'x-ratelimit-remaining': '4999', 'x-ratelimit-reset': '1537262343', 'location': 'https://api.github.com/repositories/112116543', 'x-github-media-type': 'github.v3; format=json', 'access-control-expose-headers': 'ETag, Link, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Reset, X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Poll-Interval', 'access-control-allow-origin': '*', 'strict-transport-security': 'max-age=31536000; includeSubdomains; preload', 'x-frame-options': 'deny', 'x-content-type-options': 'nosniff', 'x-xss-protection': '1; mode=block', 'referrer-policy': 'origin-when-cross-origin, strict-origin-when-cross-origin', 'content-security-policy': \"default-src 'none'\", 'x-runtime-rack': '0.058003', 'x-github-request-id': 'C726:6007:FD2DB:246691:5BA0B4F6'} {\"message\":\"Moved Permanently\",\"url\":\"https://api.github.com/repositories/112116543\",\"documentation_url\":\"https://developer.github.com/v3/#http-redirects\"}\r\nDEBUG:github.Requester:GET https://api.github.com/repos/protoncoin/protoncoin {'Authorization': 'Basic (login and password removed)', 'User-Agent': 'PyGithub/Python'} None ==> 301 {'server': 'GitHub.com', 'date': 'Tue, 18 Sep 2018 08:19:03 GMT', 'content-type': 'application/json; charset=utf-8', 'content-length': '155', 'status': '301 Moved Permanently', 'x-ratelimit-limit': '5000', 'x-ratelimit-remaining': '4999', 'x-ratelimit-reset': '1537262343', 'location': 'https://api.github.com/repositories/112116543', 'x-github-media-type': 'github.v3; format=json', 'access-control-expose-headers': 'ETag, Link, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Reset, X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Poll-Interval', 'access-control-allow-origin': '*', 'strict-transport-security': 'max-age=31536000; includeSubdomains; preload', 'x-frame-options': 'deny', 'x-content-type-options': 'nosniff', 'x-xss-protection': '1; mode=block', 'referrer-policy': 'origin-when-cross-origin, strict-origin-when-cross-origin', 'content-security-policy': \"default-src 'none'\", 'x-runtime-rack': '0.058003', 'x-github-request-id': 'C726:6007:FD2DB:246691:5BA0B4F6'} {\"message\":\"Moved Permanently\",\"url\":\"https://api.github.com/repositories/112116543\",\"documentation_url\":\"https://developer.github.com/v3/#http-redirects\"}\r\n---------------------------------------------------------------------------\r\nLocationParseError                        Traceback (most recent call last)\r\n~/crypto-pulse/backend/.venv/lib/python3.6/site-packages/requests/models.py in prepare_url(self, url, params)\r\n    370         try:\r\n--> 371             scheme, auth, host, port, path, query, fragment = parse_url(url)\r\n    372         except LocationParseError as e:\r\n\r\n~/crypto-pulse/backend/.venv/lib/python3.6/site-packages/urllib3/util/url.py in parse_url(url)\r\n    198             if not port.isdigit():\r\n--> 199                 raise LocationParseError(url)\r\n    200             try:\r\n\r\nLocationParseError: Failed to parse: api.github.com:443https:\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nInvalidURL                                Traceback (most recent call last)\r\n<ipython-input-41-a454b5ea095e> in <module>()\r\n----> 1 prc = client.get_repo('protoncoin/protoncoin')\r\n\r\n~/crypto-pulse/backend/.venv/lib/python3.6/site-packages/github/MainClass.py in get_repo(self, full_name_or_id, lazy)\r\n    288         headers, data = self.__requester.requestJsonAndCheck(\r\n    289             \"GET\",\r\n--> 290             \"%s%s\" % (url_base, full_name_or_id)\r\n    291         )\r\n    292         return Repository.Repository(self.__requester, headers, data, completed=True)\r\n\r\n~/crypto-pulse/backend/.venv/lib/python3.6/site-packages/github/Requester.py in requestJsonAndCheck(self, verb, url, parameters, headers, input)\r\n    260 \r\n    261     def requestJsonAndCheck(self, verb, url, parameters=None, headers=None, input=None):\r\n--> 262         return self.__check(*self.requestJson(verb, url, parameters, headers, input, self.__customConnection(url)))\r\n    263 \r\n    264     def requestMultipartAndCheck(self, verb, url, parameters=None, headers=None, input=None):\r\n\r\n~/crypto-pulse/backend/.venv/lib/python3.6/site-packages/github/Requester.py in requestJson(self, verb, url, parameters, headers, input, cnx)\r\n    317             return \"application/json\", json.dumps(input)\r\n    318 \r\n--> 319         return self.__requestEncode(cnx, verb, url, parameters, headers, input, encode)\r\n    320 \r\n    321     def requestMultipart(self, verb, url, parameters=None, headers=None, input=None, cnx=None):\r\n\r\n~/crypto-pulse/backend/.venv/lib/python3.6/site-packages/github/Requester.py in __requestEncode(self, cnx, verb, url, parameters, requestHeaders, input, encode)\r\n    370         self.NEW_DEBUG_FRAME(requestHeaders)\r\n    371 \r\n--> 372         status, responseHeaders, output = self.__requestRaw(cnx, verb, url, requestHeaders, encoded_input)\r\n    373 \r\n    374         if Consts.headerRateRemaining in responseHeaders and Consts.headerRateLimit in responseHeaders:\r\n\r\n~/crypto-pulse/backend/.venv/lib/python3.6/site-packages/github/Requester.py in __requestRaw(self, cnx, verb, url, requestHeaders, input)\r\n    412 \r\n    413         if status == 301 and 'location' in responseHeaders:\r\n--> 414             return self.__requestRaw(original_cnx, verb, responseHeaders['location'], requestHeaders, input)\r\n    415 \r\n    416         return status, responseHeaders, output\r\n\r\n~/crypto-pulse/backend/.venv/lib/python3.6/site-packages/github/Requester.py in __requestRaw(self, cnx, verb, url, requestHeaders, input)\r\n    394             requestHeaders\r\n    395         )\r\n--> 396         response = cnx.getresponse()\r\n    397 \r\n    398         status = response.status\r\n\r\n~/crypto-pulse/backend/.venv/lib/python3.6/site-packages/github/Requester.py in getresponse(self)\r\n    107         verb = getattr(self.session, self.verb.lower())\r\n    108         url = \"%s://%s:%s%s\" % (self.protocol, self.host, self.port, self.url)\r\n--> 109         r = verb(url, headers=self.headers, data=self.input, timeout=self.timeout, verify=self.verify, allow_redirects=False)\r\n    110         return RequestsResponse(r)\r\n    111 \r\n\r\n~/crypto-pulse/backend/.venv/lib/python3.6/site-packages/requests/sessions.py in get(self, url, **kwargs)\r\n    519 \r\n    520         kwargs.setdefault('allow_redirects', True)\r\n--> 521         return self.request('GET', url, **kwargs)\r\n    522 \r\n    523     def options(self, url, **kwargs):\r\n\r\n~/crypto-pulse/backend/.venv/lib/python3.6/site-packages/requests/sessions.py in request(self, method, url, params, data, headers, cookies, files, auth, timeout, allow_redirects, proxies, hooks, stream, verify, cert, json)\r\n    492             hooks=hooks,\r\n    493         )\r\n--> 494         prep = self.prepare_request(req)\r\n    495 \r\n    496         proxies = proxies or {}\r\n\r\n~/crypto-pulse/backend/.venv/lib/python3.6/site-packages/requests/sessions.py in prepare_request(self, request)\r\n    435             auth=merge_setting(auth, self.auth),\r\n    436             cookies=merged_cookies,\r\n--> 437             hooks=merge_hooks(request.hooks, self.hooks),\r\n    438         )\r\n    439         return p\r\n\r\n~/crypto-pulse/backend/.venv/lib/python3.6/site-packages/requests/models.py in prepare(self, method, url, headers, files, data, params, auth, cookies, hooks, json)\r\n    303 \r\n    304         self.prepare_method(method)\r\n--> 305         self.prepare_url(url, params)\r\n    306         self.prepare_headers(headers)\r\n    307         self.prepare_cookies(cookies)\r\n\r\n~/crypto-pulse/backend/.venv/lib/python3.6/site-packages/requests/models.py in prepare_url(self, url, params)\r\n    371             scheme, auth, host, port, path, query, fragment = parse_url(url)\r\n    372         except LocationParseError as e:\r\n--> 373             raise InvalidURL(*e.args)\r\n    374 \r\n    375         if not scheme:\r\n\r\nInvalidURL: Failed to parse: api.github.com:443https:\r\n```\r\n\r\n","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDQyMjYxNjQzMA==","author":{"login":"zroadhouse-rmn"},"authorAssociation":"NONE","body":"Was able to work around this bug by reverting to 1.40 ","createdAt":"2018-09-19T01:35:48Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/906#issuecomment-422616430","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQyMjYzNjQ1MQ==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"Maybe something introduced by #858 ？","createdAt":"2018-09-19T03:19:13Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/906#issuecomment-422636451","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQyMjYzODY3Mg==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"I just tried, works fine when I removed the `allow_redirects=False`","createdAt":"2018-09-19T03:31:47Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/906#issuecomment-422638672","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQyMzg2NzYyOQ==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"@djstein Any thoughts?","createdAt":"2018-09-24T02:44:38Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/906#issuecomment-423867629","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQyNDAyMDQ3NQ==","author":{"login":"djstein"},"authorAssociation":"NONE","body":"well, allow_redirects=False seems pretty self explanatory that it would not accept 3XX. However, I believe the problem lies in how the 'location' value in the header of the response got merged into the session's headers. It appears that somehow `https://api.github.com/repositories/112116543` is not the value being passed to prepare_url. Can you put an pdb/ipdb/debugger statement in line 303 of `~/crypto-pulse/backend/.venv/lib/python3.6/site-packages/requests/models.py` and check that url and params are","createdAt":"2018-09-24T15:38:38Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":1}}],"url":"https://github.com/PyGithub/PyGithub/issues/906#issuecomment-424020475","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQyNDAyMDcwNg==","author":{"login":"djstein"},"authorAssociation":"NONE","body":"also want to point out, that if PyGithub is not modifying these values / headers then it may be a `requests` issue ","createdAt":"2018-09-24T15:39:13Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/906#issuecomment-424020706","viewerDidAuthor":false}],"createdAt":"2018-09-18T08:32:15Z","number":906,"state":"CLOSED","title":"InvalidURL on 301 - Moved Permanently response when getting repo","url":"https://github.com/PyGithub/PyGithub/issues/906"},{"author":{"id":"MDQ6VXNlcjQzMjQzODg3","is_bot":false,"login":"nv-tc-tp-test","name":""},"body":"## Issue\r\n\r\nWhen I call totalCount on a PaginatedList that received a `204 No Content` response, `len(data)` call\r\non https://github.com/PyGithub/PyGithub/blob/974d1ec593ac285e0b36b3246fbd4af8b86f565f/github/PaginatedList.py#L158\r\nraises a TypeError.\r\n\r\n## Log output\r\n\r\n```\r\nGET https://api.github.com/repos/decentralizedsearch/Docs/contributors?per_page=1 {'Authorization': 'Basic (login and password removed)', 'User-Agent': 'PyGithub/Python'} None ==> 204 {'server': 'GitHub.com', 'date': 'Tue, 18 Sep 2018 07:33:14 GMT', 'content-type': 'application/octet-stream', 'status': '204 No Content', 'x-ratelimit-limit': '5000', 'x-ratelimit-remaining': '4986', 'x-ratelimit-reset': '1537257889', 'x-github-media-type': 'github.v3; format=json', 'access-control-expose-headers': 'ETag, Link, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Reset, X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Poll-Interval', 'access-control-allow-origin': '*', 'strict-transport-security': 'max-age=31536000; includeSubdomains; preload', 'x-frame-options': 'deny', 'x-content-type-options': 'nosniff', 'x-xss-protection': '1; mode=block', 'referrer-policy': 'origin-when-cross-origin, strict-origin-when-cross-origin', 'content-security-policy': \"default-src 'none'\", 'x-runtime-rack': '0.043993', 'x-github-request-id': 'C04C:6007:D7F3B:1EFB0D:5BA0AA24'} \r\nDEBUG:github.Requester:GET https://api.github.com/repos/decentralizedsearch/Docs/contributors?per_page=1 {'Authorization': 'Basic (login and password removed)', 'User-Agent': 'PyGithub/Python'} None ==> 204 {'server': 'GitHub.com', 'date': 'Tue, 18 Sep 2018 07:33:14 GMT', 'content-type': 'application/octet-stream', 'status': '204 No Content', 'x-ratelimit-limit': '5000', 'x-ratelimit-remaining': '4986', 'x-ratelimit-reset': '1537257889', 'x-github-media-type': 'github.v3; format=json', 'access-control-expose-headers': 'ETag, Link, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Reset, X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Poll-Interval', 'access-control-allow-origin': '*', 'strict-transport-security': 'max-age=31536000; includeSubdomains; preload', 'x-frame-options': 'deny', 'x-content-type-options': 'nosniff', 'x-xss-protection': '1; mode=block', 'referrer-policy': 'origin-when-cross-origin, strict-origin-when-cross-origin', 'content-security-policy': \"default-src 'none'\", 'x-runtime-rack': '0.043993', 'x-github-request-id': 'C04C:6007:D7F3B:1EFB0D:5BA0AA24'} \r\n```\r\n\r\n## Reproduction\r\n\r\n```\r\nclient = Github(user, pass)\r\nrepo = client.get_repo('decentralizedsearch/Docs')\r\ncontributor_count = repo.get_contributors().totalCount\r\n```","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDQyMjMwNjA5MA==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"Thanks for reporting. Fixed in master.","createdAt":"2018-09-18T08:35:09Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"HEART","users":{"totalCount":1}}],"url":"https://github.com/PyGithub/PyGithub/issues/905#issuecomment-422306090","viewerDidAuthor":false}],"createdAt":"2018-09-18T07:35:49Z","number":905,"state":"CLOSED","title":"Calling totalCount raises TypeError","url":"https://github.com/PyGithub/PyGithub/issues/905"},{"author":{"id":"MDQ6VXNlcjE1Nzg2Ng==","is_bot":false,"login":"eaceaser","name":"Ed Ceaser"},"body":"https://github.com/PyGithub/PyGithub/blob/master/github/Repository.py#L1250-L1252 are the offending lines.\r\n\r\nThe assertions assert that the provided booleans are set to True, so you can never set them to False :)\r\n\r\nThis is a simple fix to remove that conditional in the assertion, but maybe there was a reason for this?","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDQyMTczNzEzNw==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"Thanks for reporting. I believe that's a typo, unless the PR author thinks otherwise @jacquerie ? \r\n","createdAt":"2018-09-16T10:10:39Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/903#issuecomment-421737137","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQyMTc0OTY2Nw==","author":{"login":"jacquerie"},"authorAssociation":"CONTRIBUTOR","body":"Uhm, it seems like I mindlessly used the same pattern as for `archived`, for which it makes sense to have that assertion because you can't unarchive through the API. So yes, it's a bug that my PR introduced!","createdAt":"2018-09-16T11:32:17Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"HOORAY","users":{"totalCount":1}}],"url":"https://github.com/PyGithub/PyGithub/issues/903#issuecomment-421749667","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQyMTc0OTg5MA==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"Thanks for confirming! Now I am open for a quick PR to fix it :)\n\n________________________________\nFrom: Jacopo Notarstefano <notifications@github.com>\nSent: Sunday, September 16, 2018 7:32:17 PM\nTo: PyGithub/PyGithub\nCc: Wan Liuyang; Comment\nSubject: Re: [PyGithub/PyGithub] Repository.edit does not let you set merge commit rule booleans to false (#903)\n\n\nUhm, it seems like I mindlessly used the same pattern as for archived, for which it makes sense to have that assertion because you can't unarchive through the API. So yes, it's a bug that my PR introduced!\n\n—\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub<https://github.com/PyGithub/PyGithub/issues/903#issuecomment-421749667>, or mute the thread<https://github.com/notifications/unsubscribe-auth/AA-CRra0EvRzkqoC9n7rQowKZ8f0_Htpks5ubjbBgaJpZM4WqBrJ>.\n","createdAt":"2018-09-16T11:33:57Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/903#issuecomment-421749890","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQyMTc1MTk3OQ==","author":{"login":"jacquerie"},"authorAssociation":"CONTRIBUTOR","body":"> Thanks for confirming! Now I am open for a quick PR to fix it :)\r\n\r\nIt happened in https://github.com/PyGithub/PyGithub/pull/904 : )","createdAt":"2018-09-16T11:49:36Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/903#issuecomment-421751979","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQyMTc1MzQ2Mw==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"Merged!\n\n________________________________\nFrom: Jacopo Notarstefano <notifications@github.com>\nSent: Sunday, September 16, 2018 7:49:37 PM\nTo: PyGithub/PyGithub\nCc: Wan Liuyang; Comment\nSubject: Re: [PyGithub/PyGithub] Repository.edit does not let you set merge commit rule booleans to false (#903)\n\n\nThanks for confirming! Now I am open for a quick PR to fix it :)\n\nIt happened in #904<https://github.com/PyGithub/PyGithub/pull/904> : )\n\n—\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub<https://github.com/PyGithub/PyGithub/issues/903#issuecomment-421751979>, or mute the thread<https://github.com/notifications/unsubscribe-auth/AA-CRpJMq5uJZh-b7Xn5eqmNvEcl--FUks5ubjrRgaJpZM4WqBrJ>.\n","createdAt":"2018-09-16T12:01:00Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/903#issuecomment-421753463","viewerDidAuthor":false}],"createdAt":"2018-09-14T22:18:28Z","number":903,"state":"CLOSED","title":"Repository.edit does not let you set merge commit rule booleans to false","url":"https://github.com/PyGithub/PyGithub/issues/903"},{"author":{"id":"MDQ6VXNlcjIyODI2ODgz","is_bot":false,"login":"cosmoshepcat","name":"Cosmos"},"body":"on github enterprise if you have a curl request as follows https://github/api/v3/users/MYUSER\r\n\r\none of the elements returned is either null or dateformat if they have been suspended:\r\n\r\n\"suspended_at\": \"2014-04-22T10:21:42-07:00\",\r\n\r\nIs this object implemented currently in the NamedUser section or any plans to?  \r\n\r\nThanks","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDQyMDEzMTg4OQ==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"Don't think so. Understand that enterprise API may not be updated as ofter as Github.com due to the volume of users. I am open for any PRs.","createdAt":"2018-09-11T03:10:37Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/900#issuecomment-420131889","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQyNzgzMDEyMw==","author":{"login":"elfosardo"},"authorAssociation":"CONTRIBUTOR","body":"I had some spare time and put together this PR #922 ","createdAt":"2018-10-08T13:21:10Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/900#issuecomment-427830123","viewerDidAuthor":false}],"createdAt":"2018-09-10T18:32:45Z","number":900,"state":"CLOSED","title":"Is suspended_users for github enterprise implemented in NamedUser?","url":"https://github.com/PyGithub/PyGithub/issues/900"},{"author":{"id":"MDQ6VXNlcjY3NjQwMTc=","is_bot":false,"login":"khof312","name":"Katherine Hoffmann Pham"},"body":"I am trying to retrieve a list of all previous commits for a file. While I am able to retrieve a PaginatedList using `.get_commits`, and retrieve individual pages from this list, I found the following problems:\r\n\r\n1. The PaginatedList object does not have the documented `.totalCount` attribute \r\n2. If I run `len()` on the list I am told that it has no `len()` property. \r\n\r\nI am following the instructions about the PaginatedList class on line 100 [here](https://github.com/PyGithub/PyGithub/blob/master/github/PaginatedList.py).\r\n\r\nMWE:\r\n\r\n```\r\nfrom github import Github\r\ng = Github( ... )           #  <- authentication removed\r\nuser = g.get_user('PyGithub')\r\nrepo = user.get_repo('PyGithub')\r\n\r\n### Working fine\r\nrepo.get_commits(path='README.md').get_page(0)\r\n\r\n### Returns NoneType\r\ntype(repo.get_commits(path='README.md').totalCount)\r\n\r\n### Returns \"TypeError: object of type 'PaginatedList' has no len()\"\r\nlen(repo.get_commits(path='README.md'))\r\n```","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDQxODcxMTY2Mw==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"Duplicate of #886","createdAt":"2018-09-05T12:27:12Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":1}}],"url":"https://github.com/PyGithub/PyGithub/issues/896#issuecomment-418711663","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQxODc2NzEwMg==","author":{"login":"khof312"},"authorAssociation":"NONE","body":"Yes thank you. Probably this can be closed, sorry I didn't see the other issue.","createdAt":"2018-09-05T15:10:20Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":1}}],"url":"https://github.com/PyGithub/PyGithub/issues/896#issuecomment-418767102","viewerDidAuthor":false}],"createdAt":"2018-09-05T12:20:19Z","number":896,"state":"CLOSED","title":"Can't retrieve total count of a file's commits","url":"https://github.com/PyGithub/PyGithub/issues/896"},{"author":{"id":"MDQ6VXNlcjE0ODM0MDgx","is_bot":false,"login":"TuuuNya","name":"Tuuu Nya"},"body":"I get self.g.rate_limiting got `(4993, 5000)`\r\n\r\nBut the search limit is different, with only 30 requests per minute.\r\n\r\nExcuse me, I didn't find the corresponding document, or PyGithub does not have this function now.\r\n\r\nthanks","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDQxODMyMTU3NQ==","author":{"login":"TuuuNya"},"authorAssociation":"CONTRIBUTOR","body":"document: https://developer.github.com/v3/search/#rate-limit","createdAt":"2018-09-04T10:43:00Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/895#issuecomment-418321575","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQxODMzODU0Mg==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"Possible duplicate of #553","createdAt":"2018-09-04T11:51:22Z","includesCreatedEdit":true,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/895#issuecomment-418338542","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQxODM1OTMyNQ==","author":{"login":"TuuuNya"},"authorAssociation":"CONTRIBUTOR","body":"@sfdye  Thank you very much. By the way, when will `get_search_rate_limit()` be completed?","createdAt":"2018-09-04T13:04:52Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/895#issuecomment-418359325","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQxODU4MzcxMA==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"When I get some free time, will take a look. Merging with #553 .","createdAt":"2018-09-05T02:58:19Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":1}}],"url":"https://github.com/PyGithub/PyGithub/issues/895#issuecomment-418583710","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQxODU5NjgxOA==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"Fixed in #553 ","createdAt":"2018-09-05T04:36:35Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/895#issuecomment-418596818","viewerDidAuthor":false}],"createdAt":"2018-09-04T10:41:50Z","number":895,"state":"CLOSED","title":"Can I get the limit for search now?","url":"https://github.com/PyGithub/PyGithub/issues/895"},{"author":{"id":"MDQ6VXNlcjQyOTUwNTA3","is_bot":false,"login":"harliebarley","name":""},"body":"Is there a way to use the new feature Checks API? Specifically, to show a build output for my CI. I cannot find anything about the checks API in the documentation.","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDQxODIyMTczMg==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"Duplicate of #813\r\n\r\n","createdAt":"2018-09-04T02:19:25Z","includesCreatedEdit":true,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/894#issuecomment-418221732","viewerDidAuthor":false}],"createdAt":"2018-09-04T00:20:02Z","number":894,"state":"CLOSED","title":"GitHub Checks","url":"https://github.com/PyGithub/PyGithub/issues/894"},{"author":{"id":"MDQ6VXNlcjEwMTYzOTA=","is_bot":false,"login":"sfdye","name":"Liuyang Wan"},"body":"![image](https://user-images.githubusercontent.com/1016390/44890966-75f67180-ad0f-11e8-90f1-f3bf6c7b3bf5.png)\r\n\r\nBranch seems pretty outdated, the API may have changed too.\r\n\r\nping @jayfk ","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDQxOTYxODk4Nw==","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"There was no commit on that branch ahead of master, so I deleted it.","createdAt":"2018-09-08T07:04:33Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":1}}],"url":"https://github.com/PyGithub/PyGithub/issues/891#issuecomment-419618987","viewerDidAuthor":false}],"createdAt":"2018-08-31T03:19:04Z","number":891,"state":"CLOSED","title":"Integration branch still used?","url":"https://github.com/PyGithub/PyGithub/issues/891"},{"author":{"id":"MDQ6VXNlcjczMzI1MDA=","is_bot":false,"login":"richsalz","name":"Rich Salz"},"body":"This code\r\n```\r\no.edit(\r\n    company=\"Internet Engineering Task Force\",\r\n    description=\"The \" + WGNAME + \" working group\",\r\n    email=WGNAME + \"@ietf.org\"\r\n    )\r\n```\r\ngets\r\n```\r\nTraceback (most recent call last):\r\n  File \"./mk-ietf-wg\", line 74, in <module>\r\n    email=WGNAME + \"@ietf.org\"\r\nTypeError: edit() got an unexpected keyword argument 'description'\r\n```\r\nPython 2.7.10 on a Mac.  Removing the description keyword and it passes.  Any clues?\r\n","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDQxNzE3ODMwMA==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"This was already fixed in master by #838 , waiting for #872 to get a new release out.","createdAt":"2018-08-30T03:29:21Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/890#issuecomment-417178300","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQxNzI5MzUzMw==","author":{"login":"richsalz"},"authorAssociation":"NONE","body":"awesome, thanks.","createdAt":"2018-08-30T11:58:11Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/890#issuecomment-417293533","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQxOTYyMTM3MQ==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"New version `1.43` is available on PyPI.","createdAt":"2018-09-08T07:53:07Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/890#issuecomment-419621371","viewerDidAuthor":false}],"createdAt":"2018-08-29T15:13:40Z","number":890,"state":"CLOSED","title":"unknown keyword when editing an organization","url":"https://github.com/PyGithub/PyGithub/issues/890"},{"author":{"id":"MDQ6VXNlcjU5MjIwOQ==","is_bot":false,"login":"arashd","name":"Arash Delijani"},"body":"```\r\ngazers = g.get_repo(\"facebook/react\").get_stargazers()\r\nassert gazers.totalCount != None\r\n---------------------------------------------------------------------------\r\nAssertionError                            Traceback (most recent call last)\r\n<ipython-input-101-1d025116d93d> in <module>()\r\n      5 \r\n      6 gazers = g.get_repo(\"facebook/react\").get_stargazers()\r\n----> 7 assert gazers.totalCount != None\r\n\r\nAssertionError: \r\n```","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDQxNjQyODc0OA==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"This was fixed in #820. However #872 is preventing me from making a new release.","createdAt":"2018-08-28T02:18:58Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/886#issuecomment-416428748","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQxNjgzNzE5NQ==","author":{"login":"arashd"},"authorAssociation":"NONE","body":"Got it, thank you! I was hoping to put in a PR and did notice that HEAD had the fix already.","createdAt":"2018-08-29T06:16:11Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"LAUGH","users":{"totalCount":1}}],"url":"https://github.com/PyGithub/PyGithub/issues/886#issuecomment-416837195","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQxNjgzNzgwOA==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"Closing this. A new version should be out soon.","createdAt":"2018-08-29T06:19:11Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/886#issuecomment-416837808","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQxOTYyMTM2Mw==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"New version `1.43` is available on PyPI.","createdAt":"2018-09-08T07:52:58Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/886#issuecomment-419621363","viewerDidAuthor":false}],"createdAt":"2018-08-28T01:40:12Z","number":886,"state":"CLOSED","title":"totalCounts of github.PaginatedList.PaginatedList is always None","url":"https://github.com/PyGithub/PyGithub/issues/886"},{"author":{"id":"MDQ6VXNlcjE2NTM4ODkw","is_bot":false,"login":"gs-ctoleti","name":""},"body":"Hi Team,\r\n\r\nWe are using PyGithub module to interact with GitHub using personal access tokens.\r\n\r\nI have been observing authentication(404) related issues while performing GitHub API operations including getting repo names, getting branch names, adding a user to org, etc.. I have tried by creating a new Personal access token and performed the same operations. It has been working well up to 5 times or so and after a few numbers of attempts, the 404 issue is getting repeated. \r\n\r\nError: ```github.GithubException.UnknownObjectException: 404 {u'documentation_url': u'https://developer.github.com/v3/repos/#get', u'message': u'Not Found'}```\r\n\r\nWhat could be the reason? and what could be the fix for it?\r\n\r\nThank you,\r\nChiru","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDQxNjE4MzYwNA==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"Use a different client (e.g. curl) and try to call the API again? It same error, then it's not a problem with PyGithub.","createdAt":"2018-08-27T10:25:15Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/885#issuecomment-416183604","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQzMzM2NDAzMw==","author":{"login":"stale"},"authorAssociation":"NONE","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","createdAt":"2018-10-26T10:29:33Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/885#issuecomment-433364033","viewerDidAuthor":false}],"createdAt":"2018-08-27T09:38:41Z","number":885,"state":"CLOSED","title":"Blocker: A personal access token is getting blocked after a few number of attempts","url":"https://github.com/PyGithub/PyGithub/issues/885"},{"author":{"id":"MDQ6VXNlcjE2NTM4ODkw","is_bot":false,"login":"gs-ctoleti","name":""},"body":"Hi Team,\r\n\r\nWe are using PyGithub module to interact with GitHub using personal access tokens.\r\n\r\nI have been observing authentication(404) related issues while performing GitHub API operations including getting repo names, getting branch names, adding a user to org, etc.. I have tried by creating a new Personal access token and performed the same operations. It has been working well up to 5 times or so and after a few numbers of attempts, the 404 issue is getting repeated. \r\n\r\nError: ```github.GithubException.UnknownObjectException: 404 {u'documentation_url': u'https://developer.github.com/v3/repos/#get', u'message': u'Not Found'}```\r\n\r\nWhat could be the reason? and what could be the fix for it? This is a blocker for our automation modules.\r\n\r\nCould you please help us in resolving this As soon as possible.\r\n\r\nPlease reach out to me if you need more details.\r\n\r\nThank you,\r\nChiru","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDQxNjE3NDc1OA==","author":{"login":"gs-ctoleti"},"authorAssociation":"NONE","body":"DUPLICATE:\r\nBlocker: A personal access token is getting blocked after a few number of attempts\r\n#885 opened 8 minutes ago by gs-ctoleti\r\n","createdAt":"2018-08-27T09:47:31Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/884#issuecomment-416174758","viewerDidAuthor":false}],"createdAt":"2018-08-27T09:38:17Z","number":884,"state":"CLOSED","title":"A token is getting blocked after a few number of attempts","url":"https://github.com/PyGithub/PyGithub/issues/884"},{"author":{"id":"MDQ6VXNlcjE2Nzc1ODIx","is_bot":false,"login":"edthrn","name":"ed"},"body":"On a public repository, I tried three things using PyGithub:\r\n\r\n1. Creating a new file on the master branch, but using the low-level API (ie, create a blob, then a tree, then commiting the new tree, then updating the branch's HEAD)\r\n2. Updating this file (with the `Repository.update_file()` method)\r\n3. Deleting this file (with the `Repository.delete_file()` method)\r\n\r\nThe first step, low level creation, works good. However, I receive a `404 Not found` response when trying to update or delete this file.\r\n\r\nMy first guess is that the bug comes from the way the URL is build in the `Repository.py` module. From [this line](https://github.com/PyGithub/PyGithub/blob/master/github/Repository.py#L1562) I would say that there is a trailing `/` missing after `/contents`. \r\n\r\nI'll investigate further.\r\n\r\n**EDIT**\r\nI must add that I tried updating and deleting without the library (eg, directly using `requests`) and everything worked as expected.","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDQxNTE1MDkxNA==","author":{"login":"edthrn"},"authorAssociation":"NONE","body":"I spent a little time debugging the problem with PyCharm, looks like my first guess was good: a trailing slash is missing after the `/contents` part of the URL.\r\n\r\nThe endpoint reached is of the following pattern (notice the end):\r\n`https://api.github.com/repos/USERNAME/REPO_NAME/contentsFILENAME` ","createdAt":"2018-08-22T19:27:37Z","includesCreatedEdit":true,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/877#issuecomment-415150914","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQxNTIzODgwMA==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"Before I dig in deeper, will #846 be of interest to you? I assume it's just bad documentation?","createdAt":"2018-08-23T01:09:38Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/877#issuecomment-415238800","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQxNTM5MDQ0Mw==","author":{"login":"edthrn"},"authorAssociation":"NONE","body":"Thanks @sfdye, indeed the two issues are related. \r\n\r\nMaybe it's just a documentation issue, but then we'll have a different use case for some methods than for others: anywhere else (to the best of my knowledge) no added `/` is mandatory when reaching a specific URL built with a variable... What do you think?","createdAt":"2018-08-23T12:03:04Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/877#issuecomment-415390443","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQxNTM5MDk5NQ==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"Maybe this one(s) are an exception, since they are all file related. (upload, edit, delete a file). What do you think?","createdAt":"2018-08-23T12:05:06Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/877#issuecomment-415390995","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQxNTM5MTc3Mg==","author":{"login":"edthrn"},"authorAssociation":"NONE","body":"Imho, to ensure consistency between the way that Git (and Github) treats files and file paths, I think we should avoid the need of adding `/` before the path.","createdAt":"2018-08-23T12:08:06Z","includesCreatedEdit":true,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/877#issuecomment-415391772","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQxNTM5Mjc1Nw==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"Okay, I agree. In this case, the fixing PR should update for all the files related methods at once and corresponding test data as well 😄 ","createdAt":"2018-08-23T12:12:05Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":1}}],"url":"https://github.com/PyGithub/PyGithub/issues/877#issuecomment-415392757","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQxNTM5MzA0MQ==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"Relates #786 as well","createdAt":"2018-08-23T12:13:16Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/877#issuecomment-415393041","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQxNTM5NjE4Nw==","author":{"login":"edthrn"},"authorAssociation":"NONE","body":"Thanks. I'll look deeper into the PR  when I have delivered the small piece of software I'm building (meanwhile, I monkey-patched the two `Repostitory` methods that caused me trouble)","createdAt":"2018-08-23T12:26:13Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/877#issuecomment-415396187","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQxNTM5NjM5Nw==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"Sounds like a plan!","createdAt":"2018-08-23T12:27:07Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/877#issuecomment-415396397","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQzMDQ0Njc1OQ==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"@edouardtheron Thank you for your issue and PR and @AetherDeity for taking it to completion.","createdAt":"2018-10-17T00:24:19Z","includesCreatedEdit":true,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/877#issuecomment-430446759","viewerDidAuthor":false}],"createdAt":"2018-08-22T18:32:23Z","number":877,"state":"CLOSED","title":"Error when updating or deleting file from repo","url":"https://github.com/PyGithub/PyGithub/issues/877"},{"author":{"id":"MDQ6VXNlcjEwMTYzOTA=","is_bot":false,"login":"sfdye","name":"Liuyang Wan"},"body":"https://api.travis-ci.org/v3/job/417794039/log.txt\r\n\r\n```\r\nHTTPError: 400 Client Error: User 'pygithubtravis' does not have a verified primary email address. Please add a verified primary email before attempting to upload to PyPI. See https://pypi.org/help/#verified-email for more information.for more information. for url: https://upload.pypi.org/legacy/\r\n\r\ntravis_fold:end:dpl.3\r\nPyGithub.egg-info/PKG-INFO already exists, no checkout\r\nPyGithub.egg-info/SOURCES.txt already exists, no checkout\r\nPyGithub.egg-info/dependency_links.txt already exists, no checkout\r\nPyGithub.egg-info/requires.txt already exists, no checkout\r\nPyGithub.egg-info/top_level.txt already exists, no checkout\r\nCould not restore untracked files from stash entry\r\nPyPI upload failed.\r\nfailed to deploy\r\n```\r\n\r\n","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDQxNDUyODIzNQ==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"Ping @jayfk\r\n\r\nIt seems only you have access to this account, so could you please help?","createdAt":"2018-08-21T02:21:36Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/872#issuecomment-414528235","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQxNTgzMTA3NA==","author":{"login":"djstein"},"authorAssociation":"NONE","body":"@jayfk please! there are large problems due to TLS on the current version","createdAt":"2018-08-24T17:42:48Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":2}}],"url":"https://github.com/PyGithub/PyGithub/issues/872#issuecomment-415831074","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQxNzE1NzM3MQ==","author":{"login":"sean-heller"},"authorAssociation":"NONE","body":"@jayfk +1 on this","createdAt":"2018-08-30T01:13:29Z","includesCreatedEdit":true,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/872#issuecomment-417157371","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQxODIyMTkxMQ==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"ping @jayfk again","createdAt":"2018-09-04T02:20:55Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":1}}],"url":"https://github.com/PyGithub/PyGithub/issues/872#issuecomment-418221911","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQxOTYxOTY2Ng==","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"I've just published https://pypi.org/project/PyGithub/1.43/ (Actually, it was published automatically by Travis when I pushed tag v1.43. That's good.)\r\n\r\nI've also removed permissions from the `@pygithubtravis` PyPI user, and fixed permissions for actual maintainers: I am the only \"Owner\", and `@jzelinskie` and `@sfdye` are \"Maintainers\".\r\n\r\nLet's not bother @ jayfk anymore: he must have moved on to other projects.","createdAt":"2018-09-08T07:19:47Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":3}}],"url":"https://github.com/PyGithub/PyGithub/issues/872#issuecomment-419619666","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQxOTYxOTczMw==","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"For reference, the Travis log of the successful release: https://travis-ci.org/PyGithub/PyGithub/jobs/426026559#L1608","createdAt":"2018-09-08T07:21:09Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/872#issuecomment-419619733","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQxOTYyMDMzNw==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"Thanks a lot @jacquev6 !","createdAt":"2018-09-08T07:32:33Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"HEART","users":{"totalCount":2}}],"url":"https://github.com/PyGithub/PyGithub/issues/872#issuecomment-419620337","viewerDidAuthor":false}],"createdAt":"2018-08-21T02:20:20Z","number":872,"state":"CLOSED","title":"Unable to publish new version to PyPI","url":"https://github.com/PyGithub/PyGithub/issues/872"},{"author":{"id":"MDQ6VXNlcjEyMTU0OTc=","is_bot":false,"login":"patrickelectric","name":"Patrick José Pereira"},"body":"```\r\n    self.printcl('[PR][%s][%d/%d]\\t\\t%s' % (self._state_to_utf[pr_state], i, prs.totalCount, repo.name))\r\n  File \"/usr/lib/python3.7/site-packages/github/PaginatedList.py\", line 137, in totalCount\r\n    self._grow()\r\n  File \"/usr/lib/python3.7/site-packages/github/PaginatedList.py\", line 70, in _grow\r\n    newElements = self._fetchNextPage()\r\n  File \"/usr/lib/python3.7/site-packages/github/PaginatedList.py\", line 172, in _fetchNextPage\r\n    headers=self.__headers\r\n  File \"/usr/lib/python3.7/site-packages/github/Requester.py\", line 260, in requestJsonAndCheck\r\n    return self.__check(*self.requestJson(verb, url, parameters, headers, input, self.__customConnection(url)))\r\n  File \"/usr/lib/python3.7/site-packages/github/Requester.py\", line 276, in __customConnection\r\n    if not url.startswith(\"/\"):\r\nAttributeError: 'NoneType' object has no attribute 'startswith'\r\n```","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDQxNDE4MTE5NQ==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"This was fixed in #820 , but I need to publish a new version to PyPI. For now you can use the master.","createdAt":"2018-08-20T02:34:27Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/870#issuecomment-414181195","viewerDidAuthor":false}],"createdAt":"2018-08-19T23:46:06Z","number":870,"state":"CLOSED","title":"totalCount fail","url":"https://github.com/PyGithub/PyGithub/issues/870"},{"author":{"is_bot":true,"login":"app/"},"body":"why in tf can you have better documentation\r\n","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDQxNDA5ODgxMQ==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"Duplicate of #862 ","createdAt":"2018-08-19T02:35:18Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/869#issuecomment-414098811","viewerDidAuthor":false}],"createdAt":"2018-08-18T20:30:38Z","number":869,"state":"CLOSED","title":"why","url":"https://github.com/PyGithub/PyGithub/issues/869"},{"author":{"id":"MDQ6VXNlcjY0MDQwMjU=","is_bot":false,"login":"thefunkjunky","name":"Garrett Anderson"},"body":"I'm playing around with this library with the hopes that I can automate things on our Github Enterprise.  One of the first things I need to do is to set branch protections for our repos.  However, when I initiate a Branch object from a test repository (that already had branch protections set, mind you), the only attribute it has assigned is \"name\", and most of the methods listed in the documentation don't exist on the object:\r\n\r\n```\r\nimport github\r\ngithub.enable_console_debug_logging()\r\nGithub = github.Github\r\n\r\nGithub(\"myuser\",\r\n'mycreds',\r\nbase_url=\"https://ghe.workworkwork.com/api/v3\")\r\n\r\nmaster = g.get_user(\"myuser\").get_repo('cookbook1').get_branch('master')\r\nprint master\r\nprint master.protection_url\r\n```\r\n\r\nThe output:\r\n```\r\n...\r\nGET https://ghe.workworkwork.com/api/v3/repos/myuser/cookbook1/branches/master {'Authorization': 'Basic (login and password removed)', 'User-Agent': 'PyGithub/Python'} None ==> 200 {'status': '200 OK', 'content-length': '2925', 'x-github-media-type': 'github.v3', 'x-content-type-options': 'nosniff', 'content-security-policy': \"default-src 'none'\", 'access-control-expose-headers': 'ETag, Link, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Reset, X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Poll-Interval', 'x-github-request-id': '0ec6f4e8-2355-41dc-859d-0e7076a294b1', 'strict-transport-security': 'max-age=31536000; includeSubdomains', 'vary': 'Accept, Authorization, Cookie, X-GitHub-OTP', 'server': 'GitHub.com', 'access-control-allow-origin': '*', 'etag': '\"965449c848ed3319d7e028c2a587f414\"', 'x-xss-protection': '1; mode=block', 'cache-control': 'private, max-age=60, s-maxage=60', 'date': 'Thu, 16 Aug 2018 23:41:19 GMT', 'x-frame-options': 'deny', 'x-oauth-scopes': 'admin:org_hook, admin:pre_receive_hook, admin:repo_hook, repo', 'content-type': 'application/json; charset=utf-8', 'x-accepted-oauth-scopes': ''} {\"name\":\"master\",\"commit\":{\"sha\":\"3548233b67c8ec4cad703ff947fa0ba022df7c66\",\"commit\":{\"author\":{\"name\":\"Garrett Anderson\",\"email\":\"Garrett.Anderson@workworkwork.com\",\"date\":\"2018-08-16T18:44:44Z\"},\"committer\":{\"name\":\"GitHub Enterprise\",\"email\":\"ghe-noreply@workworkwork.com\",\"date\":\"2018-08-16T18:44:44Z\"},\"message\":\"Merge pull request #8 from myuser/newfork\\n\\nwhat\",\"tree\":{\"sha\":\"44b3a300094b2ccbbfb79ea7df5f82e627c12b42\",\"url\":\"https://ghe.workworkwork.com/api/v3/repos/myuser/cookbook1/git/trees/44b3a300094b2ccbbfb79ea7df5f82e627c12b42\"},\"url\":\"https://ghe.workworkwork.com/api/v3/repos/myuser/cookbook1/git/commits/3548233b67c8ec4cad703ff947fa0ba022df7c66\",\"comment_count\":0},\"url\":\"https://ghe.workworkwork.com/api/v3/repos/myuser/cookbook1/commits/3548233b67c8ec4cad703ff947fa0ba022df7c66\",\"html_url\":\"https://ghe.workworkwork.com/myuser/cookbook1/commit/3548233b67c8ec4cad703ff947fa0ba022df7c66\",\"comments_url\":\"https://ghe.workworkwork.com/api/v3/repos/myuser/cookbook1/commits/3548233b67c8ec4cad703ff947fa0ba022df7c66/comments\",\"author\":{\"login\":\"myuser\",\"id\":593,\"avatar_url\":\"https://ghe.workworkwork.com/avatars/u/593?\",\"gravatar_id\":\"\",\"url\":\"https://ghe.workworkwork.com/api/v3/users/myuser\",\"html_url\":\"https://ghe.workworkwork.com/myuser\",\"followers_url\":\"https://ghe.workworkwork.com/api/v3/users/myuser/followers\",\"following_url\":\"https://ghe.workworkwork.com/api/v3/users/myuser/following{/other_user}\",\"gists_url\":\"https://ghe.workworkwork.com/api/v3/users/myuser/gists{/gist_id}\",\"starred_url\":\"https://ghe.workworkwork.com/api/v3/users/myuser/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://ghe.workworkwork.com/api/v3/users/myuser/subscriptions\",\"organizations_url\":\"https://ghe.workworkwork.com/api/v3/users/myuser/orgs\",\"repos_url\":\"https://ghe.workworkwork.com/api/v3/users/myuser/repos\",\"events_url\":\"https://ghe.workworkwork.com/api/v3/users/myuser/events{/privacy}\",\"received_events_url\":\"https://ghe.workworkwork.com/api/v3/users/myuser/received_events\",\"type\":\"User\",\"site_admin\":true},\"committer\":null,\"parents\":[{\"sha\":\"067642113fe45ee77160ee28cafc4870f2c06b6a\",\"url\":\"https://ghe.workworkwork.com/api/v3/repos/myuser/cookbook1/commits/067642113fe45ee77160ee28cafc4870f2c06b6a\",\"html_url\":\"https://ghe.workworkwork.com/myuser/cookbook1/commit/067642113fe45ee77160ee28cafc4870f2c06b6a\"},{\"sha\":\"3a9479c605617a9035cd986a4bf77880ac5dde64\",\"url\":\"https://ghe.workworkwork.com/api/v3/repos/myuser/cookbook1/commits/3a9479c605617a9035cd986a4bf77880ac5dde64\",\"html_url\":\"https://ghe.workworkwork.com/myuser/cookbook1/commit/3a9479c605617a9035cd986a4bf77880ac5dde64\"}]},\"_links\":{\"self\":\"https://ghe.workworkwork.com/api/v3/repos/myuser/cookbook1/branches/master\",\"html\":\"https://ghe.workworkwork.com/myuser/cookbook1/tree/master\"}}\r\n\r\nBranch(name=\"master\")\r\n\r\nAttributeError: 'Branch' object has no attribute 'protection_url'\r\n```\r\n\r\nThere aren't any of the methods there either:\r\n```\r\nprint master.get_required_status_checks()\r\nOUTPUT:\r\nAttributeError: 'Branch' object has no attribute 'get_required_status_checks'\r\n```\r\n\r\nOr this attribute:\r\n```\r\nprint master.protection\r\nOUTPUT:\r\nreturn self._protected.value\r\nAttributeError: 'Branch' object has no attribute '_protected'\r\n```\r\n\r\nThe object looks like this:\r\n```\r\nprint dir(master)\r\nOUTPUT:\r\n['CHECK_AFTER_INIT_FLAG', '_GithubObject__makeSimpleAttribute', '_GithubObject__makeSimpleListAttribute', '_GithubObject__makeTransformedAttribute', '__class__', '__delattr__', '__dict__', '__doc__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_commit', '_completeIfNeeded', '_headers', '_initAttributes', '_makeBoolAttribute', '_makeClassAttribute', '_makeDatetimeAttribute', '_makeDictAttribute', '_makeDictOfStringsToClassesAttribute', '_makeIntAttribute', '_makeListOfClassesAttribute', '_makeListOfIntsAttribute', '_makeListOfListOfStringsAttribute', '_makeListOfStringsAttribute', '_makeStringAttribute', '_makeTimestampAttribute', '_name', '_parentUrl', '_rawData', '_requester', '_storeAndUseAttributes', '_useAttributes', 'commit', 'contexts', 'enforcement_level', 'etag', 'get__repr__', 'last_modified', 'name', 'protected', 'raw_data', 'raw_headers', 'setCheckAfterInitFlag']\r\n```\r\n\r\nIt looks like the object isn't being created properly.","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDQxMzczMDg4OA==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"What PyGithub version are you using? Note that #790 is only recently merged in but not released yet.","createdAt":"2018-08-17T01:28:01Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/867#issuecomment-413730888","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQxMzk1NzUyNw==","author":{"login":"thefunkjunky"},"authorAssociation":"NONE","body":"I'm using PyGithub-1.40 and Github Enterprise 2.8.6.\r\nhttps://github.com/PyGithub/PyGithub/pull/790 definitely looks promising, although my company's GHE version is a little out of date, so I'm not sure if the API changes affect it.\r\n\r\nUPDATE: in the process of testing the latest master","createdAt":"2018-08-17T18:51:33Z","includesCreatedEdit":true,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/867#issuecomment-413957527","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQxMzk5NjcxMg==","author":{"login":"thefunkjunky"},"authorAssociation":"NONE","body":"Looks like the latest merge fixed the issues of missing attributes and methods, but it seems to be incompatible with my version of the API:\r\n```\r\nmaster = g.get_user(\"ganderson\").get_repo('cookbook1').get_branch('master')\r\nprint master.protection_url\r\nmaster.get_protection()\r\n```\r\n\r\nOUTPUT:\r\n```\r\nNone\r\nTraceback (most recent call last):\r\n  File \"test_pygithub.py\", line 12, in <module>\r\n    master.get_protection()\r\n  File \"/Users/me/tmp/ghe-python/venv/lib/python2.7/site-packages/github/Branch.py\", line 102, in get_protection\r\n    self.protection_url\r\n  File \"/Users/me/tmp/ghe-python/venv/lib/python2.7/site-packages/github/Requester.py\", line 260, in requestJsonAndCheck\r\n    return self.__check(*self.requestJson(verb, url, parameters, headers, input, self.__customConnection(url)))\r\n  File \"/Users/me/tmp/ghe-python/venv/lib/python2.7/site-packages/github/Requester.py\", line 276, in __customConnection\r\n    if not url.startswith(\"/\"):\r\nAttributeError: 'NoneType' object has no attribute 'startswith'\r\n```\r\n\r\nThis appears to be a separate issue, so I'll close this ticket.  Thank you.","createdAt":"2018-08-17T21:48:50Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/867#issuecomment-413996712","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQxNDAyNTU0Nw==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"Do raise a new issue if the master breaks.","createdAt":"2018-08-18T02:09:09Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/867#issuecomment-414025547","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQyMTM4NTA1MA==","author":{"login":"william20111"},"authorAssociation":"NONE","body":"This also seems broken for me on 1.43.2 on standard api.github.com\r\n\r\nI have 2 branches that are protected but the Branch objects never get the protection_url set.\r\n\r\nThe protection URL doesnt get set and results in errors for anything that uses it to build URLs.\r\n\r\n```json\r\n[\r\n  {\r\n    \"name\": \"develop\",\r\n    \"commit\": {\r\n      \"sha\": \"XXXX\",\r\n      \"url\": \"https://api.github.com/repos/X/X/commits/X\"\r\n    }\r\n  },\r\n  {\r\n    \"name\": \"master\",\r\n    \"commit\": {\r\n      \"sha\": \"X\",\r\n      \"url\": \"https://api.github.com/repos/X/X/commits/X\"\r\n    }\r\n  }\r\n]\r\n```\r\n\r\nIf i curl using ```branches?protected=true``` it then returns the protection_url in the payload.\r\n```\r\n[\r\n  {\r\n    \"name\": \"develop\",\r\n    \"commit\": {\r\n      \"sha\": \"X\",\r\n      \"url\": \"https://api.github.com/repos/X/X/commits/X\"\r\n    },\r\n    \"protected\": true,\r\n    \"protection\": {\r\n      \"enabled\": true,\r\n      \"required_status_checks\": {\r\n        \"enforcement_level\": \"off\",\r\n        \"contexts\": [\r\n\r\n        ]\r\n      }\r\n    },\r\n    \"protection_url\": \"https://api.github.com/repos/X/X/branches/develop/protection\"\r\n  },\r\n  {\r\n    \"name\": \"master\",\r\n    \"commit\": {\r\n      \"sha\": \"X\",\r\n      \"url\": \"https://api.github.com/repos/X/X/commits/X\"\r\n    },\r\n    \"protected\": true,\r\n    \"protection\": {\r\n      \"enabled\": true,\r\n      \"required_status_checks\": {\r\n        \"enforcement_level\": \"off\",\r\n        \"contexts\": [\r\n\r\n        ]\r\n      }\r\n    },\r\n    \"protection_url\": \"https://api.github.com/repos/X/X/branches/master/protection\"\r\n  }\r\n]\r\n```","createdAt":"2018-09-14T14:56:14Z","includesCreatedEdit":true,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/867#issuecomment-421385050","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQyMTUwNzA0MA==","author":{"login":"thefunkjunky"},"authorAssociation":"NONE","body":"I'm reopening the issue on behalf of the last commenter","createdAt":"2018-09-14T23:10:00Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/867#issuecomment-421507040","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQyMTczOTM4Mg==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"Can you try get single branch with `get_branch(\"master\")`? I think the issue might be the current `get_branches` method does not support the `protected` parameter.","createdAt":"2018-09-16T10:26:24Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/867#issuecomment-421739382","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQyMzYwOTIwOQ==","author":{"login":"takac"},"authorAssociation":"NONE","body":"I spent a bit of time debugging this issue and raised a bug against the GitHub v3 API.\r\n\r\nhttps://github.com/dear-github/dear-github/issues/325","createdAt":"2018-09-21T17:13:13Z","includesCreatedEdit":true,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/867#issuecomment-423609209","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQyNzAyMDk4NQ==","author":{"login":"s-t-e-v-e-n-k"},"authorAssociation":"COLLABORATOR","body":"I hit this issue when developing the branch protection code -- Repository.get_branches() does return a list \r\n of branches, but GitHub does not return enough information for the methods on Branch to be useful. If you want to utilise the protection features you must call Repository.get_branch('name').","createdAt":"2018-10-04T13:35:40Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":2}}],"url":"https://github.com/PyGithub/PyGithub/issues/867#issuecomment-427020985","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQ0NjA1Mzg0MQ==","author":{"login":"lucascollino"},"authorAssociation":"NONE","body":"> I hit this issue when developing the branch protection code -- Repository.get_branches() does return a list\r\n> of branches, but GitHub does not return enough information for the methods on Branch to be useful. If you want to utilise the protection features you must call Repository.get_branch('name').\r\n\r\nThanks, I hit this issue today, this workaround saved me a lot of time and frustration!","createdAt":"2018-12-11T02:53:13Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/867#issuecomment-446053841","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDUzMTA4NzQ0OA==","author":{"login":"stale"},"authorAssociation":"NONE","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","createdAt":"2019-09-13T03:48:30Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/867#issuecomment-531087448","viewerDidAuthor":false}],"createdAt":"2018-08-17T00:03:00Z","number":867,"state":"CLOSED","title":"Branch object is missing most attributes and methods","url":"https://github.com/PyGithub/PyGithub/issues/867"},{"author":{"id":"MDQ6VXNlcjEwMTYzOTA=","is_bot":false,"login":"sfdye","name":"Liuyang Wan"},"body":"","comments":[],"createdAt":"2018-08-16T08:14:33Z","number":866,"state":"CLOSED","title":"test issue to be created","url":"https://github.com/PyGithub/PyGithub/issues/866"},{"author":{"id":"MDQ6VXNlcjEwMTYzOTA=","is_bot":false,"login":"sfdye","name":"Liuyang Wan"},"body":"","comments":[],"createdAt":"2018-08-11T01:00:57Z","number":864,"state":"CLOSED","title":"test issue for issue events","url":"https://github.com/PyGithub/PyGithub/issues/864"},{"author":{"id":"MDQ6VXNlcjMwMjcyOTYz","is_bot":false,"login":"tsiq-cejas","name":"Ernesto Cejas Padilla"},"body":"This is a question:\r\n\r\nI am trying to upload zip files to my repo by creating a tree with a bunch of InputGitTreeElement elements. Some of these InputGitTreeElement are zip files. InputGitTreeElement only accepts 'str' for content. How can I do this? \r\n\r\nthanks!","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDQxMTk1Njg4NQ==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"What's your original use case? Just uploading a file to your repo? If so, there is a upload api you can use. (but limited to upload one file at a time)","createdAt":"2018-08-10T02:29:55Z","includesCreatedEdit":true,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/863#issuecomment-411956885","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQxMjA2ODg4NA==","author":{"login":"tsiq-cejas"},"authorAssociation":"NONE","body":"First, I forgot to say that I am using Python3.\r\nI am want to upload a bunch of changed json files plus some zip files as one commit: \r\n\r\nrepo.create_git_commit(commit_msg, end_tree, parents=[commit.commit])\r\n\r\nend_tree is a list of InputGitTreeElement. Each one corresponds to a file. My problem becomes that the 'content' of InputGitTreeElement can only be of type 'str' or 'unicode'. When I load a file to memory I have type 'bytes'. What is the right way to encode those bytes to str or unicode so InputGitTreeElement can upload my file?\r\n\r\nthanks!\r\n\r\n","createdAt":"2018-08-10T12:34:07Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/863#issuecomment-412068884","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQxMjA4MjU3Ng==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"You can use blob.\r\n\r\n```python \r\nimport base64 \r\n\r\nblob = repo.create_git_blob(\"XXX\", encoding='utf-8')\r\nblob = repo.get_git_blob(sha=blob.sha)\r\ntree_element = InputGitTreeElement(path='', mode='100644', type='blob', content=base64.b64decode(blob.content).decode('utf-8'))\r\n```","createdAt":"2018-08-10T13:30:16Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/863#issuecomment-412082576","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQxMjA5NTI1MA==","author":{"login":"tsiq-cejas"},"authorAssociation":"NONE","body":"It wouldn't be the same problem? `create_git_blob` expects string as content. \r\nurl points to a zip downloadable url.\r\n\r\n```\r\nresp = requests.get(url)\r\nblob = repo.create_git_blob(resp.content, encoding='utf-8')\r\nblob = repo.get_git_blob(sha=blob.sha)\r\ntree_element = InputGitTreeElement(path='', mode='100644', type='blob', content=base64.b64decode(blob.content).decode('utf-8'))  \r\n\r\n\r\n...\r\n    repo.create_git_blob(resp.content, encoding='utf-8')\r\n  File \"/usr/local/lib/python3.6/site-packages/github/Repository.py\", line 764, in create_git_blob\r\n    assert isinstance(content, str), content\r\nAssertionError: `b'PK\\x03\\x04\\n\\x00\\x00...`\r\n```\r\n\r\n\r\n","createdAt":"2018-08-10T14:14:47Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/863#issuecomment-412095250","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQxMjA5NTg3Ng==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"replace `resp.content` with `resp.content.decode(\"utf-8\"）`","createdAt":"2018-08-10T14:16:53Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/863#issuecomment-412095876","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQxMjA5OTYyOQ==","author":{"login":"tsiq-cejas"},"authorAssociation":"NONE","body":"Is not able to decode it as utf-8:\r\n```\r\nblob = repo.create_git_blob(resp.content.decode('utf-8'), encoding='utf-8')\r\nUnicodeDecodeError: 'utf-8' codec can't decode byte 0x9c in position 43: invalid start byte\r\n```\r\nIt is a zip file. Should be expected to be encoded in utf-8?","createdAt":"2018-08-10T14:29:53Z","includesCreatedEdit":true,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/863#issuecomment-412099629","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQyODIyNjk5Mg==","author":{"login":"stale"},"authorAssociation":"NONE","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","createdAt":"2018-10-09T14:59:54Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/863#issuecomment-428226992","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQzMTYzOTc1NA==","author":{"login":"cosme12"},"authorAssociation":"NONE","body":"Did you manage to solve this? I'm having the same problem. I can't find a way to upload a png file.","createdAt":"2018-10-21T05:17:44Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/863#issuecomment-431639754","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDUxMjAwNzkyMg==","author":{"login":"asfixia"},"authorAssociation":"NONE","body":"I have the same problem, i cant send a simple image file.\r\nThis issue is close to this i guess: https://github.com/PyGithub/PyGithub/pull/621 ","createdAt":"2019-07-16T22:12:52Z","includesCreatedEdit":true,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/863#issuecomment-512007922","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDUxNzkyNzQ0Ng==","author":{"login":"smbanaie"},"authorAssociation":"NONE","body":"You Can Try This :\r\n```python \r\ndata = base64.b64encode(open(file_name, \"rb\").read())\r\npath = \"{}/{}/{}\".format(now.year, now.month, \"tweets.zip\")\r\nblob = repo.create_git_blob(data.decode(\"utf-8\"), \"base64\")\r\nelement = InputGitTreeElement(path=path, mode='100644', type='blob', sha=blob.sha)\r\nelement_list.append(element)\r\ntree = repo.create_git_tree(element_list, base_tree)\r\nparent = repo.get_git_commit(master_sha)\r\ncommit = repo.create_git_commit(\"commit_message\", tree, [parent])\r\nmaster_ref.edit(commit.sha)```","createdAt":"2019-08-03T14:10:44Z","includesCreatedEdit":true,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":7}},{"content":"HEART","users":{"totalCount":2}}],"url":"https://github.com/PyGithub/PyGithub/issues/863#issuecomment-517927446","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDY1MzQxNzkxOQ==","author":{"login":"OpetherMB"},"authorAssociation":"NONE","body":"is there any possible solution to this thread? \r\nwhen i try to push my zip file i get this error : \r\n\r\n`Traceback (most recent call last):\r\n  File \"/home/aird/Documents/bdd/1_week_road/push_data.py\", line 44, in <module>\r\n    element = InputGitTreeElement(file_names[i], '100644', 'blob',  content=base64.b64decode(data).decode('utf-8'))\r\nUnicodeDecodeError: 'utf-8' codec can't decode byte 0xa3 in position 1: invalid start byte`","createdAt":"2020-07-03T08:16:56Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/863#issuecomment-653417919","viewerDidAuthor":false}],"createdAt":"2018-08-09T19:00:39Z","number":863,"state":"CLOSED","title":"Upload a zip file as content for InputGitTreeElement","url":"https://github.com/PyGithub/PyGithub/issues/863"},{"author":{"id":"MDQ6VXNlcjIyNjMwNjg0","is_bot":false,"login":"Abdur-rahmaanJ","name":"Abdur-Rahmaan Janhangeer"},"body":"Add more examples to docs","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDQxMjI4NTg4MA==","author":{"login":"Krafty-Coder"},"authorAssociation":"NONE","body":"Yes, @Abdur-rahmaanJ I completely agree. Though I managed to work around it, it should have more detailed examples on it","createdAt":"2018-08-11T16:28:35Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":1}}],"url":"https://github.com/PyGithub/PyGithub/issues/862#issuecomment-412285880","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQxNDA5ODgyNg==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"Better documentation coming up soon","createdAt":"2018-08-19T02:35:54Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":1}}],"url":"https://github.com/PyGithub/PyGithub/issues/862#issuecomment-414098826","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQxNDU5MzI5OQ==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"See #874 ","createdAt":"2018-08-21T08:25:20Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/862#issuecomment-414593299","viewerDidAuthor":false}],"createdAt":"2018-08-09T18:30:30Z","number":862,"state":"CLOSED","title":"More Examples","url":"https://github.com/PyGithub/PyGithub/issues/862"},{"author":{"id":"MDQ6VXNlcjQyMTk2MDQ1","is_bot":false,"login":"NKUMBA2017P92320170631","name":""},"body":"Hi, PyGithub is a great product, and I need to static some data of repository. But if I use PyGithub \r\nto collect data directly , I will get a error of timeout from github which ban my request for  frequency problem.\r\n\r\n**Is there some static api? Or I miss it?**","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDQxMTk1NjQzNg==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"What do you mean by static api? Do you mean the requested data does not change frequently?  It seems to be me you are violating the designated API [rate limit](https://developer.github.com/v3/#rate-limiting). ","createdAt":"2018-08-10T02:26:46Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/859#issuecomment-411956436","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQxMTk1ODY2NA==","author":{"login":"NKUMBA2017P92320170631"},"authorAssociation":"NONE","body":"Ohh, my mistake, made a typo , \r\n\r\n> static  api\r\n\r\n should be **statistics api**.\r\nAnd, yes it is, the rate limit problem.\r\nstatistics api: Means statistics data from API,  like [statistics](https://developer.github.com/v3/repos/statistics/).\r\nBut I need more complicated statistics data.\r\n\r\nIs there anyway or method to solve this?","createdAt":"2018-08-10T02:42:28Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/859#issuecomment-411958664","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQxMTk2MzU1MQ==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"The stats API are implemented, e.g.:\r\n\r\nhttp://pygithub.readthedocs.io/en/latest/github_objects/Repository.html#github.Repository.Repository.get_stats_contributors\r\n\r\nAll `get_stats_*` methods","createdAt":"2018-08-10T03:18:28Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/859#issuecomment-411963551","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQxMTk4Mzg2OA==","author":{"login":"NKUMBA2017P92320170631"},"authorAssociation":"NONE","body":"OK! Getcha! Thanks a lot, that was I need!","createdAt":"2018-08-10T06:00:28Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/859#issuecomment-411983868","viewerDidAuthor":false}],"createdAt":"2018-08-09T05:19:47Z","number":859,"state":"CLOSED","title":"Is there have some static api?","url":"https://github.com/PyGithub/PyGithub/issues/859"},{"author":{"id":"MDQ6VXNlcjE5ODY3NDQw","is_bot":false,"login":"JosephTLyons","name":"Joseph T. Lyons"},"body":"I'm trying to use PyGitHub and I'm getting \"ImportError: No module named github\".\r\n\r\nSetup specs:\r\nmacOS v10.13.6\r\nPython v3.7.0\r\nInstalled with pip v18.0\r\n","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDQxMDk0OTIwMQ==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"Change your current directory and try again?","createdAt":"2018-08-07T06:34:35Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/856#issuecomment-410949201","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQxMDk3Nzg2MQ==","author":{"login":"JosephTLyons"},"authorAssociation":"NONE","body":"Do you mean simply move the script to another directory and try again?  If that's what you meant, I tried and nothing changed.","createdAt":"2018-08-07T08:30:46Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/856#issuecomment-410977861","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQxMTA2OTcwMQ==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"Is your script name also \"github\"?","createdAt":"2018-08-07T14:09:46Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":3}}],"url":"https://github.com/PyGithub/PyGithub/issues/856#issuecomment-411069701","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQxMTIwOTI0OA==","author":{"login":"JosephTLyons"},"authorAssociation":"NONE","body":"No, the Python script is not named \"github\".","createdAt":"2018-08-07T21:30:56Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/856#issuecomment-411209248","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQxMTIxMDE0Ng==","author":{"login":"JosephTLyons"},"authorAssociation":"NONE","body":"Since I haven't used the library at all, I was just attempting to use the sample code provided in the `README.md`\r\n\r\n<img width=\"1059\" alt=\"screen shot 2018-08-07 at 5 33 05 pm\" src=\"https://user-images.githubusercontent.com/19867440/43803879-1a827b78-9a68-11e8-8752-5ee7fd2516bd.png\">\r\n","createdAt":"2018-08-07T21:34:24Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/856#issuecomment-411210146","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQxMTMzMjI4NQ==","author":{"login":"georgistephanov"},"authorAssociation":"NONE","body":"@JosephTLyons Did you run `$ pip install pygithub` before trying to use the library?","createdAt":"2018-08-08T08:41:19Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":5}},{"content":"EYES","users":{"totalCount":1}}],"url":"https://github.com/PyGithub/PyGithub/issues/856#issuecomment-411332285","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQxMTU2NjM1OQ==","author":{"login":"JosephTLyons"},"authorAssociation":"NONE","body":"Yes, I did.  And if I run it again, I get these messages to confirm it.\r\n\r\n```\r\nJosephs-MBP-15:~ josephlyons$ pip install pygithub\r\nRequirement already satisfied: pygithub in /Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages (1.40)\r\nRequirement already satisfied: requests>=2.14.0 in /Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages (from pygithub) (2.19.1)\r\nRequirement already satisfied: pyjwt in /Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages (from pygithub) (1.6.4)\r\nRequirement already satisfied: urllib3<1.24,>=1.21.1 in /Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages (from requests>=2.14.0->pygithub) (1.23)\r\nRequirement already satisfied: chardet<3.1.0,>=3.0.2 in /Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages (from requests>=2.14.0->pygithub) (3.0.4)\r\nRequirement already satisfied: certifi>=2017.4.17 in /Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages (from requests>=2.14.0->pygithub) (2018.4.16)\r\nRequirement already satisfied: idna<2.8,>=2.5 in /Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages (from requests>=2.14.0->pygithub) (2.7)\r\n```","createdAt":"2018-08-08T22:00:08Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/856#issuecomment-411566359","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQxMTk4NTUyNA==","author":{"login":"NKUMBA2017P92320170631"},"authorAssociation":"NONE","body":"Hi, @JosephTLyons  did you install py2 and py3 together in your MBP?\r\nIf you do,  confirm your IDE interpreter config is same as your pip install was\r\nlike the picture below\r\n![image](https://user-images.githubusercontent.com/42196045/43941399-99d37694-9ca6-11e8-9cc7-c15fc3907363.png)\r\nand my IDE interpreter config is \r\n![image](https://user-images.githubusercontent.com/42196045/43941538-1d505b40-9ca7-11e8-876e-7321f6c6ee7e.png)\r\n\r\n","createdAt":"2018-08-10T06:11:14Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":2}}],"url":"https://github.com/PyGithub/PyGithub/issues/856#issuecomment-411985524","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQxMjA3ODExOA==","author":{"login":"eamanu"},"authorAssociation":"NONE","body":"@JosephTLyons Try to run  the script on a terminal.... If this run successfully your IDE is bad configured","createdAt":"2018-08-10T13:13:05Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/856#issuecomment-412078118","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQxMjMyODUxNg==","author":{"login":"JosephTLyons"},"authorAssociation":"NONE","body":"I do have both python 2 (the version Apple ships with their mac) and python3 (installed through Homebrew).\r\n\r\nAlso, I am running the script through Terminal, I'm not using an IDE.  I'm coding strictly with Atom and then running with Terminal.","createdAt":"2018-08-12T08:52:11Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/856#issuecomment-412328516","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQxMjMyODYyOQ==","author":{"login":"JosephTLyons"},"authorAssociation":"NONE","body":"Bear with me, while I'm not a new programmer, I am new to Python and this is one of the first Python modules I've tried to use that wasn't successful for me.\r\n\r\n<img width=\"640\" alt=\"screen shot 2018-08-12 at 4 54 04 am\" src=\"https://user-images.githubusercontent.com/19867440/44000331-c89c31d2-9deb-11e8-8b2b-d3b336072cb1.png\">\r\n","createdAt":"2018-08-12T08:54:34Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/856#issuecomment-412328629","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQxNTIzMjczMw==","author":{"login":"LeonardoFurtado"},"authorAssociation":"NONE","body":"I have the same problem. I created a virtual environment and tried to install PyGithub using pip install PyGithub. I received: Requirement already satisfied (use --upgrade to upgrade): pygithub in /myvenv/lib/python3.5/site-packages\r\nRequirement already satisfied (use --upgrade to upgrade): requests> = 2.14.0 in /myvenv/lib/python3.5/site-packages (from pygithub)\r\nRequirement already satisfied (use --upgrade to upgrade): pyjwt in /myvenv/lib/python3.5/site-packages (from pygithub)\r\nRequirement already satisfied (use -upgrade to upgrade): idna <2.8,> = 2.5 in /myvenv/lib/python3.5/site-packages (from requests> = 2.14.0-> pygithub)\r\nRequirement already satisfied (use -upgrade to upgrade): chardet <3.1.0,> = 3.0.2 in /myvenv/lib/python3.5/site-packages (from requests> = 2.14.0-> pygithub)\r\nRequirement already satisfied (use --upgrade to upgrade): certifi> = 2017.4.17 in /myvenv/lib/python3.5/site-packages (from requests> = 2.14.0-> pygithub)\r\nRequirement already satisfied (use -upgrade to upgrade): urllib3 <1.24,> = 1.21.1 in /myvenv/lib/python3.5/site-packages (from requests> = 2.14.0-> pygithub)\r\n\r\nI tried importing the library using python via terminal, but... No sucess\r\n![sem titulo](https://user-images.githubusercontent.com/22118060/44498053-e38d0880-a652-11e8-9464-20a21f15f79b.png)\r\n![sem titulo2](https://user-images.githubusercontent.com/22118060/44498137-3070df00-a653-11e8-89fe-94336a4b00fb.png)\r\n\r\n","createdAt":"2018-08-23T00:34:49Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/856#issuecomment-415232733","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQxNTIzMzI1OA==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"Does a Python 2 virtualenv solve the problem?","createdAt":"2018-08-23T00:38:09Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/856#issuecomment-415233258","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQxNTIzMzgzMA==","author":{"login":"LeonardoFurtado"},"authorAssociation":"NONE","body":"Where it will be used, python 2 is not used because of conflict.","createdAt":"2018-08-23T00:41:30Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/856#issuecomment-415233830","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQxNTIzNDA2OQ==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"This seems to be one annoying known issue, let me investigate and try to fix.","createdAt":"2018-08-23T00:42:49Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"HOORAY","users":{"totalCount":1}}],"url":"https://github.com/PyGithub/PyGithub/issues/856#issuecomment-415234069","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQxNTQwMjYwNw==","author":{"login":"eamanu"},"authorAssociation":"NONE","body":"Can be a problem of PIP?\r\n\r\nI remember had this problem (with other module) on Linux Mate. ","createdAt":"2018-08-23T12:50:27Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/856#issuecomment-415402607","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQxNTY3MzMwOQ==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"If this is still an issue, pip install from the latest master branch, where I just fixed an import issue in de6b713b0.\r\n\r\nAlso comments in #314 are worth checking out.","createdAt":"2018-08-24T07:14:09Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/856#issuecomment-415673309","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQxNzgwNDY3Mw==","author":{"login":"tcullum-gpsw"},"authorAssociation":"NONE","body":"Same issue.","createdAt":"2018-08-31T22:26:12Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/856#issuecomment-417804673","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQxOTYxOTczNw==","author":{"login":"silasary"},"authorAssociation":"CONTRIBUTOR","body":"Try installing pygithub with this command: `python -m pip install pygithub`\r\n\r\nThis ensures you're using the pip related to python interpreter that you're running the script with.","createdAt":"2018-09-08T07:21:17Z","includesCreatedEdit":true,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":10}}],"url":"https://github.com/PyGithub/PyGithub/issues/856#issuecomment-419619737","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQyMTExMDYzOQ==","author":{"login":"LeonardoFurtado"},"authorAssociation":"NONE","body":"i did it:\r\n`python3 -m venv myvenv`\r\nI activated the environment and then:\r\n`python -m pip install pygithub`\r\n```\r\nCollecting pygithub\r\n  Downloading https://files.pythonhosted.org/packages/91/9e/50af4bb0ab316fedc13ae87347a718c19698ba8a19e64a692dc30c5fc9db/PyGithub-1.43.2.tar.gz (2.7MB)\r\n    100% |████████████████████████████████| 2.7MB 647kB/s \r\nCollecting requests>=2.14.0 (from pygithub)\r\n  Using cached https://files.pythonhosted.org/packages/65/47/7e02164a2a3db50ed6d8a6ab1d6d60b69c4c3fdf57a284257925dfc12bda/requests-2.19.1-py2.py3-none-any.whl\r\nCollecting pyjwt (from pygithub)\r\n  Using cached https://files.pythonhosted.org/packages/93/d1/3378cc8184a6524dc92993090ee8b4c03847c567e298305d6cf86987e005/PyJWT-1.6.4-py2.py3-none-any.whl\r\nCollecting Deprecated (from pygithub)\r\n  Downloading https://files.pythonhosted.org/packages/83/2d/7a5a117eccdef0cdf4cf015830945a7d8fdbbc9ec866d7cead758dc4229c/Deprecated-1.2.3-py2.py3-none-any.whl\r\nCollecting certifi>=2017.4.17 (from requests>=2.14.0->pygithub)\r\n  Downloading https://files.pythonhosted.org/packages/df/f7/04fee6ac349e915b82171f8e23cee63644d83663b34c539f7a09aed18f9e/certifi-2018.8.24-py2.py3-none-any.whl (147kB)\r\n    100% |████████████████████████████████| 153kB 3.3MB/s \r\nCollecting urllib3<1.24,>=1.21.1 (from requests>=2.14.0->pygithub)\r\n  Using cached https://files.pythonhosted.org/packages/bd/c9/6fdd990019071a4a32a5e7cb78a1d92c53851ef4f56f62a3486e6a7d8ffb/urllib3-1.23-py2.py3-none-any.whl\r\nCollecting chardet<3.1.0,>=3.0.2 (from requests>=2.14.0->pygithub)\r\n  Using cached https://files.pythonhosted.org/packages/bc/a9/01ffebfb562e4274b6487b4bb1ddec7ca55ec7510b22e4c51f14098443b8/chardet-3.0.4-py2.py3-none-any.whl\r\nCollecting idna<2.8,>=2.5 (from requests>=2.14.0->pygithub)\r\n  Using cached https://files.pythonhosted.org/packages/4b/2a/0276479a4b3caeb8a8c1af2f8e4355746a97fab05a372e4a2c6a6b876165/idna-2.7-py2.py3-none-any.whl\r\nCollecting wrapt<2,>=1 (from Deprecated->pygithub)\r\n  Downloading https://files.pythonhosted.org/packages/a0/47/66897906448185fcb77fc3c2b1bc20ed0ecca81a0f2f88eda3fc5a34fc3d/wrapt-1.10.11.tar.gz\r\nBuilding wheels for collected packages: pygithub, wrapt\r\n  Running setup.py bdist_wheel for pygithub ... error\r\n  Complete output from command /home/leonardo/phub/myvenv/bin/python -u -c \"import setuptools, tokenize;__file__='/tmp/pip-build-yww1918p/pygithub/setup.py';exec(compile(getattr(tokenize, 'open', open)(__file__).read().replace('\\r\\n', '\\n'), __file__, 'exec'))\" bdist_wheel -d /tmp/tmpx2l6hyczpip-wheel- --python-tag cp35:\r\n  /usr/lib/python3.5/distutils/dist.py:261: UserWarning: Unknown distribution option: 'python_requires'\r\n    warnings.warn(msg)\r\n  usage: -c [global_opts] cmd1 [cmd1_opts] [cmd2 [cmd2_opts] ...]\r\n     or: -c --help [cmd1 cmd2 ...]\r\n     or: -c --help-commands\r\n     or: -c cmd --help\r\n  \r\n  error: invalid command 'bdist_wheel'\r\n  \r\n  ----------------------------------------\r\n  Failed building wheel for pygithub\r\n  Running setup.py clean for pygithub\r\n  Running setup.py bdist_wheel for wrapt ... error\r\n  Complete output from command /home/leonardo/phub/myvenv/bin/python -u -c \"import setuptools, tokenize;__file__='/tmp/pip-build-yww1918p/wrapt/setup.py';exec(compile(getattr(tokenize, 'open', open)(__file__).read().replace('\\r\\n', '\\n'), __file__, 'exec'))\" bdist_wheel -d /tmp/tmp4kz97gl4pip-wheel- --python-tag cp35:\r\n  usage: -c [global_opts] cmd1 [cmd1_opts] [cmd2 [cmd2_opts] ...]\r\n     or: -c --help [cmd1 cmd2 ...]\r\n     or: -c --help-commands\r\n     or: -c cmd --help\r\n  \r\n  error: invalid command 'bdist_wheel'\r\n  \r\n  ----------------------------------------\r\n  Failed building wheel for wrapt\r\n  Running setup.py clean for wrapt\r\nFailed to build pygithub wrapt\r\nInstalling collected packages: certifi, urllib3, chardet, idna, requests, pyjwt, wrapt, Deprecated, pygithub\r\n  Running setup.py install for wrapt ... done\r\n  Running setup.py install for pygithub ... done\r\nSuccessfully installed Deprecated-1.2.3 certifi-2018.8.24 chardet-3.0.4 idna-2.7 pygithub-1.43.2 pyjwt-1.6.4 requests-2.19.1 urllib3-1.23 wrapt-1.10.11\r\nYou are using pip version 8.1.1, however version 18.0 is available.\r\nYou should consider upgrading via the 'pip install --upgrade pip' command.\r\n\r\n```\r\nI tried running a script using pygithub and it did not return any error.\r\n\r\n","createdAt":"2018-09-13T18:42:45Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":4}},{"content":"HEART","users":{"totalCount":1}}],"url":"https://github.com/PyGithub/PyGithub/issues/856#issuecomment-421110639","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQyMTExMTI1OA==","author":{"login":"LeonardoFurtado"},"authorAssociation":"NONE","body":"it is good to try to run the script first from the command line of the virtual environment.","createdAt":"2018-09-13T18:44:41Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/856#issuecomment-421111258","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQ0MTMzOTY1MQ==","author":{"login":"labrys"},"authorAssociation":"NONE","body":"These may be caused by the relative imports.  Python 3 requires absolute imports.  This should be fixed by #967","createdAt":"2018-11-24T03:05:37Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/856#issuecomment-441339651","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQ0MzQ3MTkxNQ==","author":{"login":"Plaba"},"authorAssociation":"NONE","body":"`sudo pip3 install pygithub` worked for me.","createdAt":"2018-12-02T01:06:46Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":3}}],"url":"https://github.com/PyGithub/PyGithub/issues/856#issuecomment-443471915","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQ1MzgwOTk4Ng==","author":{"login":"xunnanxu"},"authorAssociation":"NONE","body":"this breaks in python 3.7+ but works in 3.6.5 FYI\r\nthough not sure if it's a pip issue as 3.7.2 uses pip 18 but 3.6.5 uses 9.x","createdAt":"2019-01-13T08:00:29Z","includesCreatedEdit":true,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":5}},{"content":"CONFUSED","users":{"totalCount":1}}],"url":"https://github.com/PyGithub/PyGithub/issues/856#issuecomment-453809986","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQ2NTk2Nzc3Mg==","author":{"login":"jdiazgon"},"authorAssociation":"NONE","body":"> this breaks in python 3.7\r\n\r\nI agree, have just tested it. When using Python 3.7+, getting following error:\r\n```\r\nTraceback (most recent call last):\r\n  File \"scripts/src/create_release.py\", line 6, in <module>\r\n    from github.Milestone import Milestone\r\nModuleNotFoundError: No module named 'github'\r\n```\r\n\r\nUsing Python 3.6 works fine.","createdAt":"2019-02-21T11:37:16Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":7}}],"url":"https://github.com/PyGithub/PyGithub/issues/856#issuecomment-465967772","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDUwOTY4NjAwMw==","author":{"login":"conoroshea1996"},"authorAssociation":"NONE","body":"Does this still not work on Python 3.7 ??? Im still getting error when importing?","createdAt":"2019-07-09T15:17:45Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/856#issuecomment-509686003","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDUwOTgyNzM2NQ==","author":{"login":"labrys"},"authorAssociation":"NONE","body":"@conoroshea1996 they have refused to fix this in the past despite multiple PRs to fix it.","createdAt":"2019-07-09T22:05:19Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":3}},{"content":"THUMBS_DOWN","users":{"totalCount":3}}],"url":"https://github.com/PyGithub/PyGithub/issues/856#issuecomment-509827365","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDUzMTYxNjk4OA==","author":{"login":"Yanran1123"},"authorAssociation":"NONE","body":"I have the same issue when I use Pycharm on Mac OS, but I do not have this issue when I use Jupyter on Mac OS. And, I do not have this issue when use Pycharm or Jupyter on Windows.","createdAt":"2019-09-16T01:14:58Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/856#issuecomment-531616988","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDU3NjUxMTgyNA==","author":{"login":"p3nda"},"authorAssociation":"NONE","body":"+1\r\nPython 3.7.4  I get the same error.","createdAt":"2020-01-21T04:21:25Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/856#issuecomment-576511824","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDU3NjUxMjc3Nw==","author":{"login":"s-t-e-v-e-n-k"},"authorAssociation":"COLLABORATOR","body":"@p3nda This is almost certainly not the same issue as previously reported, can you show the full error?","createdAt":"2020-01-21T04:26:59Z","includesCreatedEdit":true,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/856#issuecomment-576512777","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDU3NjUyMDM3OQ==","author":{"login":"p3nda"},"authorAssociation":"NONE","body":"Hi @s-t-e-v-e-n-k ,\r\nSure thing:\r\n\r\npython3 --version\r\nPython 3.7.4 \r\n\r\nI get:\r\n\r\nImportError: cannot import name 'Github' from 'github' (/usr/local/lib/python3.7/site-packages/github/__init__.py)\r\n\r\nI figured this error is slightly different, so after troubleshooting for a while unsuccessfully I spun up a docker container and installed python3.6 and tried to use it:\r\n\r\nImportError: cannot import name 'Github'\r\npython3 --version\r\nPython 3.6.9","createdAt":"2020-01-21T05:09:03Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/856#issuecomment-576520379","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDU3NjUyMTg4Mw==","author":{"login":"s-t-e-v-e-n-k"},"authorAssociation":"COLLABORATOR","body":"@p3nda On which platform?","createdAt":"2020-01-21T05:16:59Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/856#issuecomment-576521883","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDU3NjUyMjU3NQ==","author":{"login":"p3nda"},"authorAssociation":"NONE","body":"@s-t-e-v-e-n-k For the first error on python3.7.4 i'm using macos mojave 10.14.6. In the docker container with python 3.6.9 i'm using Ubuntu 18.04.3","createdAt":"2020-01-21T05:20:53Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/856#issuecomment-576522575","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDU3NjUyMzYyNg==","author":{"login":"s-t-e-v-e-n-k"},"authorAssociation":"COLLABORATOR","body":"So it's odd, what does:\r\n\r\n```\r\n>>> import github\r\n>>> github.__file__\r\n'/home/steven/PyGithub/github/__init__.py'\r\n>>> dir(github.MainClass)\r\n['AuthenticatedUser', 'Consts', 'DEFAULT_BASE_URL', 'DEFAULT_PER_PAGE', 'DEFAULT_STATUS_URL', 'DEFAULT_TIMEOUT', 'Github', 'GithubException', 'GithubIntegration', 'GitignoreTemplate', 'HookDescription', 'Installation', 'InstallationAuthorization', 'RateLimit', 'Repository', 'Requester', '__builtins__', '__cached__', '__doc__', '__file__', '__loader__', '__name__', '__package__', '__spec__', 'datetime', 'github', 'jwt', 'pickle', 'requests', 'time', 'urllib3']\r\n>>> github.MainClass.__file__\r\n'/home/steven/PyGithub/github/MainClass.py'\r\n```\r\n\r\ngive you?","createdAt":"2020-01-21T05:26:03Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/856#issuecomment-576523626","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDU3NjUyMzg5OA==","author":{"login":"s-t-e-v-e-n-k"},"authorAssociation":"COLLABORATOR","body":"And ``from github.MainClass import Github`` sorry","createdAt":"2020-01-21T05:27:33Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":1}}],"url":"https://github.com/PyGithub/PyGithub/issues/856#issuecomment-576523898","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDU3Njc1NjE3MQ==","author":{"login":"p3nda"},"authorAssociation":"NONE","body":"In Ubuntu 18.04 Docker container:\r\n\r\n>>> import github\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"/usr/local/lib/python3.6/dist-packages/github/__init__.py\", line 44, in <module>\r\n    from github.MainClass import Github, GithubIntegration\r\n  File \"/usr/local/lib/python3.6/dist-packages/github/MainClass.py\", line 58, in <module>\r\n    import requests\r\n  File \"/usr/local/lib/python3.6/dist-packages/requests/__init__.py\", line 112, in <module>\r\n    from . import utils\r\n  File \"/usr/local/lib/python3.6/dist-packages/requests/utils.py\", line 26, in <module>\r\n    from ._internal_utils import to_native_string\r\n  File \"/usr/local/lib/python3.6/dist-packages/requests/_internal_utils.py\", line 11, in <module>\r\n    from .compat import is_py2, builtin_str, str\r\n  File \"/usr/local/lib/python3.6/dist-packages/requests/compat.py\", line 59, in <module>\r\n    from http import cookiejar as cookielib\r\n  File \"/usr/lib/python3.6/http/cookiejar.py\", line 31, in <module>\r\n    import copy\r\n  File \"/copy.py\", line 2, in <module>\r\n    from github import Github\r\nImportError: cannot import name 'Github'\r\n\r\n>>> from github.MainClass import Github\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"/usr/local/lib/python3.6/dist-packages/github/__init__.py\", line 44, in <module>\r\n    from github.MainClass import Github, GithubIntegration\r\n  File \"/usr/local/lib/python3.6/dist-packages/github/MainClass.py\", line 58, in <module>\r\n    import requests\r\n  File \"/usr/local/lib/python3.6/dist-packages/requests/__init__.py\", line 112, in <module>\r\n    from . import utils\r\n  File \"/usr/local/lib/python3.6/dist-packages/requests/utils.py\", line 26, in <module>\r\n    from ._internal_utils import to_native_string\r\n  File \"/usr/local/lib/python3.6/dist-packages/requests/_internal_utils.py\", line 11, in <module>\r\n    from .compat import is_py2, builtin_str, str\r\n  File \"/usr/local/lib/python3.6/dist-packages/requests/compat.py\", line 59, in <module>\r\n    from http import cookiejar as cookielib\r\n  File \"/usr/lib/python3.6/http/cookiejar.py\", line 31, in <module>\r\n    import copy\r\n  File \"/copy.py\", line 2, in <module>\r\n    from github import Github\r\nImportError: cannot import name 'Github'\r\n\r\nOn my Mac: \r\n\r\n>>> import github\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"/usr/local/lib/python3.7/site-packages/github/__init__.py\", line 44, in <module>\r\n    from github.MainClass import Github, GithubIntegration\r\n  File \"/usr/local/lib/python3.7/site-packages/github/MainClass.py\", line 58, in <module>\r\n    import requests\r\n  File \"/Users/amanda/Library/Python/3.7/lib/python/site-packages/requests/__init__.py\", line 112, in <module>\r\n    from . import utils\r\n  File \"/Users/amanda/Library/Python/3.7/lib/python/site-packages/requests/utils.py\", line 26, in <module>\r\n    from ._internal_utils import to_native_string\r\n  File \"/Users/amanda/Library/Python/3.7/lib/python/site-packages/requests/_internal_utils.py\", line 11, in <module>\r\n    from .compat import is_py2, builtin_str, str\r\n  File \"/Users/amanda/Library/Python/3.7/lib/python/site-packages/requests/compat.py\", line 59, in <module>\r\n    from http import cookiejar as cookielib\r\n  File \"/usr/local/Cellar/python/3.7.5/Frameworks/Python.framework/Versions/3.7/lib/python3.7/http/cookiejar.py\", line 31, in <module>\r\n    import copy\r\n  File \"/Users/amanda/copy.py\", line 2, in <module>\r\n    from github import Github\r\nImportError: cannot import name 'Github' from 'github' (/usr/local/lib/python3.7/site-packages/github/__init__.py)\r\n\r\n>>> from github.MainClass import Github\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"/usr/local/lib/python3.7/site-packages/github/__init__.py\", line 44, in <module>\r\n    from github.MainClass import Github, GithubIntegration\r\n  File \"/usr/local/lib/python3.7/site-packages/github/MainClass.py\", line 58, in <module>\r\n    import requests\r\n  File \"/Users/amanda/Library/Python/3.7/lib/python/site-packages/requests/__init__.py\", line 112, in <module>\r\n    from . import utils\r\n  File \"/Users/amanda/Library/Python/3.7/lib/python/site-packages/requests/utils.py\", line 26, in <module>\r\n    from ._internal_utils import to_native_string\r\n  File \"/Users/amanda/Library/Python/3.7/lib/python/site-packages/requests/_internal_utils.py\", line 11, in <module>\r\n    from .compat import is_py2, builtin_str, str\r\n  File \"/Users/amanda/Library/Python/3.7/lib/python/site-packages/requests/compat.py\", line 59, in <module>\r\n    from http import cookiejar as cookielib\r\n  File \"/usr/local/Cellar/python/3.7.5/Frameworks/Python.framework/Versions/3.7/lib/python3.7/http/cookiejar.py\", line 31, in <module>\r\n    import copy\r\n  File \"/Users/amanda/copy.py\", line 2, in <module>\r\n    from github import Github\r\nImportError: cannot import name 'Github' from 'github' (/usr/local/lib/python3.7/site-packages/github/__init__.py)\r\n>>>\r\n\r\nI should note that i'm on my work machine this morning doing the test from the macbook which is \r\nMacOS Mojave 10.14.6 with python 3.7.5 installed. For the ubuntu container, it is the same one,  same version of python.\r\n\r\n@s-t-e-v-e-n-k ","createdAt":"2020-01-21T16:13:46Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/856#issuecomment-576756171","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDU3NjkzNDMwMw==","author":{"login":"s-t-e-v-e-n-k"},"authorAssociation":"COLLABORATOR","body":"```\r\nFile \"/usr/local/Cellar/python/3.7.5/Frameworks/Python.framework/Versions/3.7/lib/python3.7/http/cookiejar.py\", line 31, in\r\nimport copy\r\nFile \"/Users/amanda/copy.py\", line 2, in \r\n```\r\n\r\nWhere did that /copy.py or /Users/amanada/copy.py file come from? It's masking a real Python module /usr/lib/python3.6/copy.py and causing a circular import.","createdAt":"2020-01-21T23:24:34Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/856#issuecomment-576934303","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDU3Njk2MDM5Mw==","author":{"login":"p3nda"},"authorAssociation":"NONE","body":"copy.py is a script I was working which uses PyGithub. When I ran those commands they were ran from the python interpreter itself after i tried running the script. I spun up a new container without running that script and just ran the import commands through python interpreter and works fine:\r\n\r\n>>> import github\r\n>>> from github import Github\r\n>>> exit()\r\n\r\nI'm not sure why adding it in my script broke everything, it's not even fully formed yet:\r\n\r\nimport shutil\r\nfrom github import Github\r\n\r\nACCESS_TOKEN = '123456789'\r\n#initialize github client\r\ng = Github(ACCESS_TOKEN)\r\nprint(g.get_user().get_repos())\r\n\r\n@s-t-e-v-e-n-k ","createdAt":"2020-01-22T01:05:53Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/856#issuecomment-576960393","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDU3Njk2MjgyNQ==","author":{"login":"s-t-e-v-e-n-k"},"authorAssociation":"COLLABORATOR","body":"It broke everything because of the name -- it masks a Python module called 'copy' which is in the module import chain when you run ``from github import Github``. Call your script anything else and it should work fine.","createdAt":"2020-01-22T01:16:12Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/856#issuecomment-576962825","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDU3Njk4NTI0NQ==","author":{"login":"p3nda"},"authorAssociation":"NONE","body":"Ah okay, thanks for the clarity @s-t-e-v-e-n-k i appreciate your time!","createdAt":"2020-01-22T02:58:57Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/856#issuecomment-576985245","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDU3Njk4ODE2OQ==","author":{"login":"s-t-e-v-e-n-k"},"authorAssociation":"COLLABORATOR","body":"@p3nda I'm delighted to help! I'm going to close this issue, if you have any other issues please feel free to open a new issue.","createdAt":"2020-01-22T03:14:07Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/856#issuecomment-576988169","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDY1MDAyNzkxMw==","author":{"login":"vyshnavdevops"},"authorAssociation":"NONE","body":"Can someone help me with this error\r\n\r\n\r\nTraceback (most recent call last):\r\n  File \"terra.py\", line 1, in <module>\r\n    from python_terraform import *\r\nImportError: No module named python_terraform","createdAt":"2020-06-26T07:33:31Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_DOWN","users":{"totalCount":1}}],"url":"https://github.com/PyGithub/PyGithub/issues/856#issuecomment-650027913","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDcwODA3ODYzOQ==","author":{"login":"jamesonwilliams"},"authorAssociation":"NONE","body":"In my case, I got this error due to issues with my Python imports path.\r\n\r\nI'm using Python 3.7.3:\r\n```console\r\n$ python3 --version\r\nPython 3.7.3\r\n```\r\nAnd PyPI 20.2.3:\r\n```console\r\n$ pip3 --version\r\npip 20.2.3 from /usr/local/lib/python3.7/site-packages/pip (python 3.7)\r\n```\r\nI have installed PyGithub:\r\n```console\r\n$ pip3 install pygithub\r\nRequirement already satisfied: pygithub in /usr/local/lib/python3.7/site-packages (1.43)\r\nRequirement already satisfied: pyjwt in /usr/local/lib/python3.7/site-packages (from pygithub) (1.7.1)\r\nRequirement already satisfied: requests>=2.14.0 in /usr/local/lib/python3.7/site-packages (from pygithub) (2.24.0)\r\nRequirement already satisfied: chardet<4,>=3.0.2 in /usr/local/lib/python3.7/site-packages (from requests>=2.14.0->pygithub) (3.0.4)\r\nRequirement already satisfied: urllib3!=1.25.0,!=1.25.1,<1.26,>=1.21.1 in /usr/local/lib/python3.7/site-packages (from requests>=2.14.0->pygithub) (1.25.7)\r\nRequirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.7/site-packages (from requests>=2.14.0->pygithub) (2020.6.20)\r\nRequirement already satisfied: idna<3,>=2.5 in /usr/local/lib/python3.7/site-packages (from requests>=2.14.0->pygithub) (2.10)\r\n```\r\nBut, it fails to import, nevertheless:\r\n```\r\n$ python3 <<< \"from github import Github\"\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\nModuleNotFoundError: No module named 'github'\r\n```\r\n\r\nIn the pip output, we saw that the package was installed to `/usr/local/lib/python3.7/site-packages`. However, this directory was __not__ in my Python imports path:\r\n```console\r\n$ python3 <<< 'import sys; print(sys.path)'\r\n['', '/Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.7/lib/python37.zip', '/Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.7/lib/python3.7', '/Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.7/lib/python3.7/lib-dynload', '/Users/jhwill/Library/Python/3.7/lib/python/site-packages', '/Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.7/lib/python3.7/site-packages']\r\n```\r\n\r\n### Solution 1: Add to `PYTHONPATH`\r\nOne way to solve this is to add the missing directory to my `PYTHONPATH`, in `~/.bashrc`:\r\n```bash\r\n# Add these lines\r\nreadonly local_site_packages=\"/usr/local/lib/python3.7/site-packages\"\r\nif [ ! -z \"$PYTHONPATH\" ]; then\r\n    export PYTHONPATH=\"$local_site_packages:$PYTHONPATH\"\r\nelse\r\n    export PYTHONPATH=\"$local_site_packages\"\r\nfi\r\n```\r\nAnd source the file:\r\n```console\r\n$ . ~/.bashrc\r\n```\r\n\r\n### Solution 2: Install to an existing import path\r\n\r\n`/Users/jhwill/Library/Python/3.7/lib/python/site-packages` is already in my system path. So, we can target this directory for installation while using the `pip3` command:\r\n```console\r\n$ pip install --target=/Users/jhwill/Library/Python/3.7/lib/python/site-packages PyGithub\r\nCollecting PyGithub\r\n  Using cached PyGithub-1.53-py3-none-any.whl (274 kB)\r\nCollecting pyjwt\r\n  Using cached PyJWT-1.7.1-py2.py3-none-any.whl (18 kB)\r\nCollecting deprecated\r\n  Using cached Deprecated-1.2.10-py2.py3-none-any.whl (8.7 kB)\r\nCollecting requests>=2.14.0\r\n  Using cached requests-2.24.0-py2.py3-none-any.whl (61 kB)\r\nProcessing ./Library/Caches/pip/wheels/62/76/4c/aa25851149f3f6d9785f6c869387ad82b3fd37582fa8147ac6/wrapt-1.12.1-cp37-cp37m-macosx_10_14_x86_64.whl\r\nCollecting idna<3,>=2.5\r\n  Using cached idna-2.10-py2.py3-none-any.whl (58 kB)\r\nCollecting chardet<4,>=3.0.2\r\n  Using cached chardet-3.0.4-py2.py3-none-any.whl (133 kB)\r\nCollecting certifi>=2017.4.17\r\n  Using cached certifi-2020.6.20-py2.py3-none-any.whl (156 kB)\r\nCollecting urllib3!=1.25.0,!=1.25.1,<1.26,>=1.21.1\r\n  Downloading urllib3-1.25.10-py2.py3-none-any.whl (127 kB)\r\n     |████████████████████████████████| 127 kB 2.9 MB/s \r\nInstalling collected packages: pyjwt, wrapt, deprecated, idna, chardet, certifi, urllib3, requests, PyGithub\r\nSuccessfully installed PyGithub-1.53 certifi-2020.6.20 chardet-3.0.4 deprecated-1.2.10 idna-2.10 pyjwt-1.7.1 requests-2.24.0 urllib3-1.25.10 wrapt-1.12.1\r\n```","createdAt":"2020-10-14T00:19:08Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":2}},{"content":"HEART","users":{"totalCount":1}}],"url":"https://github.com/PyGithub/PyGithub/issues/856#issuecomment-708078639","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs41VTTI","author":{"login":"INGORTE"},"authorAssociation":"NONE","body":"> I have the same problem. I created a virtual environment and tried to install PyGithub using pip install PyGithub. I received: Requirement already satisfied (use --upgrade to upgrade): pygithub in /myvenv/lib/python3.5/site-packages\r\n> Requirement already satisfied (use --upgrade to upgrade): requests> = 2.14.0 in /myvenv/lib/python3.5/site-packages (from pygithub)\r\n> Requirement already satisfied (use --upgrade to upgrade): pyjwt in /myvenv/lib/python3.5/site-packages (from pygithub)\r\n> Requirement already satisfied (use -upgrade to upgrade): idna <2.8,> = 2.5 in /myvenv/lib/python3.5/site-packages (from requests> = 2.14.0-> pygithub)\r\n> Requirement already satisfied (use -upgrade to upgrade): chardet <3.1.0,> = 3.0.2 in /myvenv/lib/python3.5/site-packages (from requests> = 2.14.0-> pygithub)\r\n> Requirement already satisfied (use --upgrade to upgrade): certifi> = 2017.4.17 in /myvenv/lib/python3.5/site-packages (from requests> = 2.14.0-> pygithub)\r\n> Requirement already satisfied (use -upgrade to upgrade): urllib3 <1.24,> = 1.21.1 in /myvenv/lib/python3.5/site-packages (from requests> = 2.14.0-> pygithub)\r\n> \r\n> I tried importing the library using python via terminal, but... No sucess\r\n> ![sem titulo](https://user-images.githubusercontent.com/22118060/44498053-e38d0880-a652-11e8-9464-20a21f15f79b.png)\r\n> ![sem titulo2](https://user-images.githubusercontent.com/22118060/44498137-3070df00-a653-11e8-89fe-94336a4b00fb.png)\r\n\r\nhello i have the same problem with you, and do you fix it right now?","createdAt":"2021-08-08T10:31:52Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/856#issuecomment-894776520","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs5PreLv","author":{"login":"firobeid"},"authorAssociation":"NONE","body":"Is the a none or wasm wheel for this package?","createdAt":"2022-12-05T06:09:34Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/856#issuecomment-1336795887","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs5RsL5w","author":{"login":"lxRbckl"},"authorAssociation":"NONE","body":"I run ubuntu server 22.04. I received this error quite frequently also. I believe it has to do with a failure to install packages pygithub actually depends on. for instance, my issues were related to the packages cffi and openssl. at least in my case, I noticed a large majority of the time, this error took place when installing from a requirements.txt file. \r\n\r\nin my case, I attempted to remove all related github packages (github or pygithub).\r\n`pip3 uninstall github`\r\nor\r\n`pip3 uninstall pygithub`\r\n\r\nin some cases, you may have installed pygithub/github from a reqs file. in which case:\r\n`pip3 uninstall -r requirements.txt`\r\n\r\nafter removing some of the lost packages, these are the serious of commands that fixed it *for me*. if you get past this error, you may still have to manually install some required packages for your specific use case.\r\n```\r\nsudo apt install python3-pip\r\nsudo apt-get update && sudo apt-get upgrade\r\nsudo apt install openssl\r\npip3 install cffi\r\npip3 install pygithub * hence with no errors *\r\n```\r\n\r\nnote: while I did receive the same error, I am aware that this esoteric solution may not work with everyone. at the very least, I hope this helps people further understand their own problem.\r\n\r\ngood luck","createdAt":"2023-01-04T06:37:11Z","includesCreatedEdit":true,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/856#issuecomment-1370537584","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs5RvsdG","author":{"login":"labrys"},"authorAssociation":"NONE","body":"Really frustrating that this many years later and they still wont fix this even after multiple PRs to resolve it.","createdAt":"2023-01-04T21:38:14Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":12}}],"url":"https://github.com/PyGithub/PyGithub/issues/856#issuecomment-1371457350","viewerDidAuthor":false}],"createdAt":"2018-08-07T05:41:09Z","number":856,"state":"CLOSED","title":"ImportError: No module named github","url":"https://github.com/PyGithub/PyGithub/issues/856"},{"author":{"id":"MDQ6VXNlcjEzNTQzNDcx","is_bot":false,"login":"allevin","name":"Aaron L. Levine"},"body":"Hello, the class [IssueEvent](https://github.com/PyGithub/PyGithub/blob/master/github/IssueEvent.py) is missing a large number of attributes documented in the [API](https://developer.github.com/v3/issues/events/).\r\n\r\nThis is also commented about in #653 to a degree\r\n\r\nI have been working at addressing this and have all the attributes supported in my [branch](https://github.com/allevin/PyGithub/commit/d3afbfaf0793b40997e817163f0a8cd663736740)\r\n\r\nI have a number of tests for some of the event types, but need assistance from the project admins to test out many of the other events.  See PR #857 for more details.\r\n\r\n\r\n\r\n","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDQxNjIzMTgyOA==","author":{"login":"allevin"},"authorAssociation":"CONTRIBUTOR","body":"Fixed with #857.","createdAt":"2018-08-27T13:46:12Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/855#issuecomment-416231828","viewerDidAuthor":false}],"createdAt":"2018-08-03T18:51:48Z","number":855,"state":"CLOSED","title":"Improve IssueEvent Object to support all attributes","url":"https://github.com/PyGithub/PyGithub/issues/855"},{"author":{"id":"MDQ6VXNlcjMzMzkxNDMz","is_bot":false,"login":"vishakraj25","name":"Shanmugaraj Kamaraj"},"body":"Hello,\r\nI run this lines of code to get info \r\ng = github.Github(\"USERNAME\", \"PASSWORD\")\r\nusers=g.search_users(\"created:2017-11-05+vishakraj25+in:login&type=Users\")\r\nfor user in users:\r\n    print(user.login)\r\n\r\nBut It show the error..\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"/usr/local/lib/python2.7/dist-packages/github/PaginatedList.py\", line 58, in __iter__\r\n    newElements = self._grow()\r\n  File \"/usr/local/lib/python2.7/dist-packages/github/PaginatedList.py\", line 70, in _grow\r\n    newElements = self._fetchNextPage()\r\n  File \"/usr/local/lib/python2.7/dist-packages/github/PaginatedList.py\", line 172, in _fetchNextPage\r\n    headers=self.__headers\r\n  File \"/usr/local/lib/python2.7/dist-packages/github/Requester.py\", line 260, in requestJsonAndCheck\r\n    return self.__check(*self.requestJson(verb, url, parameters, headers, input, self.__customConnection(url)))\r\n  File \"/usr/local/lib/python2.7/dist-packages/github/Requester.py\", line 271, in __check\r\n    raise self.__createException(status, responseHeaders, output)\r\ngithub.GithubException.GithubException: 422 {u'documentation_url': u'https://developer.github.com/v3/search/', u'message': u'Validation Failed', u'errors': [{u'field': u'q', u'message': u'\"2017-11-05+vishakraj25+in:login&type=Users\" is not a recognized date/time format. Please provide an ISO 8601 date/time value, such as YYYY-MM-DD.', u'code': u'invalid', u'resource': u'Search'}]}\r\nHow to solve this.. Thank you","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDQxNzgwMjI4MQ==","author":{"login":"singh811"},"authorAssociation":"CONTRIBUTOR","body":"@vishakraj25, [this](https://github.com/PyGithub/PyGithub/blob/master/github/Requester.py#L444) is the culprit, when you search users by **\"created:2017-11-05+vishakraj25+in:login&type=Users\"** it actually is encoded like **\"created%3A2017-11-05%2Bvishakraj25%2Bin%3Alogin%26type%3DUsers\"**.\r\nSo this is what causing the issue.","createdAt":"2018-08-31T22:12:44Z","includesCreatedEdit":true,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/853#issuecomment-417802281","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQzNDUwMTA2MA==","author":{"login":"stale"},"authorAssociation":"NONE","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","createdAt":"2018-10-30T23:00:48Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/853#issuecomment-434501060","viewerDidAuthor":false}],"createdAt":"2018-08-02T13:28:53Z","number":853,"state":"CLOSED","title":"search user by created date","url":"https://github.com/PyGithub/PyGithub/issues/853"},{"author":{"id":"MDQ6VXNlcjIwNDA0MTU4","is_bot":false,"login":"UlaganathanNamachivayam","name":""},"body":"Hi Team,\r\nHave gone through the documentation and found solutions to invite a nameduser. I have use case where i wanted to invite an external user using his E-mail address. But could not see an option to do the same using pygithub where only nameduser is supported.\r\n\r\nKindly help. ","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDQwODM2OTA5NQ==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"You are right. I guess the following endpoint is yet to be implemented:\r\nhttps://developer.github.com/v3/orgs/members/#create-organization-invitation\r\n\r\n","createdAt":"2018-07-27T09:44:25Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/851#issuecomment-408369095","viewerDidAuthor":false}],"createdAt":"2018-07-27T09:36:25Z","number":851,"state":"CLOSED","title":"Inviting a user via email address using pygithub.","url":"https://github.com/PyGithub/PyGithub/issues/851"},{"author":{"id":"MDQ6VXNlcjIwMjg3NjE1","is_bot":false,"login":"sergey48k","name":"Sergey Surkov"},"body":"A snippet first:\r\n\r\n```\r\ng = Github()\r\nr = g.get_repo('sourcerer-io/sourcerer-app')\r\ncc = r.get_contributors()\r\nprint(cc[0].raw_data['contributions'])\r\n```\r\nThis results in an error: KeyError: 'contributions'. The API call `GET repos/sourcerer-io/sourcerer-app/contributors` returns contributions just fine. \r\n\r\nThis happens because of this line in github/PaginatedList.py:191:\r\n\r\n`self.__contentClass(self.__requester, headers, element, completed=False)`\r\n\r\nThat is, each NamedUser is created as incomplete. Whet its attributes are accessed, a new API call is made that overwrites the object, a thus loses 'contributions' attribute.\r\n\r\nI would be happy to make a pull request to set completed to True, but I am not sure what this will break since this seems to be used by pretty much everyone. It still needs to be addressed somehow because attributes are lost, and because it inflates the number of calls to the backend.\r\n","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDQxMzA3OTExMg==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"@sergey48k Seems like we removed the `contributions` attribute from `NamedUser` from #443, as we thought this attribute was not needed anymore. ","createdAt":"2018-08-15T02:55:09Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/850#issuecomment-413079112","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQxMzA4MDUyNg==","author":{"login":"sergey48k"},"authorAssociation":"NONE","body":"Well, I needed it. And I had to abandon pygithub in favor of good old HTTP requests for it.\r\nAlso, it's very surprising that NamedUser is created incomplete.","createdAt":"2018-08-15T03:05:05Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/850#issuecomment-413080526","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQxMzA4MDgzMQ==","author":{"login":"s-t-e-v-e-n-k"},"authorAssociation":"COLLABORATOR","body":"It isn't that the attribute wasn't needed, it wasn't populated. Let me dig into this.","createdAt":"2018-08-15T03:07:08Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/850#issuecomment-413080831","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQxMzA4MzI3NQ==","author":{"login":"sergey48k"},"authorAssociation":"NONE","body":"thank you @s-t-e-v-e-n-k ","createdAt":"2018-08-15T03:26:23Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/850#issuecomment-413083275","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQxMzA4NTI3Nw==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"```\r\ng = Github()\r\nr = g.get_repo('sourcerer-io/sourcerer-app')\r\ncc = r.get_contributors()\r\nprint(cc[0].contributions)\r\n```\r\n\r\nconfirmed it works now","createdAt":"2018-08-15T03:42:31Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/850#issuecomment-413085277","viewerDidAuthor":false}],"createdAt":"2018-07-24T03:46:25Z","number":850,"state":"CLOSED","title":"Attributes are lost by PaginatedList","url":"https://github.com/PyGithub/PyGithub/issues/850"},{"author":{"is_bot":true,"login":"app/"},"body":"get stargazers of a repo: http://developer.github.com/v3/activity/starring/#list-stargazers \r\nit seems doesn't list any sort or direction parameter.so how to sort stargazers by date or some else parameters\r\nI couldn't find it in the reference, maybe I missed it?Thanks :)","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDQwNjQ4MDk5OA==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"Looks like you can use a custom header to get the starred date:\r\nhttps://developer.github.com/v3/activity/starring/#alternative-response-with-star-creation-timestamps\r\n\r\nFortunately someone implemented this so you can use `repo.get_stargazers_with_dates()`. But you probably need to perform the sorting by yourself.","createdAt":"2018-07-20T03:47:17Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/848#issuecomment-406480998","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQwNjQ5MDEyOQ==","author":{"login":""},"authorAssociation":"NONE","body":"thank you! I have tried to add `header` `Accept: 'application/vnd.github.v3.star+json'` and got results with `starred_at` field。\r\n![image](https://user-images.githubusercontent.com/28668354/42983744-ed81ce7c-8c1a-11e8-89e6-7be170e5c9c5.png)\r\nbut it was not what i expected.i have already find out this API has parameters for pagination whice are `page` and `per_page`,so i wander does parameter like `sort: newest` or `sort: oldest` exist。so that i can get newest starred user like this https://api.github.com/repos/PyGithub/PyGithub/stargazers?page=1&per_page=5&sort=newest","createdAt":"2018-07-20T05:05:27Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/848#issuecomment-406490129","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQwNjQ5MjA1Ng==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"In other words, you want to get the latest stargazer?","createdAt":"2018-07-20T05:20:30Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/848#issuecomment-406492056","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQwNjQ5NDI5OQ==","author":{"login":""},"authorAssociation":"NONE","body":"yes,it is the sence!!!","createdAt":"2018-07-20T05:37:25Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/848#issuecomment-406494299","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQwNjQ5NjMyMQ==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"Well then I have a recipe for you. It looks like although Github does not officially support the `sort` parameter, the stargazers are sorted chronologically by default. So we just need to get the last item from the list. \r\n\r\nThe following idea is taken from #820 \r\n\r\n1. First make a request to stargazers API with a parameter `per_page=1`:\r\nGET https://api.github.com/repos/PyGithub/PyGithub/stargazers?per_page=1\r\n \r\nIn the response, the `Link' header will look something like this:\r\n\r\n`<https://api.github.com/repositories/3544490/stargazers?per_page=1&page=2>; rel=\"next\", <https://api.github.com/repositories/3544490/stargazers?per_page=1&page=1930>; rel=\"last\"`\r\n\r\nNote: here 1930 is total number of stargazers as of now.\r\n\r\n2. Now just retrieve the last page of this result.\r\nGET https://api.github.com/repositories/3544490/stargazers?per_page=1&page=1930\r\n\r\nThis will give you the \"newest\" stargazer.\r\n\r\nTo implement this idea in PyGithub:\r\n\r\n```python\r\ng = Github(token, per_page=1)\r\nrepo = g.get_repo('PyGithub/PyGithub')\r\nstargazers = repo.get_stargazers_with_dates()\r\n# parse the last page number \r\n# l._getLastPageUrl() -> 'https://api.github.com/repositories/3544490/stargazers?per_page=1&page=1930'\r\nlast = int(l._getLastPageUrl().split(\"=\")[-1])\r\n# retrieve the last page\r\nprint(stargazers.get_page(last-1)[0]).starred_at\r\n```\r\n","createdAt":"2018-07-20T05:52:46Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/848#issuecomment-406496321","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQwNjQ5NzMyMQ==","author":{"login":""},"authorAssociation":"NONE","body":"the `Link' header with total count is really userful!!! Thank you very much!!!","createdAt":"2018-07-20T05:59:43Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"HOORAY","users":{"totalCount":1}}],"url":"https://github.com/PyGithub/PyGithub/issues/848#issuecomment-406497321","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQwNjUwMTI3NA==","author":{"login":""},"authorAssociation":"NONE","body":"By the way! If a repository's star count is too large(>40000).[example](https://github.com/vuejs/vue) it's over 10K! this API can get only the 40000th user which is not the true latest one.do you have some suggestion?\r\n![image](https://user-images.githubusercontent.com/28668354/42986544-84ecdcae-8c28-11e8-8f27-b1f43208cf08.png)\r\nhttps://api.github.com/repositories/11730342/stargazers?page=4001&per_page=10\r\n![image](https://user-images.githubusercontent.com/28668354/42986407-004287d8-8c28-11e8-8299-8b5d9628b889.png)\r\n\r\n","createdAt":"2018-07-20T06:25:05Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/848#issuecomment-406501274","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQwNjUwMjUzMA==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"Good find 😂 \r\n\r\nUnfortunately unless Github provides a `sort` parameter, I don't see a good way to achieve this for a huge popular repo.","createdAt":"2018-07-20T06:31:50Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/848#issuecomment-406502530","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQwNjUwMjgxNQ==","author":{"login":""},"authorAssociation":"NONE","body":"😄😂it is time for emoji😂😄,thank you all the same","createdAt":"2018-07-20T06:33:26Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":1}}],"url":"https://github.com/PyGithub/PyGithub/issues/848#issuecomment-406502815","viewerDidAuthor":false}],"createdAt":"2018-07-20T03:31:27Z","number":848,"state":"CLOSED","title":"how to sort stargazers by date","url":"https://github.com/PyGithub/PyGithub/issues/848"},{"author":{"id":"MDQ6VXNlcjM5NDI0MDE3","is_bot":false,"login":"pxgst128","name":""},"body":">>> print(gea_qa_br.object.sha)\r\ndb9e6a0fb74d89619478a2569cc9df85b756a292\r\n>>> print(gea_qa_br.object.url)\r\nhttps://somehost:someport/api/v3/repos/Corp-GSC-GEA/GSC-GEA-SOA-test-repo/git/commits/db9e6a0fb74d89619478a2569cc9df85b756a292\r\n>>> print(gea_qa_br.object.type)\r\ncommit\r\n>>> gea_qa_br.edit(sha=hex_dig,force=True)\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"/sw/pkg/user_projects/python-3.7.0/lib/python3.7/site-packages/github/GitRef.py\", line 97, in edit\r\n    input=post_parameters\r\n  File \"/sw/pkg/user_projects/python-3.7.0/lib/python3.7/site-packages/github/Requester.py\", line 260, in requestJsonAndCheck\r\n    return self.__check(*self.requestJson(verb, url, parameters, headers, input, self.__customConnection(url)))\r\n  File \"/sw/pkg/user_projects/python-3.7.0/lib/python3.7/site-packages/github/Requester.py\", line 271, in __check\r\n    raise self.__createException(status, responseHeaders, output)\r\ngithub.GithubException.GithubException: 422 {'message': 'Object does not exist', 'documentation_url': 'https://developer.github.com/enterprise/2.13/v3/git/refs/#update-a-reference'}\r\n>>> \r\n","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDQwNTU4OTAzMg==","author":{"login":"mfonville"},"authorAssociation":"CONTRIBUTOR","body":"I am not sure why the value of `.url` is `https:///api/v3/repos/Corp-GSC-GEA/GSC-GEA-SOA-test-repo/git/commits/db9e6a0fb74d89619478a2569cc9df85b756a292` but clearly for some erroneous reason the protocol-type (`https://`) got added to the relative url of `/api/`.","createdAt":"2018-07-17T13:50:52Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/847#issuecomment-405589032","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQwNTkzNzI4NQ==","author":{"login":"pxgst128"},"authorAssociation":"NONE","body":"never mind but the private host and port I had to hide for some security reason. But issue is updating the sha doesn't work. ","createdAt":"2018-07-18T13:48:21Z","includesCreatedEdit":true,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/847#issuecomment-405937285","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQwNTk0NzYzMQ==","author":{"login":"mfonville"},"authorAssociation":"CONTRIBUTOR","body":"ok, please next time don't remove them, but put some bogus information there please. Like `private-host.org:1337` :-) ","createdAt":"2018-07-18T14:19:47Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/847#issuecomment-405947631","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQyMTc3Nzc1MQ==","author":{"login":"stale"},"authorAssociation":"NONE","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","createdAt":"2018-09-16T14:53:00Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/847#issuecomment-421777751","viewerDidAuthor":false}],"createdAt":"2018-07-17T04:27:09Z","number":847,"state":"CLOSED","title":"Issues in enterprise github reference while updating a new sha","url":"https://github.com/PyGithub/PyGithub/issues/847"},{"author":{"id":"MDQ6VXNlcjM2ODA3NQ==","is_bot":false,"login":"charlesreid1","name":"Chaz Reid"},"body":"If user calls the `create_file()` method of the `Repository` object and specifies a path to the file, and the path to the file does _not_ include a leading `/` character, the user gets an unhelpful \"404 object not found\" error, with no indication of which object can't be found (the file? the repo? the user?...)\r\n\r\n[This Stack Overflow answer](https://stackoverflow.com/a/40614406/463213) mentions that you need a preceding `/` in the file path.\r\n\r\nThis is not mentioned anywhere in the documentation ([link to `create_file()` documentation](https://pygithub.readthedocs.io/en/latest/github_objects/Repository.html#github.Repository.Repository.create_file)). I tried to update the documentation but documentation is missing? See #845.\r\n\r\nThis issue didn't take me long to track down, but this has high, high potential to drive someone nuts if they don't have black belt google-fu skills. _Please_ include this crucial piece of information in the documentation (wherever it lives)!","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDQwNTQ0ODQ5Mw==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"Sorry if it's not clear. You just need to edit the python docs of the `create_file()` method, after it's merged to the master, the latest doc will be live on readthedocs.","createdAt":"2018-07-17T03:30:09Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/846#issuecomment-405448493","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQwNTQ0ODc1NA==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"Namely change this line:\r\nhttps://github.com/PyGithub/PyGithub/blob/master/github/Repository.py#L1458","createdAt":"2018-07-17T03:32:03Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/846#issuecomment-405448754","viewerDidAuthor":false}],"createdAt":"2018-07-16T19:48:19Z","number":846,"state":"CLOSED","title":"Creating new file in repo requires a leading /","url":"https://github.com/PyGithub/PyGithub/issues/846"},{"author":{"id":"MDQ6VXNlcjM2ODA3NQ==","is_bot":false,"login":"charlesreid1","name":"Chaz Reid"},"body":"Was looking at the Repository page: https://pygithub.readthedocs.io/en/latest/github_objects/Repository.html\r\n\r\nSaw that it was missing some information, so I clicked on the \"Edit on Github\" link: https://github.com/PyGithub/PyGithub/blob/master/doc/github_objects/Repository.rst\r\n\r\nGot Github's \"Page not found\".\r\n\r\nThis issue affects all pages in the \"Github objects\" section of the documentation.","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDQwNTM1ODY1MA==","author":{"login":"charlesreid1"},"authorAssociation":"NONE","body":"Navigating to `doc/github_objects/` on the master branch of the repo shows an empty folder: https://github.com/PyGithub/PyGithub/tree/master/doc/github_objects\r\n\r\nWhere does the documentation live?","createdAt":"2018-07-16T19:43:37Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/845#issuecomment-405358650","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQwNTQ0ODIyMw==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"Merging with #846","createdAt":"2018-07-17T03:28:16Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/845#issuecomment-405448223","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQwNjA2ODMyNg==","author":{"login":"charlesreid1"},"authorAssociation":"NONE","body":"IMO this issue should not be closed. Can the information added to #846 be added somewhere easier for users to find? Or, ideally, can the edit on github links be fixed somehow?","createdAt":"2018-07-18T20:45:01Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/845#issuecomment-406068326","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQwNjEzNDQxMA==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"As I mentioned in #846 , it's fairly easy to edit the documentation with sphinx set-up, so a simple PR would fix it. If you don't know how to do that let me know I will fix it.","createdAt":"2018-07-19T02:27:22Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/845#issuecomment-406134410","viewerDidAuthor":false}],"createdAt":"2018-07-16T19:42:17Z","number":845,"state":"CLOSED","title":"\"Edit on Github\" links in documentation are broken","url":"https://github.com/PyGithub/PyGithub/issues/845"},{"author":{"is_bot":true,"login":"app/"},"body":"hi\r\nIn the file \"Github/AuthenticatedUser.py\", an AuthenticatedUser object can be created by calling ``get_user()`` on a Github object. But when calling get_user(), the function return an 'NamedUser' object, so i can not use the ``get_user_issues()``,i want to know how to get the authenticated user object?\r\n","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDQwNDEwMDIxMg==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"Can you provide a specific example of what you wanna achieve?","createdAt":"2018-07-11T09:10:20Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/841#issuecomment-404100212","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQwNDEwOTY2OA==","author":{"login":""},"authorAssociation":"NONE","body":"`gh=Github(username,password)`\r\n`user=gh.get_user(name)`\r\n`issues=user.get_user_issues()`\r\n\r\nWhen calling ``get_user_issues()``, i find that ``AttributeError: 'NamedUser' object has no attribute 'get_user_issues'``.\r\nI want to get some issues where the user participant in.","createdAt":"2018-07-11T09:42:52Z","includesCreatedEdit":true,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/841#issuecomment-404109668","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQwNDExMzY3Ng==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"https://developer.github.com/v3/issues/#list-issues\r\n\r\nI believe there is no such API to query issues for a NamedUser.","createdAt":"2018-07-11T09:57:05Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/841#issuecomment-404113676","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQwNDEyNTYzNQ==","author":{"login":""},"authorAssociation":"NONE","body":"[https://github.com/PyGithub/PyGithub/blob/master/github/AuthenticatedUser.py](https://github.com/PyGithub/PyGithub/blob/master/github/AuthenticatedUser.py)\r\nIn the PyGithub source code file \"Github/AuthenticatedUser.py\", i find that an AuthenticatedUser object can be created by calling ``get_user()`` on a Github object. And i find there is a ``get_user_issues()`` in the file for an AuthenticatedUser, so i want to know how to create the AuthenticatedUser object?","createdAt":"2018-07-11T10:43:33Z","includesCreatedEdit":true,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/841#issuecomment-404125635","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQwNDM3MzI1OQ==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"`gh.get_user()` (without any parameter) will give you `AuthenticatedUser`. What I mean is, according to the official Github documentation, you simply can't get the issues of the non authenticated user.","createdAt":"2018-07-12T02:53:29Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/841#issuecomment-404373259","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQwNDUyMzIzNg==","author":{"login":""},"authorAssociation":"NONE","body":"OK","createdAt":"2018-07-12T14:03:27Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/841#issuecomment-404523236","viewerDidAuthor":false}],"createdAt":"2018-07-11T08:39:32Z","number":841,"state":"CLOSED","title":"Get the authenticated user","url":"https://github.com/PyGithub/PyGithub/issues/841"},{"author":{"id":"MDQ6VXNlcjgxMjUyNg==","is_bot":false,"login":"sechastain","name":""},"body":"In November 2017, github added the ability to archive a repository via the edit REST API\r\n\r\nhttps://developer.github.com/changes/2017-11-08-archiving-repositories/\r\n\r\nThe change looks to be relatively simple - I'm just a little hung up on generating the replay file","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDQwNDAxMDc1OQ==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"This will be useful! How can I help？","createdAt":"2018-07-11T00:54:22Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/840#issuecomment-404010759","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQwNDE0MTMwMw==","author":{"login":"sechastain"},"authorAssociation":"CONTRIBUTOR","body":"@sfdye I just get antsy any time I see code wanting passwords and such ☺️\r\n\r\nAny procedures / best practices / things to not do?\r\n\r\nI guess what I'm think of right now is generating a temporary token, generate the replay, and then delete the token?","createdAt":"2018-07-11T11:49:04Z","includesCreatedEdit":true,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/840#issuecomment-404141303","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQwNDE0MzA1MQ==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"You could. According to the docs:\r\nhttps://github.com/PyGithub/PyGithub/blob/master/CONTRIBUTING.md#automated-tests\r\n\r\nYou can generate a personal token and run the test with `--record --auth_with_token`. That's it :)","createdAt":"2018-07-11T11:56:44Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/840#issuecomment-404143051","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQwNDM3NjcyNg==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"Closed by #843 ","createdAt":"2018-07-12T03:18:26Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/840#issuecomment-404376726","viewerDidAuthor":false}],"createdAt":"2018-07-10T20:29:24Z","number":840,"state":"CLOSED","title":"Add archival support for Repository.edit","url":"https://github.com/PyGithub/PyGithub/issues/840"},{"author":{"id":"MDQ6VXNlcjI0NjUwNDY=","is_bot":false,"login":"tshrove","name":"Tommy Shrove"},"body":"Using this code in python below:\r\n\r\n```\r\ng = Github(\"key\")\r\nsince = datetime(2018,1,1)\r\nrepo = g.get_repo(\"facebook/react\")\r\nissues = repo.get_issues(since=since)\r\n```\r\n\r\nI should in my mind get all issues created since 1/1/2018. But instead, I get issues way past 1/1/2018. I think the since parameter is not working or I don't understand the reason for the since parameter.\r\n","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDQwMzMzNzYxNQ==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"https://developer.github.com/v3/issues/#list-issues\r\n\r\nsince should be a string in the format of YYYY-MM-DDTHH:MM:SSZ.","createdAt":"2018-07-09T01:51:39Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/836#issuecomment-403337615","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQwMzQ0NjQzNQ==","author":{"login":"mfonville"},"authorAssociation":"CONTRIBUTOR","body":"This is then broken in the PyGithub docs: https://pygithub.readthedocs.io/en/latest/github_objects/Repository.html#github.Repository.Repository.get_issues\r\n\r\nThere it states `since – datetime.datetime`, I guess we could replace with with e.g. `since – datetime.datetime.isoformat()` optionally with `timespec='seconds'` added if Github is as strict as their API documentation seems to imply.","createdAt":"2018-07-09T11:23:08Z","includesCreatedEdit":true,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/836#issuecomment-403446435","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQwMzQ2NDc5Mw==","author":{"login":"tshrove"},"authorAssociation":"NONE","body":"I used a datetime object for the since. It would not let me use a string.","createdAt":"2018-07-09T12:39:58Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/836#issuecomment-403464793","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQwMzQ3OTgzOQ==","author":{"login":"mfonville"},"authorAssociation":"CONTRIBUTOR","body":"After checking the source code I do indeed see that it expects a `datetime` object.\r\nAnd in https://github.com/PyGithub/PyGithub/blob/master/github/Repository.py#L1833 it converted from datetime to correct string format. So I don't know why it doesn't work","createdAt":"2018-07-09T13:31:14Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/836#issuecomment-403479839","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQwMzQ5NjI2Ng==","author":{"login":"tshrove"},"authorAssociation":"NONE","body":"Did someone else verify (besides me) that it doesn't work?","createdAt":"2018-07-09T14:21:30Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/836#issuecomment-403496266","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQwMzY2NDc0NA==","author":{"login":"tshrove"},"authorAssociation":"NONE","body":"@mfonville Could it be that the github api is not working correctly?","createdAt":"2018-07-10T00:54:56Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/836#issuecomment-403664744","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQwMzY3MzEwMg==","author":{"login":"tshrove"},"authorAssociation":"NONE","body":"Other libraries are doing the same thing. I think the \"since\" object might be on the updated_at field instead of the created_at field.","createdAt":"2018-07-10T01:48:51Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/836#issuecomment-403673102","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQwMzY3MzQwNQ==","author":{"login":"tshrove"},"authorAssociation":"NONE","body":"Yelp. Found it in the github api documentation. \r\n\r\n> Only issues updated at or after this time are returned. This is a timestamp in ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ.","createdAt":"2018-07-10T01:50:34Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/836#issuecomment-403673405","viewerDidAuthor":false}],"createdAt":"2018-07-08T18:04:26Z","number":836,"state":"CLOSED","title":"repository.get_issues() since parameter doesn't seem to work.","url":"https://github.com/PyGithub/PyGithub/issues/836"},{"author":{"id":"MDQ6VXNlcjIyOTM4Mg==","is_bot":false,"login":"PhilipMay","name":"Philip May"},"body":"Hi,\r\nI am loading repositories with `github.get_repo(repo_name, lazy=False)`. Then I load the issues of that repository with `get_issues()`. I did that many times and only get issues with the state of \"open\".\r\n\r\nWhen I use `get_issues(state=\"closed\")` I only get closed issues.\r\n\r\nFrom my point of view this is a bug because `get_issues()` without parameter should also get closed issues, not just open. Maybe this is the default of the Github API but then you should not default init the parameter to `NotSet` but to 'open' or at least give a hint in the API doc.\r\n\r\nCan you guys check this please? Many thanks. :-)\r\n\r\nAnd by the way: Thank you for this wonderful python lib.","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDQwMzIzNjk3NA==","author":{"login":"PhilipMay"},"authorAssociation":"CONTRIBUTOR","body":"Yes - I just saw that state = \"open\" is default in the Github API. See here:\r\nhttps://developer.github.com/v3/issues/#list-issues-for-a-repository\r\n\r\nI suggest to set this here too via `state='open'`:\r\nhttps://github.com/PyGithub/PyGithub/blob/master/github/Repository.py#L1788\r\n`def get_issues(self, milestone=github.GithubObject.NotSet, state='open', assignee=github.GithubObject.NotSet, mentioned=github.GithubObject.NotSet, labels=github.GithubObject.NotSet, sort=github.GithubObject.NotSet, direction=github.GithubObject.NotSet, since=github.GithubObject.NotSet, creator=github.GithubObject.NotSet):`\r\n\r\nThis way it is more clear for the user of the function about what is happening here.","createdAt":"2018-07-07T19:09:49Z","includesCreatedEdit":true,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/835#issuecomment-403236974","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQwMzI1NzIxNg==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"IMO, the default behavior is what Github returns when you don't provide anything, say the `state` parameter. We don't want to hard-code it in the method definition. For example, if Github changes this default behavior to return `all` issues, then this function will break. What do you think?","createdAt":"2018-07-08T02:34:26Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/835#issuecomment-403257216","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQwMzkwODYzOQ==","author":{"login":"PhilipMay"},"authorAssociation":"CONTRIBUTOR","body":"Well. You are right. When Github would change the default behavior you would have to change your default too. But you only would have to do that when you want to do the same as Github.\r\nFrom my point of view it would be logical to load \"all\" issues by default. So you could just provide \"all\" as default and give a hint about this in the api documentation. Noone forces you to do exactly the same as Github.\r\n\r\nWhen you want to avoid this you should at least write into the API documentation that at the moment (you can provide a date) the default only loads open issues.\r\n\r\nWhat do you think?","createdAt":"2018-07-10T17:46:00Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/835#issuecomment-403908639","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQxOTY2MzIyNg==","author":{"login":"stale"},"authorAssociation":"NONE","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","createdAt":"2018-09-08T18:22:50Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/835#issuecomment-419663226","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQxOTY2NjM0Mg==","author":{"login":"PhilipMay"},"authorAssociation":"CONTRIBUTOR","body":"@sfdye What do you think of my comment above? Should the behavior of the API be changed?\r\nThanks, Philip","createdAt":"2018-09-08T19:13:00Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/835#issuecomment-419666342","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQyMTg4Mjg4Mw==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"Hi Philip, honestly if I do that, it would be a breaking API change which will affect a lot of users who are expecting the current behavior. I don't mind updating this library whenever Github changes their default behavior. ","createdAt":"2018-09-17T03:23:21Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/835#issuecomment-421882883","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQzOTI3MDg3Ng==","author":{"login":"stale"},"authorAssociation":"NONE","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","createdAt":"2018-11-16T03:30:28Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/835#issuecomment-439270876","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQzOTYxOTQ4Nw==","author":{"login":"PhilipMay"},"authorAssociation":"CONTRIBUTOR","body":"Well ok - from my point of view you should at least write into the API documentation that at the moment (you can provide a date) the default only loads open issues. So there is no doubt fpr the API user.","createdAt":"2018-11-17T14:06:04Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/835#issuecomment-439619487","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQzOTY2NDc5Nw==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"Okay PR welcome","createdAt":"2018-11-18T03:26:15Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/835#issuecomment-439664797","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQzOTk1Mzg3Mw==","author":{"login":"PhilipMay"},"authorAssociation":"CONTRIBUTOR","body":"> Okay PR welcome\r\n\r\nOk. See #961","createdAt":"2018-11-19T16:26:46Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/835#issuecomment-439953873","viewerDidAuthor":false}],"createdAt":"2018-07-07T12:22:45Z","number":835,"state":"CLOSED","title":"Repository.get_issues() only loads state = open issues","url":"https://github.com/PyGithub/PyGithub/issues/835"},{"author":{"id":"MDQ6VXNlcjE4NTUyOTQ=","is_bot":false,"login":"nurupo","name":""},"body":"GitHub API [allows updating](https://developer.github.com/v3/repos/releases/#edit-a-release) `tag_name` and `target_commitish` of a release, among `name`, `body`, `draft` and `prerelease`, but PyGithub API wrapper allows updating all of them but  `tag_name` and `target_commitish`:\r\n\r\nhttps://github.com/PyGithub/PyGithub/blob/e389396405146bb1b0c4587de1f6f757a9514a43/github/GitRelease.py#L178-L199\r\n\r\nCould we add `tag_name` and `target_commitish` parameters to that function?","comments":[],"createdAt":"2018-07-07T03:06:24Z","number":833,"state":"CLOSED","title":"Allow updating tag_name and target_commitish of GitRelease","url":"https://github.com/PyGithub/PyGithub/issues/833"},{"author":{"id":"MDQ6VXNlcjI4NzI3NjIx","is_bot":false,"login":"binooetomo","name":""},"body":"Dear All.\r\n\r\nI have a hipchat room that monitor a github repo issue.\r\n\r\nwhen I create an issue via github webUI, the room will receive 'opened issue' nottificatio.\r\n\r\nBut when I try to create issue using pygithub.create_issue  , the room will receive 2 notification in sequence:\r\n1. 'edited issue', followed with\r\n2. 'opened issue'\r\n\r\nIs it standard?\r\n\r\nnote : Sorry I can't give any proof since github issue tracker do not allow attaching any screnshoot. I'll try to write simple python github webhook to get the proof.\r\n\r\n----------EDIT-------------\r\nI build simple flask script as github webhook, and here is from debug\r\n\r\n> action = opened, issue number = 26\r\n> \r\n> 127.0.0.1 - - [30/Jun/2018 09:24:39] \"POST /payload HTTP/1.1\" 200 -\r\n> action = opened, issue number = 27\r\n> \r\n> 127.0.0.1 - - [30/Jun/2018 09:31:02] \"POST /payload HTTP/1.1\" 200 -\r\n> action = labeled, issue number = 27\r\n> \r\n> 127.0.0.1 - - [30/Jun/2018 09:31:02] \"POST /payload HTTP/1.1\" 200 -\r\n> action = labeled, issue number = 27\r\n> \r\n> 127.0.0.1 - - [30/Jun/2018 09:31:02] \"POST /payload HTTP/1.1\" 200 -\r\n> action = labeled, issue number = 27\r\n> \r\n> 127.0.0.1 - - [30/Jun/2018 09:31:02] \"POST /payload HTTP/1.1\" 200 -\r\n> action = labeled, issue number = 27\r\n> \r\n> 127.0.0.1 - - [30/Jun/2018 09:31:02] \"POST /payload HTTP/1.1\" 200 -\r\n> action = labeled, issue number = 27\r\n> \r\n> 127.0.0.1 - - [30/Jun/2018 09:31:02] \"POST /payload HTTP/1.1\" 200 -\r\n> action = labeled, issue number = 27\r\n> \r\n> 127.0.0.1 - - [30/Jun/2018 09:31:02] \"POST /payload HTTP/1.1\" 200 -\r\n> action = labeled, issue number = 27\r\n> \r\n> 127.0.0.1 - - [30/Jun/2018 09:31:02] \"POST /payload HTTP/1.1\" 200 -\r\n> action = labeled, issue number = 27\r\n> \r\n> 127.0.0.1 - - [30/Jun/2018 09:31:02] \"POST /payload HTTP/1.1\" 200 -\r\n> action = edited, issue number = 27\r\n> \r\n> 127.0.0.1 - - [30/Jun/2018 09:31:02] \"POST /payload HTTP/1.1\" 200 -\r\n> \r\n\r\nhere is my flask code \r\n\r\n```\r\nfrom __future__ import print_function\r\nfrom flask import Flask, request\r\n\r\napp = Flask(__name__)\r\n\r\n\r\n@app.route(\"/payload\", methods=['POST'])\r\ndef payload():\r\n    #print('I got some JSON: {}'.format(request.json))\r\n    rdict=request.json\r\n    print(f'action = {rdict[\"action\"]}, issue number = {rdict[\"issue\"][\"number\"]}\\n')\r\n    return 'ok'\r\n\r\nif __name__ == \"__main__\":\r\n\tapp.run()\r\n\r\n```\r\n\r\nfirst issue (number 26) is created via github issue webUI.\r\nand the other one (number 27) is single request by pygithub via python shell\r\n\r\nhere from my python shell\r\n\r\n> >>> import os\r\n> >>> from github import Github\r\n> >>> \r\n> >>> g=Github(os.environ['GITTOKEN'])\r\n> >>> GITOBJ=g.get_repo(\"%s/%s\" %(os.environ['REPO_OWNER'],os.environ['REPO_NAME']))\r\n> >>> newissue=GITOBJ.create_issue('by pygithub','Created using pygithub',labels='pygithub')\r\n> \r\n\r\nSincerely\r\n-bino-","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDQwMTc0NzIyMA==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"It shouldn't. I assume by notification you mean webhooks, can you check your repository webhook history (Settings -> Webhooks) , whether there are two entries matching `edited issue` followed by `opened issue`?\r\n\r\nBTW, you can add screenshot, simply copy the image and paste in the the reply textarea.","createdAt":"2018-07-02T10:07:15Z","includesCreatedEdit":true,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/831#issuecomment-401747220","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQxNzYyMTUxMw==","author":{"login":"stale"},"authorAssociation":"NONE","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","createdAt":"2018-08-31T10:21:27Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/831#issuecomment-417621513","viewerDidAuthor":false}],"createdAt":"2018-06-30T00:12:23Z","number":831,"state":"CLOSED","title":"create_issue triger github to send notification twice","url":"https://github.com/PyGithub/PyGithub/issues/831"},{"author":{"id":"MDQ6VXNlcjE3Mzc5MDc=","is_bot":false,"login":"TheSeubert","name":"Justin Seubert"},"body":"Since the push of v1.40 and change to requests for HTTP instead of httplib, it has broken the get_archive_link method.\r\n\r\nSimple Test:\r\n```python\r\nimport github\r\ngit = github.Github()\r\nrepo = git.get_repo('PyGithub/PyGithub')\r\nprint(repo.get_archive_link('zipball', 'master'))\r\n``` \r\n\r\nReturns the error:\r\n```\r\n  File \"/usr/local/lib/python3.5/site-packages/github/Repository.py\", line 1219, in get_archive_link\r\n    return headers[\"location\"]\r\nKeyError: 'location'\r\n```\r\n\r\nA quick debug reveals that the requests library is following the request from `GET /repos/:owner/:repo/:archive_format/:ref`, so instead of returning the header info with an expected location, it returns the actual archive zip file:\r\n\r\n```json\r\n{'content-disposition': 'attachment; filename=PyGithub-PyGithub-v1.40-0-gd897e86.zip', 'x-content-type-options': 'nosniff', 'access-control-allow-origin': 'https://render.githubusercontent.com', 'x-geo-block-list': '', 'date': 'Thu, 28 Jun 2018 20:49:34 GMT', 'vary': 'Authorization,Accept-Encoding', 'content-length': '3232597', 'strict-transport-security': 'max-age=31536000', 'etag': '\"d897e86aa9aa6469971b3e2201ead39cf1aebb62\"', 'content-security-policy': \"default-src 'none'; style-src 'unsafe-inline'; sandbox\", 'content-type': 'application/zip', 'x-github-request-id': 'F53F:2415:309135:4E96ED:5B3549DE', 'x-frame-options': 'deny', 'x-xss-protection': '1; mode=block'}\r\n``` ","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDQwMTIzNjExMw==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"ping @mikeage @mfonville \r\n\r\nIt seems this is caused by the requests's behavior to follow http redirect by default, while httplib won't (which is the case before 1.40).\r\n\r\nOne solution I can think of is to add a `allow_redirects=False` to the following lines:\r\n\r\nhttps://github.com/PyGithub/PyGithub/blob/master/github/Requester.py#L107\r\nhttps://github.com/PyGithub/PyGithub/blob/master/github/Requester.py#L133\r\n\r\nWhat do you guys think?","createdAt":"2018-06-29T03:23:25Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/830#issuecomment-401236113","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQwMTI2OTgwNQ==","author":{"login":"mfonville"},"authorAssociation":"CONTRIBUTOR","body":"It seems an easy fix. I am not sure if we would introduce bugs in other places that rely on automatic redirection. Though we already do our own redirect for `301` at https://github.com/PyGithub/PyGithub/blob/master/github/Requester.py#L411 but I don't see `302`s handled anywhere.\r\n\r\nAfter reading GitHub's API-documentation, where they indeed literally specify that the 'data' it will return is a header with `301` as target location, I am in doubt whether `requestJsonAndCheck` is actually the appropriate method for this.\r\nShouldn't we add a new method, e.g. `requestHeaderAndCheck` that could set and pass `allow_redirects=False` through the relevant methods within the Requester class?","createdAt":"2018-06-29T07:17:15Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/830#issuecomment-401269805","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQwMTMwODY5NQ==","author":{"login":"mikeage"},"authorAssociation":"CONTRIBUTOR","body":"I'd be surprised if we rely on automatic redirection given that httplib didn't do it.\r\n\r\nI think adding `allow_redirects=False` is definitely the quickest fix. I'm not sure about `requestJsonAndCheck` vs `requestHeaderAndCheck`; it sounds logical, but I'd want to review a lot more of the code before I committed myself to that answer.","createdAt":"2018-06-29T09:56:34Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/830#issuecomment-401308695","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQwMTMxMTM3Nw==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"FYI 302 is handled in a few places, like:\r\n\r\nhttps://github.com/PyGithub/PyGithub/blob/d897e86aa9aa6469971b3e2201ead39cf1aebb62/github/Organization.py#L774\r\nand\r\nhttps://github.com/PyGithub/PyGithub/blob/d897e86aa9aa6469971b3e2201ead39cf1aebb62/github/Repository.py#L1582\r\n\r\nI am thinking since we are trying to mimic httplib with requests, setting `allow_redirects=False` should have the minimal impact on existing behavior?\r\n","createdAt":"2018-06-29T10:07:47Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/830#issuecomment-401311377","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQwMTMyMTQyNg==","author":{"login":"mfonville"},"authorAssociation":"CONTRIBUTOR","body":"Thanks for pointing to the `302`s. Mimicking httplib then with `allow_redirects=False` is indeed the way to go with the current codebase.\r\n\r\nWe just have to keep an eye we're not painting ourselves in a corner with over-instructing Requests. Because for a better implementation of #803 and some of the issues reported on proxies, shaky connections etc, the best way ahead is to allow passing of a Requests-parameters (or object) to PyGithub. So it would be best if PyGithub does not rely (too many) Requests-specific parameters. (Though I don't see that as an obstacle concerning the `allow_redirects`)","createdAt":"2018-06-29T10:57:43Z","includesCreatedEdit":true,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":1}}],"url":"https://github.com/PyGithub/PyGithub/issues/830#issuecomment-401321426","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQwMTM4MDcwNg==","author":{"login":"mikeage"},"authorAssociation":"CONTRIBUTOR","body":"Also, for your consideration: mimicking httplib made this an easy drop in replacement, but long term (and I know this depends more on the testing framework than anything else), is that the right direction? The basic requests API is much easier than sticking to httplib, IMHO.","createdAt":"2018-06-29T14:59:00Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":1}}],"url":"https://github.com/PyGithub/PyGithub/issues/830#issuecomment-401380706","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQxMTA5NjMzNw==","author":{"login":"djstein"},"authorAssociation":"NONE","body":"currently experiencing: moving down to 1.39 has OpenSSL errors, 1.40 has this error. any thoughts on a resolution or has a pull request been created?","createdAt":"2018-08-07T15:24:21Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/830#issuecomment-411096337","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQxMTEwNTI1NQ==","author":{"login":"djstein"},"authorAssociation":"NONE","body":"created a pull request here.... https://github.com/PyGithub/PyGithub/pull/858","createdAt":"2018-08-07T15:49:32Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":1}}],"url":"https://github.com/PyGithub/PyGithub/issues/830#issuecomment-411105255","viewerDidAuthor":false}],"createdAt":"2018-06-28T21:02:59Z","number":830,"state":"CLOSED","title":"Latest release v1.40 has broken get_archive_link","url":"https://github.com/PyGithub/PyGithub/issues/830"},{"author":{"id":"MDQ6VXNlcjM5NzM2MDI3","is_bot":false,"login":"JRagone","name":"John Ragone"},"body":"I'm using the [Github-Flask](http://github-flask.readthedocs.io/en/latest/) and [PyGithub](https://pygithub.readthedocs.io/en/latest/index.html) libraries to write a GitHub app in Python. The issue that I am facing is I cannot get [PyGitHub's simple tutorial code](https://pygithub.readthedocs.io/en/latest/introduction.html) to run correctly. I will paste my code below.\r\n\r\n```python\r\n@app.route('/pygit')\r\ndef test():\r\n    pygit = Github(login_or_token=\"USER_ACCESS_TOKEN\")\r\n    user = pygit.get_user()\r\n    repos = user.get_repos()\r\n    for repo in repos:\r\n        print(repo.name)\r\n```\r\n\r\nI have replaced `USER_ACCESS_TOKEN` with a user access token, which I retrieve through the use of [Github-Flask's example code](https://github.com/cenkalti/github-flask/blob/master/example.py). When I run the above code, I am faced with the following error on the `for repo in repos` line.\r\n\r\n```shell\r\ngithub.GithubException.GithubException: 403 {'message': 'Resource not accessible by integration', 'documentation_url': 'https://developer.github.com/v3/repos/#list-all-public-repositories'}\r\n```\r\n\r\nI should note that my GitHub app is installed and authorized on the account from which I am retrieving the user access token. This error led me to believe that my app did not have the correct permissions. However, I tried giving it read & write permissions (when possible) to every element, and still I am faced with this error. **Am I perhaps passing the wrong type of token when I instantiate `pygit` or is this an issue with PyGithub?**\r\n\r\nOther methods, such as [`get_repo(\"REPO_NAME\")`](https://pygithub.readthedocs.io/en/latest/github_objects/NamedUser.html#github.NamedUser.NamedUser.get_repo), work as intended and without error. Furthermore, when I run:\r\n\r\n```python\r\nfor method in dir(user):\r\n    print(method)\r\n```\r\n\r\nI can see the `get_repos` method, so I am certain that it should be callable from this object.\r\n\r\nLet me know if I can provide any further information, and thanks in advance for any help.","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDQwMTI0Mjk5MA==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"This seems to be a Github issue, not a PyGithub issue. If the issue persists, you may wanna contact Github support.","createdAt":"2018-06-29T04:18:21Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/829#issuecomment-401242990","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQxNjQ0NjkyMQ==","author":{"login":"stale"},"authorAssociation":"NONE","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","createdAt":"2018-08-28T04:24:01Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/829#issuecomment-416446921","viewerDidAuthor":false}],"createdAt":"2018-06-28T15:02:32Z","number":829,"state":"CLOSED","title":"NamedUser.get_repos() returning 403","url":"https://github.com/PyGithub/PyGithub/issues/829"},{"author":{"id":"MDQ6VXNlcjMwNzEyNDA4","is_bot":false,"login":"jpmartins201","name":"João Pedro"},"body":"I was trying to edit the http://pygithub.readthedocs.io/en/latest/github_objects/File.html and http://pygithub.readthedocs.io/en/latest/github_objects/ContentFile.html but it says there isn't these files in this repository.","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDM5OTgwOTcyNg==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"If you see the sphinx configuration:\r\nhttps://github.com/PyGithub/PyGithub/blob/faa8f2057021e10139ed2f6700830158f5a4a4c1/doc/conf.py#L285\r\n\r\nThe `github_objects.rst` is dynamically computed rather than placed on the the directory itself. That's why you couldn't find it on Github.","createdAt":"2018-06-25T01:59:36Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/826#issuecomment-399809726","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM5OTgyODc4NA==","author":{"login":"jpmartins201"},"authorAssociation":"CONTRIBUTOR","body":"Thank you, but how can I contribute to this part of the docs? (sorry for the dumb question, but it's unclear to me)","createdAt":"2018-06-25T04:41:41Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/826#issuecomment-399828784","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM5OTgyODk0NA==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"Where do you wanna change? Just modify the python docs and it will be reflected in the next master build.","createdAt":"2018-06-25T04:42:53Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/826#issuecomment-399828944","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM5OTgyOTc3Mw==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"You will want to learn about how sphinx works.","createdAt":"2018-06-25T04:48:32Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/826#issuecomment-399829773","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM5OTgzNTc4OQ==","author":{"login":"jpmartins201"},"authorAssociation":"CONTRIBUTOR","body":"I'm sorry, I should have written a better issue (please tell me if I should open another with a better description). The two problems are:\r\n> get_file_contents and get_contents, they have the same parameters, same call (GET /repos/:owner/:repo/contents/:path) and same return type, but diferent names.\r\n> The page for File (github object) does not have a reference in the GitHub developer documentation. ","createdAt":"2018-06-25T05:26:56Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/826#issuecomment-399835789","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM5OTgzODI1Ng==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"The File class is meant for files in a pull request of commits, e.g.:\r\nhttps://developer.github.com/v3/pulls/#list-pull-requests-files\r\n\r\nIt's more like an intermediate resource which I don't think Github has any specific section in the documentation. \r\n\r\nFor the first question, if you look at the source code of `Repository.py`, `get_contents` method is actually just calling `get_file_contents` inside. Maybe for some historical reasons which I am not too sure. We should probably merge the two for now. Feel free to make a PR if you want to.","createdAt":"2018-06-25T05:45:00Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/826#issuecomment-399838256","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM5OTg0Njc5Nw==","author":{"login":"jpmartins201"},"authorAssociation":"CONTRIBUTOR","body":"Everything makes sense now. We were using these 2 functions and never understood why they were doing the same thing. Thank you for the answers, I'll make the PR until tomorrow.","createdAt":"2018-06-25T06:35:56Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/826#issuecomment-399846797","viewerDidAuthor":false}],"createdAt":"2018-06-23T17:04:53Z","number":826,"state":"CLOSED","title":"Error 404 for File.srt and ContentFile.srt","url":"https://github.com/PyGithub/PyGithub/issues/826"},{"author":{"id":"MDQ6VXNlcjM1NzI3MDYw","is_bot":false,"login":"goutham9032","name":"goutham"},"body":"i am working on an project which requires all the opened and closed issues, but the current version works for only opened issues.","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDM5OTM3MDMyNQ==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"repo.get_issues(state=\"closed\") # or state=\"all\" to return both \r\n\r\nBy default it will only return open issues.\r\n\r\nhttps://developer.github.com/v3/issues/#list-issues-for-a-repository","createdAt":"2018-06-22T08:48:22Z","includesCreatedEdit":true,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":2}}],"url":"https://github.com/PyGithub/PyGithub/issues/825#issuecomment-399370325","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQ3Mjc0NTUzOQ==","author":{"login":"Abdur-rahmaanJ"},"authorAssociation":"NONE","body":"ahh thank you! bit weird!","createdAt":"2019-03-14T08:10:13Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/825#issuecomment-472745539","viewerDidAuthor":false}],"createdAt":"2018-06-22T06:58:27Z","number":825,"state":"CLOSED","title":"How to get both closed and opened issues at a time","url":"https://github.com/PyGithub/PyGithub/issues/825"},{"author":{"id":"MDQ6VXNlcjYzOTIwMzc=","is_bot":false,"login":"BBI-YggyKing","name":"Yossarian King"},"body":"The GitHub API [limits searches to 1000 results](https://developer.github.com/v3/search/#about-the-search-api). This limit affects searches performed via PyGitHub, such as [GitHub.search_issues](https://pygithub.readthedocs.io/en/latest/github.html?highlight=search_issues).\r\n\r\nIt seems there is no indication that your search has hit this limit - there is no exception or error that I am aware of. Perhaps there should be an exception raised when this happens (if it can be detected).\r\n\r\nIt is possible to work around this limit by issuing multiple search queries, but such queries must be tailored to suit the particular goals of the query - for example iterating over search_issues by progressive date ranges - and I cannot think of a way to generalise this.\r\n\r\nAny thoughts on how to address this? Is there a general solution?\r\n\r\nNote that this issue has nothing to do with rate limiting or pagination of results.","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDM5ODk0MjE3MQ==","author":{"login":"BBI-YggyKing"},"authorAssociation":"CONTRIBUTOR","body":"Here is a workaround demonstrating how to retrieve all pull requests in a range of dates, even if there are more than 1000 results:\r\n\r\nEDIT: I will rewrite this to be a method that yields, rather than a class, will be simpler\r\n\r\n```\r\nclass PullRequestQuery:\r\n    def __init__(self, git, repo, since, until):\r\n        self.git = git\r\n        self.repo = repo\r\n        self.until = until\r\n        self.issues = self.__query(since, until)\r\n    \r\n    def __iter__(self):\r\n        skip = False\r\n        while True:\r\n            results = False\r\n            for issue in self.issues:\r\n                if not skip:\r\n                    results = True\r\n                    yield issue.as_pull_request()\r\n                skip = False\r\n            \r\n            # If no more results then stop iterating.\r\n            if not results:\r\n                break\r\n\r\n            # Start new query picking up where we left off. Previous issue will be first one returned, so skip it.\r\n            self.issues = self.__query(issue.closed_at.strftime('%Y-%m-%dT%H:%M:%SZ'), self.until)\r\n            skip = True\r\n        \r\n    def __query(self, since, until):\r\n        querystring = 'type:pr is:closed repo:%s/%s closed:\"%s..%s\"' % (self.repo.organization.login, self.repo.name, since, until)\r\n        return self.git.search_issues(query=querystring, sort=\"updated\", order=\"asc\")\r\n```\r\nWith this class, you can now do this sort of thing:\r\n```\r\ngit = Github(user, passwd)\r\norg = git.get_organization(orgname)\r\nrepo = org.get_repo(reponame)\r\nfor pull in PullRequestQuery(git, repo, \"2017-01-01\", \"2017-12-31\"):\r\n    print \"%s: %s\" % (pull.number, pull.title)\r\n```","createdAt":"2018-06-21T00:51:38Z","includesCreatedEdit":true,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":3}}],"url":"https://github.com/PyGithub/PyGithub/issues/824#issuecomment-398942171","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM5OTQyMTM3OA==","author":{"login":"mfonville"},"authorAssociation":"CONTRIBUTOR","body":"Reading the Github API docs about search, I also notice that `incomplete_results` is missing as part of the search-results processin in PyGithub. Probably including that value might also already help out with detecting if search results might be (in)complete.","createdAt":"2018-06-22T12:10:09Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":7}}],"url":"https://github.com/PyGithub/PyGithub/issues/824#issuecomment-399421378","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQwOTY0MDUyOA==","author":{"login":"BBI-YggyKing"},"authorAssociation":"CONTRIBUTOR","body":"Now that I have PyGithub forked and running locally from source (I'm looking at #606) perhaps I can investigate this further.","createdAt":"2018-08-01T16:42:21Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/824#issuecomment-409640528","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQyNTczNDM5Mg==","author":{"login":"stale"},"authorAssociation":"NONE","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","createdAt":"2018-09-30T16:49:35Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/824#issuecomment-425734392","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDU3OTk0NTM5OQ==","author":{"login":"djwgit"},"authorAssociation":"NONE","body":"re-open this issue ?  \r\nand for a general solution for other searches as well ","createdAt":"2020-01-29T20:30:43Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":13}}],"url":"https://github.com/PyGithub/PyGithub/issues/824#issuecomment-579945399","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDg1NDk3NTMzNg==","author":{"login":"Piuli"},"authorAssociation":"NONE","body":"Does anybody have a solution? This is blocking us from exploring the marketplace.","createdAt":"2021-06-04T20:14:15Z","includesCreatedEdit":true,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/824#issuecomment-854975336","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDg2MTI2ODMzOA==","author":{"login":"jtsai-quid"},"authorAssociation":"NONE","body":"Got the same problem in 1.55 😩","createdAt":"2021-06-15T07:47:06Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/824#issuecomment-861268338","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDg2MTc4NzExNQ==","author":{"login":"Piuli"},"authorAssociation":"NONE","body":"You can retrieve over 1,000 results by also following this method similar to what BBI-YggyKing mentioned, but this is without using the API. However, it may not return all of the results.\r\n\r\nhttps://stackoverflow.com/questions/67844111/how-can-i-scrape-more-than-1-000-results-from-github-marketplace/67991835#67991835","createdAt":"2021-06-15T19:51:58Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/824#issuecomment-861787115","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs5ir5QP","author":{"login":"oscarpobletes"},"authorAssociation":"NONE","body":"Check out https://github.com/oscarpobletes/GitHubMines !\r\n\r\nThis is an extraction tool that allows you to perform a search on GitHub and bypass some limits established by GitHub GraphQL API.","createdAt":"2023-07-28T13:19:51Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/824#issuecomment-1655673871","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs6U4Pdj","author":{"login":"Attacker23"},"authorAssociation":"NONE","body":"is there any solution of searching code?(not repo,issue or pr)","createdAt":"2024-11-25T11:38:03Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/824#issuecomment-2497771363","viewerDidAuthor":false}],"createdAt":"2018-06-21T00:48:16Z","number":824,"state":"CLOSED","title":"There is a limit of 1000 results per search.","url":"https://github.com/PyGithub/PyGithub/issues/824"},{"author":{"is_bot":true,"login":"app/"},"body":"Per the [docs](https://developer.github.com/v3/teams/members/#list-pending-team-invitations), it's just the following call:\r\n\r\n```\r\nGET /teams/:team_id/invitations\r\n```\r\n\r\nAs mentioned in a blog [post](https://developer.github.com/changes/2018-01-25-organization-invitation-api-preview/) earlier this year, there are two new fields added to the response:\r\n\r\n- team_count\r\n- invitation_teams_url\r\n\r\nThese new fields only appear in the response if the following header is added to the request:\r\n\r\n```\r\nAccept: application/vnd.github.dazzler-preview+json\r\n```\r\n\r\nSo I guess the only question would be whether or not to add the header? Given this is an existing endpoint, probably better to NOT include the header; then when Github moves the new \"feature\" (which includes the new fields) out of preview, it shows up in the response and PyGithub doesn't have to be changed to remove the above header.","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDM5ODU2ODU1MQ==","author":{"login":""},"authorAssociation":"NONE","body":"I'm happy to pick this up and work on it.","createdAt":"2018-06-19T22:39:49Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/823#issuecomment-398568551","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQxNDA5MTE3Ng==","author":{"login":"stale"},"authorAssociation":"NONE","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","createdAt":"2018-08-18T22:57:23Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/823#issuecomment-414091176","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQ0NjIxNDEwNA==","author":{"login":"shibasisp"},"authorAssociation":"CONTRIBUTOR","body":"I would like to work on this.","createdAt":"2018-12-11T14:07:05Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/823#issuecomment-446214104","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQ0NjIxNTI3MQ==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"Please","createdAt":"2018-12-11T14:10:46Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/823#issuecomment-446215271","viewerDidAuthor":false}],"createdAt":"2018-06-19T22:39:30Z","number":823,"state":"CLOSED","title":"Add support for pending team invitations","url":"https://github.com/PyGithub/PyGithub/issues/823"},{"author":{"id":"MDQ6VXNlcjc2MDUzMDc=","is_bot":false,"login":"eamanu","name":"Emmanuel Arias"},"body":"Hello everybody, \r\n\r\nI am creating a test case for the PR #809 \r\nTo do this, I created the GithubCredential.py the login and password variables with my user and password data. \r\n\r\nThen I run:\r\n_python -m github.tests PullRequest.testReviewDismiss --record_\r\n\r\nBut I have this error:\r\n```\r\n======================================================================\r\nERROR: testReviewDismiss (github.tests.PullRequest.PullRequest)\r\n----------------------------------------------------------------------\r\nTraceback (most recent call last):\r\n  File \"github/tests/PullRequest.py\", line 41, in setUp\r\n    self.repo = self.g.get_user().get_repo(\"PyGithub\")\r\n  File \"github/AuthenticatedUser.py\", line 890, in get_repo\r\n    \"/repos/\" + self.login + \"/\" + name\r\n  File \"github/AuthenticatedUser.py\", line 226, in login\r\n    self._completeIfNotSet(self._login)\r\n  File \"github/GithubObject.py\", line 259, in _completeIfNotSet\r\n    self._completeIfNeeded()\r\n  File \"github/GithubObject.py\", line 263, in _completeIfNeeded\r\n    self.__complete()\r\n  File \"github/GithubObject.py\", line 268, in __complete\r\n    self._url.value\r\n  File \"github/Requester.py\", line 258, in requestJsonAndCheck\r\n    return self.__check(*self.requestJson(verb, url, parameters, headers, input, cnx))\r\n  File \"github/Requester.py\", line 271, in __check\r\n    raise self.__createException(status, responseHeaders, output)\r\nGithubException: 401 {u'documentation_url': u'https://developer.github.com/v3/users/#get-the-authenticated-user', u'message': u'Requires authentication'}\r\n```\r\n\r\nWhat I am doing wrong?\r\nThanks!\r\nRegards","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDM5ODYwMzA4Mw==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"It's probably related to #795 and this [comment](https://github.com/PyGithub/PyGithub/pull/664#issuecomment-389964369)","createdAt":"2018-06-20T02:20:14Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/822#issuecomment-398603083","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM5OTYyNzE2MA==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"Now that #795 is merged. Can you try again with the latest master?","createdAt":"2018-06-23T03:31:46Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/822#issuecomment-399627160","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM5OTkyNzg4Mg==","author":{"login":"eamanu"},"authorAssociation":"NONE","body":"Ready!, I don't have the problem. I will continue working in the testcases.\r\nRegards!\r\nThanks!","createdAt":"2018-06-25T12:04:09Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":1}}],"url":"https://github.com/PyGithub/PyGithub/issues/822#issuecomment-399927882","viewerDidAuthor":false}],"createdAt":"2018-06-19T15:46:49Z","number":822,"state":"CLOSED","title":"Requires authentication problem on Test","url":"https://github.com/PyGithub/PyGithub/issues/822"},{"author":{"id":"MDQ6VXNlcjc0MjEwNA==","is_bot":false,"login":"jglapa","name":"Kuba"},"body":"Could this be added?\r\n\r\nSide note:\r\nIt might seem odd to remove a release but I'm backfiling releases in an old project and realized that I did it incorrectly and now have to cleanup.","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDM5NzQ0NTgwNg==","author":{"login":"mfonville"},"authorAssociation":"CONTRIBUTOR","body":"I think this should work, did you check if you can call `delete_release()` on a release?\r\nhttps://github.com/PyGithub/PyGithub/blob/master/github/GitRelease.py#L168","createdAt":"2018-06-14T21:34:35Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/819#issuecomment-397445806","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM5NzUzNjAzNg==","author":{"login":"jglapa"},"authorAssociation":"CONTRIBUTOR","body":"true, I couldn't find that method in the reference : https://pygithub.readthedocs.io/en/latest/github_objects/GitRelease.html#github.GitRelease.GitRelease","createdAt":"2018-06-15T07:21:14Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/819#issuecomment-397536036","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM5NzUzOTM2Ng==","author":{"login":"mfonville"},"authorAssociation":"CONTRIBUTOR","body":"I think the reference misses a lot of about the functions of GitRelease; if you or anyone would have time to update those docs, that'd be great","createdAt":"2018-06-15T07:37:01Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/819#issuecomment-397539366","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM5ODI1NjA0NQ==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"Indeed, a lot of documentation are missing.","createdAt":"2018-06-19T02:38:32Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/819#issuecomment-398256045","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQ5NDYyNTAwNw==","author":{"login":"hemanthsavasere"},"authorAssociation":"NONE","body":"Can anyone provide me the basic usage example of this library as I am a beginner?","createdAt":"2019-05-22T02:12:48Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/819#issuecomment-494625007","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQ5NDYyNTIyNA==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"@hemanthsavasere \r\nhttps://pygithub.readthedocs.io/en/latest/examples.html\r\n\r\nwill get you started.","createdAt":"2019-05-22T02:13:57Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/819#issuecomment-494625224","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQ5NDYzODI1NQ==","author":{"login":"hemanthsavasere"},"authorAssociation":"NONE","body":"Hi @sfdye,\r\nI looked into examples, I want to delete the release in Github after executing g.create_git_release(). I don't know how to proceed further.","createdAt":"2019-05-22T03:28:00Z","includesCreatedEdit":true,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/819#issuecomment-494638255","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQ5NDYzODUxNg==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"First get that release and then https://pygithub.readthedocs.io/en/latest/github_objects/GitRelease.html#github.GitRelease.GitRelease.delete_release","createdAt":"2019-05-22T03:29:31Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/819#issuecomment-494638516","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQ5NDY0MDMxMQ==","author":{"login":"hemanthsavasere"},"authorAssociation":"NONE","body":"Thanks, Can I add this usage example to the documentation part, as it was confusing for a beginner on how to use it.","createdAt":"2019-05-22T03:40:37Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/819#issuecomment-494640311","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQ5NDY0MDQ0OA==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"Sure, feel free to make a PR. Any improvements to the docs is welcomed :)","createdAt":"2019-05-22T03:41:39Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/819#issuecomment-494640448","viewerDidAuthor":false}],"createdAt":"2018-06-13T14:15:14Z","number":819,"state":"CLOSED","title":"Delete release operation missing","url":"https://github.com/PyGithub/PyGithub/issues/819"},{"author":{"id":"MDQ6VXNlcjU3ODU0Mw==","is_bot":false,"login":"webknjaz","name":"🇺🇦 Sviatoslav Sydorenko (Святослав Сидоренко)"},"body":"The lib is missing Migration API. It also requires custom `Accept: ` header.\r\n* https://developer.github.com/changes/2018-05-24-user-migration-api/\r\n* https://developer.github.com/v3/migrations/users/\r\n* https://developer.github.com/v3/migrations/orgs/","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDQxNzk1MzYxOQ==","author":{"login":"singh811"},"authorAssociation":"CONTRIBUTOR","body":"I would like to work on it.","createdAt":"2018-09-02T19:18:46Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":1}}],"url":"https://github.com/PyGithub/PyGithub/issues/818#issuecomment-417953619","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQ0OTMyNTExOQ==","author":{"login":"webknjaz"},"authorAssociation":"CONTRIBUTOR","body":"@sfdye any ETA on cutting a new release?","createdAt":"2018-12-21T09:15:19Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/818#issuecomment-449325119","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQ0OTMyNTM2NA==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"@webknjaz I will do it later","createdAt":"2018-12-21T09:15:59Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/818#issuecomment-449325364","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQ0OTMzMTU0Nw==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"@webknjaz done","createdAt":"2018-12-21T09:31:51Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"HOORAY","users":{"totalCount":1}}],"url":"https://github.com/PyGithub/PyGithub/issues/818#issuecomment-449331547","viewerDidAuthor":false}],"createdAt":"2018-06-12T16:54:31Z","number":818,"state":"CLOSED","title":"[FR] Migration API integration","url":"https://github.com/PyGithub/PyGithub/issues/818"},{"author":{"id":"MDQ6VXNlcjIwNTE5NTEx","is_bot":false,"login":"bvsriram","name":""},"body":"Trying to get issues assigned to a milestone but says \r\n\r\n```\r\nFile \"/usr/local/lib/python3.5/dist-packages/github/Repository.py\", line 1692, in get_issues\r\n    assert milestone is github.GithubObject.NotSet or milestone == \"*\" or milestone == \"none\" or isinstance(milestone, github.Milestone.Milestone), milestone\r\n```\r\n\r\n\r\nHere's what I have now\r\n```\r\nmiles = {}\r\nfor mile_ver in repo1.get_milestones(state=\"open\"):\r\n  miles.update({mile_ver.title:mile_ver})\r\n\r\ndef issues(param1):\r\n   for issue in repo1.get_issues(milestone=param1, sort='created', direction='asc', state=\"closed\"):\r\n     <do stuff here>\r\nreturn \r\n```\r\n\r\nI am passing the milestone name into param1. If i `print(param1)` after def it shows the milestone name but doesn't pass it to get_issues()\r\n\r\nTried whats mentioned in #683 but didn't work. Any suggestions?","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDM5ODI2MzQ3OA==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"@bvsriram Sorry could not understand your issue, could you elaborate a bit more? more complete example if possible","createdAt":"2018-06-19T03:32:03Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/817#issuecomment-398263478","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQxNDAzMDIwOQ==","author":{"login":"stale"},"authorAssociation":"NONE","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","createdAt":"2018-08-18T03:57:25Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/817#issuecomment-414030209","viewerDidAuthor":false}],"createdAt":"2018-06-11T19:55:31Z","number":817,"state":"CLOSED","title":"Unable to list issues passing milestone as parameter","url":"https://github.com/PyGithub/PyGithub/issues/817"},{"author":{"id":"MDQ6VXNlcjU3ODU0Mw==","is_bot":false,"login":"webknjaz","name":"🇺🇦 Sviatoslav Sydorenko (Святослав Сидоренко)"},"body":"The lib is missing Checks API. If someone is up to implementing wrappers for it, I've got some example code.\r\n\r\nI wrote a CLI for this API https://pypi.org/p/check-in and here's how I hack around missing methods (+custom Accept header):\r\nhttps://github.com/webknjaz/check-in/blob/4d11a0a/check_in/github_api.py#L35-L65","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDU0NDEzNzYwMg==","author":{"login":"atmishra"},"authorAssociation":"NONE","body":"Hi, I would like to work on this.","createdAt":"2019-10-19T12:14:03Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/813#issuecomment-544137602","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDU2NDI1MTM1NA==","author":{"login":"hawkins"},"authorAssociation":"NONE","body":"@atmishra Did you ever wind up making a PR for this or hitting a roadblock? I'm also in need of this API and could support.","createdAt":"2019-12-10T20:48:43Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/813#issuecomment-564251354","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDYyMjIxODIxMA==","author":{"login":"s-t-e-v-e-n-k"},"authorAssociation":"COLLABORATOR","body":"Closing in favour of #1063.","createdAt":"2020-05-01T02:27:34Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/813#issuecomment-622218210","viewerDidAuthor":false}],"createdAt":"2018-06-08T09:58:02Z","number":813,"state":"CLOSED","title":"[FR] Checks API integration","url":"https://github.com/PyGithub/PyGithub/issues/813"},{"author":{"id":"MDQ6VXNlcjk5NDkxODQ=","is_bot":false,"login":"silburt","name":"Ari Silburt"},"body":"Is there a way to get a list of topics associated with a given github repo? From here - https://pygithub.readthedocs.io/en/latest/apis.html - it doesn't seem like there's an API for that. For example, in one of my own repos - https://github.com/silburt/DeepMoon - how would I obtain: \r\n\"convnet\r\ntensorflow\r\nmoon\r\ndeep\r\nlearning\r\nastrophysics\r\nkeras\" \r\n\r\nThanks very much,\r\n\r\nAri","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDM5NTYxNTc1OA==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"See #635","createdAt":"2018-06-08T01:20:48Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/812#issuecomment-395615758","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQwNDAwODEyOA==","author":{"login":"wyardley"},"authorAssociation":"CONTRIBUTOR","body":"FYI, this is now merged via #832 ","createdAt":"2018-07-11T00:35:56Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/812#issuecomment-404008128","viewerDidAuthor":false}],"createdAt":"2018-06-07T14:59:16Z","number":812,"state":"CLOSED","title":"Get topics of a repo?","url":"https://github.com/PyGithub/PyGithub/issues/812"},{"author":{"id":"MDQ6VXNlcjMwNzEyNDA4","is_bot":false,"login":"jpmartins201","name":"João Pedro"},"body":"https://github.com/fga-gpp-mds/2018.1-Cardinals - a website that shows metrics for any public repository (issues, commits, pull requests etc)","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDM5NTI3NjQzMg==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"@jpmartins201 Hi thanks, it will be easier if you can make a PR.","createdAt":"2018-06-07T02:53:52Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/811#issuecomment-395276432","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM5NTczOTMwMw==","author":{"login":"webknjaz"},"authorAssociation":"CONTRIBUTOR","body":"@sfdye I think the doc should be changed to encourage users to create PRs instead of issues, then.","createdAt":"2018-06-08T11:58:54Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/811#issuecomment-395739303","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM5NTc2NzI0NQ==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"You are right, will fix that ;)\n\n________________________________\nFrom: Sviatoslav Sydorenko <notifications@github.com>\nSent: Friday, June 8, 2018 7:59:08 PM\nTo: PyGithub/PyGithub\nCc: Wan Liuyang; Mention\nSubject: Re: [PyGithub/PyGithub] Project using pygithub - Cardinals (#811)\n\n\n@sfdye<https://github.com/sfdye> I think the doc should be changed to encourage users to create PRs instead of issues, then.\n\n—\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub<https://github.com/PyGithub/PyGithub/issues/811#issuecomment-395739303>, or mute the thread<https://github.com/notifications/unsubscribe-auth/AA-CRuUtV1-WPd2qQqnKCxoHHYZBXCFoks5t6mcMgaJpZM4Udnj->.\n","createdAt":"2018-06-08T13:52:07Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/811#issuecomment-395767245","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM5NTgxOTE4NQ==","author":{"login":"webknjaz"},"authorAssociation":"CONTRIBUTOR","body":"btw, I've followed this suggestion from the beginning --> #814","createdAt":"2018-06-08T16:45:03Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/811#issuecomment-395819185","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM5NjQ1NTUyOQ==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"Closed in #815","createdAt":"2018-06-12T03:38:01Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/811#issuecomment-396455529","viewerDidAuthor":false}],"createdAt":"2018-06-07T01:56:25Z","number":811,"state":"CLOSED","title":"Project using pygithub - Cardinals","url":"https://github.com/PyGithub/PyGithub/issues/811"},{"author":{"id":"MDQ6VXNlcjI1NzcwNTk=","is_bot":false,"login":"StrikeNP","name":"Nicolas Strike"},"body":"When attempting to use the api to upload a number of comments to GitHub issues, I received the following Exception \r\n`github.GithubException.GithubException: 403 {u'documentation_url': u'https://developer.github.com/v3/#abuse-rate-limits', u'message': u'You have triggered an abuse detection mechanism and have been temporarily blocked from content creation. Please retry your request again later.'}`\r\nHowever, I know I haven't actually hit my rate limit because right before the crashing line was called, I could see my Req Limit/Remaining values:\r\n`Req Limit: 5000, Req Remaining: 4868`\r\nThe ReqRemaining value was steadily decreasing, as I was only making one API call per second. Obviously something is not being outputted properly, even if I am receiving a legitimate 403 HTTP code, it is not associated with my rate limit.","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDM5NDc1MjQ1MQ==","author":{"login":"mfonville"},"authorAssociation":"CONTRIBUTOR","body":"This is known and described in the GitHub documentation that even next to the official RateLimit, they have implemented some extra anti-abuse limits, and they are much more strict since around March this year. They especially apply extra limits to calls that create content.\r\n\r\nGitHub says in their docs that some responses should include a `Retry-After` header, that specifies the seconds to wait before a next request. And one should never do more than 1 request per second.\r\n\r\nAlso they specify that creating content which triggers notifications, such as issues, comments and pull requests are even more strictly rate limited, but do not give the  `Retry-After` header.\r\n\r\nFor PyGitHub the `Retry-After` should still be implemented afaik.\r\n\r\nFor your own app, you should put some waiting time between the calls that create the comments. I'd expect something like one every 30 or 60 seconds; and letting the script back off for a couple of minutes if it receives the 403.","createdAt":"2018-06-05T15:25:56Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/810#issuecomment-394752451","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM5NDc2NTU2Mw==","author":{"login":"StrikeNP"},"authorAssociation":"NONE","body":"Hmm, I have a `sleep(1)` command running before each of my API calls, and would have thought that this would be enough. I know it mentions that certain functions like content creation may have differnt rate limits, but it also mentioned the only rate I should target is the 5000/hr (I'm authenticated) so I didn't worry about it. I'll try easing the reigns on the script even more, it's just not ideal as now it'll take an ungodly long time to run... since it's importing 20 years of Trac tickets over to GitHub issues (originally at 1 API call/ sec).\r\n\r\nThanks for the reply\r\n\r\n\r\nUpdate: I was able to get past this issue by setting a high sleep timer and working downwards. So far I've been able to get it working with a timer down to sleep(2), thank for your patience :).","createdAt":"2018-06-05T16:01:26Z","includesCreatedEdit":true,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/810#issuecomment-394765563","viewerDidAuthor":false}],"createdAt":"2018-06-05T13:54:43Z","number":810,"state":"CLOSED","title":"Recieving False ErrCode 403 \"Rate Limit Exceeded\"","url":"https://github.com/PyGithub/PyGithub/issues/810"},{"author":{"id":"MDQ6VXNlcjMwNzEyNDA4","is_bot":false,"login":"jpmartins201","name":"João Pedro"},"body":"Trying to receive the number of issues from a repository but the operation fails because the timeout limit was exceeded. No problems with my internet connection, the repository has 50+ issues. Any ideas?","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDM5Mzc0Mjg3MQ==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"Can you post the code example and detailed error message?","createdAt":"2018-06-01T02:51:10Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/808#issuecomment-393742871","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM5NTAyMDAzMA==","author":{"login":"Aerlinger"},"authorAssociation":"NONE","body":"I'm having a very similar issue.\r\n\r\nSample code:\r\n\r\n```python\r\nfrom github import Github\r\n\r\ng = Github()\r\n\r\ngh_repo = g.get_repo(\"rails/rails\")\r\n\r\ngh_issues = gh_repo.get_issues()\r\n\r\nissues = []\r\n\r\n# number\r\n# user\r\n# url\r\n# Title\r\n# Label\r\n# State\r\n# Comment count\r\n# Assignee\r\n# Assignees\r\n# Created at\r\n# Closed at\r\nfor issue in gh_issues:\r\n  print(issue.title)\r\n  issues.append({\r\n    'number': issue.number,\r\n    'user': issue.user,\r\n    'url': issue.url,\r\n    'title': issue.title,\r\n    'labels': issue.labels,\r\n    'state': issue.state,\r\n    'comment_count': issue.comments,\r\n    'assignee': issue.assignee,\r\n    'assignees': issue.assignees,\r\n    'created_at': issue.created_at,\r\n    'closed_at': issue.closed_at\r\n  })\r\n\r\nimport pandas as pd\r\n\r\npd_issues = pd.DataFrame(issues)\r\n\r\npd_issues.to_pickle(\"issues\")\r\n```\r\n\r\nError w/ stack trace:\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"/Users/erlinger/Library/Application Support/IntelliJIdea2018.1/python/helpers/pydev/pydevd.py\", line 1664, in <module>\r\n    main()\r\n  File \"/Users/erlinger/Library/Application Support/IntelliJIdea2018.1/python/helpers/pydev/pydevd.py\", line 1658, in main\r\n    globals = debugger.run(setup['file'], None, None, is_module)\r\n  File \"/Users/erlinger/Library/Application Support/IntelliJIdea2018.1/python/helpers/pydev/pydevd.py\", line 1068, in run\r\n    pydev_imports.execfile(file, globals, locals)  # execute the script\r\n  File \"/Users/erlinger/Library/Application Support/IntelliJIdea2018.1/python/helpers/pydev/_pydev_imps/_pydev_execfile.py\", line 18, in execfile\r\n    exec(compile(contents+\"\\n\", file, 'exec'), glob, loc)\r\n  File \"/Users/erlinger/code/AMP/amp-issues-tracking/github/analyze_issues.py\", line 22, in <module>\r\n    for issue in gh_issues:\r\n  File \"/Users/erlinger/.pyenv/versions/3.6.1/lib/python3.6/site-packages/github/PaginatedList.py\", line 58, in __iter__\r\n    newElements = self._grow()\r\n  File \"/Users/erlinger/.pyenv/versions/3.6.1/lib/python3.6/site-packages/github/PaginatedList.py\", line 70, in _grow\r\n    newElements = self._fetchNextPage()\r\n  File \"/Users/erlinger/.pyenv/versions/3.6.1/lib/python3.6/site-packages/github/PaginatedList.py\", line 172, in _fetchNextPage\r\n    headers=self.__headers\r\n  File \"/Users/erlinger/.pyenv/versions/3.6.1/lib/python3.6/site-packages/github/Requester.py\", line 185, in requestJsonAndCheck\r\n    return self.__check(*self.requestJson(verb, url, parameters, headers, input, cnx))\r\n  File \"/Users/erlinger/.pyenv/versions/3.6.1/lib/python3.6/site-packages/github/Requester.py\", line 231, in requestJson\r\n    return self.__requestEncode(cnx, verb, url, parameters, headers, input, encode)\r\n  File \"/Users/erlinger/.pyenv/versions/3.6.1/lib/python3.6/site-packages/github/Requester.py\", line 284, in __requestEncode\r\n    status, responseHeaders, output = self.__requestRaw(cnx, verb, url, requestHeaders, encoded_input)\r\n  File \"/Users/erlinger/.pyenv/versions/3.6.1/lib/python3.6/site-packages/github/Requester.py\", line 309, in __requestRaw\r\n    requestHeaders\r\n  File \"/Users/erlinger/.pyenv/versions/3.6.1/lib/python3.6/http/client.py\", line 1239, in request\r\n    self._send_request(method, url, body, headers, encode_chunked)\r\n  File \"/Users/erlinger/.pyenv/versions/3.6.1/lib/python3.6/http/client.py\", line 1285, in _send_request\r\n    self.endheaders(body, encode_chunked=encode_chunked)\r\n  File \"/Users/erlinger/.pyenv/versions/3.6.1/lib/python3.6/http/client.py\", line 1234, in endheaders\r\n    self._send_output(message_body, encode_chunked=encode_chunked)\r\n  File \"/Users/erlinger/.pyenv/versions/3.6.1/lib/python3.6/http/client.py\", line 1026, in _send_output\r\n    self.send(msg)\r\n  File \"/Users/erlinger/.pyenv/versions/3.6.1/lib/python3.6/http/client.py\", line 964, in send\r\n    self.connect()\r\n  File \"/Users/erlinger/.pyenv/versions/3.6.1/lib/python3.6/http/client.py\", line 1400, in connect\r\n    server_hostname=server_hostname)\r\n  File \"/Users/erlinger/.pyenv/versions/3.6.1/lib/python3.6/ssl.py\", line 401, in wrap_socket\r\n    _context=self, _session=session)\r\n  File \"/Users/erlinger/.pyenv/versions/3.6.1/lib/python3.6/ssl.py\", line 808, in __init__\r\n    self.do_handshake()\r\n  File \"/Users/erlinger/.pyenv/versions/3.6.1/lib/python3.6/ssl.py\", line 1061, in do_handshake\r\n    self._sslobj.do_handshake()\r\n  File \"/Users/erlinger/.pyenv/versions/3.6.1/lib/python3.6/ssl.py\", line 683, in do_handshake\r\n    self._sslobj.do_handshake()\r\nsocket.timeout: _ssl.c:733: The handshake operation timed out\r\n```","createdAt":"2018-06-06T10:20:01Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/808#issuecomment-395020030","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM5NTI3MTMyMQ==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"What version of PyGithub are you guys using?","createdAt":"2018-06-07T02:19:06Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/808#issuecomment-395271321","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM5NTY2MDI0MQ==","author":{"login":"abilash13"},"authorAssociation":"NONE","body":"We face the same issue as well. We are fetching all the issues from one of our repos (around 400 issues) and we get a socket timeout error as well. We are using version 1.39.","createdAt":"2018-06-08T06:22:37Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/808#issuecomment-395660241","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM5ODI0NDExMg==","author":{"login":"jpmartins201"},"authorAssociation":"CONTRIBUTOR","body":"@sfdye it would be great if you could try and solve this problem, we are running out of time in a course from college - our project needs to be done due to the end of this semester - and this issue is stopping us a lot.","createdAt":"2018-06-19T01:20:01Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/808#issuecomment-398244112","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM5ODI1NTgwOQ==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"Can you guys try the latest alpha version? see if it can solve the problem\r\n\r\npip install --pre --upgrade PyGithub","createdAt":"2018-06-19T02:36:52Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/808#issuecomment-398255809","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQwMDAwNjI3OQ==","author":{"login":"jpmartins201"},"authorAssociation":"CONTRIBUTOR","body":"This version made the requisitions a bit faster but it's still slow compared to the expected for a website. ","createdAt":"2018-06-25T16:05:50Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/808#issuecomment-400006279","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQxNTgxODEwOQ==","author":{"login":"stale"},"authorAssociation":"NONE","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","createdAt":"2018-08-24T16:54:18Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/808#issuecomment-415818109","viewerDidAuthor":false}],"createdAt":"2018-05-29T14:30:40Z","number":808,"state":"CLOSED","title":"Timeout exception in request for Issues (created and closed) from a Repository ","url":"https://github.com/PyGithub/PyGithub/issues/808"},{"author":{"id":"MDQ6VXNlcjEyMjA1MzE1","is_bot":false,"login":"Jonas-Carvalho","name":"Jonas Carsi"},"body":"","comments":[],"createdAt":"2018-05-28T19:48:19Z","number":806,"state":"CLOSED","title":"t api","url":"https://github.com/PyGithub/PyGithub/issues/806"},{"author":{"id":"MDQ6VXNlcjE5MzE3NDE2","is_bot":false,"login":"MattAlp","name":"Matt"},"body":"I currently have some code where a set of label strings is stored in a Python list, and a Repository object obtained through the `search_repositories` method of the `github` object; the method `repo.get_issues()` specifies that a list of `Label `objects can be passed in to limit the issues that come up.\r\n\r\nAfter some searching, I have not found a way to create a Label object from a desired string, and have resorted to creating a list comprehension:\r\n\r\n `labels = [label for label in repo.get_labels() if label.name in json_repo[\"code_labels\"]]`.\r\n\r\nIs there a better or official way to create the label objects for the search? Thank you.","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDM5MTkzNTMxOQ==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"Maybe use the `repo.get_label()`?\r\n\r\nsomething like this:\r\n```\r\nlabels = [repo.get_label(label_name) for label_name in json_repo[\"code_labels\"]]\r\n```\r\n","createdAt":"2018-05-25T04:07:09Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"HEART","users":{"totalCount":1}}],"url":"https://github.com/PyGithub/PyGithub/issues/805#issuecomment-391935319","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM5MjI3MzEwMg==","author":{"login":"MattAlp"},"authorAssociation":"NONE","body":"This is perfect, thank you!","createdAt":"2018-05-26T16:42:39Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"HOORAY","users":{"totalCount":1}}],"url":"https://github.com/PyGithub/PyGithub/issues/805#issuecomment-392273102","viewerDidAuthor":false}],"createdAt":"2018-05-24T23:10:02Z","number":805,"state":"CLOSED","title":"Search repository by label?","url":"https://github.com/PyGithub/PyGithub/issues/805"},{"author":{"id":"MDQ6VXNlcjY5MjI3MDk=","is_bot":false,"login":"ahmad88me","name":"Ahmad Alobaid"},"body":"Hello Guys, \r\n    Are you planning to support version 4 of GitHub APIs? I would like to contribute in the development if so.\r\n\r\nThanks,\r\n","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDM5MTkzMTM1NA==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"Version 4 is GraphQL if I am not wrong. This library is only for v3 which is REST API. If you want to contribute to v4, I suggest you look for a GraphQL library instead.","createdAt":"2018-05-25T03:33:00Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/804#issuecomment-391931354","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM5MzYxMDkyMw==","author":{"login":"YakDriver"},"authorAssociation":"CONTRIBUTOR","body":"Note that the GraphQL API (v4) is still very basic regarding mutations. The type of functionality that PyGithub provides could not be done with pure v4 yet. Here are examples of mutations that aren't available:\r\n\r\n- Create/edit/delete repositories\r\n- Create/edit/delete releases\r\n- Create/update/merge pull requests\r\n- Create tags\r\n- Create files/blobs\r\n\r\nhttps://stackoverflow.com/questions/49944137/few-mutations-in-github-api-v4-graphql","createdAt":"2018-05-31T17:30:08Z","includesCreatedEdit":true,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":2}}],"url":"https://github.com/PyGithub/PyGithub/issues/804#issuecomment-393610923","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs5t2ZrY","author":{"login":"EnricoMi"},"authorAssociation":"COLLABORATOR","body":"PyGithub now has its first GraphQL call, see https://github.com/PyGithub/PyGithub/commit/232df79a2947dc96363bdc6f51a6f446ff2b241f#diff-90017b18548bd848900b7cffd7fe86a610dc20e5d228663dfb429a47cdf65a20R767-R772 for reference.","createdAt":"2023-12-06T14:18:11Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/804#issuecomment-1842977496","viewerDidAuthor":false}],"createdAt":"2018-05-24T12:35:36Z","number":804,"state":"CLOSED","title":"any plans for version 4?","url":"https://github.com/PyGithub/PyGithub/issues/804"},{"author":{"id":"MDQ6VXNlcjIyNzkyOTk=","is_bot":false,"login":"mkj28","name":"Michal Matyjek"},"body":"This works:\r\n`curl -G -H \"Authorization: token myToken\" https://api.github.com/search/issues?q=repo:myOrg/myPrivateRepo+is:closed`\r\n\r\nBut when I do this:\r\n```python\r\ng = Github(myToken)\r\n    for i in g.search_issues('repo:myOrg/myPrivateRepo+is:closed'):\r\n        print(i.title)\r\n```\r\n\r\nI get: `'The listed users and repositories cannot be searched either because the resources do not exist or you do not have permission to view them.'`\r\n\r\n\r\nBut when I drop the `+` from query it works:\r\n```python\r\ng = Github(myToken)\r\n    for i in g.search_issues('repo:myOrg/myPrivateRepo'):\r\n        print(i.title)\r\n```","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDM5MTU4MjY3Nw==","author":{"login":"mkj28"},"authorAssociation":"NONE","body":"Ugh... ok have to use ` ` as separator:\r\n`g.search_issues('repo:myOrg/myPrivateRepo is:closed'`","createdAt":"2018-05-24T04:15:16Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":8}}],"url":"https://github.com/PyGithub/PyGithub/issues/802#issuecomment-391582677","viewerDidAuthor":false}],"createdAt":"2018-05-24T04:07:48Z","number":802,"state":"CLOSED","title":"search_issues: I am having issues with query parameters","url":"https://github.com/PyGithub/PyGithub/issues/802"},{"author":{"id":"MDQ6VXNlcjQ5MzQxNjc=","is_bot":false,"login":"zkurtz","name":"Zach Kurtz"},"body":"The command runs with no warnings, but `import github` subsequently complains that there is no such module.\r\n\r\nBy contrast, cloning and installing as `python setup.py develop` works fine. But it would be nice to be able to skip the cloning step.\r\n\r\nI'm on OSX 10.13.04.","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDM5NDc3MTgxMQ==","author":{"login":"eamanu"},"authorAssociation":"NONE","body":"what is the version of  your pip?","createdAt":"2018-06-05T16:20:09Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/800#issuecomment-394771811","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM5NjAxNzQ2MQ==","author":{"login":"zkurtz"},"authorAssociation":"NONE","body":"Must have been old. Everything is working now.","createdAt":"2018-06-10T03:36:29Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/800#issuecomment-396017461","viewerDidAuthor":false}],"createdAt":"2018-05-20T19:27:10Z","number":800,"state":"CLOSED","title":"`pip install pygithub` failing","url":"https://github.com/PyGithub/PyGithub/issues/800"},{"author":{"id":"MDQ6VXNlcjMxNDkyNDIy","is_bot":false,"login":"YakDriver","name":"Dirk Avery"},"body":"Satsuki (pronounced SAHT-ski) is a Python package that helps manage GitHub releases and release assets. Satsuki is especially useful paired with Continuous Integration/Continuous Deployment (CI/CD) tools such as Travis CI and AppVeyor.\r\n\r\n[Satsuki GitHub](https://github.com/YakDriver/satsuki)\r\n[Satsuki PyPI](https://pypi.org/project/satsuki/)","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDM5MDUzNjA2NA==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"Added.","createdAt":"2018-05-21T02:23:32Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":1}}],"url":"https://github.com/PyGithub/PyGithub/issues/798#issuecomment-390536064","viewerDidAuthor":false}],"createdAt":"2018-05-18T14:15:42Z","number":798,"state":"CLOSED","title":"NEW Project using PyGithub: Satsuki","url":"https://github.com/PyGithub/PyGithub/issues/798"},{"author":{"id":"MDQ6VXNlcjM5NTg0MQ==","is_bot":false,"login":"time4tea","name":"James Richardson"},"body":"\r\nMissing `_` means stack overflow as property accessor calls itself indefinitely.\r\n\r\nShould be `self._description.value` I suspect. \r\n\r\nDue to client open source policy I cannot submit a PR.\r\n\r\nTeam.py\r\n```python\r\n    @property\r\n    def description(self):\r\n        \"\"\"\r\n        :type: string\r\n        \"\"\"\r\n        self._completeIfNotSet(self._description)\r\n        return self.description.value\r\n```","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDM5MDE3NTUzNw==","author":{"login":"mfonville"},"authorAssociation":"CONTRIBUTOR","body":"Seems indeed a trivial typo, made a PR for it.","createdAt":"2018-05-18T11:14:05Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":1}}],"url":"https://github.com/PyGithub/PyGithub/issues/796#issuecomment-390175537","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM5MDUzNjk2MA==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"Thanks @time4tea for reporting and @mfonville for fixing it!","createdAt":"2018-05-21T02:31:04Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/796#issuecomment-390536960","viewerDidAuthor":false}],"createdAt":"2018-05-18T08:48:52Z","number":796,"state":"CLOSED","title":"stack overflow for Team.description ","url":"https://github.com/PyGithub/PyGithub/issues/796"},{"author":{"id":"MDQ6VXNlcjE2MzczMzg0","is_bot":false,"login":"Chrislevi","name":"Chris Levi"},"body":"is there a method to create a pull request with the original repo as the base and a forked branch as the head? \r\n\r\nI tried this line, but it threw a 'Validation Error'\r\n`repo.create_pull(\"Title\", \"Body\", '{}:{}'.format(original_repo, master), '{}:{}'.format(forked_user, feature), True)`","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDM4OTYzOTgzOQ==","author":{"login":"mfonville"},"authorAssociation":"CONTRIBUTOR","body":"I think the way you wanted this, it's not possible when reading the API at https://developer.github.com/v3/pulls/#input for the `base` you can only pass a branch of the repository you are creating the PR on.\r\n\r\nSo you can only do:\r\n```python\r\noriginal_repo.create_pull(\"Title\", \"Body\", '{}'.format(master), '{}:{}'.format(forked_user, feature), True)\r\n```","createdAt":"2018-05-16T19:35:36Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":5}},{"content":"HOORAY","users":{"totalCount":1}}],"url":"https://github.com/PyGithub/PyGithub/issues/792#issuecomment-389639839","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQ1MTczMTM2Mg==","author":{"login":"evandrocoan"},"authorAssociation":"NONE","body":"Just clarifying, I tried this and ended up backwards.\r\n\r\nFrom fork `evandroforks` to upstream `tox-dev` you should do:\r\n```python\r\nupstream_user = github_api.get_user('tox-dev')\r\nupstream_repo = upstream_user.get_repo('tox')\r\n\r\nupstream_pullrequest = upstream_repo.create_pull(\"Title\", \"Body\", 'master', \r\n          '{}:{}'.format('evandroforks', 'master'), True)\r\n```\r\n\r\nFrom upstream `tox-dev` to fork `evandroforks` you should do:\r\n```python\r\nfork_user = github_api.get_user('evandroforks')\r\nfork_repo = fork_user.get_repo('tox')\r\n\r\nfork_pullrequest = fork_repo.create_pull(\"Title\", \"Body\", 'master', \r\n          '{}:{}'.format('tox-dev', 'master'), False)\r\n```","createdAt":"2019-01-06T10:35:49Z","includesCreatedEdit":true,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":7}}],"url":"https://github.com/PyGithub/PyGithub/issues/792#issuecomment-451731362","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs49Yfun","author":{"login":"edwardchalstrey1"},"authorAssociation":"NONE","body":"Can this issue be reopened? It would be a nice feature to have","createdAt":"2022-02-04T10:13:21Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/792#issuecomment-1029831591","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs49bDL3","author":{"login":"evandrocoan"},"authorAssociation":"NONE","body":"@edwardchalstrey1 , I am already using this to create pull-requests from my forks the original repositories. here is the code: https://github.com/evandrocoan/githubpullrequests/blob/61e583f2247d252633d7a17f3345acadaf707dd6/source/githubpullrequests/__init__.py#L359\r\n\r\nThis is an example pull-request created with it: https://github.com/evandroforks/vscode-textmate/pull/2\r\n\r\nPerhaps you are trying to do something else?","createdAt":"2022-02-05T02:16:32Z","includesCreatedEdit":true,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":2}}],"url":"https://github.com/PyGithub/PyGithub/issues/792#issuecomment-1030501111","viewerDidAuthor":false}],"createdAt":"2018-05-16T18:29:07Z","number":792,"state":"CLOSED","title":"create PullRequest between forked repo to original","url":"https://github.com/PyGithub/PyGithub/issues/792"},{"author":{"id":"MDQ6VXNlcjEwNTM2NTEx","is_bot":false,"login":"shane-gearon-hs","name":"shane-gearon-hs"},"body":"The path variable should be preceded by a forward slash to create a valid url for the PUT call.\r\n\r\nSteps to Reproduce:\r\ngithub.get_repo(\"my_repo\").update_file(\"README.md\", \"Updating readme.\", base64.b64encode(content), sha)\r\n\r\nResult:\r\nhttps://github.com/api/v3/repos/my_repo/contentsREADME.md\r\n\r\nExpected Result:\r\nhttps://github.com/api/v3/repos/my_repo/contents/README.md\r\n\r\nLooks like it's happening here.\r\nhttps://github.com/PyGithub/PyGithub/blob/master/github/Repository.py#L1504\r\n\r\n","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDM5MDA4NzU1Ng==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"It seems for some historical reasons, the path has to include the `/` (although it's contradictory to the API). Also you don't need to encode the content, this library does it for you.\r\n\r\nSo this:\r\n`github.get_repo(\"my_repo\").update_file(\"/README.md\", \"Updating readme.\", content, sha)` should work.","createdAt":"2018-05-18T04:00:44Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/786#issuecomment-390087556","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM5MDE4MDM2OQ==","author":{"login":"mfonville"},"authorAssociation":"CONTRIBUTOR","body":"I think it might be practical to harden PyGithub a bit, and try to detect if a `path` value starts with a `/`, and either reject any input that does not start with a `/` or to add it to the start of the string internally within PyGithub.","createdAt":"2018-05-18T11:37:02Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/786#issuecomment-390180369","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQwNTU2NDgxNQ==","author":{"login":"stale"},"authorAssociation":"NONE","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","createdAt":"2018-07-17T12:29:00Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/786#issuecomment-405564815","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQwODQ2NTgxMA==","author":{"login":"mfonville"},"authorAssociation":"CONTRIBUTOR","body":"Pity stale bot closed this issue. I think the least we should do is add an assert that checks if the first character is `/` in the method.","createdAt":"2018-07-27T16:09:39Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":1}}],"url":"https://github.com/PyGithub/PyGithub/issues/786#issuecomment-408465810","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQzMDA3OTY0OA==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"@mfonville this is a great idea.","createdAt":"2018-10-16T02:33:00Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/786#issuecomment-430079648","viewerDidAuthor":false}],"createdAt":"2018-05-08T23:59:47Z","number":786,"state":"CLOSED","title":"update_file doesn't add the trailing slash after contents","url":"https://github.com/PyGithub/PyGithub/issues/786"},{"author":{"id":"MDQ6VXNlcjg0NzA3Mg==","is_bot":false,"login":"grayaii","name":"Alex Gray"},"body":"I have MFA enabled for my account.\r\n\r\ng = Github(\"my_email\", \"my_password\")\r\norg = g.get_organization('my_org')\r\n```\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"/Users/foo/.virtualenvs/skippy/lib/python3.4/site-packages/github/MainClass.py\", line 198, in get_organization\r\n    \"/orgs/\" + login\r\n  File \"/Users/foo/.virtualenvs/skippy/lib/python3.4/site-packages/github/Requester.py\", line 172, in requestJsonAndCheck\r\n    return self.__check(*self.requestJson(verb, url, parameters, headers, input, cnx))\r\n  File \"/Users/foo/.virtualenvs/skippy/lib/python3.4/site-packages/github/Requester.py\", line 180, in __check\r\n    raise self.__createException(status, responseHeaders, output)\r\ngithub.GithubException.TwoFactorException: 401 {'documentation_url': 'https://developer.github.com/v3/auth#working-with-two-factor-authentication', 'message': 'Must specify two-factor authentication OTP code.'}\r\n```\r\n\r\nI have my phone with my 6 digits rotating number, but where do I put it?\r\nSorry for the silly question, but I'm just getting my feet wet with Two Factor Authentication.\r\n","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDM4NTk3NzM5Ng==","author":{"login":"grayaii"},"authorAssociation":"NONE","body":"OMG! Duh. I figured it out. lol.\r\nIn github, go to settings, then Developer Settings, then Personal Access Tokens.\r\nOnce generated, I can:\r\ng = Github(\"token\")\r\norg = g.get_organization('my_org')","createdAt":"2018-05-02T13:28:28Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/781#issuecomment-385977396","viewerDidAuthor":false}],"createdAt":"2018-05-02T13:18:10Z","number":781,"state":"CLOSED","title":"Two Factor: How Do I Use It?","url":"https://github.com/PyGithub/PyGithub/issues/781"},{"author":{"id":"MDQ6VXNlcjI5OTI4NzIw","is_bot":false,"login":"gnogueira-daitan","name":"Guilherme Nogueira"},"body":"Hi, I'm trying to search commits by:\r\n\r\n\r\n```\r\n    g = Github(\"zzz\")\r\n    a = g.search_commits(query=\"author:gnogueira\")\r\n    for x in a:\r\n        print(x.last_modified)\r\n```\r\n\r\nThe return of this function gives me a correct last_modified but when I try to access this property, None is returned.\r\n\r\nHow can I solve it?\r\n","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDM4NjQ3OTUxOA==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"Possible duplicate of #773 , can you confirm? @gnogueira-daitan ","createdAt":"2018-05-04T00:52:45Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/780#issuecomment-386479518","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM4NjY2Mjg1Mw==","author":{"login":"gnogueira-daitan"},"authorAssociation":"NONE","body":"In my case, the values exist but when I call it, it returns none. It is a weird behavior and probably related.","createdAt":"2018-05-04T16:56:15Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/780#issuecomment-386662853","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQwMjYzMDExNQ==","author":{"login":"stale"},"authorAssociation":"NONE","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","createdAt":"2018-07-05T07:26:19Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/780#issuecomment-402630115","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQxOTg2ODUyMA==","author":{"login":"stale"},"authorAssociation":"NONE","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","createdAt":"2018-09-10T10:38:21Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/780#issuecomment-419868520","viewerDidAuthor":false}],"createdAt":"2018-05-01T14:44:14Z","number":780,"state":"CLOSED","title":"Wrong attribute during commits search","url":"https://github.com/PyGithub/PyGithub/issues/780"},{"author":{"id":"MDQ6VXNlcjE0Mjg4MTI=","is_bot":false,"login":"iliapolo","name":"Eli Polonsky"},"body":"I am seeing some really strange behaviour after using the ``GitRelease`` object to upload an asset to a release.  \r\n\r\nCase in point:\r\n\r\n```python\r\nimport os\r\nfrom github import Github\r\n\r\nrepo = Github(os.environ['GITHUB_ACCESS_TOKEN']).get_repo('<my-repo>')\r\nrelease = repo.get_release(id='1.0.0')\r\n\r\nrepo.get_branch(branch='release')  # works\r\n\r\nrelease.upload_asset(path='/Users/elip/asset', content_type='application/octet-stream')\r\n\r\nrepo.get_branch(branch='release')  # throws the exception\r\n\r\n```\r\n\r\nException:\r\n\r\n```python\r\nTraceback (most recent call last):\r\n  File \"pygithub_bug.py\", line 16, in <module>\r\n    repo.get_branch(branch='release')\r\n  File \"/Users/elip/.virtualenvs/pyci/lib/python2.7/site-packages/github/Repository.py\", line 1191, in get_branch\r\n    self.url + \"/branches/\" + branch\r\n  File \"/Users/elip/.virtualenvs/pyci/lib/python2.7/site-packages/github/Requester.py\", line 185, in requestJsonAndCheck\r\n    return self.__check(*self.requestJson(verb, url, parameters, headers, input, cnx))\r\n  File \"/Users/elip/.virtualenvs/pyci/lib/python2.7/site-packages/github/Requester.py\", line 198, in __check\r\n    raise self.__createException(status, responseHeaders, output)\r\n  File \"/Users/elip/.virtualenvs/pyci/lib/python2.7/site-packages/github/Requester.py\", line 210, in __createException\r\n    elif status == 404 and output.get(\"message\") == \"Not Found\":\r\nAttributeError: 'NoneType' object has no attribute 'get'\r\n```\r\n\r\nWorth mentioning that its not just the ``get_branch`` that breaks, every single method that needs to fetch something from Github fails with this error.\r\n\r\nAlso worth mentioning, is that sometimes, the exception is different:\r\n\r\n```python\r\nTraceback (most recent call last):\r\n  File \"pygithub_bug.py\", line 19, in <module>\r\n    repo.get_commit(sha='release')\r\n  File \"/Users/elip/.virtualenvs/pyci/lib/python2.7/site-packages/github/Repository.py\", line 1267, in get_commit\r\n    self.url + \"/commits/\" + sha\r\n  File \"/Users/elip/.virtualenvs/pyci/lib/python2.7/site-packages/github/Requester.py\", line 185, in requestJsonAndCheck\r\n    return self.__check(*self.requestJson(verb, url, parameters, headers, input, cnx))\r\n  File \"/Users/elip/.virtualenvs/pyci/lib/python2.7/site-packages/github/Requester.py\", line 231, in requestJson\r\n    return self.__requestEncode(cnx, verb, url, parameters, headers, input, encode)\r\n  File \"/Users/elip/.virtualenvs/pyci/lib/python2.7/site-packages/github/Requester.py\", line 275, in __requestEncode\r\n    url = self.__makeAbsoluteUrl(url)\r\n  File \"/Users/elip/.virtualenvs/pyci/lib/python2.7/site-packages/github/Requester.py\", line 343, in __makeAbsoluteUrl\r\n    assert o.hostname in [self.__hostname, \"uploads.github.com\"], o.hostname\r\nAssertionError: api.github.com\r\n```\r\n\r\nThis exception happens, when i add ``repo.default_branch`` (or i assume any property invocation that requires a REST call) just before i upload.\r\n\r\nCan someone shed some light? am i missing something here?\r\n\r\nthanks ","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDM4NTY4ODk5OQ==","author":{"login":"iliapolo"},"authorAssociation":"NONE","body":"Forgot to mention my env:\r\n\r\nPython 2.7.14\r\nMacOS High Sierra\r\nPyGithub 1.38","createdAt":"2018-05-01T14:47:26Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/779#issuecomment-385688999","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM4NTkzNzAyNg==","author":{"login":"mfonville"},"authorAssociation":"CONTRIBUTOR","body":"This is a known problem, see my PR #771 that will resolve this bug, it will be merged by the dev for next release","createdAt":"2018-05-02T10:44:59Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":1}}],"url":"https://github.com/PyGithub/PyGithub/issues/779#issuecomment-385937026","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM4NTk2MzEwNw==","author":{"login":"iliapolo"},"authorAssociation":"NONE","body":"Awesome\r\n\r\nThanks 👍 ","createdAt":"2018-05-02T12:37:26Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/779#issuecomment-385963107","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM4NjQ3OTM2NA==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"Yes, will try to get #771 merged soon.","createdAt":"2018-05-04T00:51:41Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":1}}],"url":"https://github.com/PyGithub/PyGithub/issues/779#issuecomment-386479364","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM4OTI4NjgyNA==","author":{"login":"YakDriver"},"authorAssociation":"CONTRIBUTOR","body":"Would love to see this merged. Running into the same problem.","createdAt":"2018-05-15T19:34:03Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/779#issuecomment-389286824","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM5MzYxODQ2MA==","author":{"login":"YakDriver"},"authorAssociation":"CONTRIBUTOR","body":"The workaround I use for this is pretty easy. Basically after every file upload, I just recreate the github, repo, and release instances. Here's the pseudocode (full code is in [Satsuki](https://github.com/YakDriver/satsuki)):\r\n```\r\ntry:\r\n  release_asset = release.upload_asset (\r\n    path,\r\n    **args\r\n  )\r\nexcept Exception as e:\r\n  error = e\r\nfinally:\r\n  gh = github.Github(...)\r\n  repo = gh.get_repo(...)\r\n  release = repo.get_release(...)\r\n\r\n# see if e is an actual error, usually it's not\r\n```\r\n","createdAt":"2018-05-31T17:53:08Z","includesCreatedEdit":true,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/779#issuecomment-393618460","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM5OTg0NjA2Mg==","author":{"login":"nurupo"},"authorAssociation":"CONTRIBUTOR","body":"Should be resolved now that https://github.com/PyGithub/PyGithub/pull/771 is merged?","createdAt":"2018-06-25T06:32:24Z","includesCreatedEdit":true,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/779#issuecomment-399846062","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM5OTg0Njg1OA==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"Yes\n\n________________________________\nFrom: nurupo <notifications@github.com>\nSent: Monday, June 25, 2018 2:32:26 PM\nTo: PyGithub/PyGithub\nCc: Wan Liuyang; Comment\nSubject: Re: [PyGithub/PyGithub] Uploading assets to a release breaks the Repository object (#779)\n\n\nShould be resolved by #771<https://github.com/PyGithub/PyGithub/pull/771> being merged?\n\n—\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub<https://github.com/PyGithub/PyGithub/issues/779#issuecomment-399846062>, or mute the thread<https://github.com/notifications/unsubscribe-auth/AA-CRnGC3DneR2a5__s9jFIwPiPraMrFks5uAIP6gaJpZM4Tt_wu>.\n","createdAt":"2018-06-25T06:36:14Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/779#issuecomment-399846858","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM5OTg0ODc4OQ==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"It should be fixed by #771 . Can you guys try the the master? I will probably cut a release soon.","createdAt":"2018-06-25T06:45:47Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/779#issuecomment-399848789","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQwMDYxOTY2Mg==","author":{"login":"iliapolo"},"authorAssociation":"NONE","body":"@sfdye on it","createdAt":"2018-06-27T10:17:16Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":1}}],"url":"https://github.com/PyGithub/PyGithub/issues/779#issuecomment-400619662","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQwMDYzNjM2Nw==","author":{"login":"iliapolo"},"authorAssociation":"NONE","body":"@sfdye looks good 👍 , thanks!\r\n\r\nBTW, im not sure how you cut releases, but you can have a look at a tool I wrote specifically for managing releases for Python projects hosted on GIthub. Its called [pyci](https://github.com/iliapolo/pyci), maybe you can benefit from it... (Sorry for the shameless plug, but it seemed appropriate :))","createdAt":"2018-06-27T11:15:04Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/779#issuecomment-400636367","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQwMDY2ODgzNg==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"@iliapolo Cool, will take a look.","createdAt":"2018-06-27T13:21:02Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/779#issuecomment-400668836","viewerDidAuthor":false}],"createdAt":"2018-05-01T14:23:15Z","number":779,"state":"CLOSED","title":"Uploading assets to a release breaks the Repository object","url":"https://github.com/PyGithub/PyGithub/issues/779"},{"author":{"id":"MDQ6VXNlcjEwNTgyNDg=","is_bot":false,"login":"sarum9in","name":""},"body":"Affected version: 1.39.\r\nTested in multiple repositories, example below.\r\n\r\n```python\r\nlist(github.Github().get_organization('mesonbuild').get_repo('meson').get_release('0.46.0').get_assets())[0].uploader\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"/usr/lib/python3.6/site-packages/github/GitReleaseAsset.py\", line 149, in uploader\r\n    return self._uploader.value\r\nAttributeError: 'NamedUser' object has no attribute 'value'\r\n```","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDM4NTU3ODMyNw==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"@sarum9in Thanks for reporting! Fixed now, will include it in the next release.","createdAt":"2018-05-01T01:40:26Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/778#issuecomment-385578327","viewerDidAuthor":false}],"createdAt":"2018-04-30T21:35:06Z","number":778,"state":"CLOSED","title":"GitReleaseAsset.uploader AttributError","url":"https://github.com/PyGithub/PyGithub/issues/778"},{"author":{"id":"MDQ6VXNlcjkzNTk0NDc=","is_bot":false,"login":"BarbourSmith","name":""},"body":"There does not seem to currently be support for listing a users currently open invitations to join a repository as described here:\r\n\r\nhttps://developer.github.com/v3/repos/invitations/#list-invitations-for-a-repository\r\n\r\nThe invitation object exists:\r\nhttp://pygithub.readthedocs.io/en/latest/github_objects/Invitation.html#github.Invitation.Invitation\r\n\r\nand there is a method to accept an invitation:\r\n\r\nhttp://pygithub.readthedocs.io/en/latest/github_objects/AuthenticatedUser.html#github.AuthenticatedUser.AuthenticatedUser.accept_invitation\r\n\r\nbut there does not seem to be a way to list which invitations are available to be accepted.","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDM4NjQ4MDQyNA==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"This would be awesome. If you have the time to put up a PR, I will be happy review.","createdAt":"2018-05-04T00:59:32Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/777#issuecomment-386480424","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM4NjY5Mjk0OQ==","author":{"login":"BarbourSmith"},"authorAssociation":"NONE","body":"Great, I'm going to close the issue because it's really more of a feature request and I will add this to my todo list.\r\n\r\nThanks!","createdAt":"2018-05-04T18:28:05Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/777#issuecomment-386692949","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDU2OTQ1OTQ5NQ==","author":{"login":"jeffbcit"},"authorAssociation":"NONE","body":"Hi,\r\n\r\nI am a marker for 100 students per term, and really need this feature. I found this thread, and just want to post how I did it here: \r\n(Note: I used a while loop until no new invitations can be found. I print their repo paths to clone later, and accept the invitations.)\r\n\r\n```\r\nimport sys\r\nimport requests\r\n\r\nfrom github import Github\r\n\r\ndef main():\r\n\tuser = \"user\"\r\n\tpwd = \"password\"\r\n\t# using username and password\r\n\tg = Github(user, pwd)\r\n\turl = \"https://api.github.com/user/repository_invitations\"\r\n\twhile 1:\r\n\t\treq = requests.get(url, auth=(user, pwd))\r\n\t\tmInv = req.json()\r\n\t\tif not mInv:\r\n\t\t\tbreak\r\n\t\tfor md in mInv:\r\n\t\t\tmGit = md['repository']['html_url']\r\n\t\t\tprint (mGit)\r\n\t\t\tg.get_user().accept_invitation(md['id'])\r\n\r\nif __name__  == '__main__':\r\n    sys.exit(main())\r\n\r\n```\r\n\r\nFrom my very limited testings, it seems to work. Please give it a try.\r\n\r\nHappy holidays. ","createdAt":"2019-12-28T23:36:37Z","includesCreatedEdit":true,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":1}}],"url":"https://github.com/PyGithub/PyGithub/issues/777#issuecomment-569459495","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDU2OTQ2MDE0NA==","author":{"login":"s-t-e-v-e-n-k"},"authorAssociation":"COLLABORATOR","body":"This is a duplicate of #1120, and was fixed in v1.43.8.","createdAt":"2019-12-28T23:48:22Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"HOORAY","users":{"totalCount":1}}],"url":"https://github.com/PyGithub/PyGithub/issues/777#issuecomment-569460144","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDg3OTc1MTE4OQ==","author":{"login":"flying-sheep"},"authorAssociation":"CONTRIBUTOR","body":"The title is “Support for listing a user's repository invitations”\r\n\r\nThat isn’t supported yet, as there’s no call wrapping the `/user/repository_invitations` API.\r\n\r\nHere would be a method on the base API:\r\n\r\n```py\r\ndef get_invitations(api):\r\n    return PaginatedList(\r\n        Invitation,\r\n        self.__requester,\r\n        f\"{self.__requester._Requester__base_url}/user/repository_invitations\",\r\n        None,\r\n    )\r\n```","createdAt":"2021-07-14T09:42:58Z","includesCreatedEdit":true,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/777#issuecomment-879751189","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDg3OTgyMDAwOQ==","author":{"login":"s-t-e-v-e-n-k"},"authorAssociation":"COLLABORATOR","body":"Uh, yes there is?\r\n\r\nhttps://pygithub.readthedocs.io/en/latest/github_objects/AuthenticatedUser.html#github.AuthenticatedUser.AuthenticatedUser.get_invitations","createdAt":"2021-07-14T11:40:16Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/777#issuecomment-879820009","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDg3OTg2NTc1Mw==","author":{"login":"flying-sheep"},"authorAssociation":"CONTRIBUTOR","body":"Huh! I’m sorry then, I really thought I had searched for this exhaustively.","createdAt":"2021-07-14T12:53:50Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/777#issuecomment-879865753","viewerDidAuthor":false}],"createdAt":"2018-04-30T20:33:44Z","number":777,"state":"CLOSED","title":"Support for listing a user's repository invitations","url":"https://github.com/PyGithub/PyGithub/issues/777"},{"author":{"id":"MDQ6VXNlcjE3MDk5NzAz","is_bot":false,"login":"MikhailPavlov","name":"Mikhail"},"body":"Here is a snippet\r\n```\r\nfrom github import Github\r\n\r\ng = Github(token)\r\nrepo = g.get_repo('PyGithub/PyGithub')\r\ncommits = repo.get_commits()\r\ni = 20\r\nfor commit in commits:\r\n     print(commit.last_modified)\r\n     i -= 1\r\n     if i < 0:\r\n             break\r\n```\r\n\r\nIt prints out only first retrieved object's date. Shouldn't it print objects actual properties?\r\n```\r\nThu, 26 Apr 2018 06:52:47 GMT\r\nThu, 26 Apr 2018 06:52:47 GMT\r\nThu, 26 Apr 2018 06:52:47 GMT\r\nThu, 26 Apr 2018 06:52:47 GMT\r\nThu, 26 Apr 2018 06:52:47 GMT\r\nThu, 26 Apr 2018 06:52:47 GMT\r\nThu, 26 Apr 2018 06:52:47 GMT\r\nThu, 26 Apr 2018 06:52:47 GMT\r\nThu, 26 Apr 2018 06:52:47 GMT\r\nThu, 26 Apr 2018 06:52:47 GMT\r\nThu, 26 Apr 2018 06:52:47 GMT\r\nThu, 26 Apr 2018 06:52:47 GMT\r\nThu, 26 Apr 2018 06:52:47 GMT\r\nThu, 26 Apr 2018 06:52:47 GMT\r\nThu, 26 Apr 2018 06:52:47 GMT\r\nThu, 26 Apr 2018 06:52:47 GMT\r\nThu, 26 Apr 2018 06:52:47 GMT\r\nThu, 26 Apr 2018 06:52:47 GMT\r\nThu, 26 Apr 2018 06:52:47 GMT\r\nThu, 26 Apr 2018 06:52:47 GMT\r\nThu, 26 Apr 2018 06:52:47 GMT\r\n```\r\n\r\n","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDM4NTMwNDEwNA==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"It seems that the `last_modified` is retrieved from the response header as part of the caching header in stead of the response body. If you inspect the header, they are indeed the same.","createdAt":"2018-04-30T02:47:14Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/773#issuecomment-385304104","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM4NTM1MTk0Ng==","author":{"login":"MikhailPavlov"},"authorAssociation":"NONE","body":"But how can I get the value from response body in this case? Or another words, can I get actual dates? Some other method?","createdAt":"2018-04-30T09:37:12Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/773#issuecomment-385351946","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM4NTM2NTgyMg==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"Try `commit.commit.author.date` or `commit.commit.committer.date`\r\n\r\nYou can see the mapping from this API:\r\nhttps://developer.github.com/v3/repos/commits/#get-a-single-commit","createdAt":"2018-04-30T10:53:05Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/773#issuecomment-385365822","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM4NjQ4MDQ5MQ==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"@MichaelPavlov Does it work for you now?","createdAt":"2018-05-04T01:00:04Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/773#issuecomment-386480491","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM4NjUyMDYyMg==","author":{"login":"MikhailPavlov"},"authorAssociation":"NONE","body":"Yes, property `commit.commit.commiter.date` gives correct result. Thank you. But you know if I take an element like `item = get_commits()[1]' in debugger and after evaluate `item.last_modified` it gives another date. Can you explain why this happens? Like result was updated in some cache and returned after that.","createdAt":"2018-05-04T07:05:10Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/773#issuecomment-386520622","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM4NjUyMTMzNQ==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"Probably because it's reflecting the `last-modified` attribute from the HTTP response [header](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Last-Modified)? which changes with your response. If you want use the fixed date when commit was made, use any of the two properties above.","createdAt":"2018-05-04T07:09:47Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/773#issuecomment-386521335","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM4NjUyNDc5NA==","author":{"login":"MikhailPavlov"},"authorAssociation":"NONE","body":"But why it's necessary to call `item.update()` to get this header property correct value?","createdAt":"2018-05-04T07:28:58Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/773#issuecomment-386524794","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM4NjU2NzIyNg==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"I am afraid I didn't get what you meant.","createdAt":"2018-05-04T10:56:37Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/773#issuecomment-386567226","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM4NjYyODYxNA==","author":{"login":"MikhailPavlov"},"authorAssociation":"NONE","body":"Maybe these prints would be more descriptive for you:\r\n\r\n\tfrom github import Github\r\n\r\n\tg = Github(token)\r\n\trepo = g.get_repo('PyGithub/PyGithub')\r\n\tcommits = repo.get_commits()\r\n\ti = 5\r\n\tfor commit in commits:\r\n\t\tprint(commit.last_modified)\r\n\t\ti -= 1\r\n\t\tif i < 0:\r\n\t\t\tbreak\r\n\r\n\r\n\tTue, 01 May 2018 01:40:08 GMT\r\n\tTue, 01 May 2018 01:40:08 GMT\r\n\tTue, 01 May 2018 01:40:08 GMT\r\n\tTue, 01 May 2018 01:40:08 GMT\r\n\tTue, 01 May 2018 01:40:08 GMT\r\n\t\r\n\t\r\n\r\n\tfrom github import Github\r\n\r\n\tg = Github(token)\r\n\trepo = g.get_repo('PyGithub/PyGithub')\r\n\tcommits = repo.get_commits()\r\n\ti = 5\r\n\tfor commit in commits:\r\n\t\tcommit.update()\r\n\t\tprint(commit.last_modified)\r\n\t\ti -= 1\r\n\t\tif i < 0:\r\n\t\t\tbreak\r\n\t\r\n\t\r\n\tTue, 01 May 2018 01:40:08 GMT\r\n\tMon, 30 Apr 2018 02:12:43 GMT\r\n\tMon, 30 Apr 2018 02:10:32 GMT\r\n\tThu, 26 Apr 2018 06:52:47 GMT\r\n\tThu, 26 Apr 2018 06:46:44 GMT\r\n\tThu, 26 Apr 2018 06:35:39 GMT","createdAt":"2018-05-04T14:59:46Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/773#issuecomment-386628614","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQwMjYzMDExOA==","author":{"login":"stale"},"authorAssociation":"NONE","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","createdAt":"2018-07-05T07:26:20Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/773#issuecomment-402630118","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQxOTg2ODUyMw==","author":{"login":"stale"},"authorAssociation":"NONE","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","createdAt":"2018-09-10T10:38:22Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/773#issuecomment-419868523","viewerDidAuthor":false}],"createdAt":"2018-04-27T12:36:32Z","number":773,"state":"CLOSED","title":"Iteration over get_commits() returns wrong object properties","url":"https://github.com/PyGithub/PyGithub/issues/773"},{"author":{"is_bot":true,"login":"app/"},"body":"I get the same number which is the number of stars from repo.stargazers_count and repo.watchers_count,  i    can't get the number of watchers. In the API of Github, we can get the number from the \"subscribers_count‘’，but in PyGithub, i find there is not the function.","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDM4NDIyMjU0MQ==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"Which pygithub version are you using? I believe this attribute is in already in the master, so it should be available to you.","createdAt":"2018-04-25T09:26:10Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/770#issuecomment-384222541","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM4NDIzODcxNQ==","author":{"login":""},"authorAssociation":"NONE","body":"The version is 1.29. OK, i try the newest version again.","createdAt":"2018-04-25T10:22:49Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/770#issuecomment-384238715","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM4NDI0NTQ4Mg==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"Yes, try latest stable version 1.39","createdAt":"2018-04-25T10:49:56Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/770#issuecomment-384245482","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM4NDUzMzMyNA==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"Closing, feel free to re-open if still an issue.","createdAt":"2018-04-26T06:54:52Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/770#issuecomment-384533324","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM4NDU2MDQxMw==","author":{"login":""},"authorAssociation":"NONE","body":"I have solved it using the latest version","createdAt":"2018-04-26T08:38:54Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":1}}],"url":"https://github.com/PyGithub/PyGithub/issues/770#issuecomment-384560413","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM4NDU2MDU1MQ==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"Good to hear","createdAt":"2018-04-26T08:39:20Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/770#issuecomment-384560551","viewerDidAuthor":false}],"createdAt":"2018-04-25T07:12:32Z","number":770,"state":"CLOSED","title":"repo.stargazers_count and repo.watchers_count is the same number of stars","url":"https://github.com/PyGithub/PyGithub/issues/770"},{"author":{"id":"MDQ6VXNlcjM5NTg0MQ==","is_bot":false,"login":"time4tea","name":"James Richardson"},"body":"When using github enterprise, if the base_url is specified without the /api/v3 then very strange things happen, and it is hard to debug wht is happening.\r\n\r\nWhat is happening is that a 302 page is being returned, which is full of HTML, and the library accepts this, returning various objects full of None.\r\n","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDM4NDUyNDUwNA==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"I believe the correct format for `base_url` is `http(s)://hostname/api/v3/\r\n`, why would you set it without the `api/v3`?\r\n\r\nhttps://developer.github.com/v3/enterprise/#endpoint-urls","createdAt":"2018-04-26T06:09:13Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/769#issuecomment-384524504","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM4NDUyNjQ5OQ==","author":{"login":"time4tea"},"authorAssociation":"NONE","body":"Because when the user makes an error the program should help them find\nout...\n\n\nOn Thu, 26 Apr 2018, 07:09 Wan Liuyang, <notifications@github.com> wrote:\n\n> I believe the correct format for base_url is http(s)://hostname/api/v3/,\n> why would you set it without the api/v3?\n>\n> https://developer.github.com/v3/enterprise/#endpoint-urls\n>\n> —\n> You are receiving this because you authored the thread.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/PyGithub/PyGithub/issues/769#issuecomment-384524504>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AAYKQUUxztP8Vhr8s-I2vV6kCFbayzVVks5tsWSKgaJpZM4Th51D>\n> .\n>\n","createdAt":"2018-04-26T06:20:26Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/769#issuecomment-384526499","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM4NDUyNzU5Mw==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"I agree, took me a while to find out as well. Good news is I now have a GHE instance to play with. Will improve the documentation on Github enterprise first 😀 ","createdAt":"2018-04-26T06:26:12Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/769#issuecomment-384527593","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM4NDUyOTY1NA==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"Closed in de6c2ec4e","createdAt":"2018-04-26T06:36:24Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/769#issuecomment-384529654","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM4NTUwOTYwMA==","author":{"login":"time4tea"},"authorAssociation":"NONE","body":"that was fast!","createdAt":"2018-04-30T19:53:09Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/769#issuecomment-385509600","viewerDidAuthor":false}],"createdAt":"2018-04-24T15:26:13Z","number":769,"state":"CLOSED","title":"Please handle unexpected response codes, particularly 302","url":"https://github.com/PyGithub/PyGithub/issues/769"},{"author":{"id":"MDQ6VXNlcjE1MjI1MDU5","is_bot":false,"login":"s-t-e-v-e-n-k","name":"Steve Kowalik"},"body":"Since the black-cat API feature was released in May 9, the API methods also support requesting reviews from teams as well as individual users. There are two issues here:\r\n\r\nFirstly, PullRequest.get_reviewer_requests() passes a list_item of 'users' in, which means any information under teams is not returned. If we drop that, it's an API break, since we will return a dict('users': PaginatedList, 'teams': PaginatedList) rather than a PaginatedList directly. We could work around that by adding PullRequest.get_team_reviewer_requests(), but then it's two methods users have to call, which feels awkward.\r\n\r\nSecondly, and more importantly, PullRequestReviewerRequest does not support teams -- the simplest solution here is to add a slug property to the class, and if slug is set, it's a team, otherwise it's a user, but this just feels awkward. We could subclass it, along with polishing the API to return the user and team object directly rather than just the identifier, but that has issues too.\r\n\r\nI wanted to get opinions on the way forward before I got too deep into writing code.","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDM4MzA1NDA0OA==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"Thanks for pointing this out.\r\n\r\nYou are right, this is simply because current implementation is out-dated by:\r\nhttps://blog.github.com/2017-06-28-requesting-reviews-from-repository-teams/\r\n\r\nhttps://developer.github.com/v3/pulls/review_requests/\r\nWe should probably correct the implementation by supporting teams. Notice this endpoint does not have a `get` or `edit`, only `create`, `delete` and `list`.\r\n\r\nSo to implement all three supported methods:\r\n\r\n1: `create_review_request`: Take `reviewers` and `team_reviewers`, add these guys to the pr reviewer, no need to return anything\r\n2: `delete_review_request`: Take `reviewers` and `team_reviewers`, both are array of strings, remove these guys from the pr reviewer, no need to return anything\r\n3: `get_review_request`: Renamed from `get_reviewer_requests`. Returns a tuple (users, teams) where users is a `PaginatedList` of `NamedUser` and teams is `PaginatedList` of `Team`.\r\n\r\nWhat do you think?","createdAt":"2018-04-20T10:22:54Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/764#issuecomment-383054048","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM4MzA2NjY3Nw==","author":{"login":"s-t-e-v-e-n-k"},"authorAssociation":"COLLABORATOR","body":"I like it, that sounds like a great plan. This also means PullRequestReviewerRequest is no longer needed, and can be completely removed. I will make a start on this and the related tests. I'll close this issue, and reference the original issue in my commit message.","createdAt":"2018-04-20T11:23:50Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/764#issuecomment-383066677","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQyNjk5MjYxMA==","author":{"login":"hopeogbons"},"authorAssociation":"NONE","body":"Are you done implementing? Because I really need this feature today :eyes: ","createdAt":"2018-10-04T12:02:14Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/764#issuecomment-426992610","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQyNjk5MzUwNA==","author":{"login":"s-t-e-v-e-n-k"},"authorAssociation":"COLLABORATOR","body":"This was landed in April in https://github.com/PyGithub/PyGithub/commit/e2e29918ea27a005c7f57d8b1fa90b4ddf65d30e . If you use the latest release on PyPi, it's in there.","createdAt":"2018-10-04T12:05:44Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/764#issuecomment-426993504","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQyNjk5NzE1NA==","author":{"login":"hopeogbons"},"authorAssociation":"NONE","body":"`each_pull.get_review_requests()` becomes `(<github.PaginatedList.PaginatedList object at 0x7fb6ce8a12e8>, <github.PaginatedList.PaginatedList object at 0x7fb6ce8a1320>)`\r\n\r\nHow do I get the list of reviewers or am I still missing something?","createdAt":"2018-10-04T12:19:10Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/764#issuecomment-426997154","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQyNjk5ODUzMg==","author":{"login":"s-t-e-v-e-n-k"},"authorAssociation":"COLLABORATOR","body":"From the docs on the method at https://pygithub.readthedocs.io/en/latest/github_objects/PullRequest.html#github.PullRequest.PullRequest.get_review_requests . The return type is a Paginated List of users and teams. The first element are the users, which you can see by iterating over them:\r\n\r\n```\r\nreview_requests = each_pull.get_review_requests()\r\nfor reviewer in review_requests[0]:\r\n    print(reviewer.login)\r\n```","createdAt":"2018-10-04T12:24:05Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/764#issuecomment-426998532","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQyNzAwMDM1MA==","author":{"login":"hopeogbons"},"authorAssociation":"NONE","body":"Bless up! Thanks so much @s-t-e-v-e-n-k, you are my personal Jesus :smile: ","createdAt":"2018-10-04T12:30:23Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":1}}],"url":"https://github.com/PyGithub/PyGithub/issues/764#issuecomment-427000350","viewerDidAuthor":false}],"createdAt":"2018-04-20T06:04:17Z","number":764,"state":"CLOSED","title":"Pull Request requested reviewers can also be teams","url":"https://github.com/PyGithub/PyGithub/issues/764"},{"author":{"id":"MDQ6VXNlcjIyODI4ODM5","is_bot":false,"login":"SManral","name":"Smriti"},"body":"I tried using  update_file(path, message, content, sha, branch=github.GithubObject.NotSet, committer=github.GithubObject.NotSet, author=github.GithubObject.NotSet), to update a single file in a specific GitHub repo and it works just fine. \r\nIs there a way I could similarly update multiple files at once?","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDM4MjU4NTc1Nw==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"I am afraid not, you have to do it one by one, as it's not provided by Github API.","createdAt":"2018-04-19T02:05:04Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/759#issuecomment-382585757","viewerDidAuthor":false}],"createdAt":"2018-04-18T20:02:41Z","number":759,"state":"CLOSED","title":"Update multiple files at once","url":"https://github.com/PyGithub/PyGithub/issues/759"},{"author":{"id":"MDQ6VXNlcjEzNTQzNDcx","is_bot":false,"login":"allevin","name":"Aaron L. Levine"},"body":"Reference comments in #539, conversation moved to this issue for discussion.\r\n\r\nRequest a feature to the new **_requests_** implementation for low level communications to implement a developer controlled retry feature when communication POST/GET fail.\r\n\r\nThe feature should allow the developer via a high level interface to control retry operations (number of retrys, time between retrys, etc.).  \r\n\r\nOur network is behind an aggressive proxy server/filter and we occasionally lose responses from Github. This causes comm exceptions that could be avoided if the low level code would just perform an (optional - user configured) retry.\r\n\r\n\r\n","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDM5MTYyNjA1Ng==","author":{"login":"mfonville"},"authorAssociation":"CONTRIBUTOR","body":"Indeed a controlled retry would be very welcome. Today I hit on the Github API (without any proxy or such) a 502 error on a trivial operation, but it would be ridiculous to try to catch those for literally API command I execute in my program:\r\n\r\n```\r\n  File \"/home/maarten/Development/PyGithub/build/lib/github/Repository.py\", line 1317, in get_commit\r\n    self.url + \"/commits/\" + sha\r\n  File \"/home/maarten/Development/PyGithub/build/lib/github/Requester.py\", line 258, in requestJsonAndCheck\r\n    return self.__check(*self.requestJson(verb, url, parameters, headers, input, self.__customConnection(url)))\r\n  File \"/home/maarten/Development/PyGithub/build/lib/github/Requester.py\", line 269, in __check\r\n    raise self.__createException(status, responseHeaders, output)\r\ngithub.GithubException.GithubException: 502 {'message': 'Server Error'}\r\n```","createdAt":"2018-05-24T08:03:56Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/757#issuecomment-391626056","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM5MTY2MjMwMw==","author":{"login":"mfonville"},"authorAssociation":"CONTRIBUTOR","body":"See https://github.com/PyGithub/PyGithub/pull/803 to at least cover the retries on commands that failed on Github's side","createdAt":"2018-05-24T10:12:12Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/757#issuecomment-391662303","viewerDidAuthor":false}],"createdAt":"2018-04-17T14:14:02Z","number":757,"state":"CLOSED","title":"For the new \"requests\" communications engine, implement a developer controlled retry feature.","url":"https://github.com/PyGithub/PyGithub/issues/757"},{"author":{"id":"MDQ6VXNlcjQ5ODkxNw==","is_bot":false,"login":"foolip","name":"Philip Jägenstedt"},"body":"My script:\r\n```Python\r\nimport sys\r\n\r\nfrom github import Github\r\n\r\n\r\ndef main():\r\n    token = '123456' # redacted\r\n    g = Github(token)\r\n    w3c_org = g.get_organization('w3c')\r\n    wpt_org = g.get_organization('web-platform-tests')\r\n    wpt_repo = w3c_org.get_repo('web-platform-tests')\r\n\r\n    invited_users = set(wpt_org.get_members())\r\n\r\n    all_users = set(wpt_repo.get_collaborators())\r\n\r\n    # wpt_repo.get_teams() + team.members() doesn't work, but\r\n    # w3c_org.get_teams() + team.members() does, so use the first\r\n    # just to filter the second. Sigh?\r\n    wpt_team_ids = set(team.id for team in wpt_repo.get_teams())\r\n    for team in w3c_org.get_teams():\r\n        if team.id not in wpt_team_ids:\r\n            continue\r\n        print(team)\r\n        for user in team.get_members():\r\n            if user in all_users:\r\n                continue\r\n            print('User {} is team member, not repo collaborator'.format(user.login))\r\n            all_users.add(user)\r\n\r\n\r\nif __name__ == '__main__':\r\n    main()\r\n```\r\n\r\nThe \"sight\" comment is where there seems to be a bug. Iterating over wpt_repo.get_teams() directly yields the same 4 teams as this loop, but `team.get_members()` then fails like this:\r\n```\r\nTraceback (most recent call last):\r\n  File \"invite.py\", line 40, in <module>\r\n    main()\r\n  File \"invite.py\", line 25, in main\r\n    for user in team.get_members():\r\n  File \"/usr/local/google/home/foolip/src/bikeshed-tests/env/lib/python3.5/site-packages/github/PaginatedList.py\", line 58, in __iter__\r\n    newElements = self._grow()\r\n  File \"/usr/local/google/home/foolip/src/bikeshed-tests/env/lib/python3.5/site-packages/github/PaginatedList.py\", line 70, in _grow\r\n    newElements = self._fetchNextPage()\r\n  File \"/usr/local/google/home/foolip/src/bikeshed-tests/env/lib/python3.5/site-packages/github/PaginatedList.py\", line 172, in _fetchNextPage\r\n    headers=self.__headers\r\n  File \"/usr/local/google/home/foolip/src/bikeshed-tests/env/lib/python3.5/site-packages/github/Requester.py\", line 185, in requestJsonAndCheck\r\n    return self.__check(*self.requestJson(verb, url, parameters, headers, input, cnx))\r\n  File \"/usr/local/google/home/foolip/src/bikeshed-tests/env/lib/python3.5/site-packages/github/Requester.py\", line 198, in __check\r\n    raise self.__createException(status, responseHeaders, output)\r\ngithub.GithubException.UnknownObjectException: 404 {'documentation_url': 'https://developer.github.com/v3/teams/members/#list-team-members', 'message': 'Not Found'}\r\n```","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDM4MjAyNjk5MA==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"Sorry I don't have access to your org so I couldn't see what's wrong. But I just tried for my org and all the above methods worked. If it returns 404 then something genuinely does not exist. \r\n\r\nIt will be helpful it you can provide more context.","createdAt":"2018-04-17T15:05:59Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/756#issuecomment-382026990","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM4MjA0NDkyNw==","author":{"login":"foolip"},"authorAssociation":"NONE","body":"What kind of debugging can I enable to make this possible to diagnose?","createdAt":"2018-04-17T15:54:09Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/756#issuecomment-382044927","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM4MjA0NjUwNA==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"Perhaps you can send a raw HTTP requests and see the response?\r\nLike `GET /repos/:owner/:repo/teams`\r\n\r\nhttps://developer.github.com/v3/repos/#list-teams\r\n\r\nIf raw requests returns you the same 404, then it's not a PyGithub issue anymore.","createdAt":"2018-04-17T15:58:35Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/756#issuecomment-382046504","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM4NjQ4MDc2Ng==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"Closing this for now. Feel free to re-open if still an issue.","createdAt":"2018-05-04T01:02:08Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/756#issuecomment-386480766","viewerDidAuthor":false}],"createdAt":"2018-04-17T13:28:09Z","number":756,"state":"CLOSED","title":"repo.get_teams() + team.get_members() doesn't work","url":"https://github.com/PyGithub/PyGithub/issues/756"},{"author":{"id":"MDQ6VXNlcjM5NjU3MzY=","is_bot":false,"login":"CapitanLiteral","name":"Aleix Cardona"},"body":"I want to delete all releases but I dont know how to, I've been looking in docs but didint found how to.\r\n\r\nThanks. ","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDM4MTM4MDIwNw==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"Here you go\r\n```\r\ng = Github()\r\nrepo = g.get_repo('yourname/repo') \r\nfor release in repo.get_releases():\r\n\trelease.delete_release()\r\n```","createdAt":"2018-04-15T04:57:29Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"LAUGH","users":{"totalCount":1}}],"url":"https://github.com/PyGithub/PyGithub/issues/751#issuecomment-381380207","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM4MjAzMDIzMA==","author":{"login":"CapitanLiteral"},"authorAssociation":"NONE","body":"Sorry, but probably I'm missundertanding something. I want to delete tags too and I dont know how.\r\n\r\nThanks for your support.","createdAt":"2018-04-17T15:14:59Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/751#issuecomment-382030230","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM4MjAzMzE3Mg==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"Good question. `release` is a Github concept, so there is API to delete. However, `tag` is a pure git thing, so there is no way to delete it from the Github API. (or PyGithub) \r\n\r\nThis might help:\r\nhttps://stackoverflow.com/questions/5480258/how-to-delete-a-git-remote-tag","createdAt":"2018-04-17T15:23:21Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":1}}],"url":"https://github.com/PyGithub/PyGithub/issues/751#issuecomment-382033172","viewerDidAuthor":false}],"createdAt":"2018-04-14T21:20:47Z","number":751,"state":"CLOSED","title":"How can I delete all releases of a repository?","url":"https://github.com/PyGithub/PyGithub/issues/751"},{"author":{"id":"MDQ6VXNlcjYwMzE3NjM=","is_bot":false,"login":"stsdc","name":"Stanisław"},"body":"    from github import Github\r\n\r\n    gh = Github()\r\n\r\n    organization = gh.get_organization(\"PyGithub\")\r\n    # organization = gh.get_organization(\"TurtleRover\")\r\n    repository = organization.get_repo(\"PyGithub\")\r\n    # repository = organization.get_repo(\"Turtle-Rover-Mission-Control\")\r\n    latest = repository.get_latest_release()\r\n\r\n    print (latest.tarball_url)","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDM4MDY0MDA4OQ==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"@stsdc Can you give an example?","createdAt":"2018-04-12T00:51:48Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/750#issuecomment-380640089","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM4MDczMjM5MQ==","author":{"login":"stsdc"},"authorAssociation":"NONE","body":"@sfdye updated. When using PyGithub repo everything is ok. Try to uncomment my repo & org.","createdAt":"2018-04-12T09:06:36Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/750#issuecomment-380732391","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM4MDczNTAxMw==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"This is not a PyGithub issue. I tried calling the API directly also returns 404.\r\n\r\nhttps://developer.github.com/v3/repos/releases/#get-the-latest-release\r\n> View the latest published full release for the repository. Draft releases and prereleases are not returned by this endpoint.\r\n\r\nThis endpoint only returns full release, maybe your repo only has pre-release?","createdAt":"2018-04-12T09:15:14Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/750#issuecomment-380735013","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM4MDc0OTI2Mw==","author":{"login":"stsdc"},"authorAssociation":"NONE","body":"You're right.","createdAt":"2018-04-12T10:06:03Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/750#issuecomment-380749263","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM4MDc0OTU0OA==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"@stsdc no problem","createdAt":"2018-04-12T10:07:03Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"HEART","users":{"totalCount":1}}],"url":"https://github.com/PyGithub/PyGithub/issues/750#issuecomment-380749548","viewerDidAuthor":false}],"createdAt":"2018-04-11T22:38:48Z","number":750,"state":"CLOSED","title":"get_latest_release() returns error 404 if there is only one release","url":"https://github.com/PyGithub/PyGithub/issues/750"},{"author":{"id":"MDQ6VXNlcjMzMTQ4Njc3","is_bot":false,"login":"JixiangGao","name":"Jixiang Gao"},"body":"There seem to be no params of 'updated_at' and 'create_at' in the class of Commit.\r\n\r\nBut there are these items in the official API.(https://api.github.com/repos/input-output-hk/cardano-sl/git/commits/aed0d925b06e0bd1278e26539c445274c52f4b67)","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDM4MDUxODkyNg==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"I don't see these two attributes in the example you provide or the official docs:\r\nhttps://developer.github.com/v3/repos/commits/#get-a-single-commit","createdAt":"2018-04-11T16:43:21Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/749#issuecomment-380518926","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM4MDY1MzYxNQ==","author":{"login":"JixiangGao"},"authorAssociation":"NONE","body":"@sfdye  they are ['commit']['author']['date'] and ['commit']['author']['date']","createdAt":"2018-04-12T02:20:04Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/749#issuecomment-380653615","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM4MDY1NDMzMQ==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"```\r\nc = g.get_repo('input-output-hk/cardano-sl').get_commit('aed0d925b06e0bd1278e26539c445274c52f4b67')\r\nprint(c.commit.author.date)\r\nprint(c.commit.committer.date)\r\n```\r\n\r\nThere you have it.","createdAt":"2018-04-12T02:24:35Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/749#issuecomment-380654331","viewerDidAuthor":false}],"createdAt":"2018-04-11T06:49:22Z","number":749,"state":"CLOSED","title":"There seem to be no params of 'updated_at' and 'create_at' in the class of Commit ","url":"https://github.com/PyGithub/PyGithub/issues/749"},{"author":{"id":"MDQ6VXNlcjc1NDM2OTY=","is_bot":false,"login":"pinakc","name":""},"body":"Please provide a 'verify=False' kinda flag for accessing enterprise servers with self signed certificates.","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDM4Mzk3MzYwMg==","author":{"login":"time4tea"},"authorAssociation":"NONE","body":"You probably don't need this... there is a standard way to set the CA bundle which will work for github enterprise see #583 where i wrote what I did to make this work.","createdAt":"2018-04-24T15:23:49Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/746#issuecomment-383973602","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM4NDUzMzEzNw==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"Fixed in #758 thanks to @mikeage \r\n\r\nAlso released new version `1.40a3`, please let me know if this works for you.","createdAt":"2018-04-26T06:53:57Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"HOORAY","users":{"totalCount":1}}],"url":"https://github.com/PyGithub/PyGithub/issues/746#issuecomment-384533137","viewerDidAuthor":false}],"createdAt":"2018-04-09T11:13:21Z","number":746,"state":"CLOSED","title":"add ignore SSL option for github enterprise accessibility","url":"https://github.com/PyGithub/PyGithub/issues/746"},{"author":{"id":"MDQ6VXNlcjI4MTU3Nzk=","is_bot":false,"login":"bushig","name":"Bogdan Tselobanov"},"body":"I am using PyGithub version 1.38 and I am doing the following:\r\n```python\r\nfrom github import Github\r\n\r\nrepo_name = 'godotengine/godot'\r\ngithub = Github(TOKEN)\r\nrepo = github.get_repo(repo_name)\r\nreleases = repo.get_releases()\r\nfor release in releases:\r\n    print(release.zipball_url)\r\n```\r\ngives me 'GitRelease' object has no attribute 'zipball_url'. This problem is valid for python 3.6 and 3.5. On python 2.7 works just fine","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDM4MDAzNjE3NA==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"This was fixed #522, so update PyGithub to the latest version 1.39 will do.","createdAt":"2018-04-10T09:32:06Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/745#issuecomment-380036174","viewerDidAuthor":false}],"createdAt":"2018-04-08T02:20:41Z","number":745,"state":"CLOSED","title":"Missing zipball_url and tarball_url in python 3","url":"https://github.com/PyGithub/PyGithub/issues/745"},{"author":{"id":"MDQ6VXNlcjIxMjM2MDU0","is_bot":false,"login":"edanhauon","name":"Edan Hauon"},"body":"Searching by topic is a feature offered in the beta version of the API.  We need this feature in order to collect data about repositories from a topic point of view.\r\n\r\n[Searching Topics](https://help.github.com/articles/searching-topics/)\r\n[Searching Topics by API](https://developer.github.com/v3/search/#search-topics)\r\n\r\nExample of use:\r\n```\r\ng = Github()\r\n# will return all machine-learning related topics\r\ntopics = g.search_topics(query=machine-learning) \r\n\r\nfor topic in topics:\r\n    print(topic.display_name)\r\n    print(topic.featured)\r\n    print(topic.curated)\r\n```","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDM3OTQ4MzgwNQ==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"@edanhauon Thanks for reporting. If you can put in a PR I will be willing to review it.","createdAt":"2018-04-07T16:57:30Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/744#issuecomment-379483805","viewerDidAuthor":false}],"createdAt":"2018-04-07T14:24:40Z","number":744,"state":"CLOSED","title":"Add support for searching topics","url":"https://github.com/PyGithub/PyGithub/issues/744"},{"author":{"id":"MDQ6VXNlcjMxODYxMDEy","is_bot":false,"login":"squ1dd13","name":"Alex"},"body":"Using the sample code, when I run the code, i get 'ssl.SSLError: [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed (_ssl.c:645)'\r\n","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDM3OTQ4Mzc1Mg==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"Could you please provide more details of the issue?","createdAt":"2018-04-07T16:56:47Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/742#issuecomment-379483752","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM4MTg2NTUwMg==","author":{"login":"meteozond"},"authorAssociation":"NONE","body":"@sfdye we've got the same issue with Python 3.6.4. What exact details are you interested in?\r\n\r\n```python\r\nfrom getpass import getpass\r\n\r\nfrom github import Github\r\nusername = input(\"GitHub username: \")\r\npassword = getpass(\"GitHub password: \")\r\n\r\ng = Github(username, password)\r\n\r\nprint(list(g.get_user().get_repos()))\r\n```\r\n\r\n```bash\r\npython labels.py\r\n```\r\n\r\n```python\r\nTraceback (most recent call last):\r\n  File \"labels.py\", line 9, in <module>\r\n    print(list(g.get_user().get_repos()))\r\n  File \"/Users/meteozond/.virtualenvs/pik/lib/python3.6/site-packages/github/PaginatedList.py\", line 58, in __iter__\r\n    newElements = self._grow()\r\n  File \"/Users/meteozond/.virtualenvs/pik/lib/python3.6/site-packages/github/PaginatedList.py\", line 70, in _grow\r\n    newElements = self._fetchNextPage()\r\n  File \"/Users/meteozond/.virtualenvs/pik/lib/python3.6/site-packages/github/PaginatedList.py\", line 172, in _fetchNextPage\r\n    headers=self.__headers\r\n  File \"/Users/meteozond/.virtualenvs/pik/lib/python3.6/site-packages/github/Requester.py\", line 185, in requestJsonAndCheck\r\n    return self.__check(*self.requestJson(verb, url, parameters, headers, input, cnx))\r\n  File \"/Users/meteozond/.virtualenvs/pik/lib/python3.6/site-packages/github/Requester.py\", line 231, in requestJson\r\n    return self.__requestEncode(cnx, verb, url, parameters, headers, input, encode)\r\n  File \"/Users/meteozond/.virtualenvs/pik/lib/python3.6/site-packages/github/Requester.py\", line 284, in __requestEncode\r\n    status, responseHeaders, output = self.__requestRaw(cnx, verb, url, requestHeaders, encoded_input)\r\n  File \"/Users/meteozond/.virtualenvs/pik/lib/python3.6/site-packages/github/Requester.py\", line 309, in __requestRaw\r\n    requestHeaders\r\n  File \"/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/http/client.py\", line 1239, in request\r\n    self._send_request(method, url, body, headers, encode_chunked)\r\n  File \"/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/http/client.py\", line 1285, in _send_request\r\n    self.endheaders(body, encode_chunked=encode_chunked)\r\n  File \"/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/http/client.py\", line 1234, in endheaders\r\n    self._send_output(message_body, encode_chunked=encode_chunked)\r\n  File \"/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/http/client.py\", line 1026, in _send_output\r\n    self.send(msg)\r\n  File \"/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/http/client.py\", line 964, in send\r\n    self.connect()\r\n  File \"/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/http/client.py\", line 1400, in connect\r\n    server_hostname=server_hostname)\r\n  File \"/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/ssl.py\", line 407, in wrap_socket\r\n    _context=self, _session=session)\r\n  File \"/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/ssl.py\", line 814, in __init__\r\n    self.do_handshake()\r\n  File \"/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/ssl.py\", line 1068, in do_handshake\r\n    self._sslobj.do_handshake()\r\n  File \"/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/ssl.py\", line 689, in do_handshake\r\n    self._sslobj.do_handshake()\r\nssl.SSLError: [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed (_ssl.c:777)\r\n\r\n```","createdAt":"2018-04-17T06:40:55Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/742#issuecomment-381865502","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM4MTg2NzMxNQ==","author":{"login":"meteozond"},"authorAssociation":"NONE","body":"Looks like I've found solution myself. It suppose to be python installation issue. \r\n\r\nIf you are on macos, just run:\r\n\r\n```bash\r\n$ \"/Applications/Python 3.6/Install Certificates.command\"\r\n```\r\n","createdAt":"2018-04-17T06:47:30Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":2}}],"url":"https://github.com/PyGithub/PyGithub/issues/742#issuecomment-381867315","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM4MTg3MjcwMw==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"I am closing this.","createdAt":"2018-04-17T07:10:08Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/742#issuecomment-381872703","viewerDidAuthor":false}],"createdAt":"2018-04-07T11:52:56Z","number":742,"state":"CLOSED","title":"SSL error using sample code","url":"https://github.com/PyGithub/PyGithub/issues/742"},{"author":{"is_bot":true,"login":"app/"},"body":"Just to be sure it wasn't a `PYTHONPATH` issue, I also re-ran the command below after setting it.\r\n\r\n```\r\n(pygithub) [2018-04-04 11:14 mbp] (master) PyGithub $ python -m github.tests\r\nTraceback (most recent call last):\r\n  File \"/usr/local/Cellar/python/3.6.4_4/Frameworks/Python.framework/Versions/3.6/lib/python3.6/runpy.py\", line 183, in _run_module_as_main\r\n    mod_name, mod_spec, code = _get_module_details(mod_name, _Error)\r\n  File \"/usr/local/Cellar/python/3.6.4_4/Frameworks/Python.framework/Versions/3.6/lib/python3.6/runpy.py\", line 109, in _get_module_details\r\n    __import__(pkg_name)\r\n  File \"/Users/tboring/hearst/PyGithub/github/__init__.py\", line 42, in <module>\r\n    from MainClass import Github, GithubIntegration\r\nModuleNotFoundError: No module named 'MainClass'\r\n```","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDM3ODgwMjkwNw==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"It's an known issue for python2/3 import compatibility, right now the work-around is to run `python setup.py test` if you are using python3.","createdAt":"2018-04-05T02:31:32Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/740#issuecomment-378802907","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM3OTAxNjM5MQ==","author":{"login":""},"authorAssociation":"NONE","body":"Ah, cool.  Thanks!","createdAt":"2018-04-05T17:35:02Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/740#issuecomment-379016391","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQ0NDMzNjE4OQ==","author":{"login":"labrys"},"authorAssociation":"NONE","body":"This would be fixed by #967 ","createdAt":"2018-12-05T02:32:51Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/740#issuecomment-444336189","viewerDidAuthor":false}],"createdAt":"2018-04-04T15:35:43Z","number":740,"state":"CLOSED","title":"Tests fail with python 3.6.4","url":"https://github.com/PyGithub/PyGithub/issues/740"},{"author":{"id":"MDQ6VXNlcjIxODY5NzY3","is_bot":false,"login":"kbessas","name":"Konstantinos Bessas"},"body":"I believe these are still missing:\r\n\r\nhttps://developer.github.com/v3/repos/branches/#get-branch-protection\r\nhttps://developer.github.com/v3/repos/branches/#update-branch-protection\r\nhttps://developer.github.com/v3/repos/branches/#remove-branch-protection\r\nhttps://developer.github.com/v3/repos/branches/#get-required-status-checks-of-protected-branch\r\nhttps://developer.github.com/v3/repos/branches/#update-required-status-checks-of-protected-branch\r\nhttps://developer.github.com/v3/repos/branches/#remove-required-status-checks-of-protected-branch\r\n\r\nAnyone willing to create a pr for these?","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDM3NzE5MTEyOQ==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"Link to #527\r\n","createdAt":"2018-03-29T10:18:54Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/736#issuecomment-377191129","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM3OTQ4NDA4MQ==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"Closing this as a duplicate of #586","createdAt":"2018-04-07T17:01:43Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/736#issuecomment-379484081","viewerDidAuthor":false}],"createdAt":"2018-03-26T11:28:20Z","number":736,"state":"CLOSED","title":"Branch Protection calls missing","url":"https://github.com/PyGithub/PyGithub/issues/736"},{"author":{"id":"MDQ6VXNlcjEwMTYzOTA=","is_bot":false,"login":"sfdye","name":"Liuyang Wan"},"body":"","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDQwMjY1NDE4MA==","author":{"login":"stale"},"authorAssociation":"NONE","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","createdAt":"2018-07-05T08:58:46Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/733#issuecomment-402654180","viewerDidAuthor":false}],"createdAt":"2018-03-21T08:40:05Z","number":733,"state":"CLOSED","title":"Add pull request template and issue template","url":"https://github.com/PyGithub/PyGithub/issues/733"},{"author":{"id":"MDQ6VXNlcjgzNDA1OTI=","is_bot":false,"login":"zhangysh1995","name":"Shao"},"body":"**Expected behavior:**\r\n`results = g.search_repositories(query) ` returns correct results for `q=topic:cmake+language:cpp`\r\n\r\n**Error behavior:**\r\nNone results received.\r\n\r\n**Expected url**:\r\n`https://api.github.com/search/repositories?q=topic:cmake+language:cpp`\r\n\r\n**Code:**\r\n``` Python\r\nquery = 'topic:cmake+language:cpp'\r\nresults = g.search_repositories(query)\r\nfor repo in results.get_page(1):\r\n\tprint(repo.name)\r\n```\r\n**Result:** \r\n`none output`\r\n\r\n**Notes:**\r\nHere is the code that works:\r\n```` Python\r\nquery = 'topic:cmake'\r\nresults = g.search_repositories(query)\r\nfor repo in results.get_page(1):\r\n\tprint(repo.name)\r\n````\r\n\r\n**======= update =======**\r\nwith fix `topic:cmake+language:cpp` to `topic:cmake language:cpp` the code works.\r\n\r\n**Could you please add example usage to the doc?**","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDM3MzI1MDUzOQ==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"@zhangysh1995 We don't have a section on the documentation itself on code examples as of now.\r\n\r\nFeel free to checkout this [repo](https://github.com/sks444/Pygithub-Examples) and contribute.","createdAt":"2018-03-15T03:36:44Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/730#issuecomment-373250539","viewerDidAuthor":false}],"createdAt":"2018-03-14T08:03:02Z","number":730,"state":"CLOSED","title":"github.search_repositories returned empty with combined queries","url":"https://github.com/PyGithub/PyGithub/issues/730"},{"author":{"id":"MDQ6VXNlcjEwMTYzOTA=","is_bot":false,"login":"sfdye","name":"Liuyang Wan"},"body":"https://developer.github.com/v3/licenses/","comments":[],"createdAt":"2018-03-07T12:03:33Z","number":724,"state":"CLOSED","title":"Add License API","url":"https://github.com/PyGithub/PyGithub/issues/724"},{"author":{"id":"MDQ6VXNlcjQ1NjY4NTE=","is_bot":false,"login":"moijes12","name":"Alex"},"body":"How do we find the list of all repositories in github. \r\n\r\nUsing the command line it is possible, see https://developer.github.com/v3/repos/#list-all-public-repositories\r\n\r\nI am not able to do it with pygithub \r\n","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDM3MTEwNjY3MQ==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"Yes, you can do it with PyGithub with `get_repos()`:\r\nhttp://pygithub.readthedocs.io/en/latest/github.html#github.MainClass.Github.get_repos\r\n\r\n","createdAt":"2018-03-07T11:16:06Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/723#issuecomment-371106671","viewerDidAuthor":false}],"createdAt":"2018-03-06T14:49:16Z","number":723,"state":"CLOSED","title":"Add a way to get a list of all public repositories on github","url":"https://github.com/PyGithub/PyGithub/issues/723"},{"author":{"id":"MDQ6VXNlcjEwNTAxNTY=","is_bot":false,"login":"lmazuel","name":"Laurent Mazuel"},"body":"Support endpoint:\r\nhttps://developer.github.com/v3/repos/collaborators/#review-a-users-permission-level\r\n\r\nI'm not exactly sure what should the accessors:\r\n```python\r\nrepo.get_collaborator_permissions(\"userlogin\")\r\n```\r\n\r\nNote that it's not the same as listing collaborators and check \"permission\" node, the string content is not the same.\r\n\r\nThought? (at least on the expected Python syntax)","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDM3MDY0MzI2MA==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"@lmazuel Indeed, this is missing. Do you want to submit a PR so we can review together? Maybe call it like `review_collaborator_permission`.","createdAt":"2018-03-06T02:46:29Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":1}}],"url":"https://github.com/PyGithub/PyGithub/issues/722#issuecomment-370643260","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM3MDk4NzYzMw==","author":{"login":"lmazuel"},"authorAssociation":"CONTRIBUTOR","body":"Sure, I patched my own version so I should definitely be able to do a PR. I do that asap.","createdAt":"2018-03-07T01:14:41Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/722#issuecomment-370987633","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM4MTMyODMxNg==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"@lmazuel Any chance to work on the PR?","createdAt":"2018-04-14T13:12:46Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/722#issuecomment-381328316","viewerDidAuthor":false}],"createdAt":"2018-03-06T00:38:25Z","number":722,"state":"CLOSED","title":"Support for \"Review a user's permission level\"","url":"https://github.com/PyGithub/PyGithub/issues/722"},{"author":{"id":"MDQ6VXNlcjEwMTYzOTA=","is_bot":false,"login":"sfdye","name":"Liuyang Wan"},"body":"A lot of PRs did not have unit tests simply because contributors don't know how to write it properly for this repo. We should improve the contributing docs.","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDM3NDgxNjE0Nw==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"Close in favor of #432","createdAt":"2018-03-21T02:11:23Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/720#issuecomment-374816147","viewerDidAuthor":false}],"createdAt":"2018-03-03T03:40:36Z","number":720,"state":"CLOSED","title":"Improve documentation for CONTRIBUTING.md","url":"https://github.com/PyGithub/PyGithub/issues/720"},{"author":{"id":"MDQ6VXNlcjk3OTQwNA==","is_bot":false,"login":"JessMorgan","name":"Jess Morgan"},"body":"assert github.Github().get_user().get_repo(\"PyGithub\").get_pull(664).get_comment(166456140).in_reply_to_id == \"166453895\"\r\n\r\nCurrently, in_reply_to_id is undefined.  This makes it impossible to understand the comment threading.","comments":[],"createdAt":"2018-03-02T18:37:09Z","number":717,"state":"CLOSED","title":"Comments do not include reply info","url":"https://github.com/PyGithub/PyGithub/issues/717"},{"author":{"id":"MDQ6VXNlcjM5MTUy","is_bot":false,"login":"timball","name":"timball"},"body":"https://developer.github.com/v3/orgs/outside_collaborators/\r\n\r\nThere is no matching method for this in PyGithub. I need this to make a chatops bot that polls who in an org has 2fa enabled. \r\n\r\n--timball","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDM2OTgxMTYzNg==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"You are right, this is not supported yet. We need a PR for it.","createdAt":"2018-03-02T03:46:14Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/715#issuecomment-369811636","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM3MDIwMzg4MA==","author":{"login":"res0nance"},"authorAssociation":"CONTRIBUTOR","body":"I've attempted to implement them here but have yet to test any of it or start on its unit tests.\r\n\r\nhttps://github.com/res0nance/PyGithub/tree/feature/outside_collaborators","createdAt":"2018-03-04T05:42:38Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/715#issuecomment-370203880","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM3MDIzMDMyNQ==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"@res0nance Nice! I am waiting for your PR.","createdAt":"2018-03-04T13:43:16Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/715#issuecomment-370230325","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM3MDIzMDc1MA==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"@res0nance @timball I just realized #533 will fix it.","createdAt":"2018-03-04T13:50:23Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/715#issuecomment-370230750","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM3MDI4MjE1Ng==","author":{"login":"res0nance"},"authorAssociation":"CONTRIBUTOR","body":"@sfdye no worries my branch still implements the remaining 2 functions we should still merge the other PR if it has no conflicts and look at the remaining PRs there could be more API updates hidden in there.","createdAt":"2018-03-05T01:02:37Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/715#issuecomment-370282156","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM3MDMxNjk0Ng==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"@res0nance Okay then, still waiting for your PR 😄 ","createdAt":"2018-03-05T05:51:42Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/715#issuecomment-370316946","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM4MTcwMTM1OA==","author":{"login":"Sieabah"},"authorAssociation":"NONE","body":"@res0nance Any progress on your PR?","createdAt":"2018-04-16T18:20:57Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/715#issuecomment-381701358","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM4MTgxNzkyOA==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"This will be fixed in #533 ","createdAt":"2018-04-17T02:59:43Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/715#issuecomment-381817928","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM4MjE4MDAwMA==","author":{"login":"timball"},"authorAssociation":"NONE","body":"this is very exciting thank you","createdAt":"2018-04-17T22:43:49Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/715#issuecomment-382180000","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM4MjQwMDA2Mg==","author":{"login":"res0nance"},"authorAssociation":"CONTRIBUTOR","body":"When I found out @jappievw was working on it I stopped work on mine.","createdAt":"2018-04-18T14:10:30Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/715#issuecomment-382400062","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM4MjQwMDU2OA==","author":{"login":"jappievw"},"authorAssociation":"CONTRIBUTOR","body":"Yeah, will process the feedback in the PR tonight!","createdAt":"2018-04-18T14:11:54Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/715#issuecomment-382400568","viewerDidAuthor":false}],"createdAt":"2018-03-01T14:40:43Z","number":715,"state":"CLOSED","title":"Organization Outside Collaborators","url":"https://github.com/PyGithub/PyGithub/issues/715"},{"author":{"id":"MDQ6VXNlcjEwMTYzOTA=","is_bot":false,"login":"sfdye","name":"Liuyang Wan"},"body":"Left-over from #551 and 1ca7d523fb4af","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDM3MTc0NTY0NA==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"Actually we don't really need this in readthedocs.","createdAt":"2018-03-09T08:25:00Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/714#issuecomment-371745644","viewerDidAuthor":false}],"createdAt":"2018-03-01T09:48:48Z","number":714,"state":"CLOSED","title":"Add Contributing back to doc","url":"https://github.com/PyGithub/PyGithub/issues/714"},{"author":{"id":"MDQ6VXNlcjEzODEwNA==","is_bot":false,"login":"boreal321","name":"boreal321"},"body":"Hello,\r\n\r\nI'm trying to determine if a collaborator is a site admin but the site_admin key does not get returned:\r\n\r\n## code\r\n\r\n```\r\nfor repo in g.get_organization('orgName').get_repos():\r\n    for collab in repo.get_collaborators():\r\n        print(collab.site_admin)\r\n```\r\n\r\n## error\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"protected_test.py\", line 27, in <module>\r\n    print(collab.site_admin)\r\nAttributeError: 'NamedUser' object has no attribute 'site_admin'\r\n```\r\n\r\nThanks","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDM2OTQ2NzcyNQ==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"@boreal321 Thanks for reporting. `site_admin` needs to be implemented for `NamedUser`. This should be an easy fix, a PR will be welcomed.","createdAt":"2018-03-01T04:04:31Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/713#issuecomment-369467725","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM3MDY0MTQyMQ==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"Fixed in #719 ","createdAt":"2018-03-06T02:36:36Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/713#issuecomment-370641421","viewerDidAuthor":false}],"createdAt":"2018-02-28T20:26:16Z","number":713,"state":"CLOSED","title":"Can't access site_admin from collaborator endpoint","url":"https://github.com/PyGithub/PyGithub/issues/713"},{"author":{"id":"MDQ6VXNlcjEwMTYzOTA=","is_bot":false,"login":"sfdye","name":"Liuyang Wan"},"body":"It seems that the older version of docs were built on GitHub Pages but not currently maintained anymore.\r\n\r\nhttp://pygithub.github.io/PyGithub/v1/index.html\r\n\r\nThe information is out-dated on PyPI: (under Homepage)\r\nhttps://pypi.org/project/PyGithub/\r\n\r\nShall we update it?\r\n\r\n","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDM3MjY3MzI3NQ==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"Removed stale `gh-pages` branch.","createdAt":"2018-03-13T13:55:38Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/712#issuecomment-372673275","viewerDidAuthor":false}],"createdAt":"2018-02-27T02:27:44Z","number":712,"state":"CLOSED","title":"Remove gh-pages branch and old docs","url":"https://github.com/PyGithub/PyGithub/issues/712"},{"author":{"id":"MDQ6VXNlcjYyNDA0Nzg=","is_bot":false,"login":"moltob","name":"Mike Pagel"},"body":"I was trying to use the above-mentioned API and get a 404 not found in return. Looking at the issued REST call it seems not to match the current API.\r\n\r\nThe following REST call is issued:\r\n\r\n```\r\nPATCH https:/<url>/api/v3/repos/<org>/<repo>/branches\r\n\r\n{'Accept': 'application/vnd.github.loki-preview+json', 'Authorization': 'token (oauth token removed)', 'User-Agent': 'PyGithub/Python', 'Content-Type': 'application/json'}\r\n\r\n{\"protection\": {\"enabled\": true, \"required_status_checks\": {\"enforcement_level\": \"non_admins\"}}}\r\n```\r\n\r\nHowever, Github's API docs look like they expect it [differently](https://developer.github.com/enterprise/2.12/v3/repos/branches/#update-branch-protection). E.g. the endpoint URL holds ``/protection`` and the data keys also seem different (no ``protection``, no ``enabled``, ...).\r\n\r\nAm I missing something or is the Python API out-of-date?\r\n\r\nThanks a lot!","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDM2ODcyNTU3MA==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"@moltob Thanks a lot for reporting. You are right, GitHub constantly updates it API and we are absolutely not up-to-update on this change. Feel free to make a PR to fix it!","createdAt":"2018-02-27T02:31:07Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/711#issuecomment-368725570","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM3NTM0MjEwNw==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"I think this might link to #527","createdAt":"2018-03-22T15:12:24Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/711#issuecomment-375342107","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM3OTQ4NDAyMQ==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"Closing this as a duplicate of #736","createdAt":"2018-04-07T17:00:49Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/711#issuecomment-379484021","viewerDidAuthor":false}],"createdAt":"2018-02-26T17:12:25Z","number":711,"state":"CLOSED","title":"repo.protect_branch out-of-date?","url":"https://github.com/PyGithub/PyGithub/issues/711"},{"author":{"id":"MDQ6VXNlcjEzMTI5Mzkz","is_bot":false,"login":"daniyalj","name":"Daniyal"},"body":"## Summary\r\n\r\nBranches endpoint only returns the name of the Branches.\r\n\r\n## Issue\r\n\r\nI am getting a list of Branches in my repositories, but it seems to be only returning the name of the branches instead of the plethora information provided by the API https://developer.github.com/v3/repos/branches/#get-branch\r\n\r\n## Code\r\n```\r\nfor branch in g.get_organization('orgName').get_repo('repoName').get_branches():\r\n    print (branch) \r\n```\r\n## Actual output\r\n```\r\nBranch(name=\"dev\")\r\nBranch(name=\"master\")\r\n```\r\n\r\n## Expected output\r\n\r\nSomething similar to the JSON here https://developer.github.com/v3/repos/branches/#get-branch\r\n\r\n\r\nHow would I go about this if, as an example, I want to get the author of the branch?","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDM2ODczNzQ4NA==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"This is only the string representation of the actual object.\r\n\r\nTo see all available attributes:\r\n`print(dir(branch))`\r\n\r\nYou should be able to access a whole range of attributes like `branch.protected`.","createdAt":"2018-02-27T03:42:39Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/710#issuecomment-368737484","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQwNDYyNDAwMw==","author":{"login":"jtogden"},"authorAssociation":"NONE","body":"this is still a problem\r\nget_branches() only returns name and commit","createdAt":"2018-07-12T19:26:56Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/710#issuecomment-404624003","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQwNDcxOTUwOQ==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"What do you need exactly?","createdAt":"2018-07-13T04:04:30Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/710#issuecomment-404719509","viewerDidAuthor":false}],"createdAt":"2018-02-26T15:37:20Z","number":710,"state":"CLOSED","title":"Why does Branches endpoint only return name?","url":"https://github.com/PyGithub/PyGithub/issues/710"},{"author":{"id":"MDQ6VXNlcjEzMTI5Mzkz","is_bot":false,"login":"daniyalj","name":"Daniyal"},"body":":wave: \r\n\r\nI am doing an audit of list of protected branches in my organization. Is there any way to accomplish this?\r\n\r\nHere's what I have so far\r\n\r\n```\r\ng = Github(access_token, base_url='<github-enterprise-url>/api/v3')\r\nfor repo in g.get_organization('orgName').get_repos():\r\n    print (repo.name)\r\n\r\nfor branch in g.get_organization('orgName').get_repo('puppet').get_branches():\r\n    print (branch)\r\n```\r\n\r\nI am able to get a list of my branches in specific repos. Is there any function within PyGitHub to get the protection? I dont see it in the docs","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDM2NzIxMzI1Nw==","author":{"login":"res0nance"},"authorAssociation":"CONTRIBUTOR","body":"https://github.com/PyGithub/PyGithub/blob/0e5a1d1d53853153863ca8e446e00c71e6eaaa45/github/Branch.py#L57\r\n\r\nThe branch object has a property protected which should fit your needs.","createdAt":"2018-02-21T04:53:47Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/708#issuecomment-367213257","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM2NzM0NjE5OQ==","author":{"login":"daniyalj"},"authorAssociation":"NONE","body":"@res0nance How do I use this in my current script? I don't see any documentation about this","createdAt":"2018-02-21T14:37:57Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/708#issuecomment-367346199","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM2NzM1NDQ2Ng==","author":{"login":"res0nance"},"authorAssociation":"CONTRIBUTOR","body":"```\r\nprotected_branches = []\r\nfor branch in g.get_organization('orgName').get_repo('puppet').get_branches():\r\n    if branch.protected:\r\n        protected_branches.append(branch)\r\n```\r\n\r\nI've not tested this but from how the code looks i would think this would be the right answer since get_branches returns a paginatedlist of branch objects","createdAt":"2018-02-21T15:02:20Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/708#issuecomment-367354466","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM2NzM1NjQzNw==","author":{"login":"daniyalj"},"authorAssociation":"NONE","body":"Thanks for your help @res0nance !\r\n\r\nBut I'm getting Branch has no attribute '_protected'\r\n\r\n```\r\nAttributeError: 'Branch' object has no attribute '_protected'\r\n```\r\n\r\nLooking at the documentation and I don't see anything for protected http://pygithub.readthedocs.io/en/latest/github_objects/Branch.html","createdAt":"2018-02-21T15:07:46Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/708#issuecomment-367356437","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM2NzM2NDM1OA==","author":{"login":"res0nance"},"authorAssociation":"CONTRIBUTOR","body":"According to https://developer.github.com/v3/repos/branches/#list-branches\r\nit does return the protected flag I'm unsure of why the attribute does not exist which according to the code implies the protected field was not returned. Ill look into this when I have the time.\r\n\r\nThe documentation looks outdated the changelog was last updated in 2014","createdAt":"2018-02-21T15:31:12Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/708#issuecomment-367364358","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM2NzU2NDcyMw==","author":{"login":"res0nance"},"authorAssociation":"CONTRIBUTOR","body":"@daniyalj I have no idea why github's api doesnt seem to return the protection status but I can offer a workaround.\r\n```\r\nrepo = g.get_organization('orgName').get_repo('puppet')\r\nprotected_branches = []\r\nfor branch in repo.get_branches():\r\n    b = repo.get_branch(branch.name)\r\n    if b.protected:\r\n        protected_branches.append(b)\r\n```\r\nFrom what i see get_branch seems to get the protection status while get_branches does not","createdAt":"2018-02-22T04:34:05Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/708#issuecomment-367564723","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM2NzcxNjc2NA==","author":{"login":"daniyalj"},"authorAssociation":"NONE","body":"@res0nance I greatly appreciate the help!\r\n\r\nI'm trying the snippet  you posted above. I have two branches in my puppet repository and theyre both protected. Printing `protected_branches.append(b)` returns \"None\" for both of them which is weird.\r\n\r\n```\r\ng = Github(access_token, base_url='<github-enterprise-url>/api/v3')\r\nrepo = g.get_organization('orgName').get_repo('puppet')\r\nprotected_branches = []\r\nfor branch in repo.get_branches():\r\n    b = repo.get_branch(branch.name)\r\n    if b.protected:\r\n        print(protected_branches.append(b))\r\n```","createdAt":"2018-02-22T15:28:06Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/708#issuecomment-367716764","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM2Nzg2MDYyMw==","author":{"login":"res0nance"},"authorAssociation":"CONTRIBUTOR","body":"@daniyalj\r\nAhh if I misunderstood i thought you needed it as a list object if all you needed to do was to print it, it will be\r\n\r\n```\r\ng = Github(access_token, base_url='<github-enterprise-url>/api/v3')\r\nrepo = g.get_organization('orgName').get_repo('puppet')\r\nfor branch in repo.get_branches():\r\n    b = repo.get_branch(branch.name)\r\n    if b.protected:\r\n        print(b) #this has a lot of information\r\n        print(b.name) # only gets the name\r\n```\r\n\r\nIn my above example the list of protected branches is protected_branches at the end of the code.\r\n\r\nI have contacted github and it seems that protection information is only returned from the branches endpoint when the protected=true param is passed.","createdAt":"2018-02-22T23:40:05Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":1}}],"url":"https://github.com/PyGithub/PyGithub/issues/708#issuecomment-367860623","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM2ODAzNjI4Mg==","author":{"login":"daniyalj"},"authorAssociation":"NONE","body":"Thank you @res0nance that works!\r\n\r\nMuch appreciated!","createdAt":"2018-02-23T15:12:46Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/708#issuecomment-368036282","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDUxODM4NzcwNA==","author":{"login":"gatsbyz"},"authorAssociation":"NONE","body":"thank you and god bless you for this thread. i love you all","createdAt":"2019-08-05T20:31:19Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/708#issuecomment-518387704","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs44q0CN","author":{"login":"s-t-e-v-e-n-k"},"authorAssociation":"COLLABORATOR","body":"Do not under any circumstances post tokens to this issue tracker. Could you please open a new issue with a full traceback please?","createdAt":"2021-10-25T10:01:53Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/708#issuecomment-950747277","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs49WtTY","author":{"login":"CsBigDataHub"},"authorAssociation":"NONE","body":"```\r\ng = Github(access_token, base_url='<github-enterprise-url>/api/v3')\r\nrepo = g.get_organization('orgName').get_repo('puppet')\r\nprotected_branches = []\r\nfor branch in repo.get_branches():\r\n    if branch.protected:\r\n        print(branch) #this has a lot of information\r\n        print(branch.name) # only gets the name\r\n        protected_branches.append(branch.name)\r\n```\r\n\r\nThis will work as well, you do not need to call ` b = repo.get_branch(branch.name)` again.","createdAt":"2022-02-03T20:16:00Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/708#issuecomment-1029362904","viewerDidAuthor":false}],"createdAt":"2018-02-20T21:21:13Z","number":708,"state":"CLOSED","title":"Get list of protected branches","url":"https://github.com/PyGithub/PyGithub/issues/708"},{"author":{"id":"MDQ6VXNlcjgwMzY2Ng==","is_bot":false,"login":"monperrus","name":"Martin Monperrus"},"body":"I notice that calling `get_comments` on a PR object does not return the comments created with `create_issue_comment`, it only returns the user-based comments made with the web interface. Similarly, `get_issue_comments` does not return the API-created comments.\r\n\r\nThis is quite counter-intuitive.\r\n\r\nIs that on purpose?\r\n","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDM3OTE5OTYwOA==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"Hi @monperrus Thanks for reporting.\r\n\r\nCan you provide an example?","createdAt":"2018-04-06T09:27:09Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/707#issuecomment-379199608","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM3OTMxODE3Mw==","author":{"login":"monperrus"},"authorAssociation":"CONTRIBUTOR","body":"Steps to reproduce:\r\n\r\n1. post comment x with create_issue_comment\r\n1. get comment list with get_comments\r\n1. check that x in in list (this fails, x is not the list)","createdAt":"2018-04-06T17:15:02Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/707#issuecomment-379318173","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM3OTQzMTU2NQ==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"@monperrus To answer your original question. Yes that's on purpose.\r\n\r\nFrom https://developer.github.com/v3/pulls/comments/:\r\n> Pull Request review comments are comments on a portion of the unified diff. These are separate from Commit Comments (which are applied directly to a commit, outside of the Pull Request view), and Issue Comments (which do not reference a portion of the unified diff).\r\n\r\nSo to summarize, PR review comment is different from issue comment. However, if you look at the source code, the `get_comments` method on PullRequest is actually an alias of `get_review_comments`. (probably a history problem, I don't know) \r\n\r\n`get_issue_comments` is what you want and I believe you should get what you created with `create_issue_comment` unless there is a caching or timing issue?","createdAt":"2018-04-07T04:34:23Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/707#issuecomment-379431565","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM3OTQ2NTY0Mw==","author":{"login":"monperrus"},"authorAssociation":"CONTRIBUTOR","body":"Thanks for the explanation.\r\n\r\nCreated https://github.com/PyGithub/PyGithub/pull/743 to fix the issue.","createdAt":"2018-04-07T12:24:53Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/707#issuecomment-379465643","viewerDidAuthor":false}],"createdAt":"2018-02-20T11:59:32Z","number":707,"state":"CLOSED","title":"get_comments does not return the comments created with create_issue_comments","url":"https://github.com/PyGithub/PyGithub/issues/707"},{"author":{"id":"MDQ6VXNlcjM0MTA1NTQ2","is_bot":false,"login":"tsiq-acheung","name":"Andrew Cheung"},"body":"Using the GitHub API I received a 422 when trying to privatize a public fork, but when doing so with PyGithub client it responds with no error (and no change to repository private status).  This was done with an organization.\r\n\r\nTo reproduce:\r\n```\r\nrepo = github_client.get_organization(org_name).get_repo(\"name-of-public-fork\")\r\nrepo.edit(private=True)\r\nbool(repo.private) is True\r\nFalse\r\n```","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDM2NTMyNTg0OA==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"It's probably a bug, as public forks can’t be made private. We should provide the correct response code in the sense. A PR to fix will be welcomed.\r\n","createdAt":"2018-02-13T16:42:27Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/700#issuecomment-365325848","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM3OTIyMjExMg==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"@tsiq-acheung I tried to reproduce this but I only got a 404 from both calling API and using this library, which I feel is good enough.\r\n\r\nCan you provide the exact repo name to for you to reproduce this?","createdAt":"2018-04-06T11:09:08Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/700#issuecomment-379222112","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM3OTIzNzk4Mw==","author":{"login":"tsiq-acheung"},"authorAssociation":"NONE","body":"@sfdye I ageee a 404 is good enough, I’ll give it another shot and close this out if so.\r\n\r\nThe repo was only temporary as its under the organization, but if I have another successful test I’ll leave it up to confirm.","createdAt":"2018-04-06T12:27:52Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/700#issuecomment-379237983","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM3OTI0NzA0OA==","author":{"login":"tsiq-acheung"},"authorAssociation":"NONE","body":"Looks to be the same, but maybe it's a GitHub problem and not PyGithub. After stepping into the `repo.edit()` I get to `__requestRaw()` in Requester.py with these arguments:\r\n`verb: 'PATCH', url: '/repos/tsiq/acheung-test-repo-1', input: '{\"name\": \"acheung-test-repo-1\", \"private\": true}'`\r\n\r\nThen after `cnx.getresponse()` I have a response status of 200, so nothing is thrown when it goes up the stack.\r\n\r\nMaybe I'm doing something incorrectly? I would expect at this point to get the 422 from GitHub.","createdAt":"2018-04-06T13:05:09Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/700#issuecomment-379247048","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM3OTI1MTUwOQ==","author":{"login":"acheung456"},"authorAssociation":"NONE","body":"I've left up a repo in the test state (public fork in an organization) at https://github.com/andrew-cheung/test-repo . I'll look more into this and can add you to the org if you want to test.\r\n\r\nDid you test with your own org/repo? Maybe the 404 is because of permissions?","createdAt":"2018-04-06T13:22:17Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/700#issuecomment-379251509","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM3OTI4ODIxOQ==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"@tsiq-acheung \r\n\r\nFrom https://developer.github.com/v3/repos/#edit\r\n> Either true to make the repository private or false to make it public. Creating private repositories requires a paid GitHub account. Default: false.\r\nNote: You will get a 422 error if the organization restricts changing repository visibility to organization owners and a non-owner tries to change the value of private.\r\n\r\nIt looks like this constraint only applies for a repo under a organization, since you are always the owner of your own repo, so you should be able to change the visibility of your repo too.\r\n","createdAt":"2018-04-06T15:25:36Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/700#issuecomment-379288219","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM3OTI4OTA4Mw==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"@acheung456 This will give me a 404. Maybe add me as a non-owner member and I will try again.\r\n\r\nYes, I tried with my own org repo and all get 404.","createdAt":"2018-04-06T15:28:30Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/700#issuecomment-379289083","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDUzMTA4NzQ1OA==","author":{"login":"stale"},"authorAssociation":"NONE","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","createdAt":"2019-09-13T03:48:35Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/700#issuecomment-531087458","viewerDidAuthor":false}],"createdAt":"2018-02-09T16:19:07Z","number":700,"state":"CLOSED","title":"No exception raised for trying to make public fork private?","url":"https://github.com/PyGithub/PyGithub/issues/700"},{"author":{"id":"MDQ6VXNlcjEwMTYzOTA=","is_bot":false,"login":"sfdye","name":"Liuyang Wan"},"body":"It's been some time since the last release. I don't really want my project to depend on the master. Who needs it too?","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDM2MzY2Njg2Ng==","author":{"login":"modrzew"},"authorAssociation":"NONE","body":":+1: to that. Most recent changes to the Review Requests API broke one part of our application, and ideally we'd want to fix it with just bumping the version in our `requirements.txt`.","createdAt":"2018-02-07T06:03:49Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":1}}],"url":"https://github.com/PyGithub/PyGithub/issues/696#issuecomment-363666866","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM2MzY5NTYwNw==","author":{"login":"jasonwhite"},"authorAssociation":"COLLABORATOR","body":"A release? Yes! A release! Yup. It's time for a release.\r\n\r\n@jayfk Can you give me access to upload releases to PyPI?","createdAt":"2018-02-07T08:37:51Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/696#issuecomment-363695607","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM2MzY5NjIxNg==","author":{"login":"jayfk"},"authorAssociation":"CONTRIBUTOR","body":"Can’t do that as I don’t have the permissions. \r\n\r\nIn order to issue a new release, simply tag it and push the tags to github. If all tests are passing, travis will deploy the package to pypi.","createdAt":"2018-02-07T08:40:23Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":1}}],"url":"https://github.com/PyGithub/PyGithub/issues/696#issuecomment-363696216","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM2MzY5NjY3Ng==","author":{"login":"jasonwhite"},"authorAssociation":"COLLABORATOR","body":"Thanks. Releasing is easier than I thought.","createdAt":"2018-02-07T08:42:21Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":1}}],"url":"https://github.com/PyGithub/PyGithub/issues/696#issuecomment-363696676","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM2MzY5OTU3NA==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"Also @jayfk @jacquev6 is this repo still seeking active maintainership? I can help with things like triage issues/PR and cut releases. ","createdAt":"2018-02-07T08:53:05Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/696#issuecomment-363699574","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM2MzcwMzEzMQ==","author":{"login":"jasonwhite"},"authorAssociation":"COLLABORATOR","body":"@sfdye I would love some help. I have a hard time keeping up with it.\r\n\r\nI just published a new release (v1.36). There was quite a bundle of changes in this one.\r\n\r\n(For future reference, publishing a release is as easy as `./manage.sh publish`.)","createdAt":"2018-02-07T09:07:07Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":1}}],"url":"https://github.com/PyGithub/PyGithub/issues/696#issuecomment-363703131","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM2MzcwMzU2MQ==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"@jasonwhite Thanks for the release, already bumped my version. You will get the help from me for future releases 😄 ","createdAt":"2018-02-07T09:08:46Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"HEART","users":{"totalCount":1}}],"url":"https://github.com/PyGithub/PyGithub/issues/696#issuecomment-363703561","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM2MzcwMzc1Mg==","author":{"login":"jayfk"},"authorAssociation":"CONTRIBUTOR","body":"Yeah, welcome @sfdye!","createdAt":"2018-02-07T09:09:36Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"HOORAY","users":{"totalCount":1}}],"url":"https://github.com/PyGithub/PyGithub/issues/696#issuecomment-363703752","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM2MzcwMzk3Nw==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"@jayfk Thanks for the invite!","createdAt":"2018-02-07T09:10:25Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/696#issuecomment-363703977","viewerDidAuthor":false}],"createdAt":"2018-02-06T14:07:05Z","number":696,"state":"CLOSED","title":"New release?","url":"https://github.com/PyGithub/PyGithub/issues/696"},{"author":{"id":"MDQ6VXNlcjI0NTI4NTY2","is_bot":false,"login":"MattPhillips1","name":""},"body":"The `asserts` that check against `(str, unicode)` throw the above exception when using python3\r\ne.g\r\n`assert description is github.GithubObject.NotSet or isinstance(description, (str, unicode)), description` when creating a repo for an organisation.","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDM2Njg1NDgzOA==","author":{"login":"labrys"},"authorAssociation":"NONE","body":"@MattPhillips1 contrary to the README stating the package is PY3 compatible, it is not.  It will be if #705 gets merged.  In the meantime if you would like to assist me in PY3 testing, check out the develop branch of my fork.","createdAt":"2018-02-20T03:07:54Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/694#issuecomment-366854838","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQwMjY1NDE4OQ==","author":{"login":"stale"},"authorAssociation":"NONE","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","createdAt":"2018-07-05T08:58:48Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/694#issuecomment-402654189","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQxOTg2ODQ5NQ==","author":{"login":"stale"},"authorAssociation":"NONE","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","createdAt":"2018-09-10T10:38:15Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/694#issuecomment-419868495","viewerDidAuthor":false}],"createdAt":"2018-02-02T11:08:24Z","number":694,"state":"CLOSED","title":"name 'unicode' is not defined error","url":"https://github.com/PyGithub/PyGithub/issues/694"},{"author":{"id":"MDQ6VXNlcjE4NjAwODU=","is_bot":false,"login":"tokejepsen","name":"Toke Jepsen"},"body":"Trying to upload an asset of ~600 MB to a GitHub release, but getting the below error.\r\n\r\n```python\r\nTraceback (most recent call last):\r\n  File \"run_deploy.py\", line 47, in <module>\r\n    label=release_title\r\n  File \"C:\\Python27-x64\\lib\\site-packages\\github\\GitRelease.py\", line 161, in upload_asset\r\n    input=path\r\n  File \"C:\\Python27-x64\\lib\\site-packages\\github\\Requester.py\", line 177, in requestBlobAndCheck\r\n    return self.__check(*self.requestBlob(verb, url, parameters, headers, input))\r\n  File \"C:\\Python27-x64\\lib\\site-packages\\github\\Requester.py\", line 245, in requestBlob\r\n    return self.__requestEncode(None, verb, url, parameters, headers, input, encode)\r\n  File \"C:\\Python27-x64\\lib\\site-packages\\github\\Requester.py\", line 268, in __requestEncode\r\n    status, responseHeaders, output = self.__requestRaw(cnx, verb, url, requestHeaders, encoded_input)\r\n  File \"C:\\Python27-x64\\lib\\site-packages\\github\\Requester.py\", line 295, in __requestRaw\r\n    response = cnx.getresponse()\r\n  File \"C:\\Python27-x64\\lib\\httplib.py\", line 1121, in getresponse\r\n    response.begin()\r\n  File \"C:\\Python27-x64\\lib\\httplib.py\", line 438, in begin\r\n    version, status, reason = self._read_status()\r\n  File \"C:\\Python27-x64\\lib\\httplib.py\", line 394, in _read_status\r\n    line = self.fp.readline(_MAXLINE + 1)\r\n  File \"C:\\Python27-x64\\lib\\socket.py\", line 480, in readline\r\n    data = self._sock.recv(self._rbufsize)\r\n  File \"C:\\Python27-x64\\lib\\ssl.py\", line 766, in recv\r\n    return self.read(buflen)\r\n  File \"C:\\Python27-x64\\lib\\ssl.py\", line 653, in read\r\n    v = self._sslobj.read(len)\r\nssl.SSLError: ('The read operation timed out',)\r\n```\r\n\r\nAll I'm doing is ```release.upload_asset(\"/path/to/deployment.zip\")```.\r\n\r\nAm I using the library wrong somehow?","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDM2MjYwODM0NQ==","author":{"login":"ncapalbo"},"authorAssociation":"NONE","body":"Within the last week, I've been encountering the same SSL error (i.e. 'The read operation timed out') with frequency I've never experienced before.  The API call that seems to be causing it is get_public_events() of the NamedUser object.  I've tried a bunch of things to reproduce the error but I can't pinpoint the root cause.","createdAt":"2018-02-02T14:56:13Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/693#issuecomment-362608345","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM3NDgzOTE3NQ==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"Is this still an issue? \r\n\r\n@ncapalbo can you provide some details of your case? ","createdAt":"2018-03-21T05:46:33Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/693#issuecomment-374839175","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM3NTMyNzQ4OQ==","author":{"login":"ncapalbo"},"authorAssociation":"NONE","body":"@sfdye apologies for the delay in following up to this!\r\n\r\nI'm still experiencing intermittent failures in using the library, but it's very unclear what exactly is the root cause (i.e. whether it's PyGitHub or a strange behavior since the script is running in AWS Lambda).  After a bit of debugging here is the snippet of code where the issue is occurring:\r\n\r\n```python\r\n    while error_count < 4:\r\n      try:\r\n        results = self.find_sensitive_commits(users)\r\n        break\r\n      except Exception as e:\r\n        error_count += 1\r\n        self._logger.error(\r\n            'Error #%d; unable to complete audit: %s' % (\r\n                error_count, e.message))\r\n```\r\n\r\nfind_sensitive_commits() looks like this:\r\n```python\r\n  def find_sensitive_commits(self, users):\r\n    \"\"\"Get all the public events for our org users and audit them.\r\n    Args:\r\n        users (list): a list of github.NamedUser objects.\r\n    Returns:\r\n        A dict containing all commits that contain sensitive keywords.\r\n    \"\"\"\r\n    results = []\r\n    for user in users:\r\n      # TODO(ncapalbo): it is understood that this print statement is going\r\n      # create quite a volume of logging.  The root cause of <redacted> is\r\n      # still unknown, so this will possibly help debugging efforts.\r\n      self._logger.info('Analyzing public commits of user \"%s\"' % user.login)\r\n      events = [i for i in user.get_public_events() if i.type == 'PushEvent']\r\n      for event in events:\r\n        if self.is_expired_commit(event.created_at):\r\n          continue\r\n```\r\n\r\nPrint statement debugging has indicated the failure is occurring on the call to user.get_public_events().  What's slightly odd about this whole thing is when I catch the exception, there is no e.message:\r\n\r\n```\r\n[ERROR] 2018-03-19T04:34:34.811Z  498a7277-2b2e-11e8-823d-bb16359c081e  Error #2; unable to complete audit:\r\n```\r\n\r\nI thought maybe it was due to a particular commit from a particular GitHub user that consistently causes the script to crash, but the user prior to the error condition is not always the same.  I'm not sure if any of this helps understand the issue, but I'm happy to elaborate more if need be.  Thanks in advance for your help with this!","createdAt":"2018-03-22T14:32:52Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/693#issuecomment-375327489","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM3NTMyOTY2Mw==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"Very interesting use case indeed! I am sorry but it seems the topic has diverged as the original issue was with the asset upload API and now is `get_public_events()`? What is the exact issue please? ","createdAt":"2018-03-22T14:39:02Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/693#issuecomment-375329663","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM3NTM0MzU0Nw==","author":{"login":"ncapalbo"},"authorAssociation":"NONE","body":"Apologies if my response wasn't clear.  The exact issue is (or at least was) that both calls -- get_public_events() as well as upload_asset() -- were resulting in the `The read operation timed out` SSL error from the original comment.  My error seems to be diverging from that now, but again, it's hard to tell since whatever exception is being caught doesn't apparently have a message object field.  Is that more clear?","createdAt":"2018-03-22T15:16:11Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/693#issuecomment-375343547","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM3NTM0ODMxOA==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"Thanks, I am clearer now. Give me some time to investigate the issue and get back to you. This might be a bit tricky to debug though.","createdAt":"2018-03-22T15:29:12Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/693#issuecomment-375348318","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM4NDAwNTU5Mg==","author":{"login":"mfonville"},"authorAssociation":"CONTRIBUTOR","body":"This is a notorious problem on the side of GitHub (the AWS infrastructure regularly fails) and the same happens with e.g. GotHub/GitHub-Release (https://github.com/itchio/gothub)\r\n\r\nBest would be if at least pygithub can handle this situation gracefully, and that we can give examples to users how to deal with the situation (recognizing a failed upload, removing an incomplete upload asset, retrying)","createdAt":"2018-04-24T16:58:47Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/693#issuecomment-384005592","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM4NDE0MDU2MQ==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"@mfonville Thank you for the information. It's nice to know the same happened for a Go package, so it's not only PyGithub's problem. Will definitely put it as a feature request.","createdAt":"2018-04-25T02:21:45Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/693#issuecomment-384140561","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM4NDE0MTExMQ==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"Oh I just saw your PR #768","createdAt":"2018-04-25T02:25:41Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/693#issuecomment-384141111","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM4Nzk4NDg3Mg==","author":{"login":"mfonville"},"authorAssociation":"CONTRIBUTOR","body":"With PyGithub now using requests in the backend, the error has changed a little bit, and should be able to be caught by the developer if checking for a HTTP status 502 in the GithubException.\r\n\r\n```\r\n  File \"/home/maarten/PyGithub/build/lib/github/Requester.py\", line 261, in requestBlobAndCheck\r\n    return self.__check(*self.requestBlob(verb, url, parameters, headers, input, self.__customConnection(url)))\r\n  File \"/home/maarten/PyGithub/build/lib/github/Requester.py\", line 266, in __check\r\n    raise self.__createException(status, responseHeaders, output)\r\ngithub.GithubException.GithubException: 502 {'message': 'Error uploading asset', 'request_id': 'xxxxxxxxxxxxxxxxxxxxxxx'}\r\n```\r\nThough it could also be that error 422 is returned (not sure) according to the experiences at https://github.com/sigmavirus24/github3.py/issues/779#issuecomment-379439412\r\n\r\n\r\nAnyhow, if that happens, it is necessary to remove the partially uploaded asset before trying again; some example code:\r\n```python\r\nfor asset in release.get_assets():\r\n    if asset.name == filename and asset.state == \"new\":\r\n        asset.delete_asset()\r\n```","createdAt":"2018-05-10T08:13:21Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/693#issuecomment-387984872","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM4OTQyODI5Nw==","author":{"login":"mfonville"},"authorAssociation":"CONTRIBUTOR","body":"An update, during my script I also got this one, a real http timeout:\r\n```python\r\n  File \"/home/maarten/PyGithub/build/lib/github/GitRelease.py\", line 210, in upload_asset\r\n    input=path\r\n  File \"/home/maarten/PyGithub/build/lib/github/Requester.py\", line 261, in requestBlobAndCheck\r\n    return self.__check(*self.requestBlob(verb, url, parameters, headers, input, self.__customConnection(url)))\r\n  File \"/home/maarten/PyGithub/build/lib/github/Requester.py\", line 266, in __check\r\n    raise self.__createException(status, responseHeaders, output)\r\ngithub.GithubException.GithubException: 504 {'data': '<!DOCTYPE html>\\n<!--\\n\\nHello future GitHubber! I bet you\\'re here to remove those nasty inline styles,\\nDRY up these templates and make \\'em nice and re-usable, right?\\n\\nPlease, don\\'t. https://github.com/styleguide/templates/2.0\\n\\n-->\\n<html> .....more HTML stuff here....\r\n```\r\nSo a `504` is also a http status to check for.","createdAt":"2018-05-16T07:52:15Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/693#issuecomment-389428297","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM4OTYxMTMyMQ==","author":{"login":"jhoblitt"},"authorAssociation":"CONTRIBUTOR","body":"@mfonville I don't believe you are seeing the failure described at the root of this ticket as there would be no HTTP status code or json data with an error message.  Ultimately, the failure mode I see is a socket read error with both `1.39` and `1.40a3`, although the stack trace is different due to the changes with the plumbing.\r\n\r\n`1.40a3`\r\n---\r\n```\r\nTraceback (most recent call last):\r\n  File \"/home/jhoblitt/github/sqre-codekit/venv/lib/python3.6/site-packages/urllib3/connectionpool.py\", line 387, in _make_request\r\n    six.raise_from(e, None)\r\n  File \"<string>\", line 2, in raise_from\r\n  File \"/home/jhoblitt/github/sqre-codekit/venv/lib/python3.6/site-packages/urllib3/connectionpool.py\", line 383, in _make_request\r\n    httplib_response = conn.getresponse()\r\n  File \"/usr/lib64/python3.6/http/client.py\", line 1331, in getresponse\r\n    response.begin()\r\n  File \"/usr/lib64/python3.6/http/client.py\", line 297, in begin\r\n    version, status, reason = self._read_status()\r\n  File \"/usr/lib64/python3.6/http/client.py\", line 258, in _read_status\r\n    line = str(self.fp.readline(_MAXLINE + 1), \"iso-8859-1\")\r\n  File \"/usr/lib64/python3.6/socket.py\", line 586, in readinto\r\n    return self._sock.recv_into(b)\r\n  File \"/usr/lib64/python3.6/ssl.py\", line 965, in recv_into\r\n    return self.read(nbytes, buffer)\r\n  File \"/usr/lib64/python3.6/ssl.py\", line 827, in read\r\n    return self._sslobj.read(len, buffer)\r\n  File \"/usr/lib64/python3.6/ssl.py\", line 587, in read\r\n    v = self._sslobj.read(len, buffer)\r\nsocket.timeout: The read operation timed out\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n  File \"/home/jhoblitt/github/sqre-codekit/venv/lib/python3.6/site-packages/requests/adapters.py\", line 440, in send\r\n    timeout=timeout\r\n  File \"/home/jhoblitt/github/sqre-codekit/venv/lib/python3.6/site-packages/urllib3/connectionpool.py\", line 639, in urlopen\r\n    _stacktrace=sys.exc_info()[2])\r\n  File \"/home/jhoblitt/github/sqre-codekit/venv/lib/python3.6/site-packages/urllib3/util/retry.py\", line 357, in increment\r\n    raise six.reraise(type(error), error, _stacktrace)\r\n  File \"/home/jhoblitt/github/sqre-codekit/venv/lib/python3.6/site-packages/urllib3/packages/six.py\", line 686, in reraise\r\n    raise value\r\n  File \"/home/jhoblitt/github/sqre-codekit/venv/lib/python3.6/site-packages/urllib3/connectionpool.py\", line 601, in urlopen\r\n    chunked=chunked)\r\n  File \"/home/jhoblitt/github/sqre-codekit/venv/lib/python3.6/site-packages/urllib3/connectionpool.py\", line 389, in _make_request\r\n    self._raise_timeout(err=e, url=url, timeout_value=read_timeout)\r\n  File \"/home/jhoblitt/github/sqre-codekit/venv/lib/python3.6/site-packages/urllib3/connectionpool.py\", line 309, in _raise_timeout\r\n    raise ReadTimeoutError(self, url, \"Read timed out. (read timeout=%s)\" % timeout_value)\r\nurllib3.exceptions.ReadTimeoutError: HTTPSConnectionPool(host='api.github.com', port=443): Read timed out. (read timeout=10)\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n  File \"/home/jhoblitt/github/sqre-codekit/venv/bin/github-fork-org\", line 11, in <module>\r\n    load_entry_point('sqre-codekit', 'console_scripts', 'github-fork-org')()\r\n  File \"/home/jhoblitt/github/sqre-codekit/codekit/cli/github_fork_org.py\", line 377, in main\r\n    dry_run=args.dry_run\r\n  File \"/home/jhoblitt/github/sqre-codekit/codekit/cli/github_fork_org.py\", line 160, in create_teams\r\n    dst_t = org.create_team(name, repo_names=repos)\r\n  File \"/home/jhoblitt/github/sqre-codekit/venv/lib/python3.6/site-packages/PyGithub-1.40a3-py3.6.egg/github/Organization.py\", line 470, in create_team\r\n    input=post_parameters\r\n  File \"/home/jhoblitt/github/sqre-codekit/venv/lib/python3.6/site-packages/PyGithub-1.40a3-py3.6.egg/github/Requester.py\", line 258, in requestJsonAndCheck\r\n    return self.__check(*self.requestJson(verb, url, parameters, headers, input, cnx))\r\n  File \"/home/jhoblitt/github/sqre-codekit/venv/lib/python3.6/site-packages/PyGithub-1.40a3-py3.6.egg/github/Requester.py\", line 304, in requestJson\r\n    return self.__requestEncode(cnx, verb, url, parameters, headers, input, encode)\r\n  File \"/home/jhoblitt/github/sqre-codekit/venv/lib/python3.6/site-packages/PyGithub-1.40a3-py3.6.egg/github/Requester.py\", line 357, in __requestEncode\r\n    status, responseHeaders, output = self.__requestRaw(cnx, verb, url, requestHeaders, encoded_input)\r\n  File \"/home/jhoblitt/github/sqre-codekit/venv/lib/python3.6/site-packages/PyGithub-1.40a3-py3.6.egg/github/Requester.py\", line 384, in __requestRaw\r\n    response = cnx.getresponse()\r\n  File \"/home/jhoblitt/github/sqre-codekit/venv/lib/python3.6/site-packages/PyGithub-1.40a3-py3.6.egg/github/Requester.py\", line 105, in getresponse\r\n    r = verb(url, headers=self.headers, data=self.input, timeout=self.timeout, verify=self.verify)\r\n  File \"/home/jhoblitt/github/sqre-codekit/venv/lib/python3.6/site-packages/requests/sessions.py\", line 555, in post\r\n    return self.request('POST', url, data=data, json=json, **kwargs)\r\n  File \"/home/jhoblitt/github/sqre-codekit/venv/lib/python3.6/site-packages/requests/sessions.py\", line 508, in request\r\n    resp = self.send(prep, **send_kwargs)\r\n  File \"/home/jhoblitt/github/sqre-codekit/venv/lib/python3.6/site-packages/requests/sessions.py\", line 618, in send\r\n    r = adapter.send(request, **kwargs)\r\n  File \"/home/jhoblitt/github/sqre-codekit/venv/lib/python3.6/site-packages/requests/adapters.py\", line 521, in send\r\n    raise ReadTimeout(e, request=request)\r\nrequests.exceptions.ReadTimeout: HTTPSConnectionPool(host='api.github.com', port=443): Read timed out. (read timeout=10)\r\n\r\n```","createdAt":"2018-05-16T18:01:21Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/693#issuecomment-389611321","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM4OTYxMzQ5Mw==","author":{"login":"jhoblitt"},"authorAssociation":"CONTRIBUTOR","body":"@mfonville I should have noted that I do also see frequent http `50X`s but they seem to come in waves and aren't reproducible outside of a short time window.  The socket timeouts above is consistently repeatable when trying to create a team with > 100 member repos.","createdAt":"2018-05-16T18:08:33Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/693#issuecomment-389613493","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM4OTYyMjMyMA==","author":{"login":"jhoblitt"},"authorAssociation":"CONTRIBUTOR","body":"@sfdye It looks like the 10s default socket timeout, which I suspect is coming from `socket._GLOBAL_DEFAULT_TIMEOUT` (opaque object -- seems to hold no data) timeout is too short.  If I hack requests to force a 45s timeout, I can get to a more useful `github.GithubException.GithubException: 502 {'message': 'Server Error'}`.  Perhaps some sort of knob to allow end users to set a max read timeout would be reasonable?\r\n\r\n","createdAt":"2018-05-16T18:36:49Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":1}}],"url":"https://github.com/PyGithub/PyGithub/issues/693#issuecomment-389622320","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM4OTYyNDIwNw==","author":{"login":"jhoblitt"},"authorAssociation":"CONTRIBUTOR","body":"<facepalm/> It looks like the default is coming from `github.MainClass.DEFAULT_TIMEOUT`...","createdAt":"2018-05-16T18:42:47Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/693#issuecomment-389624207","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM4OTYyNjQ5OA==","author":{"login":"mfonville"},"authorAssociation":"CONTRIBUTOR","body":"Here is a `npm` tool to make GitHub releases, and they also had to increase the timeout of their socket it seems: https://github.com/webpro/release-it/issues/50\r\n\r\nI do understand btw that with the old plumbing there would be a socket-read error, because it is known that `httplib` is known not to be able to detect a closed socket (I read in other github-api projects with similar issues) when the Github-server answers (while the client is sending the data) that it actually closing the socket and asks the client not to send anymore data; but I had thought/hoped that `requests` would be able to handle this situation better.","createdAt":"2018-05-16T18:50:08Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/693#issuecomment-389626498","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM4OTYyNzIwOQ==","author":{"login":"mfonville"},"authorAssociation":"CONTRIBUTOR","body":"maybe specifying another DEFAULT_TIMEOUT for uploads.github.com might be also a good starting point","createdAt":"2018-05-16T18:52:24Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/693#issuecomment-389627209","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM4OTY0MDE3Mg==","author":{"login":"jhoblitt"},"authorAssociation":"CONTRIBUTOR","body":"Something seems fishy on the github head.  I enabled debugging and cut'n'pasted the team creation JSON causing the HTTP 502 via `requests` into a file to test `POST`ing it with`curl`.  Initially, it seemed reliable if I used `application/x-www-form-urlencoded` instead of `application/json` but both are now failing.  Sometimes the team is created on the 502 and some times it is not.  I think I'm going to ping GH support.","createdAt":"2018-05-16T19:36:47Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/693#issuecomment-389640172","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM4OTg2OTYxNA==","author":{"login":"jhoblitt"},"authorAssociation":"CONTRIBUTOR","body":"I sent a `bash/curl` minimal example to support along with some request IDs.  The explanation I received is that there is a hard 10s limit for API requests to complete.  I suspect this is from a middle/back end and there is a bit of latency added by the front end (and network delay product), which pushes the max time for a response to be slightly beyond the pygithub default of 10s. Support also said they will look into HTTP 502s being returned even though the request is ultimately successful.  I did not, but should have, asked if the same timeout applies to asset uploads -- I just sent a follow up inquiry.\r\n\r\nI suspect the best resolution is in change the pygithub default to something like 15s.\r\n","createdAt":"2018-05-17T13:39:56Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/693#issuecomment-389869614","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM4OTg3MjgwOQ==","author":{"login":"jhoblitt"},"authorAssociation":"CONTRIBUTOR","body":"I've opened #793 to bump the default timeout to 15s.","createdAt":"2018-05-17T13:49:35Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/693#issuecomment-389872809","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM5MDA3NjEyNQ==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"I am fine with increasing the default timeout to 15s. But we still need to handle the asset upload timeout right? Which is much higher than normal api.","createdAt":"2018-05-18T02:32:01Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/693#issuecomment-390076125","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM5MDEzNDYxOQ==","author":{"login":"mfonville"},"authorAssociation":"CONTRIBUTOR","body":"Today I hit the broken pipe during upload:\r\n\r\n```\r\n('Connection aborted.', BrokenPipeError(32, 'Broken pipe'))\r\nTraceback (most recent call last):\r\n  File \"/home/maarten/.local/lib/python3.6/site-packages/urllib3/connectionpool.py\", line 601, in urlopen\r\n    chunked=chunked)\r\n  File \"/home/maarten/.local/lib/python3.6/site-packages/urllib3/connectionpool.py\", line 357, in _make_request\r\n    conn.request(method, url, **httplib_request_kw)\r\n  File \"/usr/lib/python3.6/http/client.py\", line 1239, in request\r\n    self._send_request(method, url, body, headers, encode_chunked)\r\n  File \"/usr/lib/python3.6/http/client.py\", line 1285, in _send_request\r\n    self.endheaders(body, encode_chunked=encode_chunked)\r\n  File \"/usr/lib/python3.6/http/client.py\", line 1234, in endheaders\r\n    self._send_output(message_body, encode_chunked=encode_chunked)\r\n  File \"/usr/lib/python3.6/http/client.py\", line 1065, in _send_output\r\n    self.send(chunk)\r\n  File \"/usr/lib/python3.6/http/client.py\", line 986, in send\r\n    self.sock.sendall(data)\r\n  File \"/usr/lib/python3.6/ssl.py\", line 972, in sendall\r\n    v = self.send(byte_view[count:])\r\n  File \"/usr/lib/python3.6/ssl.py\", line 941, in send\r\n    return self._sslobj.write(data)\r\n  File \"/usr/lib/python3.6/ssl.py\", line 642, in write\r\n    return self._sslobj.write(data)\r\nBrokenPipeError: [Errno 32] Broken pipe\r\n\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n  File \"/home/maarten/.local/lib/python3.6/site-packages/requests/adapters.py\", line 440, in send\r\n    timeout=timeout\r\n  File \"/home/maarten/.local/lib/python3.6/site-packages/urllib3/connectionpool.py\", line 639, in urlopen\r\n    _stacktrace=sys.exc_info()[2])\r\n  File \"/home/maarten/.local/lib/python3.6/site-packages/urllib3/util/retry.py\", line 357, in increment\r\n    raise six.reraise(type(error), error, _stacktrace)\r\n  File \"/home/maarten/.local/lib/python3.6/site-packages/urllib3/packages/six.py\", line 685, in reraise\r\n    raise value.with_traceback(tb)\r\n  File \"/home/maarten/.local/lib/python3.6/site-packages/urllib3/connectionpool.py\", line 601, in urlopen\r\n    chunked=chunked)\r\n  File \"/home/maarten/.local/lib/python3.6/site-packages/urllib3/connectionpool.py\", line 357, in _make_request\r\n    conn.request(method, url, **httplib_request_kw)\r\n  File \"/usr/lib/python3.6/http/client.py\", line 1239, in request\r\n    self._send_request(method, url, body, headers, encode_chunked)\r\n  File \"/usr/lib/python3.6/http/client.py\", line 1285, in _send_request\r\n    self.endheaders(body, encode_chunked=encode_chunked)\r\n  File \"/usr/lib/python3.6/http/client.py\", line 1234, in endheaders\r\n    self._send_output(message_body, encode_chunked=encode_chunked)\r\n  File \"/usr/lib/python3.6/http/client.py\", line 1065, in _send_output\r\n    self.send(chunk)\r\n  File \"/usr/lib/python3.6/http/client.py\", line 986, in send\r\n    self.sock.sendall(data)\r\n  File \"/usr/lib/python3.6/ssl.py\", line 972, in sendall\r\n    v = self.send(byte_view[count:])\r\n  File \"/usr/lib/python3.6/ssl.py\", line 941, in send\r\n    return self._sslobj.write(data)\r\n  File \"/usr/lib/python3.6/ssl.py\", line 642, in write\r\n    return self._sslobj.write(data)\r\nurllib3.exceptions.ProtocolError: ('Connection aborted.', BrokenPipeError(32, 'Broken pipe'))\r\n\r\n\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n  File \"/home/maarten/PyGithub/build/lib/github/GitRelease.py\", line 210, in upload_asset\r\n    input=path\r\n  File \"/home/maarten/PyGithub/build/lib/github/Requester.py\", line 261, in requestBlobAndCheck\r\n    return self.__check(*self.requestBlob(verb, url, parameters, headers, input, self.__customConnection(url)))\r\n  File \"/home/maarten/PyGithub/build/lib/github/Requester.py\", line 342, in requestBlob\r\n    return self.__requestEncode(cnx, verb, url, parameters, headers, input, encode)\r\n  File \"/home/maarten/PyGithub/build/lib/github/Requester.py\", line 365, in __requestEncode\r\n    status, responseHeaders, output = self.__requestRaw(cnx, verb, url, requestHeaders, encoded_input)\r\n  File \"/home/maarten/PyGithub/build/lib/github/Requester.py\", line 389, in __requestRaw\r\n    response = cnx.getresponse()\r\n  File \"/home/maarten/PyGithub/build/lib/github/Requester.py\", line 104, in getresponse\r\n    r = verb(url, headers=self.headers, data=self.input, timeout=self.timeout)\r\n  File \"/home/maarten/.local/lib/python3.6/site-packages/requests/sessions.py\", line 555, in post\r\n    return self.request('POST', url, data=data, json=json, **kwargs)\r\n  File \"/home/maarten/.local/lib/python3.6/site-packages/requests/sessions.py\", line 508, in request\r\n    resp = self.send(prep, **send_kwargs)\r\n  File \"/home/maarten/.local/lib/python3.6/site-packages/requests/sessions.py\", line 618, in send\r\n    r = adapter.send(request, **kwargs)\r\n  File \"/home/maarten/.local/lib/python3.6/site-packages/requests/adapters.py\", line 490, in send\r\n    raise ConnectionError(err, request=request)\r\n```","createdAt":"2018-05-18T08:27:39Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/693#issuecomment-390134619","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM5MDE4MTQ5NQ==","author":{"login":"mfonville"},"authorAssociation":"CONTRIBUTOR","body":"I think the asset timeout might also benefit from the 15 seconds, because as far as I know the server (often?) sends a response when it is closing the connection. I hopefully assume that during the upload, while it still having success, it would use a method to keep it alive and not letting the 10 second time-out kick in; and that maybe that response was also just outside the 10 second window.\r\n\r\nIn short: let's upgrade all the timeouts by default to 15 seconds and let's see what happens","createdAt":"2018-05-18T11:42:32Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/693#issuecomment-390181495","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM5MDUzODUzMw==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"Released `1.40a4` containing fix from #793 \r\n\r\nPlease have a try and let me know how it works out.","createdAt":"2018-05-21T02:44:10Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/693#issuecomment-390538533","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQwMDE0MTIwMQ==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"Feel free to re-open if still an issue.","createdAt":"2018-06-26T00:49:57Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/693#issuecomment-400141201","viewerDidAuthor":false}],"createdAt":"2018-01-31T14:10:51Z","number":693,"state":"CLOSED","title":"Large asset upload timed out.","url":"https://github.com/PyGithub/PyGithub/issues/693"},{"author":{"id":"MDQ6VXNlcjM1ODEzMzQ5","is_bot":false,"login":"teefill","name":""},"body":"GitHub recently released a change in the response to the `/requested_reviewers` endpoint.\r\n\r\nhttps://developer.github.com/changes/2018-01-24-end-thor-preview/\r\n\r\nThis change has broken the PullRequestReviewerRequest class. For example, attempting to iterate over the paginated list of reviewers and collect `login` attributes now returns the following error:\r\n```\r\nreturn [user.login.lower() for user in reviews]\r\nFile \"/var/task/github/PullRequestReviewerRequest.py\", line 46, in login\r\nself._completeIfNotSet(self._login)\r\nFile \"/var/task/github/GithubObject.py\", line 251, in _completeIfNotSet\r\nself._completeIfNeeded()\r\nFile \"/var/task/github/GithubObject.py\", line 255, in _completeIfNeeded\r\nself.__complete()\r\nFile \"/var/task/github/GithubObject.py\", line 260, in __complete\r\nself._url.value\r\nAttributeError: 'PullRequestReviewerRequest' object has no attribute '_url'\r\n```","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDM2MDU1ODQ2OQ==","author":{"login":"teefill"},"authorAssociation":"NONE","body":"Looks like I was a few minutes too slow. Closing in favor of #687","createdAt":"2018-01-25T18:36:23Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/688#issuecomment-360558469","viewerDidAuthor":false}],"createdAt":"2018-01-25T17:59:20Z","number":688,"state":"CLOSED","title":"PullRequestReviewerRequest Broken by GitHub API Change","url":"https://github.com/PyGithub/PyGithub/issues/688"},{"author":{"id":"MDQ6VXNlcjIxMDc2NzQy","is_bot":false,"login":"gshefer","name":"Gilad Shefer"},"body":"The payload of GET /repos/:owner/:repo/pulls/:number/requested_reviewers has changed:\r\nhttps://developer.github.com/changes/2018-01-24-end-thor-preview/\r\nFrom Jan.24 2018 the module raises as a result:\r\nAtributeError: PullRequestReviewerRequest has no attribute '_url'\r\n\r\nWe should either pass 'users' as list_item arg to the PullRequestReviewerRequest module or changed the entire module design.","comments":[],"createdAt":"2018-01-25T17:52:06Z","number":687,"state":"CLOSED","title":"PullRequestReviewerRequest should be updated","url":"https://github.com/PyGithub/PyGithub/issues/687"},{"author":{"id":"MDQ6VXNlcjMyMjA1MzUw","is_bot":false,"login":"jeis2497052","name":"John Eismeier"},"body":"Hi All,\r\ndid you want to review Laziness ?\r\n\r\n```\r\ndiff --git a/doc/Design.md b/doc/Design.md\r\nindex 7863d93a..1971f3b6 100644\r\n--- a/doc/Design.md\r\n+++ b/doc/Design.md\r\n@@ -22,7 +22,7 @@ They\r\n    - may be GET-able (to ask if an object is in the list)\r\n    - may be DELETE-able (to remove an object from the list)\r\n \r\n-Lazyness\r\n+Laziness\r\n ========\r\n \r\n\r\n```\r\n","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDM1OTExODk3Mg==","author":{"login":"jasonwhite"},"authorAssociation":"COLLABORATOR","body":"A pull request would be much appreciated!","createdAt":"2018-01-19T23:33:52Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/686#issuecomment-359118972","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM2NTMyMjY1Mw==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"Closed in #701 ","createdAt":"2018-02-13T16:32:59Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/686#issuecomment-365322653","viewerDidAuthor":false}],"createdAt":"2018-01-19T14:41:24Z","number":686,"state":"CLOSED","title":"Propose a small spelling correction to Laziness ?","url":"https://github.com/PyGithub/PyGithub/issues/686"},{"author":{"id":"MDQ6VXNlcjE0OTgwNTU4","is_bot":false,"login":"skjerns","name":"Simon Kern"},"body":"I want to access Issues and PRs from a private repository, without making an account a collaborator (granting it push rights). One such way would be a Deploy Key.\r\n\r\nIs is possible to login using PyGithub using a Deploy Key?","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDM2MzgyNTU3NQ==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"@skjerns Can you please elaborate on your use case? I don't feel deploy key is suitable for this use. Normally it's granting you read/white access to the repo code. You will want to use either OAuth or a personal access token.","createdAt":"2018-02-07T16:27:57Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/685#issuecomment-363825575","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM2NDg1NTczNA==","author":{"login":"skjerns"},"authorAssociation":"NONE","body":"@sfdye it is possible to use a `read-only` deploykey https://github.com/blog/2024-read-only-deploy-keys\r\n\r\nI wanted to use this key to have safe access to a repo I'm working on. The advantage is that I do not have to create an own account for this use case.\r\n\r\nFor now I have settled on using an additional Github account that has limited rights to the repo and that works as well, so for me the issue is resolved. For some operations (setting git-status) I have to have write access anyway, so I indeed started using `OAuth` keys. For me the issue is therefore no longer relevant! Thanks!","createdAt":"2018-02-12T08:31:16Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/685#issuecomment-364855734","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM2NDkxNjg5Nw==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"@skjerns Great to hear your issue is resolved now.","createdAt":"2018-02-12T13:05:17Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/685#issuecomment-364916897","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs5iw9bl","author":{"login":"ryan-williams"},"authorAssociation":"NONE","body":"I thought I had the same need (to authenticate with a deploy key); [this SO](https://stackoverflow.com/questions/69227780/how-can-i-use-deploy-key-for-authentication-to-use-github-api) clarified:\r\n\r\n> You cannot use a deploy key to access the GitHub API. Deploy keys are SSH keys, and they allow access only over SSH. The GitHub API operates only over HTTPS, and so you'll be unable to authenticate with a deploy key.\r\n>\r\n> You can either use a personal access token or some other sort of OAuth token to access the GitHub API. GitHub documents various methods of authentication you can use and how they work.","createdAt":"2023-07-30T02:47:10Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/685#issuecomment-1657001701","viewerDidAuthor":false}],"createdAt":"2018-01-16T12:27:31Z","number":685,"state":"CLOSED","title":"Is there a way to login using a Deploy Key?","url":"https://github.com/PyGithub/PyGithub/issues/685"},{"author":{"id":"MDQ6VXNlcjI1Nzc0NQ==","is_bot":false,"login":"possebon","name":"Jose Fernando Possebon Junior"},"body":"Hi,\r\n\r\nMy previous issue was about get a particular issue, now I'm trying to implement a search on all issues of a repo that matches a text pattern.\r\n\r\nI have this code:\r\n\r\n`ghub = Github(\"APITOKEN\")\r\nissues = ghub.search_issues(query='q=text_to_search+type:issue+repo:username/my_repo+is:open+label:my_label',sort='created')`\r\n\r\nI don't get errors but I can't get the correct results. The results returned even does not exist on my repo.\r\n","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDM3OTE5NzYzNQ==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"I suspect something is wrong with the query string. Maybe you can try the query on Github advanced search first and copy them over to PyGithub.","createdAt":"2018-04-06T09:19:35Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/684#issuecomment-379197635","viewerDidAuthor":false}],"createdAt":"2018-01-11T00:08:39Z","number":684,"state":"CLOSED","title":"How to search for a text on all issues that has a specific label on a specific repository","url":"https://github.com/PyGithub/PyGithub/issues/684"},{"author":{"id":"MDQ6VXNlcjI1Nzc0NQ==","is_bot":false,"login":"possebon","name":"Jose Fernando Possebon Junior"},"body":"I'm trying to use this:\r\n\r\n`repo = ghub.get_user().get_repo('myrepo')\r\n repo.get_issues(state='open',sort='created',direction='asc',labels=['faq'])`\r\n\r\nWhen I do that I'm getting this error message:\r\n\r\n`Traceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"/usr/local/lib/python3.6/site-packages/github/Repository.py\", line 1649, in get_issues\r\n    assert labels is github.GithubObject.NotSet or all(isinstance(element, github.Label.Label) for element in labels), labels\r\nAssertionError: ['faq']`\r\n\r\nI also tried this way:\r\n\r\n`repo.get_issues(state='open',sort='created',direction='asc',labels='faq')`\r\n\r\nSame error message.\r\n\r\nI'm using the PyGithub 1.35 version and Python 3.6.2","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDM3OTE5Mjc2OA==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"Hi @possebon the label parameter is expecting a list of `github.Label` type, not a string. So you can do something like:\r\n\r\n```\r\nlabel = repo.get_label('faq')\r\nrepo.get_issues(state='open',sort='created',direction='asc',labels=[label])\r\n```","createdAt":"2018-04-06T09:00:34Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/683#issuecomment-379192768","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDcwOTI5NzUxOQ==","author":{"login":"vlerenc"},"authorAssociation":"NONE","body":"@sfdye How would you do that with orgs, please? Repos have labels, but orgs have not and the API is the same. I also can't create a label by name.","createdAt":"2020-10-15T12:47:02Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/683#issuecomment-709297519","viewerDidAuthor":false}],"createdAt":"2018-01-10T23:16:25Z","number":683,"state":"CLOSED","title":"Unable to use get_issues() passing labels parameter","url":"https://github.com/PyGithub/PyGithub/issues/683"},{"author":{"id":"MDQ6VXNlcjEzMjEyMzY=","is_bot":false,"login":"turly221","name":"Zeng Feifan"},"body":"Hi,\r\n\r\nDoes it support organization webhook to listen to repository delete event?","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDM1NDk0MzMxMA==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"See https://github.com/PyGithub/PyGithub/issues/324","createdAt":"2018-01-03T06:11:40Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/680#issuecomment-354943310","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM2MzgyNjUzNA==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"@turly221 A PR would be much appreciated.","createdAt":"2018-02-07T16:30:39Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/680#issuecomment-363826534","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM2NzI0NDQ5Ng==","author":{"login":"namratachaudhary"},"authorAssociation":"CONTRIBUTOR","body":"Taking this up. ","createdAt":"2018-02-21T08:09:09Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":1}}],"url":"https://github.com/PyGithub/PyGithub/issues/680#issuecomment-367244496","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM2ODcyNTcyNg==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"@namratachaudhary any update on this?","createdAt":"2018-02-27T02:32:01Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/680#issuecomment-368725726","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM2ODc2MTQwMw==","author":{"login":"namratachaudhary"},"authorAssociation":"CONTRIBUTOR","body":"Writing tests for the same. A little stalled. Will try to raise a PR in couple of days ","createdAt":"2018-02-27T06:26:55Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":1}}],"url":"https://github.com/PyGithub/PyGithub/issues/680#issuecomment-368761403","viewerDidAuthor":false}],"createdAt":"2018-01-02T09:41:51Z","number":680,"state":"CLOSED","title":"Organization webhooks support?","url":"https://github.com/PyGithub/PyGithub/issues/680"},{"author":{"id":"MDQ6VXNlcjIwNDY2ODE3","is_bot":false,"login":"TimofeyTalenfeld","name":"Timofey Talenfeld"},"body":"Hi,\r\nwhy class PullRequest cannot returns requested reviewers from json of this PR? It contains this. Instead of there is separate request for reviewers only.","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDM3OTE5ODA5MQ==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"Sorry I am not sure if I understand your question. Would you elaborate a bit more?","createdAt":"2018-04-06T09:21:23Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/679#issuecomment-379198091","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQwMjY1NDE3MA==","author":{"login":"stale"},"authorAssociation":"NONE","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","createdAt":"2018-07-05T08:58:45Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/679#issuecomment-402654170","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQxOTg2ODQ5OQ==","author":{"login":"stale"},"authorAssociation":"NONE","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","createdAt":"2018-09-10T10:38:16Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/679#issuecomment-419868499","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs5NmaPG","author":{"login":"tisonkun"},"authorAssociation":"CONTRIBUTOR","body":"@sfdye The response of listing pull requests already contains the requested reviewers' information. However, currently, if you want to list all requested reviewers for all pull requests, you must first list all pull requests (a paginated query) and then list request reviewers one pr by another (N paginated query), while you should have implemented it with only one paginated query.","createdAt":"2022-11-03T10:42:14Z","includesCreatedEdit":true,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/679#issuecomment-1301914566","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs5Nmapw","author":{"login":"tisonkun"},"authorAssociation":"CONTRIBUTOR","body":"That is, you should be able to fulfill the field with:\r\n\r\n```python\r\n        if \"requested_reviewers\" in attributes:\r\n            self._requested_reviewers = self._makeIntAttribute(\r\n                attributes[\"requested_reviewers\"]\r\n            )\r\n```","createdAt":"2022-11-03T10:43:49Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/679#issuecomment-1301916272","viewerDidAuthor":false}],"createdAt":"2017-12-29T13:29:56Z","number":679,"state":"CLOSED","title":"Separate request for requested reviewers","url":"https://github.com/PyGithub/PyGithub/issues/679"},{"author":{"id":"MDQ6VXNlcjE4MTA1OTE=","is_bot":false,"login":"asottile","name":"Anthony Sottile"},"body":"One task I'm working on is sliming down a docker image and one thing that came up was `pygithub`.\r\n\r\nThe library itself is tiny, but we take a *huge* hit from the tests\r\n\r\n```console\r\n# du -hs lib/python3.6/site-packages/github/\r\n21M\tlib/python3.6/site-packages/github/\r\n# du -hs lib/python3.6/site-packages/github/tests\r\n20M\tlib/python3.6/site-packages/github/tests\r\n# rm -rf lib/python3.6/site-packages/github/tests && du -hs lib/python3.6/site-packages/github/\r\n1.3M\tlib/python3.6/site-packages/github/\r\n```\r\n\r\nWould a PR which doesn't include the tests in the distribution by default be acceptable?","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDM1MjE1NjQxMA==","author":{"login":"jasonwhite"},"authorAssociation":"COLLABORATOR","body":"It looks like the tests were intentionally added back in 2012 to the pypi tarball by commit c6609fd4dacf7347125fdf3d4cf4ac1afeef7d4d for #86.\r\n\r\nI don't know if the tests are still needed in the pypi distribution or not. It could be a historical artifact -- I don't think travis-ci was around back then. It seems silly to include them when they get run by the CI build for every commit.\r\n\r\nI would feel more comfortable taking a PR for this if another maintainer could confirm they are not needed.","createdAt":"2017-12-16T03:05:19Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/672#issuecomment-352156410","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM4OTk2MDU5NA==","author":{"login":"lmazuel"},"authorAssociation":"CONTRIBUTOR","body":"I personally uses your `github.tests.Framework` to record my own tooling that uses PyGithub. Since the way PyGithub is designed, it's incompatible with VCRPy:\r\nhttps://github.com/kevin1024/vcrpy/issues/227\r\n\r\nSo I understand removing the tests themself and the recordings, but I feel like the Framework at least should still be shipped to enable this scenario.\r\n\r\nMy two cents,\r\n\r\nEdit: since 1.40 and \"requests\", maybe VCRPy is working now, that would remove the need.","createdAt":"2018-05-17T18:16:48Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/672#issuecomment-389960594","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM5MDA3ODc0MA==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"@lmazuel Thanks for your input. I don't have much experience with vcr, do you think now that we are using requests, it's feasible to migrate the whole testing framework to vcr? So that I feel writing new tests will become much, much easier.","createdAt":"2018-05-18T02:50:50Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/672#issuecomment-390078740","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM5MDI4MzIyNQ==","author":{"login":"lmazuel"},"authorAssociation":"CONTRIBUTOR","body":"@sfdye I'm pretty sure it's possible. The only drawback I know with VCRPy, it's not thread-friendly if you want to parallelize tests (it uses mock to replace the `HTTPSRequestsConnectionClass` statically). But PyGithub current Framework has the same issue anyway, since it replaces a class attribute `__httpsConnectionClass `\r\nI try to do a proof-of-concept and link the PR here. I can't commit to any date though :/","createdAt":"2018-05-18T17:51:10Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/672#issuecomment-390283225","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM5MDUzNzU2Nw==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"@lmazuel That will be awesome. Waiting for your PR 😝 ","createdAt":"2018-05-21T02:35:51Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":1}}],"url":"https://github.com/PyGithub/PyGithub/issues/672#issuecomment-390537567","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQwNjQ3MTg0Nw==","author":{"login":"stale"},"authorAssociation":"NONE","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","createdAt":"2018-07-20T02:38:37Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/672#issuecomment-406471847","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQwNjQ4OTYxNw==","author":{"login":"asottile"},"authorAssociation":"NONE","body":"Would anyone be opposed to a PR which removes the bulky data files? I could work on that","createdAt":"2018-07-20T05:01:20Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/672#issuecomment-406489617","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQwNjQ5Mzk5Nw==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"Go ahead. Don't wanna be blocked by historical issues.","createdAt":"2018-07-20T05:35:09Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/672#issuecomment-406493997","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQyMjI3NDU5MQ==","author":{"login":"stale"},"authorAssociation":"NONE","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","createdAt":"2018-09-18T06:45:24Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/672#issuecomment-422274591","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQ4MzUwMDMyOQ==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"Closed in #1031 ","createdAt":"2019-04-16T03:47:14Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/672#issuecomment-483500329","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQ4MzUwMDk0MQ==","author":{"login":"asottile"},"authorAssociation":"NONE","body":"This is awesome!  Thanks a ton for this @sfdye -- looking forward to the release :D","createdAt":"2019-04-16T03:51:11Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/672#issuecomment-483500941","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQ4MzUwMTQ1Mw==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"![image](https://user-images.githubusercontent.com/1016390/56181024-56158300-603e-11e9-967f-950b636dca51.png)\r\n\r\n`1.43.7` out now :)","createdAt":"2019-04-16T03:54:27Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"HOORAY","users":{"totalCount":1}}],"url":"https://github.com/PyGithub/PyGithub/issues/672#issuecomment-483501453","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDUwMjMzMzcyNw==","author":{"login":"stale"},"authorAssociation":"NONE","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","createdAt":"2019-06-15T04:33:01Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/672#issuecomment-502333727","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDY3NDU4NTMyMQ==","author":{"login":"ChaiBapchya"},"authorAssociation":"NONE","body":"tests were removed from the tarball under the assumption that example/documentation of how to use it will be provided.\r\nA is done but B hasn't.","createdAt":"2020-08-16T22:23:02Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/672#issuecomment-674585321","viewerDidAuthor":false}],"createdAt":"2017-12-15T18:12:03Z","number":672,"state":"CLOSED","title":"Don't include tests in distribution?","url":"https://github.com/PyGithub/PyGithub/issues/672"},{"author":{"id":"MDQ6VXNlcjEwMTYzOTA=","is_bot":false,"login":"sfdye","name":"Liuyang Wan"},"body":"```\r\nfrom github import Github\r\ng = Github()\r\nassert len(list(g.get_repo('PyGithub/PyGithub').get_hooks())) == 0\r\n```\r\n\r\nRunning this will encounter \r\n> github.GithubException.UnknownObjectException: 404 {'message': 'Not Found', 'documentation_url': 'https://developer.github.com/v3/repos/hooks/#list-hooks'}\r\n\r\nI am just taking `PyGithub` as an example, it doesn't work for all repos, including public and private repos.\r\n\r\nSame for all the repo hooks api, like `create_hook` and `get_hook`.\r\n\r\nI just checked GitHub v3 repo hooks api:\r\nhttps://developer.github.com/v3/repos/hooks/\r\n\r\nIt seems there is an additional attribute `ping_url` and this repo is not updated for it. Not sure if this is the cause or some other changes I am not aware of.","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDM0OTQ2MTA1NQ==","author":{"login":"MisterBianco"},"authorAssociation":"NONE","body":"Just so you know this is issue #666, just thought that was pretty cool.","createdAt":"2017-12-05T22:20:32Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":2}}],"url":"https://github.com/PyGithub/PyGithub/issues/666#issuecomment-349461055","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM0OTUxMzE1NA==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"Seems to be a permission issue, I initialied with a token which does not have the create_hook scope.\r\n\r\n```\r\ng = Github(access_token)\r\n```\r\nchange to username and password:\r\n```\r\ng = Github(username, password)\r\n```\r\nor \r\n```\r\ng = Github(access_token) # with the correct scope, which you can specify when creating a personal token\r\n```\r\nfixed it.","createdAt":"2017-12-06T02:42:14Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/666#issuecomment-349513154","viewerDidAuthor":false}],"createdAt":"2017-12-05T16:07:58Z","number":666,"state":"CLOSED","title":"Repo hooks api not working","url":"https://github.com/PyGithub/PyGithub/issues/666"},{"author":{"id":"MDQ6VXNlcjc3MDg1","is_bot":false,"login":"kristi","name":"Kristi"},"body":"pygithub3 fails to install on Python 3.6.3\r\n\r\n```\r\n# mkvirtualenv test-pygithub3\r\n# pip install pygithub3\r\nCollecting pygithub3\r\n  Using cached pygithub3-0.5.1.tar.gz\r\n    Complete output from command python setup.py egg_info:\r\n    Traceback (most recent call last):\r\n      File \"<string>\", line 1, in <module>\r\n      File \"/private/var/folders/kz/lxl7qsq55tsgctldpsfnvz4r0000gn/T/pip-build-pxv7mup6/pygithub3/setup.py\", line 7, in <module>\r\n        import pygithub3\r\n      File \"/private/var/folders/kz/lxl7qsq55tsgctldpsfnvz4r0000gn/T/pip-build-pxv7mup6/pygithub3/pygithub3/__init__.py\", line 10, in <module>\r\n        from github import Github\r\n    ModuleNotFoundError: No module named 'github'\r\n\r\n    ----------------------------------------\r\nCommand \"python setup.py egg_info\" failed with error code 1 in /private/var/folders/kz/lxl7qsq55tsgctldpsfnvz4r0000gn/T/pip-build-pxv7mup6/pygithub3/\r\n```\r\n\r\nOSX 10.12.6\r\nPyEnv 1.1.5\r\nPython 3.6.3","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDM0ODA4OTM1Nw==","author":{"login":"kristi"},"authorAssociation":"NONE","body":"Also fails on Python 3.3.6 and 3.5.4","createdAt":"2017-11-30T05:49:46Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/665#issuecomment-348089357","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM0ODA5MDM5Nw==","author":{"login":"kristi"},"authorAssociation":"NONE","body":"Oh sorry, it's `pip install PyGithub` ","createdAt":"2017-11-30T05:57:09Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/665#issuecomment-348090397","viewerDidAuthor":false}],"createdAt":"2017-11-30T05:38:05Z","number":665,"state":"CLOSED","title":"pygithub3 fails to install: ModuleNotFoundError: No module named 'github'","url":"https://github.com/PyGithub/PyGithub/issues/665"},{"author":{"id":"MDQ6VXNlcjg2NTU0MQ==","is_bot":false,"login":"jasonwhite","name":"Jason White"},"body":"@adamtheturtle @jacquev6 @JPWKU @jayfk @jzelinskie @MichaelPereira @nhomar \r\n\r\nHello! First of all, *thank you* for this project. It has saved me (and many others) a ton of time.\r\n\r\nUnfortunately, this project hasn't received much love for over 5 months. Pull requests have been sitting in the queue untouched. I've had to work around many bugs that would have been fixed by some merged pull requests. I understand that it's tough to keep up with these mundane things, but as the GitHub API evolves so must this wrapper.\r\n\r\nI'd be happy to help out with maintaining this project. I'm a ruthless code reviewer, I have an interest in keeping this up-to-date, and I'd really prefer not to maintain my own fork of this. Thanks in advance!","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDM0NjQ1NzIyMA==","author":{"login":"jayfk"},"authorAssociation":"CONTRIBUTOR","body":"Yup, we need more people looking at pull requests. I've added you as a collaborator.","createdAt":"2017-11-22T19:54:38Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/663#issuecomment-346457220","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM0NjQ1NzY4OA==","author":{"login":"jasonwhite"},"authorAssociation":"COLLABORATOR","body":"@jayfk Thanks!","createdAt":"2017-11-22T19:56:39Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/663#issuecomment-346457688","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM0NjQ2MjY0Mg==","author":{"login":"jasonwhite"},"authorAssociation":"COLLABORATOR","body":"@jayfk It seems I wasn't given write access. There's not much I can do without that.","createdAt":"2017-11-22T20:18:48Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/663#issuecomment-346462642","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM0NjQ2MzM4OA==","author":{"login":"jayfk"},"authorAssociation":"CONTRIBUTOR","body":"Have you accepted the invite? You are still showing up as \"awaiting response\".\r\n\r\n<img width=\"739\" alt=\"screen shot 2017-11-22 at 21 21 11\" src=\"https://user-images.githubusercontent.com/2930472/33148203-34af3738-cfcb-11e7-95dc-9ba81ad680fd.png\">\r\n","createdAt":"2017-11-22T20:22:15Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/663#issuecomment-346463388","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM0NjQ2NTI2MA==","author":{"login":"jasonwhite"},"authorAssociation":"COLLABORATOR","body":"Oopsie. Didn't see that. I'm off to a great start. Thanks again!","createdAt":"2017-11-22T20:30:51Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/663#issuecomment-346465260","viewerDidAuthor":false}],"createdAt":"2017-11-22T19:45:33Z","number":663,"state":"CLOSED","title":"Maintenance of this project","url":"https://github.com/PyGithub/PyGithub/issues/663"},{"author":{"id":"MDQ6VXNlcjgyOTg4","is_bot":false,"login":"psychemedia","name":"Tony Hirst"},"body":"Using the `.get_contents()` method to try to download a large file raises the error:\r\n\r\n```\r\n{'errors': [{'code': 'too_large', 'field': 'data',\r\n     'resource': 'Blob'}],\r\n     'message': 'This API returns blobs up to 1 MB in size. The requested blob is too large to fetch via the API, but you can use the Git Data API to request blobs up to 100 MB in size.',\r\n     'documentation_url': 'https://developer.github.com/v3/repos/contents/#get-contents'}\r\n```\r\n\r\nIs there a way of detecting this and passing over to another handler that *can* download the file?\r\n\r\nFor example, if something like this fails:\r\n```\r\ncontents = repository.get_dir_contents(urllib.parse.quote(server_path), ref=sha)\r\n\r\nfor content in contents:\r\n   if content.type != 'dir':\r\n     file_content = repository.get_contents(urllib.parse.quote(content.path), ref=sha)\r\n```\r\n\r\noptionally revert to:\r\n\r\n```\r\nfile_content = repository.get_git_blob(content.sha)\r\n```","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDM0NzM1MTE5OA==","author":{"login":"jasonwhite"},"authorAssociation":"COLLABORATOR","body":"I've run into this problem before too. In my case, since I always had the SHA of the blob, I just used `git_git_blob` instead.\r\n\r\nHowever, `get_git_blob` doesn't work for any object type besides `blob` (hence the name). You need to know the type of the object before attempting to call it.\r\n\r\nTo do the fallback, you need to know two pieces of information:\r\n 1. The type of the object.\r\n 2. The SHA of the object.\r\n\r\nIf `get_contents` fails, it doesn't tell you either of these things. There isn't really any good way of doing the fallback as far as I can tell.","createdAt":"2017-11-27T22:32:40Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/661#issuecomment-347351198","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM1MDE2ODIzNA==","author":{"login":"jasonwhite"},"authorAssociation":"COLLABORATOR","body":"Closed as `wontfix`. If anyone has a good idea on how to solve this, I'm happy to reopen. As far as I can tell, it doesn't look like it's possible to do in a clean way.","createdAt":"2017-12-08T04:19:32Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/661#issuecomment-350168234","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDYyNjQwOTk2MA==","author":{"login":"BoPeng"},"authorAssociation":"NONE","body":"I have the same problem and end up doing something along the line of.\r\n\r\n1. if we dump all files from a directory and some are larger than 1M,\r\n```python\r\n file_contents = repo.get_contents(dir_name, ref=branch)\r\n```\r\nthen `sha` exists for each `file_content`, and the following could be used to grab the blob of each file\r\n\r\n```python\r\nfor file_content in file_contents:\r\n    try:\r\n        if file_content.encoding != 'base64':\r\n            # some error ...\r\n        # ok... \r\n    except GithubException:\r\n        # if file_content DOES NOT HAVE encoding, it is a large file \r\n        blob = repo.get_git_blob(file_content.sha)\r\n        # do something with blob\r\n```\r\n\r\nIf `path_name` refers to a single file that is larger than 1M, it has to be some try/exception block like follows:\r\n\r\n```python\r\n        try:\r\n            res = repo.get_contents(path_name, ref=branch)\r\n            # ok, we have the content\r\n        except GithubException:\r\n           return get_blob_content(repo, branch, path_name)\r\n```\r\nwhere `get_blob_content` is something like\r\n\r\n```python\r\ndef get_blob_content(repo, branch, path_name):\r\n    # first get the branch reference\r\n    ref = repo.get_git_ref(f'heads/{branch}')\r\n    # then get the tree\r\n    tree = repo.get_git_tree(ref.object.sha, recursive='/' in path_name).tree\r\n    # look for path in tree\r\n    sha = [x.sha for x in tree if x.path == path_name]\r\n    if not sha:\r\n        # well, not found..\r\n        return None\r\n    # we have sha\r\n    return repo.get_git_blob(sha[0])\r\n```\r\n\r\nReal code with error-checking is longer, but the idea is here.","createdAt":"2020-05-11T00:00:12Z","includesCreatedEdit":true,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":8}},{"content":"HOORAY","users":{"totalCount":5}}],"url":"https://github.com/PyGithub/PyGithub/issues/661#issuecomment-626409960","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDY2MjM4NjMxOA==","author":{"login":"eeechoo"},"authorAssociation":"NONE","body":"When get the blob, following code will be useful.\r\n\r\n```python\r\n    blob = repo.get_git_blob(sha[0])\r\n    b64 = base64.b64decode(blob.content)\r\n    return b64.decode(\"utf8\")\r\n```\r\n\r\nAlso, update file will also encounter with this problem.","createdAt":"2020-07-22T10:53:20Z","includesCreatedEdit":true,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":9}}],"url":"https://github.com/PyGithub/PyGithub/issues/661#issuecomment-662386318","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDgyODA4NDc5Ng==","author":{"login":"bhushanladdad"},"authorAssociation":"NONE","body":"    raise self.__createException(status, responseHeaders, output)\r\ngithub.GithubException.UnknownObjectException: 404 {\"message\": \"Not Found\", \"documentation_url\": \"https://docs.github.com/rest/reference/repos#get-repository-content\"} getting this error when trying to download a got repository files for master branch","createdAt":"2021-04-28T02:04:20Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":1}}],"url":"https://github.com/PyGithub/PyGithub/issues/661#issuecomment-828084796","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs56npho","author":{"login":"deed02392"},"authorAssociation":"NONE","body":"> Also, update file will also encounter with this problem.\r\n\r\nhttps://docs.github.com/en/rest/repos/contents?apiVersion=2022-11-28#create-or-update-file-contents\r\n\r\nDoesn't look like it affects update file – there's no distinction for different file sizes when updating file contents mentioned on the REST API, and I'm able to update the contents of files when they are >1MB.","createdAt":"2024-04-15T16:04:36Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/661#issuecomment-2057214056","viewerDidAuthor":false}],"createdAt":"2017-11-20T17:13:52Z","number":661,"state":"CLOSED","title":"Downloading large files","url":"https://github.com/PyGithub/PyGithub/issues/661"},{"author":{"id":"MDQ6VXNlcjMzNzQ5OTk4","is_bot":false,"login":"arunc1985","name":""},"body":"\r\n(Pdb) for i in each_pull_request.get_reviews(): i.update()\r\n*** AttributeError: 'PullRequestReview' object has no attribute '_url'\r\n(Pdb)\r\n\r\n","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDM1NTQ3MzM4MQ==","author":{"login":"awesometim1"},"authorAssociation":"NONE","body":"<img width=\"562\" alt=\"screen shot 2018-01-04 at 11 56 27 pm\" src=\"https://user-images.githubusercontent.com/25408591/34596087-fe86ddb2-f1aa-11e7-8cf1-46da3eab09fb.png\">\r\n\r\nI was not able to replicate the error. Could you specify the conditions that caused the error?\r\n","createdAt":"2018-01-05T04:59:32Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/660#issuecomment-355473381","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM1ODEyMjI2Mw==","author":{"login":"jasonwhite"},"authorAssociation":"COLLABORATOR","body":"Although not very intuitive, this error usually indicates a permissions problem on the API credentials.\r\n\r\nIf this is not the case, let me know and I'll reopen the issue.","createdAt":"2018-01-16T22:01:55Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/660#issuecomment-358122263","viewerDidAuthor":false}],"createdAt":"2017-11-20T10:50:16Z","number":660,"state":"CLOSED","title":"self._url is not a valid attribute","url":"https://github.com/PyGithub/PyGithub/issues/660"},{"author":{"id":"MDQ6VXNlcjkwMjk5ODQ=","is_bot":false,"login":"jmhossler","name":"John Hossler"},"body":"When accessing the rest API, I get back an attribute called \"permissions\". This information is very valuable, and it is missing when I call get_collaborators for a repository. Instead, I get back a list of NamedUser, which doesn't contain all the information I need.","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDM1MzcwNTgzOQ==","author":{"login":"iraquitan"},"authorAssociation":"CONTRIBUTOR","body":"working on it","createdAt":"2017-12-23T04:14:57Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/659#issuecomment-353705839","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM1NTE5MzY5Ng==","author":{"login":"iraquitan"},"authorAssociation":"CONTRIBUTOR","body":"Permissions added in PR #676 \r\n  ","createdAt":"2018-01-04T03:59:03Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/659#issuecomment-355193696","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM1ODEyMDAyNQ==","author":{"login":"jasonwhite"},"authorAssociation":"COLLABORATOR","body":"Fixed in #676.","createdAt":"2018-01-16T21:53:34Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/659#issuecomment-358120025","viewerDidAuthor":false}],"createdAt":"2017-11-18T23:12:46Z","number":659,"state":"CLOSED","title":"get_collaborators does not return permissions information on users","url":"https://github.com/PyGithub/PyGithub/issues/659"},{"author":{"id":"MDQ6VXNlcjUxODI3MA==","is_bot":false,"login":"peterkline","name":"Peter Kline"},"body":"I have a simple code snippet that works just fine on mac:\r\n\r\n```python\r\n    def get_repos_for_org(self, org):\r\n        organization = self.gho.get_organization(org)\r\n        repo_list = []\r\n        for repo in organization.get_repos():\r\n            repo_list.append(repo.full_name)\r\n        return repo_list\r\n```\r\n\r\nSimple enough.  That same call when running on Centos 7.3 box I get the following stack.  I have updated every thing I can think of to get this to run on linux but no charm.  \r\n```java\r\n  File \"/data/jenkins/workspace/release/generate/github_tools.py\", line 69, in get_repos_for_org\r\n    for repo in organization:\r\n  File \"/usr/lib/python2.7/site-packages/github/PaginatedList.py\", line 49, in __iter__\r\n    newElements = self._grow()\r\n  File \"/usr/lib/python2.7/site-packages/github/PaginatedList.py\", line 61, in _grow\r\n    newElements = self._fetchNextPage()\r\n  File \"/usr/lib/python2.7/site-packages/github/PaginatedList.py\", line 163, in _fetchNextPage\r\n    headers=self.__headers\r\n  File \"/usr/lib/python2.7/site-packages/github/Requester.py\", line 172, in requestJsonAndCheck\r\n    return self.__check(*self.requestJson(verb, url, parameters, headers, input, cnx))\r\n  File \"/usr/lib/python2.7/site-packages/github/Requester.py\", line 213, in requestJson\r\n    return self.__requestEncode(cnx, verb, url, parameters, headers, input, encode)\r\n  File \"/usr/lib/python2.7/site-packages/github/Requester.py\", line 243, in __requestEncode\r\n    url = self.__makeAbsoluteUrl(url)\r\n  File \"/usr/lib/python2.7/site-packages/github/Requester.py\", line 310, in __makeAbsoluteUrl\r\n    assert o.port == self.__port\r\nAssertionError\r\n```","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDQ0NjMwNzg0NQ==","author":{"login":"peterkline"},"authorAssociation":"NONE","body":"Can't reproduce with a rebuilt system.  Suspect it was environmental","createdAt":"2018-12-11T18:24:23Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/658#issuecomment-446307845","viewerDidAuthor":false}],"createdAt":"2017-11-13T05:47:31Z","number":658,"state":"CLOSED","title":"get_organizations different behavior on mac vs. Linux pygithub 1.35","url":"https://github.com/PyGithub/PyGithub/issues/658"},{"author":{"id":"MDQ6VXNlcjIzMDY5Mzk5","is_bot":false,"login":"juhlee-microsoft","name":"Ju-Hyoung Lee"},"body":"Can you fix for 2FA account?\r\nfrom github import Github\r\n\r\n# First create a Github instance:\r\ng = Github(\"user\", \"password\")\r\n\r\n# Then play with your Github objects:\r\nfor repo in g.get_user().get_repos():\r\n    print repo.name","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDM3OTQ1MjI4OQ==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"If you enabled 2FA (like myself), maybe using token to authenticate instead of username and password?","createdAt":"2018-04-07T08:49:40Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":1}}],"url":"https://github.com/PyGithub/PyGithub/issues/656#issuecomment-379452289","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM5ODgzNzExNQ==","author":{"login":"BBI-YggyKing"},"authorAssociation":"CONTRIBUTOR","body":"@sfdye is correct - token-based authentication works in conjunction with 2FA. Go to your GitHub profile, select Developer Settings on the left, then click Personal Access Tokens. You can generate a token and then use it in place of the password when connecting to the API.\r\nhttps://github.com/settings/tokens","createdAt":"2018-06-20T17:43:53Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/656#issuecomment-398837115","viewerDidAuthor":false}],"createdAt":"2017-11-02T15:15:31Z","number":656,"state":"CLOSED","title":"2FA failed in sample script","url":"https://github.com/PyGithub/PyGithub/issues/656"},{"author":{"id":"MDQ6VXNlcjEyMTA3NDk=","is_bot":false,"login":"kiran-vemuri","name":"Kiran Vemuri"},"body":"I am trying to access the label name from a `labeled` event and looks like that attribute is missing.\r\n\r\n```\r\n\"label\": {\r\n            \"name\": \"sample-label\",\r\n            \"color\": \"fbca04\"\r\n        }\r\n```\r\n\r\n\r\n\r\nI can get this data using a REST call. Can we add that?","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDM3OTQ1MTk1NQ==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"@kiran-vemuri Thanks for reporting. Can you elaborate a bit more and maybe provide a code snippet? ","createdAt":"2018-04-07T08:47:33Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/653#issuecomment-379451955","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQwMjY1NDE2NQ==","author":{"login":"stale"},"authorAssociation":"NONE","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","createdAt":"2018-07-05T08:58:44Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/653#issuecomment-402654165","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQxNjU4OTg4Mw==","author":{"login":"allevin"},"authorAssociation":"CONTRIBUTOR","body":"@kiran-vemuri, I believe that this issue is corrected with #857.  If so, can you close?\r\n\r\ncc: @sfdye ","createdAt":"2018-08-28T13:46:04Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/653#issuecomment-416589883","viewerDidAuthor":false}],"createdAt":"2017-10-25T22:53:07Z","number":653,"state":"CLOSED","title":"Issue event object with event `labeled` doesn't have label attributes","url":"https://github.com/PyGithub/PyGithub/issues/653"},{"author":{"id":"MDQ6VXNlcjE2MTIzMjE0","is_bot":false,"login":"alanbernstein","name":"Alan Bernstein"},"body":"`get_stargazers` and `get_stargazers_with_dates` use endpoints that support the `page` parameter, but the functions don't accept it.\r\n\r\nI'd be happy to submit a pull request, if someone could point me a place to get started.","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDM3OTY2MjUxNw==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"Hi @alanbernstein you don't need to implement the page parameter, it's a standard parametr for all endpoint that has pagination which is already implemented in this library as a `PaginatedList` class.","createdAt":"2018-04-09T07:38:33Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/652#issuecomment-379662517","viewerDidAuthor":false}],"createdAt":"2017-10-25T18:07:56Z","number":652,"state":"CLOSED","title":"Accept \"page\" argument in stargazer calls","url":"https://github.com/PyGithub/PyGithub/issues/652"},{"author":{"id":"MDQ6VXNlcjMzMDM4NjM1","is_bot":false,"login":"iloveyoukisak","name":"I love you kisak \u003c3"},"body":"Is it somehow possible to add a reaction like :+1: or :-1: to a comment? I couldn't find it when looking thought the repo or docs.","comments":[],"createdAt":"2017-10-23T20:37:40Z","number":649,"state":"CLOSED","title":"Add a reaction to a issue comment","url":"https://github.com/PyGithub/PyGithub/issues/649"},{"author":{"id":"MDQ6VXNlcjEyMDA2NjQ1","is_bot":false,"login":"Kravennagen","name":"Morgane"},"body":"#Hi, I really don't understand why this code:\r\n```\r\ng = Github(\"privateAccount\", \"privatePass\")\r\n\r\n        for org in g.get_user().get_orgs():\r\n            print(org.name)\r\n```\r\nworks perfectly but when I want to get the same informations from my enterprise account it doesn't works:\r\n```\r\ng = Github(\"enterpriseAccount\", \"enterprisePass\", base_url=\"https://enterprise-url-github\")\r\n\r\n        for org in g.get_user().get_orgs():\r\n            print(org.name)\r\n```\r\nAnd I get this error:\r\n```\r\n\r\nTraceback (most recent call last):\r\n  File \"/usr/local/lib/python2.7/dist-packages/flask/app.py\", line 1997, in __call__\r\n    return self.wsgi_app(environ, start_response)\r\n  File \"/usr/local/lib/python2.7/dist-packages/flask/app.py\", line 1985, in wsgi_app\r\n    response = self.handle_exception(e)\r\n  File \"/usr/local/lib/python2.7/dist-packages/flask/app.py\", line 1540, in handle_exception\r\n    reraise(exc_type, exc_value, tb)\r\n  File \"/usr/local/lib/python2.7/dist-packages/flask/app.py\", line 1982, in wsgi_app\r\n    response = self.full_dispatch_request()\r\n  File \"/usr/local/lib/python2.7/dist-packages/flask/app.py\", line 1614, in full_dispatch_request\r\n    rv = self.handle_user_exception(e)\r\n  File \"/usr/local/lib/python2.7/dist-packages/flask/app.py\", line 1517, in handle_user_exception\r\n    reraise(exc_type, exc_value, tb)\r\n  File \"/usr/local/lib/python2.7/dist-packages/flask/app.py\", line 1612, in full_dispatch_request\r\n    rv = self.dispatch_request()\r\n  File \"/usr/local/lib/python2.7/dist-packages/flask/app.py\", line 1598, in dispatch_request\r\n    return self.view_functions[rule.endpoint](**req.view_args)\r\n  File \"/home/mflamant/Documents/bot/CiscoSparkPython/testbotforgithub/main.py\", line 44, in Main\r\n    bot.isRunnable()\r\n  File \"/home/mflamant/Documents/bot/CiscoSparkPython/testbotforgithub/utils/Compute.py\", line 48, in isRunnable\r\n    self.spark(message[0], message[1])\r\n  File \"/home/mflamant/Documents/bot/CiscoSparkPython/testbotforgithub/testbotforgithub.py\", line 33, in spark\r\n    return self.answer(details.roomId, markdown=self.gitTest(details))\r\n  File \"/home/mflamant/Documents/bot/CiscoSparkPython/testbotforgithub/testbotforgithub.py\", line 48, in gitTest\r\n    self.answer(details.roomId, markdown=org.name)\r\n  File \"/usr/local/lib/python2.7/dist-packages/PyGithub-1.35-py2.7.egg/github/Organization.py\", line 191, in name\r\n    self._completeIfNotSet(self._name)\r\n  File \"/usr/local/lib/python2.7/dist-packages/PyGithub-1.35-py2.7.egg/github/GithubObject.py\", line 251, in _completeIfNotSet\r\n    self._completeIfNeeded()\r\n  File \"/usr/local/lib/python2.7/dist-packages/PyGithub-1.35-py2.7.egg/github/GithubObject.py\", line 255, in _completeIfNeeded\r\n    self.__complete()\r\n  File \"/usr/local/lib/python2.7/dist-packages/PyGithub-1.35-py2.7.egg/github/GithubObject.py\", line 260, in __complete\r\n    self._url.value\r\n  File \"/usr/local/lib/python2.7/dist-packages/PyGithub-1.35-py2.7.egg/github/Requester.py\", line 172, in requestJsonAndCheck\r\n    return self.__check(*self.requestJson(verb, url, parameters, headers, input, cnx))\r\n  File \"/usr/local/lib/python2.7/dist-packages/PyGithub-1.35-py2.7.egg/github/Requester.py\", line 213, in requestJson\r\n    return self.__requestEncode(cnx, verb, url, parameters, headers, input, encode)\r\n  File \"/usr/local/lib/python2.7/dist-packages/PyGithub-1.35-py2.7.egg/github/Requester.py\", line 243, in __requestEncode\r\n    url = self.__makeAbsoluteUrl(url)\r\n  File \"/usr/local/lib/python2.7/dist-packages/PyGithub-1.35-py2.7.egg/github/Requester.py\", line 304, in __makeAbsoluteUrl\r\n    if url.startswith(\"/\"):\r\nAttributeError: 'NoneType' object has no attribute 'startswith'\r\n```\r\nHave you any idea, I think it because of the base_url, but I have to use it if not I can't get my informations...","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDMzNzkzNTM4Nw==","author":{"login":"Kravennagen"},"authorAssociation":"NONE","body":"Adding /api/v3 to the end of my URL and it works !","createdAt":"2017-10-19T14:59:13Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"HOORAY","users":{"totalCount":1}}],"url":"https://github.com/PyGithub/PyGithub/issues/646#issuecomment-337935387","viewerDidAuthor":false}],"createdAt":"2017-10-19T12:38:26Z","number":646,"state":"CLOSED","title":"base_url private github or github enterprise ","url":"https://github.com/PyGithub/PyGithub/issues/646"},{"author":{"id":"MDQ6VXNlcjQ3MDQ5MTc=","is_bot":false,"login":"j-vizcaino","name":"Jérôme Vizcaino"},"body":"Although GitHub API v3 supports it: https://developer.github.com/v3/pulls/reviews/#submit-a-pull-request-review it seems the library does not provide functions to create/update/delete PullRequestReview (only list those).\r\n","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDM3NDgxNjQxMg==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"It is now. \r\n\r\nSee #538 and #662","createdAt":"2018-03-21T02:13:36Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/645#issuecomment-374816412","viewerDidAuthor":false}],"createdAt":"2017-10-18T15:48:09Z","number":645,"state":"CLOSED","title":"Working with PullRequestReview","url":"https://github.com/PyGithub/PyGithub/issues/645"},{"author":{"id":"MDQ6VXNlcjExNjExNTk5","is_bot":false,"login":"anilchauhangit","name":""},"body":"I have a protected branch which has no push access to anyone. I want to update this to have a team with push access to this branch. I want to know the function name to be called to accomplish this. ","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDM3OTY2MzE4Ng==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"I believe it's this endpoint:\r\nhttps://developer.github.com/v3/repos/branches/#add-team-restrictions-of-protected-branch\r\n\r\nHowever currently this is not implemented yet, see #586 \r\n\r\nClosing this as a duplicated, please see that other issue for updates!","createdAt":"2018-04-09T07:41:25Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/642#issuecomment-379663186","viewerDidAuthor":false}],"createdAt":"2017-10-12T11:15:39Z","number":642,"state":"CLOSED","title":"Need to update the protected branch  to allow a team to have push access","url":"https://github.com/PyGithub/PyGithub/issues/642"},{"author":{"id":"MDQ6VXNlcjExMDYxNjE5","is_bot":false,"login":"mmmce1994","name":"Mahdi Mirzaei"},"body":"hi every one\r\nhow to push a project from local to github repository using pygithub library ?\r\nis there any sample code ?","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDM0NjQ4MTY4Ng==","author":{"login":"jasonwhite"},"authorAssociation":"COLLABORATOR","body":"I don't think that is possible using only the GitHub API. It is possible to create a *new*, empty repository using [AuthenticatedUser.create_repo](http://pygithub.readthedocs.io/en/stable/github_objects/AuthenticatedUser.html#github.AuthenticatedUser.AuthenticatedUser.create_repo), then use Git itself to set the remote and push up an existing repository.","createdAt":"2017-11-22T21:46:19Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/641#issuecomment-346481686","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs6V0CB6","author":{"login":"ts0818"},"authorAssociation":"NONE","body":"Am I correct in understanding that the PyGitHub API does not have a git push function?\r\n(In other words, the git push part needs to be implemented using something other than PyGitHub.)","createdAt":"2024-12-03T03:02:32Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/641#issuecomment-2513444986","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs6V1tML","author":{"login":"EnricoMi"},"authorAssociation":"COLLABORATOR","body":"That is right, PyGithub is to be used to interact with the Github Web API, not a local Git repository. Git and Github are separate things. Github is a Web frontend for a Git server hosted by Github. PyGithub does not interact with Git infrastructure.","createdAt":"2024-12-03T08:44:18Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/641#issuecomment-2513883915","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs6V2Drr","author":{"login":"ts0818"},"authorAssociation":"NONE","body":"@EnricoMi \r\n\r\nThank you for your reply.\r\nWe understand.","createdAt":"2024-12-03T09:24:38Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/641#issuecomment-2513976043","viewerDidAuthor":false}],"createdAt":"2017-10-09T15:56:16Z","number":641,"state":"CLOSED","title":"push project to github","url":"https://github.com/PyGithub/PyGithub/issues/641"},{"author":{"id":"MDQ6VXNlcjgwNzQx","is_bot":false,"login":"mloskot","name":"Mateusz Łoskot"},"body":"I'm deleting all labels from a repo (it is an empty test repo, no code, no issues, no pull requests, just with labels).\r\n\r\nHere is how I do it:\r\n\r\n```python\r\ng = github.Github(token)\r\nrepo = g.get_user().get_repo('myrepo')\r\n\r\nfor label in self.repo.get_labels():\r\n    count += 1\r\n    log.info('deleting label %s (%d)', label.name, count)\r\n    label.delete()\r\n```\r\n\r\nThe removal stops after 30 lables have been deleted:\r\n\r\n```\r\npython3 delete_my_labels.py\r\n\r\nINFO:authorized to github as user \"mloskot\"\r\nINFO:rate limit=5000, remaining=4925\r\nINFO:connected to repository \"mloskot/myrepo\"\r\nINFO:deleting label R:wontfix (1)\r\nINFO:deleting label R:worksforme (2)\r\nINFO:deleting label S:blocker (3)\r\nINFO:deleting label S:critical (4)\r\n...\r\nINFO:deleting label V:1.5.1 (29)\r\nINFO:deleting label V:1.5.2 (30)\r\n```\r\n\r\nThen, I have to re-run the script to delete the remaining labels:\r\n\r\n```\r\npython3 delete_my_labels.py\r\nINFO:authorized to github as user \"mloskot\"\r\nINFO:rate limit=5000, remaining=4881\r\nINFO:connected to repository \"mloskot/myrepo\"\r\nINFO:deleting label V:1.5.3 (1)\r\nINFO:deleting label V:1.6.0 (2)\r\nINFO:deleting label V:1.6.1 (3)\r\n```\r\n\r\nIs it possibly `DELETE` action vs pagination issue?\r\n\r\n\r\nIf I remove the `label.delete()` step and just print label names:\r\n\r\n```python\r\ng = github.Github(token)\r\nrepo = g.get_user().get_repo('myrepo')\r\n\r\nfor label in self.repo.get_labels():\r\n    count += 1\r\n    log.info('deleting label %s (%d)', label.name, count)\r\n    label.delete()\r\n```\r\n\r\nall labels are printed:\r\n\r\n```\r\nINFO:authorized to github as user \"mloskot\"\r\nINFO:rate limit=5000, remaining=4938\r\nINFO:connected to repository \"mloskot/myrepo\"\r\nINFO:deleting label R:wontfix (1)\r\nINFO:deleting label R:worksforme (2)\r\nINFO:deleting label S:blocker (3)\r\nINFO:deleting label S:critical (4)\r\n...\r\nINFO:deleting label V:1.5.1 (29)\r\nINFO:deleting label V:1.5.2 (30)\r\nINFO:deleting label V:1.5.3 (31)\r\nINFO:deleting label V:1.6.0 (32)\r\nINFO:deleting label V:1.6.1 (33)\r\n```\r\n","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDM3MzIyNTc5Nw==","author":{"login":"peterkline"},"authorAssociation":"NONE","body":"So this is a pagination implementation and not an \"issue\"\r\nFrom the code the rtype is a PaginatedList:\r\n```python\r\ndef get_labels(self):\r\n        \"\"\"\r\n        :calls: GET /repos/:owner/:repo/labels\r\n        :rtype: :class:github.PaginatedList.PaginatedListof :class: github.Label.Label\r\n        \"\"\"\r\n```\r\n\r\nSo an implementation would be:\r\n\r\n```python\r\n    def get_labels(self, repo):\r\n        labels = self.gho.get_repo(repo).get_labels()\r\n        items_per_page = 30\r\n        pages = len(list(labels))/items_per_page\r\n```\r\n\r\nThen you just need to iterate over the number of pages with the get_labels()[page #] to get the labels to delete.\r\n","createdAt":"2018-03-15T01:04:01Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/640#issuecomment-373225797","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQwMjY1NDE4NQ==","author":{"login":"stale"},"authorAssociation":"NONE","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","createdAt":"2018-07-05T08:58:47Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/640#issuecomment-402654185","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQwMjY1NjQwMQ==","author":{"login":"mloskot"},"authorAssociation":"CONTRIBUTOR","body":"@peterkline Thanks, and the stale bot too :)","createdAt":"2018-07-05T09:05:51Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"LAUGH","users":{"totalCount":1}}],"url":"https://github.com/PyGithub/PyGithub/issues/640#issuecomment-402656401","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDUyNjE0ODI2Mw==","author":{"login":"mfonville"},"authorAssociation":"CONTRIBUTOR","body":"This very same problem also happens when listing release assets using `get_assets()`, you only get the first page of results.","createdAt":"2019-08-29T11:42:09Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/640#issuecomment-526148263","viewerDidAuthor":false}],"createdAt":"2017-10-07T20:37:20Z","number":640,"state":"CLOSED","title":"Deleting labels stops after 30 labels (pagination issue?)","url":"https://github.com/PyGithub/PyGithub/issues/640"},{"author":{"id":"MDQ6VXNlcjIyOTM1NzM=","is_bot":false,"login":"ruffsl","name":"Ruffin"},"body":"As defined in the github API, there is the ability to permit maintainer to modify the head branch for the PR: https://developer.github.com/v3/pulls/#create-a-pull-request\r\n\r\nCurrently, I don't see this defined:\r\nhttps://github.com/PyGithub/PyGithub/blob/3437a7030f02a1648290db581621936eb5771b69/github/Repository.py#L983","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDM2NTgwNjMyMg==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"Closed in #703 ","createdAt":"2018-02-15T02:08:59Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/639#issuecomment-365806322","viewerDidAuthor":false}],"createdAt":"2017-10-06T06:58:34Z","number":639,"state":"CLOSED","title":"Support for maintainer_can_modify arg with create_pull ","url":"https://github.com/PyGithub/PyGithub/issues/639"},{"author":{"id":"MDQ6VXNlcjIxMjQ1OTI4","is_bot":false,"login":"gomesfernanda","name":"Fernanda Gomes"},"body":"Hello! I have a small project that gathers metrics for repos on an organization, all using PyGithub.\r\nIt's under https://github.com/gomesfernanda/some-github-metrics\r\n\r\nIf it's pertinent, it could be on the documentation page under Projects using PyGithub\r\n\r\nThanks!","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDM1MzY1MjM4OQ==","author":{"login":"AnneTheAgile"},"authorAssociation":"NONE","body":"lgtm, why don't you submit a PR to this page; https://github.com/PyGithub/PyGithub/blob/master/doc/introduction.rst\r\nand reference this ticket as well so they can be merged/closed together? ","createdAt":"2017-12-22T18:31:18Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/636#issuecomment-353652389","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM3NDA2NzMwNg==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"@gomesfernanda Merged!","createdAt":"2018-03-18T23:40:22Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/636#issuecomment-374067306","viewerDidAuthor":false}],"createdAt":"2017-09-22T15:50:50Z","number":636,"state":"CLOSED","title":"A humble project to collect repos metrics","url":"https://github.com/PyGithub/PyGithub/issues/636"},{"author":{"id":"MDQ6VXNlcjUxODI3MA==","is_bot":false,"login":"peterkline","name":"Peter Kline"},"body":"Topics are a fairly new feature within Github.  Currently this functionality is provided in the API in a beta mode.  We have a need to use these to add attributes and then consume them for automation.  Hopefully this helps others.\r\n\r\n\r\nAPI Documentation:\r\n[List topics in a repo](https://developer.github.com/v3/repos/#list-all-topics-for-a-repository)\r\n[Replace topics in a repo](https://developer.github.com/v3/repos/#replace-all-topics-for-a-repository)\r\n\r\nExamples of use:\r\n```python\r\n# Get list of topics from a repository    \r\ntopics = repo_obj.get_topics()\r\n\r\n# Replace current (if there are any) topics with list\r\nrepo_obj.replace_topics(['base', 'personal', 'playground'])\r\n```","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDM3Nzk5NjUyNw==","author":{"login":"TheVetter"},"authorAssociation":"NONE","body":"Has topics support been added?","createdAt":"2018-04-02T18:06:07Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/634#issuecomment-377996527","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM3ODgwMzEzMQ==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"@TheVetter Should be soon, I have reviewed the PR and still waiting response for the original author @peterkline ","createdAt":"2018-04-05T02:33:17Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/634#issuecomment-378803131","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM3OTEyMTE1NA==","author":{"login":"migueleliasweb"},"authorAssociation":"NONE","body":"While this issue is not fixed, we should be able to access the topics with the `_rawData`, right ?","createdAt":"2018-04-06T01:13:28Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/634#issuecomment-379121154","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM3OTEyMTg4NQ==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"@migueleliasweb I am afraid not, as it requires calling another endpoint. (`/topics`) However, I will try to get this merged soon.","createdAt":"2018-04-06T01:18:38Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/634#issuecomment-379121885","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM3OTEyMjE5Nw==","author":{"login":"migueleliasweb"},"authorAssociation":"NONE","body":"I thought the same but apparently the topics list is returned from the repo itself. Ps: Dunno if this was a recent change on the API itself.\r\n\r\nSee: https://developer.github.com/v3/repos/#get","createdAt":"2018-04-06T01:21:05Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/634#issuecomment-379122197","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM3OTEyMjgzMA==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"@migueleliasweb You are right, the `topics` attributes is currently in preview, but to edit the attributes we still need to go back to `/topics` endpoint.","createdAt":"2018-04-06T01:25:54Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/634#issuecomment-379122830","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM3OTE0MTQ1Ng==","author":{"login":"migueleliasweb"},"authorAssociation":"NONE","body":"@sfdye I just wanted to list them =/\r\n\r\nAnyway... I seem unable to get them even accessing the `_rawData` directly. See:\r\n\r\n```python\r\nipdb> ll\r\n    643     def get_repo(self, name):\r\n    644         \"\"\"\r\n    645         :calls: `GET /repos/:owner/:repo <http://developer.github.com/v3/repos>`_\r\n    646         :param name: string\r\n    647         :rtype: :class:`github.Repository.Repository`\r\n    648         \"\"\"\r\n    649         assert isinstance(name, str), name\r\n    650         headers, data = self._requester.requestJsonAndCheck(\r\n    651             \"GET\",\r\n    652             \"/repos/\" + self.login + \"/\" + name\r\n    653         )\r\n--> 654         return github.Repository.Repository(self._requester, headers, data, completed=True)\r\n    655 \r\n\r\nipdb> data[\"topics\"]\r\n*** KeyError: 'topics'\r\n```","createdAt":"2018-04-06T03:56:37Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/634#issuecomment-379141456","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM3OTE0MTYzNA==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"@migueleliasweb You're missing the custom header `application/vnd.github.mercy-preview+json`. I guess this is new so the master doesn't have it yet.","createdAt":"2018-04-06T03:58:10Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":1}}],"url":"https://github.com/PyGithub/PyGithub/issues/634#issuecomment-379141634","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM3OTE0MjI3MQ==","author":{"login":"migueleliasweb"},"authorAssociation":"NONE","body":"@sfdye Pardon me, I totally missed that !","createdAt":"2018-04-06T04:04:00Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/634#issuecomment-379142271","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM4MTEzNjAyNg==","author":{"login":"edanhauon"},"authorAssociation":"NONE","body":"Hi @sfdye \r\nHow soon is soon?\r\n\r\nI ask since My app is dependent on this matter - and if it won't happen soon we'll have to develop this ourselves.\r\n\r\nYour help is much appreciated 👍.\r\n\r\nEdan","createdAt":"2018-04-13T13:31:20Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/634#issuecomment-381136026","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM4MTEzNzI0MA==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"@edanhauon The original author is not responding, so if you could open a new PR I am happy to review and cut a new version once that's merged.","createdAt":"2018-04-13T13:35:39Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/634#issuecomment-381137240","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM4MTE0NzEwOA==","author":{"login":"edanhauon"},"authorAssociation":"NONE","body":"Could you maybe add me to the current PR so I could what has been done already?\r\n\r\nThanks,\r\nEdan","createdAt":"2018-04-13T14:08:58Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/634#issuecomment-381147108","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM4MTE0Nzg3Mg==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"@edanhauon what do you mean?","createdAt":"2018-04-13T14:11:41Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/634#issuecomment-381147872","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM4MTE0ODk1NQ==","author":{"login":"edanhauon"},"authorAssociation":"NONE","body":"@sfdye never mind, I see it in this thread. thanks.","createdAt":"2018-04-13T14:15:25Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/634#issuecomment-381148955","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM4MTE0ODk3OQ==","author":{"login":"peterkline"},"authorAssociation":"NONE","body":"Sorry guys for not being around.  Been buried with work related coding.  if you can't wait for about 12 hours for me to make any mods and redo the PR then by all means fork off whats here.  If you can wait I will finish the coding.","createdAt":"2018-04-13T14:15:29Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/634#issuecomment-381148979","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM4MTE0OTE5NQ==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"@peterkline I can wait","createdAt":"2018-04-13T14:16:13Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/634#issuecomment-381149195","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM4MTE2MzQ2NQ==","author":{"login":"edanhauon"},"authorAssociation":"NONE","body":"@peterkline  same :)","createdAt":"2018-04-13T15:00:50Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/634#issuecomment-381163465","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM4Mjk3NjY5MA==","author":{"login":"wyardley"},"authorAssociation":"CONTRIBUTOR","body":"Patch works for me, with the notes mentioned in the PR, that is, it would be a little more user-friendly if you can pass that array back rather than having to send it as `{'name': topics}`, so like so:\r\n```\r\ntopics = repo.get_topics()\r\ntopics.append('foobar')\r\nrepo.replace_topics(data)\r\n```\r\nvs\r\n```\r\ntopics = repo.get_topics()\r\ntopics.append('foobar')\r\ndata = {'names': topics}\r\nrepo.replace_topics(data)\r\n```","createdAt":"2018-04-20T04:59:31Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/634#issuecomment-382976690","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM4MzAxNDE3Nw==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"@wyardley suggestion accepted","createdAt":"2018-04-20T07:52:41Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/634#issuecomment-383014177","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM4NjQ4MTIwMQ==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"Anyone care to get this thing moving? Topic is a stable feature now, I wanna make it happen!","createdAt":"2018-05-04T01:05:27Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/634#issuecomment-386481201","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQwMjYzMDEyMg==","author":{"login":"stale"},"authorAssociation":"NONE","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","createdAt":"2018-07-05T07:26:21Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/634#issuecomment-402630122","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQwMjgyMzAwMg==","author":{"login":"wyardley"},"authorAssociation":"CONTRIBUTOR","body":"I'm proposing #832, which resolves the test failure, and I think resolves most of this feedback? It also switches the input to `replace_topics()` to the expected array as discussed. Would appreciate feedback, esp. on the test case I added.","createdAt":"2018-07-05T19:06:30Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":1}}],"url":"https://github.com/PyGithub/PyGithub/issues/634#issuecomment-402823002","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQwMjkxMjc0Ng==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"Merged in #832 thanks to @wyardley and credits to @peterkline for the original PR 🎉 ","createdAt":"2018-07-06T03:10:16Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/634#issuecomment-402912746","viewerDidAuthor":false}],"createdAt":"2017-09-21T13:30:41Z","number":634,"state":"CLOSED","title":"Add support for getting and replacing topics on a repository","url":"https://github.com/PyGithub/PyGithub/issues/634"},{"author":{"id":"MDQ6VXNlcjQwMDE3ODk=","is_bot":false,"login":"thehesiod","name":"Alexander Mohr"},"body":"NOTE: In my case this is particular to comments, but I haven't ruled out it's not an issue with their other paginated APIs.\r\n\r\nNOTE: This seems to have been a series of issues on the github back-end but I'm reporting here to warn others if this issue.  \r\n\r\nIn March of this year I noticed that in large PRs, the correct total number of comments were returned, but often many of them were duplicates.  So for example instead of getting back A, B, C, D, you'd get A, B, A, C.  Several months later this seems to have been fixed, however now the issue is that it's not returning all the comments when comparing to the total reported by the UI.  Here are a few examples:\r\n\r\n```python\r\nrepo = gh.get_repo('projecttacoma/bonnie')\r\npull = repo.get_pull(567)\r\npull.get_comments()\r\n```\r\nthis returns 434/448 comments.\r\n\r\nInterestingly this one is empty:\r\n```python\r\nrepo = gh.get_repo('alistairjcbrown/mock-repo')\r\npull = repo.get_pull(7)\r\npull.get_comments()\r\n```\r\n\r\nIt also happens in our private repository.  If anyone finds some more examples or insight please append to this issue.","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDMzMDM4OTQ3NQ==","author":{"login":"thehesiod"},"authorAssociation":"NONE","body":"update, seems like I found a real issue.  Note in https://api.github.com/repos/alistairjcbrown/mock-repo/pulls/7, that `review_comments` points to: https://api.github.com/repos/alistairjcbrown/mock-repo/pulls/7/comments, whereas `comments` points to: https://api.github.com/repos/alistairjcbrown/mock-repo/issues/7/comments.  The issue is that in `def get_comments()`:  https://github.com/PyGithub/PyGithub/blob/master/github/PullRequest.py#L437 it just forwards to `def self.get_review_comments()` which is wrong.","createdAt":"2017-09-19T00:01:40Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/631#issuecomment-330389475","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDMzMDM5MjIyMw==","author":{"login":"thehesiod"},"authorAssociation":"NONE","body":"btw got a little bit better for PR 567 if I list issue + review comments, then I get 434 + 8 = 442, still short 6 comments","createdAt":"2017-09-19T00:20:41Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/631#issuecomment-330392223","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDMzMDU5MTY1Mg==","author":{"login":"thehesiod"},"authorAssociation":"NONE","body":"ok, just got update from github support:\r\n\r\n> \r\n> I think I see what's causing confusion. For a pull request, the total count of comments is computed like this:\r\n> \r\n> review_body_count + issue_comments_count + review_comments_count\r\n> \r\n> And you're currently computing only this:\r\n> \r\n> issue_comments_count + review_comments_count\r\n> \r\n> So, you're missing the count for review_body_count. Those are reviews that have a body of their own. When you create a review on a pull request -- that review can have multiple pull request review comments (shown on the diff of the PR) and also the review comment itself. If the review comment is missing, you see only the individual comments on the diff. But if the review comment is present for the review, then you get both the comments on the diff and a review comment message in the main timeline.\r\n> \r\n> So, you should fetch the list of reviews and count the number of those which have a non-empty body:\r\n> \r\n> https://api.github.com/repos/projecttacoma/bonnie/pulls/567/reviews?per_page=100\r\n> \r\n> (of course, you'll need to paginate)\r\n> \r\n> There should be 6 such comments, and that will then give you 6 + 434 + 8 = 448\r\n\r\nalso I found the corresponding apis: get_issue_comments, get_review_comments, and get_reviews..so looks like everything is working, closing this issue","createdAt":"2017-09-19T16:14:33Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/631#issuecomment-330591652","viewerDidAuthor":false}],"createdAt":"2017-09-18T23:50:30Z","number":631,"state":"CLOSED","title":"GitHub pagination issue with large PRs","url":"https://github.com/PyGithub/PyGithub/issues/631"},{"author":{"id":"MDQ6VXNlcjE0MDc1NjQ5","is_bot":false,"login":"edouardpoitras","name":"Edouard Poitras"},"body":"I encountered this issue when using the GithubIntegration class:\r\n\r\n    import github\r\n    app_id = aaaa\r\n    private_key = open('key.pem').read()\r\n    installation_id = bbbbb\r\n    integration = github.GithubIntegration(app_id, private_key)\r\n    token = integration.get_access_token(installation_id)\r\n    Traceback (most recent call last):\r\n      File \"<stdin>\", line 1, in <module>\r\n      File \"/home/eddie/.local/lib/python3.6/site-packages/github/MainClass.py\", line 692, in get_access_token\r\n        data=response_text\r\n        github.GithubException.GithubException: 401 {\"message\":\"Invalid credentials\",\"documentation_url\":\"https://developer.github.com/v3\"}\r\n\r\nIn the GithubIntegration.create_jwt() function line 636:\r\nReplaced:\r\n\r\n    return jwt.encode(\r\n                payload,\r\n                key=self.private_key,\r\n                algorithm=\"RS256\"\r\n            )\r\nWith:\r\n\r\n    from jose import jwt as JWT                                                                 \r\n    return JWT.encode(payload, self.private_key, 'RS256')\r\n\r\nTrying again...\r\n\r\n    import github\r\n    app_id = aaaa\r\n    private_key = open('Downloads/test.pem').read()\r\n    installation_id = bbbbb\r\n    integration = github.GithubIntegration(app_id, private_key)\r\n    token = integration.get_access_token(installation_id)\r\n    token\r\n    InstallationAuthorization(expires_at=2017-09-12 17:11:32)\r\n\r\nNot sure what the difference is between the pyjwt and python-jose implementations are, but pyjwt doesn't seem to work for me.\r\n\r\nLooks like python-jose was the original library used for jwt tokens and that was switched to pyjwt in issue #542 on March 27th.","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDM0NzM1ODQ0Nw==","author":{"login":"jasonwhite"},"authorAssociation":"COLLABORATOR","body":"Duplicate of #588. Should be fixed in the next release.","createdAt":"2017-11-27T23:03:00Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/627#issuecomment-347358447","viewerDidAuthor":false}],"createdAt":"2017-09-12T16:28:52Z","number":627,"state":"CLOSED","title":"pyjwt causing issues with GithubIntegration","url":"https://github.com/PyGithub/PyGithub/issues/627"},{"author":{"id":"MDQ6VXNlcjE2Mjg0MjMy","is_bot":false,"login":"sandipmgiri","name":"Sandip Giri"},"body":"I am trying to fork a repo using below code : \r\n\r\n```\r\nfrom github import Github\r\ng = Github(\"usr_name\", \"psw\")\r\ngithub_user = g.get_user()\r\nrepo = \"https://github.com/gregof/abc\"\r\nmyfork = github_user.create_fork(repo)\r\n```\r\n\r\nHowever I am getting following errors , looks like I am missing something. \r\n```\r\nTraceback (most recent call last):\r\n  File \"f.py\", line 5, in <module>\r\n    myfork = github_user.create_fork(repo)\r\n  File \"/usr/lib/python2.7/dist-packages/github/AuthenticatedUser.py\", line 446, in create_fork\r\n    assert isinstance(repo, github.Repository.Repository), repo\r\nAssertionError: https://github.com/gregof/abc\r\n\r\n```\r\nPlease provide comments on this .Thanks!","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDM3OTQ1NDQ5NQ==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"@sandipmgiri It's expecting a `Repository` object, not a string literal.\r\n\r\nSo this will work:\r\n```\r\nrepo = g.get_repo('gregof/abc')\r\n```","createdAt":"2018-04-07T09:05:42Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/626#issuecomment-379454495","viewerDidAuthor":false}],"createdAt":"2017-09-12T06:04:45Z","number":626,"state":"CLOSED","title":"Fork a repository into Github account ","url":"https://github.com/PyGithub/PyGithub/issues/626"},{"author":{"id":"MDQ6VXNlcjM4NjcyNzU=","is_bot":false,"login":"MrBlaise","name":"Balázs Rostás"},"body":"The following parameters are missing from the create_repo methods:\r\n\r\n- has_projects\r\n- license_template\r\n- allow_squash_merge\r\n- allow_merge_commit\r\n- allow_rebase_merge\r\n\r\nAlso the organisation create_repo method accepts a Team object for the team_id, this should already be an id (int, long) not an object","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDMyNzEwMDQ1Mw==","author":{"login":"MrBlaise"},"authorAssociation":"CONTRIBUTOR","body":"I have created a PR to fix these issues: #623","createdAt":"2017-09-05T07:56:58Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/624#issuecomment-327100453","viewerDidAuthor":false}],"createdAt":"2017-09-05T07:56:34Z","number":624,"state":"CLOSED","title":"There are missing parameters from repo creation","url":"https://github.com/PyGithub/PyGithub/issues/624"},{"author":{"id":"MDQ6VXNlcjY3OTM3MTY=","is_bot":false,"login":"samgdf","name":"Sam"},"body":"Contributions for named_use does not work for past year. Have this code in a try loop:\r\n\r\n`print (\"G-COMMITS IN LAST YEAR: \" + str(user.contributions))`\r\n\r\nwhere\r\n\r\n```\r\ngitTable = (data[i]['fields']['Github']).rsplit('/', 1)[-1]\r\n            print(\"GITHUB ID: \" + gitTable)\r\n            user = git.get_user(gitTable)\r\n```\r\n\r\nand it is printing the name properly, as well as getting email and followers from the name properly.\r\n\r\nIs this an issue of contributions simply not working?","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDMyNzI0MzE5Mw==","author":{"login":"samgdf"},"authorAssociation":"NONE","body":"http://pygithub.readthedocs.io/en/latest/github_objects/StatsCommitActivity.html\r\n\r\nI have found this is the proper usage that I am looking for, however I try:\r\n`            print (\"G-COMMITS: \" + str(user.StatsCommitActivity(total)))`\r\nand it does not work, however this is the combination as listed in the docs.","createdAt":"2017-09-05T17:12:28Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/622#issuecomment-327243193","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM4NTE3ODc1Nw==","author":{"login":"s-t-e-v-e-n-k"},"authorAssociation":"COLLABORATOR","body":"<user>.contributions is no longer populated by GitHub, so it will always return None. There is a PR up to remove it.\r\n\r\nuser.StatsCommitActivity(total) doesn't look right at all, where in the docs did you find that example?\r\n\r\n<repository>.get_stats_commit_activity() will return an iterable with the statistics for each user, and you can query .total on each.","createdAt":"2018-04-28T14:09:35Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/622#issuecomment-385178757","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM4NTMwMjU3Ng==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"Closed in #774","createdAt":"2018-04-30T02:22:36Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/622#issuecomment-385302576","viewerDidAuthor":false}],"createdAt":"2017-08-30T14:05:50Z","number":622,"state":"CLOSED","title":"Contributions does not work","url":"https://github.com/PyGithub/PyGithub/issues/622"},{"author":{"id":"MDQ6VXNlcjkxMTI3OTQ=","is_bot":false,"login":"crhume","name":"Casey Hume"},"body":"From https://developer.github.com/v3/repos/collaborators/#collaborators we see that the api call to \r\n`GET /repos/:owner/:repo/collaborators`\r\n takes a parameter \"affiliation\" which accepts three values \"outside\", \"direct\" and \"all\" and defaults to \"all.\"\r\n\r\n","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDM3OTQ1MzQyMw==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"@crhume Would you mind making a PR out of your branch?","createdAt":"2018-04-07T08:57:35Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/620#issuecomment-379453423","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQwMjYzMDE2OA==","author":{"login":"stale"},"authorAssociation":"NONE","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","createdAt":"2018-07-05T07:26:29Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/620#issuecomment-402630168","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQxOTg2ODUwMw==","author":{"login":"stale"},"authorAssociation":"NONE","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","createdAt":"2018-09-10T10:38:17Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/620#issuecomment-419868503","viewerDidAuthor":false}],"createdAt":"2017-08-25T15:26:46Z","number":620,"state":"CLOSED","title":"Implement affiliation parameter with get_collaborators in Repository.py","url":"https://github.com/PyGithub/PyGithub/issues/620"},{"author":{"id":"MDQ6VXNlcjk2ODU4NjA=","is_bot":false,"login":"babineaum","name":"Matt Babineau"},"body":"https://developer.github.com/changes/2017-06-16-loki-preview-ending-soon/\r\n\r\nthis code needs to be fixed - https://github.com/PyGithub/PyGithub/blob/4c64b28920c8eea834e31b18e2aef6b08d1a94a0/github/Repository.py#L1120-L1132\r\nhttps://github.com/PyGithub/PyGithub/blob/4c64b28920c8eea834e31b18e2aef6b08d1a94a0/github/Repository.py#L2210-L2240\r\n\r\nhttps://github.com/PyGithub/PyGithub/search?utf8=%E2%9C%93&q=loki&type=\r\n\r\nIf i can get to the work, i will handle this. figured i would bring it up.","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDMzOTQxMTUwNA==","author":{"login":"babineaum"},"authorAssociation":"CONTRIBUTOR","body":"cleaned this up in this PR https://github.com/PyGithub/PyGithub/pull/651","createdAt":"2017-10-25T17:41:06Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/619#issuecomment-339411504","viewerDidAuthor":false}],"createdAt":"2017-08-24T19:46:20Z","number":619,"state":"CLOSED","title":"github's api preview \"loki\" ending","url":"https://github.com/PyGithub/PyGithub/issues/619"},{"author":{"id":"MDQ6VXNlcjE1OTQ0MTg3","is_bot":false,"login":"Armatorix","name":"Wojciech Sokołowski"},"body":"Don't know, if it's good place to post it, but two links from [this](http://pygithub.readthedocs.io/en/latest/introduction.html#what-next)  (\"What next?\") does not work.","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDM0NzM1MzE0MA==","author":{"login":"jasonwhite"},"authorAssociation":"COLLABORATOR","body":"Looks like ReadTheDocs just needs to rebuild the documentation. Not sure why this hasn't happened yet.","createdAt":"2017-11-27T22:40:30Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/617#issuecomment-347353140","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM1MzY1MjY3NA==","author":{"login":"AnneTheAgile"},"authorAssociation":"NONE","body":"this should be closed, hopefully with a renamed ticketname, eg \"Documentation page link not updated.\"\r\nIt works now.","createdAt":"2017-12-22T18:33:11Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":2}}],"url":"https://github.com/PyGithub/PyGithub/issues/617#issuecomment-353652674","viewerDidAuthor":false}],"createdAt":"2017-08-23T12:44:34Z","number":617,"state":"CLOSED","title":"Documentation page link not updated","url":"https://github.com/PyGithub/PyGithub/issues/617"},{"author":{"id":"MDQ6VXNlcjkwMjk5ODQ=","is_bot":false,"login":"jmhossler","name":"John Hossler"},"body":"The github api allows the use of this call to specify the role of the new member, https://developer.github.com/v3/orgs/teams/#add-or-update-team-membership. \r\n\r\nTeam.add_membership should allow the same.","comments":[],"createdAt":"2017-08-15T19:30:01Z","number":616,"state":"CLOSED","title":"Team add_membership should take parameter for role","url":"https://github.com/PyGithub/PyGithub/issues/616"},{"author":{"id":"MDQ6VXNlcjg2NTU0MQ==","is_bot":false,"login":"jasonwhite","name":"Jason White"},"body":"The following example fails because the path contains a space:\r\n\r\n```python\r\nimport github\r\ngithub.Github().get_repo('Microsoft/dotnet') \\\r\n      .get_file_contents('Documentation/compatibility/! Template.md')\r\n```\r\n\r\n```\r\n>>> import github\r\n>>> github.Github().get_repo('Microsoft/dotnet').get_file_contents('Documentation/compatibility/! Template.md')\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"/usr/lib/python3.6/site-packages/github/Repository.py\", line 1256, in get_file_contents\r\n    parameters=url_parameters\r\n  File \"/usr/lib/python3.6/site-packages/github/Requester.py\", line 172, in requestJsonAndCheck\r\n    return self.__check(*self.requestJson(verb, url, parameters, headers, input, cnx))\r\n  File \"/usr/lib/python3.6/site-packages/github/Requester.py\", line 213, in requestJson\r\n    return self.__requestEncode(cnx, verb, url, parameters, headers, input, encode)\r\n  File \"/usr/lib/python3.6/site-packages/github/Requester.py\", line 252, in __requestEncode\r\n    status, responseHeaders, output = self.__requestRaw(cnx, verb, url, requestHeaders, encoded_input)\r\n  File \"/usr/lib/python3.6/site-packages/github/Requester.py\", line 283, in __requestRaw\r\n    output = response.read()\r\n  File \"/usr/lib/python3.6/http/client.py\", line 459, in read\r\n    s = self.fp.read()\r\n  File \"/usr/lib/python3.6/socket.py\", line 586, in readinto\r\n    return self._sock.recv_into(b)\r\n  File \"/usr/lib/python3.6/ssl.py\", line 1002, in recv_into\r\n    return self.read(nbytes, buffer)\r\n  File \"/usr/lib/python3.6/ssl.py\", line 865, in read\r\n    return self._sslobj.read(len, buffer)\r\n  File \"/usr/lib/python3.6/ssl.py\", line 625, in read\r\n    v = self._sslobj.read(len, buffer)\r\nConnectionResetError: [Errno 104] Connection reset by peer\r\n```\r\n\r\nIf the path is first `quote`d, then it works:\r\n\r\n```python\r\nimport github\r\nimport urllib.parse\r\ngithub.Github().get_repo('Microsoft/dotnet') \\\r\n      .get_file_contents(urllib.parse.quote('Documentation/compatibility/! Template.md'))\r\n```","comments":[],"createdAt":"2017-08-08T20:58:33Z","number":613,"state":"CLOSED","title":"Cannot use get_file_contents with paths containing spaces","url":"https://github.com/PyGithub/PyGithub/issues/613"},{"author":{"id":"MDQ6VXNlcjMwMDg0ODU2","is_bot":false,"login":"sgleske-ias","name":""},"body":"I installed PyGithub from `pip` and noticed it was revision 1.35.  I went to look at GitHub tags and noticed this project has not tagged the 1.35 release.","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDM0NjQ4MjY0MQ==","author":{"login":"jasonwhite"},"authorAssociation":"COLLABORATOR","body":"Looks like it was named [`1.35`](https://github.com/PyGithub/PyGithub/releases/tag/1.35) instead of `v1.35`.\r\n\r\nI pushed up a `v1.35` tag to be consistent with the rest.","createdAt":"2017-11-22T21:50:53Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/612#issuecomment-346482641","viewerDidAuthor":false}],"createdAt":"2017-08-07T19:45:06Z","number":612,"state":"CLOSED","title":"1.35 release is not tagged","url":"https://github.com/PyGithub/PyGithub/issues/612"},{"author":{"id":"MDQ6VXNlcjM0MTgwOTk=","is_bot":false,"login":"rpocase","name":""},"body":"When creating or managing a team, the only privacy level is \"secret\". The `Organization.create_team` API should be extended to accept `privacy` of value either `secret` (default) or `closed`.\r\n\r\nRelevant API spec: https://developer.github.com/v3/orgs/teams/#create-team","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDM3OTY2MTcwMQ==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"Closed in #702 ","createdAt":"2018-04-09T07:35:02Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/611#issuecomment-379661701","viewerDidAuthor":false}],"createdAt":"2017-08-07T16:01:44Z","number":611,"state":"CLOSED","title":"Add ability to set visibility of organization team","url":"https://github.com/PyGithub/PyGithub/issues/611"},{"author":{"id":"MDQ6VXNlcjYxMDIwMjc=","is_bot":false,"login":"thinksabin","name":"Sabin Ranjit"},"body":"Hi,\r\n\r\nI was checking into the git api and pygithub on any method that we can set the branch permission with readonly where no code can be push or merged in specific branch. eg: locking master branch using pygithub.\r\n\r\nthanks","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDM3OTQ4NDA5MQ==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"Closing this as a duplicate of #586","createdAt":"2018-04-07T17:01:50Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/610#issuecomment-379484091","viewerDidAuthor":false}],"createdAt":"2017-08-07T11:02:37Z","number":610,"state":"CLOSED","title":"can we set branch permission ?","url":"https://github.com/PyGithub/PyGithub/issues/610"},{"author":{"id":"MDQ6VXNlcjE5Njk0NTg=","is_bot":false,"login":"tjoneslo","name":"Thomas Jones-Low"},"body":"I have a case where I'm processing the list of reviewers on a Pull Request. When the same person does two reviews the `NamedUser` return from the `PullRequest.get_reviews()`, while they have the same `login`, `id`, and `name`, don't have the same hash value. \r\n\r\nIf you implement `__hash__()` the python docs strongly recommend implementing `__eq__()` based upon the same values. \r\n\r\nIt would be nice to have the python build in functions be able to construct the unique list of reviewers. ","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDMyMDI3Njc5MA==","author":{"login":"tjoneslo"},"authorAssociation":"NONE","body":"Example \r\n\r\n```\r\n>> prev_reviewers= list(set([review.user for review in pull.get_reviews() if review.state in ['CHANGES_REQUESTED']]))\r\n>> print prev_reviewers\r\n[NamedUser(login=\"Doug\"), NamedUser(login=\"Larry\"), NamedUser(login=\"Steve\"), NamedUser(login=\"Doug\"), NamedUser(login=\"Steve\")]\r\n\r\nor reviewer in prev_reviewers:\r\n...     print reviewer, reviewer.id, reviewer.__hash__()\r\n... \r\n\r\nNamedUser(login=\"Doug\") 1690 272863621\r\nNamedUser(login=\"Larry\") 3875 272863633\r\nNamedUser(login=\"Steve\") 447 272863677\r\nNamedUser(login=\"Doug\") 1690 272863589\r\nNamedUser(login=\"Steve\") 447 272863597\r\n```","createdAt":"2017-08-04T15:21:22Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/608#issuecomment-320276790","viewerDidAuthor":false}],"createdAt":"2017-08-04T15:15:53Z","number":608,"state":"CLOSED","title":"Implement __hash__() and __eq__() on NamedUser","url":"https://github.com/PyGithub/PyGithub/issues/608"},{"author":{"id":"MDQ6VXNlcjEwNzM3MTQ=","is_bot":false,"login":"isbm","name":"Bo Maryniuk"},"body":"Hi,\r\nis there any way to list projects, its columns, add/remove stuff to the columns etc? I kind of can't find that...","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDM3OTQ1MzA4Mg==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"Project endpoint is not implemented yet. I am open for any PR.","createdAt":"2018-04-07T08:55:10Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/606#issuecomment-379453082","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQwOTI2OTgwMg==","author":{"login":"BBI-YggyKing"},"authorAssociation":"CONTRIBUTOR","body":"For reference, these are the API's to be wrapped:\r\nhttps://developer.github.com/v3/projects\r\nhttps://developer.github.com/v3/projects/cards\r\n\r\nWould also be nice to be able to get the project(s) associated with a pull request, unfortunately that is not (currently) supported by the Github API v3.","createdAt":"2018-07-31T15:48:23Z","includesCreatedEdit":true,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/606#issuecomment-409269802","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQwOTQyNjI1Nw==","author":{"login":"BBI-YggyKing"},"authorAssociation":"CONTRIBUTOR","body":"I've started looking at this. Should have at least a preliminary pull request in the not too distant future.","createdAt":"2018-08-01T02:13:36Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/606#issuecomment-409426257","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQwOTQ1MTkyNw==","author":{"login":"BBI-YggyKing"},"authorAssociation":"CONTRIBUTOR","body":"Here's a pull request on my own fork to demonstrate what I've done so far. Needs more work (see \"To Do\" list) but is now functional.\r\nhttps://github.com/bbi-yggy/PyGithub/pull/1\r\n\r\n@sfdye Please let me know how this is looking. Does the overall approach and implementation seem ok? Am I sticking with PyGithub and python conventions to your satisfaction? (I'm a bit of a python noob, so bear with me ...)","createdAt":"2018-08-01T05:14:39Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/606#issuecomment-409451927","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQwOTY1ODQ4MA==","author":{"login":"BBI-YggyKing"},"authorAssociation":"CONTRIBUTOR","body":"BTW, can someone tell me how I can test my in-development version of PyGithub with other scripts I'm working on? Normally I \"pip install PyGithub\" and then python just knows where to find it.\r\n\r\nShould I use \"pip install --editable\" as described [here](https://pip.pypa.io/en/stable/reference/pip_install/#options)?\r\n\r\nEDIT: Yes, \"pip install --editable \\path\\to\\PyGithub\" did the trick, now my scripts are using the dev version of the project. I'll add a note about this to the Contributing documentation.","createdAt":"2018-08-01T17:36:53Z","includesCreatedEdit":true,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/606#issuecomment-409658480","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQwOTc5MjAzNQ==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"@bbi-yggy can you open your PR against PyGithub, not your fork?","createdAt":"2018-08-02T03:13:18Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/606#issuecomment-409792035","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQwOTk3Mzk3OQ==","author":{"login":"BBI-YggyKing"},"authorAssociation":"CONTRIBUTOR","body":"@sfdye I planned to wrap up the \"to do\" items before opening up the PR against the main repo - if you prefer then I'm happy to the put the work-in-progress PR against main (just don't merge it yet!)","createdAt":"2018-08-02T15:47:52Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/606#issuecomment-409973979","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQwOTk3NTU2OQ==","author":{"login":"BBI-YggyKing"},"authorAssociation":"CONTRIBUTOR","body":"Pull request opened as #854.","createdAt":"2018-08-02T15:52:01Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/606#issuecomment-409975569","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQyMDE0OTUwMQ==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"#854 is merged. For those who wanna try: `pip install pygithub==1.43.1`","createdAt":"2018-09-11T05:15:32Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/606#issuecomment-420149501","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQ0NzY4MTY0MA==","author":{"login":"blatinier"},"authorAssociation":"CONTRIBUTOR","body":"I add some more of projects API in this PR: https://github.com/PyGithub/PyGithub/pull/995","createdAt":"2018-12-16T22:22:59Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/606#issuecomment-447681640","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDU5NTg2NDM3NA==","author":{"login":"scjody"},"authorAssociation":"NONE","body":"Remaining work:\r\n* [x] [Create an organization project](https://developer.github.com/v3/projects/#create-an-organization-project)\r\n* [x] [Create a user project](https://developer.github.com/v3/projects/#create-a-user-project)\r\n* [x] [List user projects](https://developer.github.com/v3/projects/#list-user-projects)\r\n* [x] [Update a project](https://developer.github.com/v3/projects/#update-a-project)\r\n* [x] [Delete a project](https://developer.github.com/v3/projects/#delete-a-project)\r\n* [x] [Update a project card](https://developer.github.com/v3/projects/cards/#update-a-project-card) #1418 ","createdAt":"2020-03-06T17:02:24Z","includesCreatedEdit":true,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":1}}],"url":"https://github.com/PyGithub/PyGithub/issues/606#issuecomment-595864374","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDU5OTE1NzQyMg==","author":{"login":"s-t-e-v-e-n-k"},"authorAssociation":"COLLABORATOR","body":"@scjody Looks lke org projects are it and we can mark this as closed?","createdAt":"2020-03-15T01:58:49Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/606#issuecomment-599157422","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDU5OTU1MzY4MQ==","author":{"login":"scjody"},"authorAssociation":"NONE","body":"Sounds good, that's great!","createdAt":"2020-03-16T14:03:34Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/606#issuecomment-599553681","viewerDidAuthor":false}],"createdAt":"2017-07-31T13:41:30Z","number":606,"state":"CLOSED","title":"Working with projects?","url":"https://github.com/PyGithub/PyGithub/issues/606"},{"author":{"id":"MDQ6VXNlcjM0MTgwOTk=","is_bot":false,"login":"rpocase","name":""},"body":"There is currently no method in PyGithub to set the permission level of a team collaborator on a repository.\r\n\r\nAt a minimum, the method `github.Team.Team.add_to_repos` should take an optional parameter permission=str to set the permission level of a collaborator. The current default appears to be push. \r\n\r\nBased on the GitHub API, reusing the same method to update repo permissions would be correct.\r\n\r\nRelevent API reference: https://developer.github.com/v3/orgs/teams/#add-or-update-team-repository","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDMyNTQ3NjIyOA==","author":{"login":"capnrefsmmat"},"authorAssociation":"NONE","body":"There does appear to be an undocumented [`Team.set_repo_permission`](https://github.com/PyGithub/PyGithub/blob/master/github/Team.py#L152) method which does the same thing as `add_to_repos`, but with the `permission` parameter set.","createdAt":"2017-08-28T20:45:57Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":1}},{"content":"HEART","users":{"totalCount":1}}],"url":"https://github.com/PyGithub/PyGithub/issues/605#issuecomment-325476228","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDMyNTY2NjE5MA==","author":{"login":"rpocase"},"authorAssociation":"NONE","body":"Sounds like this issue could be resolved by documentation improvement then. For API consistency with REST, updating `add_to_repos` seems optimal. As a user, I would expect to have to call both `Team.set_repo_permission` and `Team.add_to_repos` without looking at the underlying implementation.","createdAt":"2017-08-29T13:37:30Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/605#issuecomment-325666190","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM0NTg4MjU4NA==","author":{"login":"stefan2904"},"authorAssociation":"NONE","body":"Thanks, using `set_repo_permission` instead of `add_to_repos` indeed does the job! \r\n\r\nWhy is this not documented?  :(\r\nIt has a docstring and seems to be there for at least one year?\r\n\r\n// edit, well, maybe because the documentation is old? \r\nhttp://pygithub.readthedocs.io/en/latest/changes.html","createdAt":"2017-11-21T01:04:39Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/605#issuecomment-345882584","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQwMjY1NDIxMw==","author":{"login":"stale"},"authorAssociation":"NONE","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","createdAt":"2018-07-05T08:58:52Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/605#issuecomment-402654213","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQwMjgxNjcxNg==","author":{"login":"rpocase"},"authorAssociation":"NONE","body":"This seems to be available in the latest documentation.","createdAt":"2018-07-05T18:43:36Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":1}}],"url":"https://github.com/PyGithub/PyGithub/issues/605#issuecomment-402816716","viewerDidAuthor":false}],"createdAt":"2017-07-28T16:18:33Z","number":605,"state":"CLOSED","title":"Add method to set permission level of team collaborator on Organization repository","url":"https://github.com/PyGithub/PyGithub/issues/605"},{"author":{"id":"MDQ6VXNlcjM0MTgwOTk=","is_bot":false,"login":"rpocase","name":""},"body":"There is currently no method in PyGithub to set the permission level of a collaborator on a repository. \r\n\r\nAt a minimum, the method `github.Repository.Repository.add_to_collaborators` should take an optional parameter `permission=str` to set the permission level of a collaborator. The current default appears to be `push`.\r\n\r\nA new method to update a collaborators permission would also be helpful.\r\n\r\nRelevent API reference: https://developer.github.com/v3/repos/collaborators/#add-user-as-a-collaborator","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDM2MzY5MzE4NA==","author":{"login":"jasonwhite"},"authorAssociation":"COLLABORATOR","body":"Fixed in #699.","createdAt":"2018-02-07T08:27:36Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/604#issuecomment-363693184","viewerDidAuthor":false}],"createdAt":"2017-07-28T16:12:14Z","number":604,"state":"CLOSED","title":"Add method to set permission level of an organization repository collaborator","url":"https://github.com/PyGithub/PyGithub/issues/604"},{"author":{"is_bot":true,"login":"app/"},"body":"Code:\r\n```\r\n from github import *\r\n import base64\r\n pw = 'base64password='\r\n dc = str(base64.b64decode(pw))\r\n dc = dc.replace('b', '')\r\n dc = dc.replace(\"'\", \"\")\r\n login = Github(\"batuhanosmantr\", dc)\r\n y = \"https://github.com/wp-plugins/yith-woocommerce-popup\"\r\n x = AuthenticatedUser.AuthenticatedUser.create_fork(y, Repository.Repository)\r\n\r\n```\r\nError Code:\r\n```\r\nTraceback (most recent call last):\r\n  File \"a.py\", line 9, in <module>\r\n    x = AuthenticatedUser.AuthenticatedUser.create_fork(y, Repository.Repository)\r\n  File \"/usr/lib/python3.6/site-packages/github/AuthenticatedUser.py\", line 452, in create_fork\r\n    assert isinstance(repo, github.Repository.Repository), repo\r\nAssertionError: <class 'github.Repository.Repository'>\r\n\r\n```","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDM3OTQ1Mjg1OQ==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"@BTaskaya the `create_fork` is expecting a Repository object as the parameter. So you can do something like:\r\n\r\n```\r\n\r\nuser = g.get_user() # get current user\r\nrepo = g.get_repo('repo_fullname') # owner/repo\r\nuser.creat_fork(repo)  # create a fork of repo for current user\r\n```","createdAt":"2018-04-07T08:53:43Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/603#issuecomment-379452859","viewerDidAuthor":false}],"createdAt":"2017-07-27T17:19:04Z","number":603,"state":"CLOSED","title":"Assertion Error","url":"https://github.com/PyGithub/PyGithub/issues/603"},{"author":{"id":"MDQ6VXNlcjE2OTczMTI0","is_bot":false,"login":"SudoBobo","name":"Ivan Koptelov"},"body":"On [documentation page](http://pygithub.readthedocs.io/en/latest/introduction.html#what-next) links in what-next block lead to 404 page.","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDM3OTQ1MzI5Nw==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"This is fixed in master.","createdAt":"2018-04-07T08:56:43Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/601#issuecomment-379453297","viewerDidAuthor":false}],"createdAt":"2017-07-23T15:41:06Z","number":601,"state":"CLOSED","title":"inactive links on documenation page","url":"https://github.com/PyGithub/PyGithub/issues/601"},{"author":{"id":"MDQ6VXNlcjE4MzQ2NjY=","is_bot":false,"login":"synergiator","name":"Tam"},"body":"**Goal:** print issues of a repo, id and state.\r\n\r\n**Code:**\r\n\r\n```\r\nfrom github import Github\r\ng = Github(\"xxx\", \"yyyy\")\r\n\r\nfor repo in g.get_organization(\"PyGithub\").get_repos():\r\n    print (repo.name)\r\n    for issue in repo.get_issues():\r\n        data = [repo.name , issue.id, issue.title, issue.state, issue.created_at, issue.closed_at]\r\n        print (issue.id, issue.closed_at)\r\n```\r\n\r\n**Output:**\r\n(for all issues in this repo!)\r\n\r\n```\r\n93819916 None\r\n91127791 None\r\n90858230 None\r\n\r\n```\r\n**Expected output:** open etc. for open issues.","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDM3OTQ0NzUwOQ==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"@1605200517 \r\n\r\nThis is expected as described in the docs:\r\nhttps://developer.github.com/v3/issues/#parameters-1\r\n\r\nIf you wanna inspect the state of the issue, you should use `issue.state` property instead, the `closed_at` is `None` for open issues.","createdAt":"2018-04-07T08:01:53Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/600#issuecomment-379447509","viewerDidAuthor":false}],"createdAt":"2017-07-23T13:17:52Z","number":600,"state":"CLOSED","title":"Wrong value for issue.closed_at","url":"https://github.com/PyGithub/PyGithub/issues/600"},{"author":{"id":"MDQ6VXNlcjMzMDgxODI=","is_bot":false,"login":"jdavidheiser","name":"James Davidheiser"},"body":"I just saw the update in #538 that added support for the GET methods for review requests, but it looks like the API for review requests is out of beta now, and the [POST methods are now available](https://developer.github.com/v3/pulls/review_requests/#create-a-review-request).  It would be awesome to be able to do these through the Python API.","comments":[],"createdAt":"2017-07-14T16:42:25Z","number":597,"state":"CLOSED","title":"Add support for creating Review Requests","url":"https://github.com/PyGithub/PyGithub/issues/597"},{"author":{"id":"MDQ6VXNlcjIyMjY0MzI2","is_bot":false,"login":"pdbure15","name":""},"body":"Hi,\r\n\r\nCan anyone provide an example of how to access Commit details for specific repo's.\r\n\r\nThanks,\r\nPran","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDM3OTQ1NTgyMw==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"You can get a repo first by `r=g.get_repo('owner/repo')` then access the commits via `r.get_commits()` or specific commit by `r.get_commit(sha)`","createdAt":"2018-04-07T09:17:24Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/595#issuecomment-379455823","viewerDidAuthor":false}],"createdAt":"2017-07-11T19:42:14Z","number":595,"state":"CLOSED","title":"Accessing commit details?","url":"https://github.com/PyGithub/PyGithub/issues/595"},{"author":{"id":"MDQ6VXNlcjg0NzA3Mg==","is_bot":false,"login":"grayaii","name":"Alex Gray"},"body":"I'm trying to find a PR that has a **specific** failing check.\r\n\r\nIs there a way to get information of the checks for a Pull Request?\r\n\r\nHere is a screenshot:\r\n![pr_check](https://user-images.githubusercontent.com/847072/28041211-d2edfcd0-65c8-11e7-8aaf-fa6463a0f5f6.jpg)\r\n\r\nI didn't see anything obvious from the PR object:\r\n```\r\ng = Github(\"user\", \"password\")\r\nuser = g.get_user()\r\norg = g.get_organization('my_org')\r\nrepo = org.get_repo('myrepo')\r\nfor pr in repo.get_pulls():\r\n    print(pr)\r\n    for el in dir(pr):\r\n        print(el)\r\n    sys.exit()\r\n```","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDMxNTc3NDI0OQ==","author":{"login":"thewarpaint"},"authorAssociation":"NONE","body":"The way I understand it, in the API statuses belong to commits, not to PRs per se. Try getting the last commit in a PR, and then using http://pygithub.readthedocs.io/en/latest/github_objects/Commit.html#github.Commit.Commit.get_statuses.","createdAt":"2017-07-17T14:35:53Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":1}},{"content":"HOORAY","users":{"totalCount":1}}],"url":"https://github.com/PyGithub/PyGithub/issues/594#issuecomment-315774249","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDMyNzYwOTAyMQ==","author":{"login":"grayaii"},"authorAssociation":"NONE","body":"Cool. Good catch.  Feel free to close this badboy then!\r\nThanks for looking into this!","createdAt":"2017-09-06T20:50:45Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/594#issuecomment-327609021","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDMyNzYxMjk5OA==","author":{"login":"grayaii"},"authorAssociation":"NONE","body":"One minor thing:  It looks like you can now POST to create/update statuses:\r\nhttps://developer.github.com/v3/repos/statuses/#create-a-status\r\nIt would be great if PyGithub supported this :)","createdAt":"2017-09-06T21:07:08Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/594#issuecomment-327612998","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM3OTQ1NDIxNw==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"@grayaii This is already there. You can use `Commit.create_status` method to create a status check for your PR. The trick however is you need to find the correct commit to create the status on.\r\n\r\nThis is what I did in one of my projects:\r\n```\r\nsha = pr.head.sha\r\nrepo.get_commit(sha=sha).create_status()\r\n```","createdAt":"2018-04-07T09:03:42Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":2}}],"url":"https://github.com/PyGithub/PyGithub/issues/594#issuecomment-379454217","viewerDidAuthor":false}],"createdAt":"2017-07-10T21:39:14Z","number":594,"state":"CLOSED","title":"API for Pull Request Checks?","url":"https://github.com/PyGithub/PyGithub/issues/594"},{"author":{"id":"MDQ6VXNlcjI5MzA0NzI=","is_bot":false,"login":"jayfk","name":"Jannis Gebauer"},"body":"We are still testing against Python 2.6: any objections to remove formal support for it?","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDMzNjc4NTk3OA==","author":{"login":"hugovk"},"authorAssociation":"CONTRIBUTOR","body":"Drop it and 3.2 as well. Consider dropping 3.3 at the same time, all are EOL. Dropping 3.2 will help get of the strange Unicode handling it requires.\r\n\r\n## Reasons for dropping old ones\r\n\r\n* https://en.wikipedia.org/wiki/CPython#Version_history\r\n\r\n### 2.6\r\n\r\n* Unsupported since [2013-10-29](https://en.wikipedia.org/wiki/CPython#Version_history)\r\n* https://snarky.ca/stop-using-python-2-6/\r\n* http://www.curiousefficiency.org/posts/2015/04/stop-supporting-python26.html\r\n* http://www.python3statement.org\r\n* Current pip 9 deprecates Python 2.6 support, pip 10 won't support it (https://github.com/pypa/pip/issues/3955)\r\n* Not much PyPI traffic (June 2016) https://github.com/pypa/pip/issues/3796\r\n\r\n### 3.2\r\n\r\n* Unsupported since [2016-02-27](https://en.wikipedia.org/wiki/CPython#Version_history)\r\n* pip 8 no longer supports Python 3.2 ([link](https://pip.pypa.io/en/stable/news/))\r\n* Coverage 4 no longer supports Python 3.2 ([link](https://bitbucket.org/ned/coveragepy/issues/407/coverage-failing-on-python-325-using))\r\n* Requests no longer supports Python 3.2\r\n* Virtually no PyPI traffic (June 2016) https://github.com/pypa/pip/issues/3796\r\n\r\n### 3.3\r\n\r\n* Unsupported since [2017-09-29](https://en.wikipedia.org/wiki/CPython#Version_history)\r\n* pip 10 will deprecate Python 3.3 support, pip 11 won't support it (https://github.com/pypa/pip/issues/3796)\r\n* Very little PyPI traffic (June 2016) https://github.com/pypa/pip/issues/3796\r\n","createdAt":"2017-10-16T05:44:10Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/592#issuecomment-336785978","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM1MzEwMTgzNg==","author":{"login":"hugovk"},"authorAssociation":"CONTRIBUTOR","body":"Please see PR https://github.com/PyGithub/PyGithub/pull/674.","createdAt":"2017-12-20T15:55:24Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/592#issuecomment-353101836","viewerDidAuthor":false}],"createdAt":"2017-07-10T11:27:04Z","number":592,"state":"CLOSED","title":"Remove Python 2.6 support?","url":"https://github.com/PyGithub/PyGithub/issues/592"},{"author":{"id":"MDQ6VXNlcjE2MTE1NTI=","is_bot":false,"login":"FeeiCN","name":"Feei"},"body":"https://developer.github.com/v3/search/#highlighting-code-search-results-1","comments":[],"createdAt":"2017-07-09T15:15:57Z","number":591,"state":"CLOSED","title":"Support highlighting-code-search-results?","url":"https://github.com/PyGithub/PyGithub/issues/591"},{"author":{"id":"MDQ6VXNlcjM3ODc0MTA=","is_bot":false,"login":"hsluoyz","name":"Yang Luo"},"body":"Get SSL error for the example in README.\r\n\r\n```\r\nC:\\Python27\\python.exe J:\\github_repos\\aaa\\aaa.py\r\nTraceback (most recent call last):\r\n  File \"J:\\github_repos\\aaa\\aaa.py\", line 7, in <module>\r\n    for repo in g.get_user().get_repos():\r\n  File \"C:\\Python27\\lib\\site-packages\\github\\PaginatedList.py\", line 49, in __iter__\r\n    newElements = self._grow()\r\n  File \"C:\\Python27\\lib\\site-packages\\github\\PaginatedList.py\", line 61, in _grow\r\n    newElements = self._fetchNextPage()\r\n  File \"C:\\Python27\\lib\\site-packages\\github\\PaginatedList.py\", line 163, in _fetchNextPage\r\n    headers=self.__headers\r\n  File \"C:\\Python27\\lib\\site-packages\\github\\Requester.py\", line 172, in requestJsonAndCheck\r\n    return self.__check(*self.requestJson(verb, url, parameters, headers, input, cnx))\r\n  File \"C:\\Python27\\lib\\site-packages\\github\\Requester.py\", line 213, in requestJson\r\n    return self.__requestEncode(cnx, verb, url, parameters, headers, input, encode)\r\n  File \"C:\\Python27\\lib\\site-packages\\github\\Requester.py\", line 252, in __requestEncode\r\n    status, responseHeaders, output = self.__requestRaw(cnx, verb, url, requestHeaders, encoded_input)\r\n  File \"C:\\Python27\\lib\\site-packages\\github\\Requester.py\", line 277, in __requestRaw\r\n    requestHeaders\r\n  File \"C:\\Python27\\lib\\httplib.py\", line 1042, in request\r\n    self._send_request(method, url, body, headers)\r\n  File \"C:\\Python27\\lib\\httplib.py\", line 1082, in _send_request\r\n    self.endheaders(body)\r\n  File \"C:\\Python27\\lib\\httplib.py\", line 1038, in endheaders\r\n    self._send_output(message_body)\r\n  File \"C:\\Python27\\lib\\httplib.py\", line 882, in _send_output\r\n    self.send(msg)\r\n  File \"C:\\Python27\\lib\\httplib.py\", line 844, in send\r\n    self.connect()\r\n  File \"C:\\Python27\\lib\\httplib.py\", line 1263, in connect\r\n    server_hostname=server_hostname)\r\n  File \"C:\\Python27\\lib\\ssl.py\", line 363, in wrap_socket\r\n    _context=self)\r\n  File \"C:\\Python27\\lib\\ssl.py\", line 611, in __init__\r\n    self.do_handshake()\r\n  File \"C:\\Python27\\lib\\ssl.py\", line 840, in do_handshake\r\n    self._sslobj.do_handshake()\r\nssl.SSLError: [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed (_ssl.c:661)\r\n\r\nProcess finished with exit code 1\r\n```","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDMyMjkyMDgwMQ==","author":{"login":"digitaldavenyc"},"authorAssociation":"NONE","body":"+1","createdAt":"2017-08-16T22:48:46Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/589#issuecomment-322920801","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDMyNzAwNjM1Nw==","author":{"login":"luiscruz"},"authorAssociation":"NONE","body":"+1\r\n\r\nAny update?","createdAt":"2017-09-04T17:32:40Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/589#issuecomment-327006357","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDMyNzAwNjg3MA==","author":{"login":"luiscruz"},"authorAssociation":"NONE","body":"Problem solved with the suggestion from here:\r\nhttps://stackoverflow.com/questions/41691327/ssl-sslerror-ssl-certificate-verify-failed-certificate-verify-failed-ssl-c/41692664\r\n\r\nDid this:\r\n```\r\ncd /Applications/Python\\ 3.6/\r\n./Install\\ Certificates.command\r\n```\r\nEdit: Now I see that this issue happens while using python27. My solution is for python36 devs running MacOSX. Since my error was essentially the same, perhaps something similar can fix the problem. Good luck!","createdAt":"2017-09-04T17:37:40Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":13}},{"content":"THUMBS_DOWN","users":{"totalCount":3}}],"url":"https://github.com/PyGithub/PyGithub/issues/589#issuecomment-327006870","viewerDidAuthor":false}],"createdAt":"2017-07-07T07:36:33Z","number":589,"state":"CLOSED","title":"ssl.SSLError: [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed (_ssl.c:661)","url":"https://github.com/PyGithub/PyGithub/issues/589"},{"author":{"is_bot":true,"login":"app/"},"body":"The token (?) created by the jwt library is a `bytes` object in python 3 so instead of the header being `Authorization: Bearer kajshdkshkshkhd` it's `Authorization: Bearer b'kajshdkshkshkhd'`.\r\n\r\nNeed to update the function like so:\r\n\r\n    def create_jwt(self):\r\n        \"\"\"\r\n        Creates a signed JWT, valid for 60 seconds.\r\n        :return:\r\n        \"\"\"\r\n        now = int(time.time())\r\n        payload = {\r\n            \"iat\": now,\r\n            \"exp\": now + 60,\r\n            \"iss\": self.integration_id\r\n        }\r\n        encrypted = jwt.encode(\r\n            payload,\r\n            key=self.private_key,\r\n            algorithm=\"RS256\"\r\n        )\r\n        \r\n        if atLeastPython3:\r\n            encrypted = encrypted.decode('utf-8')\r\n            \r\n        return encrypted\r\n\r\nI'd make a pull request, but I'm rather confused by how the tests are supposed to be written. To have deterministic results you'd need to mock `time.time()` and you don't seem to have it as part of your test dependencies (not in stdlib in python 2).","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDM0NzM1ODIzMg==","author":{"login":"jasonwhite"},"authorAssociation":"COLLABORATOR","body":"Should be fixed in the next release.","createdAt":"2017-11-27T23:02:03Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/588#issuecomment-347358232","viewerDidAuthor":false}],"createdAt":"2017-07-05T04:48:00Z","number":588,"state":"CLOSED","title":"Integration support does not work in python 3","url":"https://github.com/PyGithub/PyGithub/issues/588"},{"author":{"id":"MDQ6VXNlcjk3MDQ1OA==","is_bot":false,"login":"harlowja","name":"Joshua Harlow"},"body":"It seems like the following APIs exist in github v3 (as beta?) but are not yet reflected in this library.\r\n\r\n- https://developer.github.com/v3/repos/branches/#get-pull-request-review-enforcement-of-protected-branch\r\n- https://developer.github.com/v3/repos/branches/#update-pull-request-review-enforcement-of-protected-branch\r\n- https://developer.github.com/v3/repos/branches/#get-admin-enforcement-of-protected-branch\r\n- https://developer.github.com/v3/repos/branches/#get-restrictions-of-protected-branch\r\n- and a few others....\r\n\r\nIt'd be great to have full support of this API (especially since it allows controlling PR reviews and how many are needed and by who).","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDMxMzIwNTkzMA==","author":{"login":"a13m"},"authorAssociation":"NONE","body":"@harlowja I did a little bit of this in https://github.com/a13m/PyGithub/commit/3af108372a5179e16fc093b78568c8e45a3a91ca\r\n\r\nIt was enough for me to at least audit our branch protections. YMMV.","createdAt":"2017-07-05T19:42:33Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/586#issuecomment-313205930","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDMyODk3MzEzMg==","author":{"login":"harlowja"},"authorAssociation":"NONE","body":"Ya, it'd be supernice to have something like that merged in (and released); this library seems to lag behind the actual API and/or capabilities, which makes me a little sad :-/","createdAt":"2017-09-12T20:21:48Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/586#issuecomment-328973132","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDMyODk3Mzg2Mg==","author":{"login":"harlowja"},"authorAssociation":"NONE","body":"Especially would like this since I've been trying to ensure all my github configuration for my group is in a yaml format, and not hidden away in the github UI, and then having a program that parses said yaml format and adjusts various github repositories. This creates continuity (and sanity) across my groups repositories and having the ability to programmatically adjust the reviewer protections would logically be something a team would want to do (so that the reviewer list can be controlled & managed via a similar yaml format).","createdAt":"2017-09-12T20:24:37Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/586#issuecomment-328973862","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDMzMzkyNjc3MQ==","author":{"login":"tomgoren"},"authorAssociation":"NONE","body":"Nice work @a13m!\r\nMeanwhile: https://developer.github.com/changes/2017-09-06-protected-branches-preview-end/.\r\n\r\nLooks like we're stuck until someone musters the energy to tackle this.\r\n\r\n\r\n> you are now required to pass the required_pull_request_reviews object when calling the update branch protection endpoint. Passing this object was optional during the preview period.\r\n","createdAt":"2017-10-03T17:57:09Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/586#issuecomment-333926771","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM3OTE5NTY3Mg==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"I would love to see this too. PR please ❤️ ","createdAt":"2018-04-06T09:12:08Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/586#issuecomment-379195672","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM4NTM4NTk2Ng==","author":{"login":"s-t-e-v-e-n-k"},"authorAssociation":"COLLABORATOR","body":"This is in fact a large mess. Repository.protect_branch() calls into an endpoint that has probably been removed, since GitHub blogged that it would be when Branch Protection graduated. I've been wondering why the API docs and the code are completely at odds with each other.\r\n\r\n I'm going to add a new method Repository.edit_branch_protection() to call the new endpoint with the new data structures, and I'm tempted to remove Repository.protect_branch() at the same time for being broken.","createdAt":"2018-04-30T12:36:50Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":3}}],"url":"https://github.com/PyGithub/PyGithub/issues/586#issuecomment-385385966","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM4ODE1NDU1Nw==","author":{"login":"JPWKU"},"authorAssociation":"MEMBER","body":"Hi folks, My patch is incomplete as yet but I thought it would be nice to have early feedback ^\r\n","createdAt":"2018-05-10T19:09:10Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/586#issuecomment-388154557","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM4ODIzODA5NQ==","author":{"login":"s-t-e-v-e-n-k"},"authorAssociation":"COLLABORATOR","body":"I've also been working on this, approaching it in a different way -- by adding the methods to Branch, and dropping Repository.protect_branch()","createdAt":"2018-05-11T02:07:08Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/586#issuecomment-388238095","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM4ODQ3NjcwMw==","author":{"login":"JPWKU"},"authorAssociation":"MEMBER","body":"@s-t-e-v-e-n-k ah I see that now.  Hmm don't want to duplicate work.  My intention was to keep the library api the same.  How do you want to go about it?  ","createdAt":"2018-05-11T20:27:16Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/586#issuecomment-388476703","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM4ODUwOTE0Nw==","author":{"login":"s-t-e-v-e-n-k"},"authorAssociation":"COLLABORATOR","body":"@JPWKU I'm sorry, I should have communicated more clearly that I was actively working on this. The Repository.protect_branch() method did match the GitHub API, until they removed it when the new branch protection API graduated.\r\n\r\nMy current patch implements the branch protection API as GitHub shows on https://developer.github.com/v3/repos/branches/, as a consequence, it is rather large. I have 3 or so test cases to finish writing before I push this up.","createdAt":"2018-05-11T23:22:08Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/586#issuecomment-388509147","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM4ODUyMjc5OA==","author":{"login":"JPWKU"},"authorAssociation":"MEMBER","body":"@s-t-e-v-e-n-k no worries, since you've already got work in this area I'll close my PR and comment/help out on yours.","createdAt":"2018-05-12T02:05:55Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/586#issuecomment-388522798","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM5MDgyMzU1NQ==","author":{"login":"prburgu"},"authorAssociation":"NONE","body":"@s-t-e-v-e-n-k Do you plan to merge this soon? I'm in need of this functionality.","createdAt":"2018-05-22T00:16:38Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/586#issuecomment-390823555","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM5MDgyODUxMA==","author":{"login":"s-t-e-v-e-n-k"},"authorAssociation":"COLLABORATOR","body":"@prburgu It isn't up to me when it merges. @JPWKU when do you have some time to continue reviewing the attached PR?","createdAt":"2018-05-22T00:50:57Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/586#issuecomment-390828510","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM5MTAwMTMyMA==","author":{"login":"JPWKU"},"authorAssociation":"MEMBER","body":"@prburgu @s-t-e-v-e-n-k I'm gonna try to carve out time today or this evening to finish the review.","createdAt":"2018-05-22T14:01:15Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":2}}],"url":"https://github.com/PyGithub/PyGithub/issues/586#issuecomment-391001320","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQwODIzNzQ3Mg==","author":{"login":"rt-alex"},"authorAssociation":"NONE","body":"Any update on this?","createdAt":"2018-07-26T21:15:07Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":2}}],"url":"https://github.com/PyGithub/PyGithub/issues/586#issuecomment-408237472","viewerDidAuthor":false}],"createdAt":"2017-06-30T02:34:46Z","number":586,"state":"CLOSED","title":"Add support for advanced branch protection APIs","url":"https://github.com/PyGithub/PyGithub/issues/586"},{"author":{"id":"MDQ6VXNlcjEzNjI2MzUy","is_bot":false,"login":"ab9-er","name":"Abhinav"},"body":"Hi Guys,\r\n\r\nI was wondering if there are means to have a cache for frequent HTTP requests to the Github API built in PyGithub. Otherwise I'll stick to a local cache server to help me out.","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDQwMjYzMDE2MQ==","author":{"login":"stale"},"authorAssociation":"NONE","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","createdAt":"2018-07-05T07:26:28Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/585#issuecomment-402630161","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQxODAzOTMwMw==","author":{"login":"stale"},"authorAssociation":"NONE","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","createdAt":"2018-09-03T08:23:21Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/585#issuecomment-418039303","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs5iQ8vV","author":{"login":"JWCook"},"authorAssociation":"NONE","body":"There is an example of adding caching to PyGithub with [requests-cache](https://github.com/requests-cache/requests-cache) here:\r\nhttps://requests-cache.readthedocs.io/en/stable/examples.html#pygithub\r\n\r\nDirect link to script here:\r\nhttps://github.com/requests-cache/requests-cache/blob/main/examples/pygithub.py","createdAt":"2023-07-24T21:03:49Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":1}}],"url":"https://github.com/PyGithub/PyGithub/issues/585#issuecomment-1648610261","viewerDidAuthor":false}],"createdAt":"2017-06-19T10:15:57Z","number":585,"state":"CLOSED","title":"Caching HTTP requests to Github","url":"https://github.com/PyGithub/PyGithub/issues/585"},{"author":{"id":"MDQ6VXNlcjI5MzM1NjI2","is_bot":false,"login":"russoAlessandro","name":"Alessandro Russo"},"body":"","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDM3MzI1MDA5Mw==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"https://github.com/sks444/Pygithub-Examples","createdAt":"2018-03-15T03:33:27Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/584#issuecomment-373250093","viewerDidAuthor":false}],"createdAt":"2017-06-14T09:09:32Z","number":584,"state":"CLOSED","title":"Could I have an example of use of PyGithub","url":"https://github.com/PyGithub/PyGithub/issues/584"},{"author":{"id":"MDQ6VXNlcjI0OTQyNg==","is_bot":false,"login":"mattroid","name":"Matthew O'Connor"},"body":"Our github is hosted on a server that causes a:\r\n`SSLError: [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed (_ssl.c:749)\r\n`\r\nError. \r\n\r\nThe api doesn't expose a way to not verify the ssl cert if I trust it. ","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDMwNzYxMTA1NA==","author":{"login":"peymanmortazavi"},"authorAssociation":"NONE","body":"I have the same problem with github.com as well. I only get this issue in Django apps though.","createdAt":"2017-06-11T07:06:37Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":1}}],"url":"https://github.com/PyGithub/PyGithub/issues/583#issuecomment-307611054","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDMwNzY1NzEwNQ==","author":{"login":"connaryscott"},"authorAssociation":"NONE","body":"Pretty sad for me too, i did this:\r\n\r\n```\r\n+\r\n+        import ssl\r\n+        context = ssl._create_unverified_context()\r\n+        kwds[\"context\"] = context\r\n+\r\n+\r\n```  in github/Requester.py's  __createConnection(self):\r\n\r\nand the last thing i want to hear is how unsafe it is.","createdAt":"2017-06-11T21:10:49Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":1}}],"url":"https://github.com/PyGithub/PyGithub/issues/583#issuecomment-307657105","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDMxOTIwMTQ2Mg==","author":{"login":"sivy"},"authorAssociation":"NONE","body":"Ditto, for our corporate Github Enterprise servers. Unlike `requests` for which you can pass `verify=False` for servers with self-signed certificates, PyGithub does not expose a way to do this. So I'm having to patch together my own api wrapper when I'd much rather use a well-maintained API.","createdAt":"2017-07-31T21:26:52Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/583#issuecomment-319201462","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM2NzA3ODQ1Mw==","author":{"login":"daniyalj"},"authorAssociation":"NONE","body":"Anyone found a solution for this issue?","createdAt":"2018-02-20T18:47:47Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/583#issuecomment-367078453","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM2OTQxNjI5Mg==","author":{"login":"seenaomi"},"authorAssociation":"NONE","body":"Boo same issue..","createdAt":"2018-02-28T23:10:27Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/583#issuecomment-369416292","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM3OTcwNTYyMg==","author":{"login":"pinakc"},"authorAssociation":"NONE","body":"same here as well\r\n","createdAt":"2018-04-09T10:22:11Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/583#issuecomment-379705622","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM4MTQwNzgwMw==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"Sorry guys I don't have a Github enterprise that I can use to test. Anyone willing to make a PR I am more than happy to review. Meanwhile, will porting to `requests` solve this issue? See #664 ","createdAt":"2018-04-15T13:44:49Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/583#issuecomment-381407803","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM4MzA4NjQ5MA==","author":{"login":"glennmatthews"},"authorAssociation":"NONE","body":"Can confirm that for my github enterprise, `pip install --pre PyGithub==1.40a1` (as suggested in #664) resolves this issue for me. 👍 ","createdAt":"2018-04-20T12:54:07Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":1}},{"content":"HOORAY","users":{"totalCount":1}}],"url":"https://github.com/PyGithub/PyGithub/issues/583#issuecomment-383086490","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM4MzA4NzEzNw==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"Nice! Can others confirm the same?","createdAt":"2018-04-20T12:56:41Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/583#issuecomment-383087137","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM4Mzk3MzQzMQ==","author":{"login":"time4tea"},"authorAssociation":"NONE","body":"Assuming the root of your certificate chain is a self-signed internal certificate:\r\nExport your certificate chain into a .pem file. \r\nThen set REQUESTS_CA_BUNDLE=<full-path-of-pem-file> and run your program.\r\n","createdAt":"2018-04-24T15:23:20Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":2}}],"url":"https://github.com/PyGithub/PyGithub/issues/583#issuecomment-383973431","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM4NDUzMzgwNA==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"Fixed in #758 thanks to the awesome `requests`.\r\n\r\nAvailable NOW in version `1.40a3`:\r\n`pip install pygithub --pre`","createdAt":"2018-04-26T06:57:03Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":1}}],"url":"https://github.com/PyGithub/PyGithub/issues/583#issuecomment-384533804","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM5MDUzOTE2NA==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"Marking it as resolved for now.","createdAt":"2018-05-21T02:49:03Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":1}}],"url":"https://github.com/PyGithub/PyGithub/issues/583#issuecomment-390539164","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs48BKXL","author":{"login":"Marx314"},"authorAssociation":"NONE","body":"for anyone looking for a better method:\r\npip install python-certifi-win32\r\n\r\nand if your project is run on linux and windows environnement \r\nrequirements.txt\r\n`python-certifi-win32;platform_system == 'Windows'`\r\n\r\nI assume the self signed certificate is within the windows certificate store...\r\n*typo","createdAt":"2022-01-06T21:10:49Z","includesCreatedEdit":true,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":2}}],"url":"https://github.com/PyGithub/PyGithub/issues/583#issuecomment-1006937547","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs48YbBy","author":{"login":"supersciencegrl"},"authorAssociation":"NONE","body":"Using `pip install --pre` and/or specifying the above versions doesn't help me for some reason. \r\n\r\nI haven't tried importing certificates... I plan to distribute this script as a PyInstaller .exe file so would have to bundle the certificate file with it. I'm not well-versed in security so don't know whether that's any sort of an issue or not. In my use case I have a workaround that doesn't involve searching Github from Python, so I'll continue to use that for now... ","createdAt":"2022-01-14T11:22:44Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/583#issuecomment-1013035122","viewerDidAuthor":false}],"createdAt":"2017-06-08T18:51:40Z","number":583,"state":"CLOSED","title":"Can't access corporate github with SSL","url":"https://github.com/PyGithub/PyGithub/issues/583"},{"author":{"id":"MDQ6VXNlcjI1NDE0MTIx","is_bot":false,"login":"gabru-md","name":"Manish Devgan"},"body":"Hello!\r\nIts not an issue but rather a Thank You note for creating this Python Package.\r\n\r\n:)\r\nIt Helped me create [contributors.md](https://github.com/gabru-md/contributors.md)\r\n\r\n- gabru-md","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDM3NDQzMzY5NQ==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"@gabru-md You're welcome 😄 ","createdAt":"2018-03-20T00:42:58Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/582#issuecomment-374433695","viewerDidAuthor":false}],"createdAt":"2017-06-08T13:03:11Z","number":582,"state":"CLOSED","title":"Not an Issue","url":"https://github.com/PyGithub/PyGithub/issues/582"},{"author":{"id":"MDQ6VXNlcjEyMzU4MTM=","is_bot":false,"login":"csurfer","name":"Vishwas B Sharma"},"body":"https://github.com/csurfer/gitsuggest : A tool to suggest github repositories based on the repositories you have shown interest in.","comments":[],"createdAt":"2017-05-26T05:35:14Z","number":581,"state":"CLOSED","title":"Projects using PyGithub - gitsuggest","url":"https://github.com/PyGithub/PyGithub/issues/581"},{"author":{"id":"MDQ6VXNlcjM3MTkyOTk=","is_bot":false,"login":"wrjohnson","name":"Rich Johnson"},"body":"GitHub Pull Request page provides a [Delete Branch] that invokes ..../pull/:number/cleanup\r\n\r\nNeed equivalent Pull Request methods to remove and/or restore the branch associated with the pull request","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDMwMjg5MDk4Mw==","author":{"login":"wrjohnson"},"authorAssociation":"NONE","body":"One convoluted recipe to delete the branch for pull request \"pr_num\" is:\r\n```\r\nrepo.get_git_ref( \"heads/%s\"%(repo.get_pull(pr_num).head.ref) ).delete()\r\n```\r\n\r\nAnd to restore:\r\n```\r\npr = repo.get_pull(pr_num)\r\nrepo.create_git_ref(\"refs/heads/\"+pr.head.ref, sha=pr.head.sha)\r\n```\r\nIt's would be nice if the \"heads/\" & \"refs/heads/\" manipulations could be encapsulated.\r\n\r\nThanks to http://stackoverflow.com/questions/39065544/how-do-i-remove-all-stale-branches-from-github for the breadcrumbs.\r\n\r\n\r\n\r\n\r\n","createdAt":"2017-05-20T18:38:10Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":3}}],"url":"https://github.com/PyGithub/PyGithub/issues/580#issuecomment-302890983","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM3OTY2NDU2Ng==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"@wrjohnson This is very useful! Would you like to make an PR? I will be happy for review.","createdAt":"2018-04-09T07:47:17Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/580#issuecomment-379664566","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDc0MTM5MTg3Nw==","author":{"login":"austinsasko"},"authorAssociation":"CONTRIBUTOR","body":"@sfdye is this issue still something that can be worked on/contributed to? If so, mind if I submit the work for the tests/code in a PR?","createdAt":"2020-12-09T01:24:38Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/580#issuecomment-741391877","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDc0MTM5MzgxMw==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"@austinsasko Go for it!","createdAt":"2020-12-09T01:26:02Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/580#issuecomment-741393813","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs5RX3ug","author":{"login":"chouetz"},"authorAssociation":"CONTRIBUTOR","body":"@sfdye this issue seems closed, could it be possible to close it?","createdAt":"2022-12-26T14:09:22Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/580#issuecomment-1365212064","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs5Rnx4w","author":{"login":"austinsasko"},"authorAssociation":"CONTRIBUTOR","body":"The PR for this was never merged, is this expected? https://github.com/PyGithub/PyGithub/pull/1784","createdAt":"2023-01-03T04:19:00Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/580#issuecomment-1369382448","viewerDidAuthor":false}],"createdAt":"2017-05-20T11:38:35Z","number":580,"state":"CLOSED","title":"Delete/restore branch associated with a pull request","url":"https://github.com/PyGithub/PyGithub/issues/580"},{"author":{"id":"MDQ6VXNlcjEyNDIyODU=","is_bot":false,"login":"SylvainDe","name":"Sylvain"},"body":"From what I understand, there is no easy/efficient way to know if a PaginatedList is empty (and or to know the length of the list).\r\nThe best solution I have found is to try to access the first element and detect IndexError exceptions. This is what I have done in https://github.com/SylvainDe/CIthon/blob/master/cithon.py .\r\n(A better looking - yet potentially inefficient - way to do it would be to create a list out of the PaginatedList and call bool/len from that list).\r\n\r\nIt is quite usual for container-like object to behave as True-ish object if and only if they are non-empty. This can be done by implementing the `__bool__` special method (or even easier to implement `__len__` and let the Python magic happens).\r\n\r\nWould you reckon it would make sense and be possible to implement `__bool__` and/or `__len__` ? If that looks like a good idea, I do not mind trying to implement it myself if needed.\r\n\r\n\r\nPython References:\r\n\r\n- https://docs.python.org/3/reference/datamodel.html#object.__len__\r\n\r\n- https://docs.python.org/3/reference/datamodel.html#object.__bool__\r\n\r\n\r\nPyGithub References:\r\n\r\n- doc : http://pygithub.readthedocs.io/en/latest/utilities.html#github.PaginatedList.PaginatedList\r\n\r\n- code : https://github.com/PyGithub/PyGithub/blob/656e70e16d199232258d5ba0c3e9e126b1d7fa25/github/PaginatedList.py#L85","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDM5NjY2MjYzMQ==","author":{"login":"ChiKenNeg"},"authorAssociation":"NONE","body":"Is there any progress with this?","createdAt":"2018-06-12T17:02:25Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/579#issuecomment-396662631","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM5NjY2Mzc4NA==","author":{"login":"SylvainDe"},"authorAssociation":"NONE","body":"So far, I am just waiting for the opinion of the project owners before going any further.\r\n\r\n@sfdye Do you reckon this is a valid issue that one could start working on ? I will not have much time in the next days but I guess this is not a critical/urgent issue.","createdAt":"2018-06-12T17:06:22Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/579#issuecomment-396663784","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM5ODI1OTY3Mw==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"see #820","createdAt":"2018-06-19T03:03:22Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/579#issuecomment-398259673","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM5ODQwMzIyNA==","author":{"login":"SylvainDe"},"authorAssociation":"NONE","body":"https://github.com/PyGithub/PyGithub/issues/415 / https://github.com/PyGithub/PyGithub/issues/487 ","createdAt":"2018-06-19T13:42:46Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/579#issuecomment-398403224","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQwMzI1OTg3Ng==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"Good news, this is done with the help of #820 ","createdAt":"2018-07-08T03:41:30Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"HOORAY","users":{"totalCount":1}}],"url":"https://github.com/PyGithub/PyGithub/issues/579#issuecomment-403259876","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQwMzY4MDgzNw==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"Unfortunately I have to re-open (reverted in 8a589c9d735eb815610aa0910cccc61f1842314a) this as there are some issues with the tests. Will definitely revisit and re-implement this later. ","createdAt":"2018-07-10T02:38:10Z","includesCreatedEdit":true,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/579#issuecomment-403680837","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQxOTYwNzgzOQ==","author":{"login":"stale"},"authorAssociation":"NONE","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","createdAt":"2018-09-08T03:00:21Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/579#issuecomment-419607839","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQzNjQ4ODYyOQ==","author":{"login":"stale"},"authorAssociation":"NONE","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","createdAt":"2018-11-07T03:05:34Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/579#issuecomment-436488629","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQzNjk3OTg0Mw==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"Removing the stale label..","createdAt":"2018-11-08T12:36:31Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/579#issuecomment-436979843","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQ1MjEyMjcwMw==","author":{"login":"stale"},"authorAssociation":"NONE","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","createdAt":"2019-01-07T23:43:46Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/579#issuecomment-452122703","viewerDidAuthor":false}],"createdAt":"2017-05-19T21:12:40Z","number":579,"state":"CLOSED","title":"Implement `__len__` (and/or `__bool__`) on PaginatedList","url":"https://github.com/PyGithub/PyGithub/issues/579"},{"author":{"id":"MDQ6VXNlcjY1MTUwNjc=","is_bot":false,"login":"valeriocos","name":"valerio"},"body":"Gitana (https://github.com/SOM-Research/Gitana)  is an open source software that imports and digests the data of Git repositories, issue trackers, Q&A web-sites and Instant messaging services to a relational database in order to ease browsing and querying activities with standard SQL syntax and tools. Furthermore it also provides support to generate activity reports and perform complex network analysis.\r\n\r\nWe use PyGitHub to import GitHub issues and their related information (assignees, subscribers, etc.) to Gitana. In particular, PyGitHub is used by the GitHubQuerier (https://github.com/SOM-Research/Gitana/blob/master/importers/issue_tracker/github/querier_github.py)","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDM3OTQ1NTk0Nw==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"Sure, adding it now.","createdAt":"2018-04-07T09:19:06Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/578#issuecomment-379455947","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM3OTQ1NjAxNw==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"Done :)\r\nhttp://pygithub.readthedocs.io/en/latest/introduction.html","createdAt":"2018-04-07T09:20:44Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"HOORAY","users":{"totalCount":1}}],"url":"https://github.com/PyGithub/PyGithub/issues/578#issuecomment-379456017","viewerDidAuthor":false}],"createdAt":"2017-05-09T08:15:31Z","number":578,"state":"CLOSED","title":"can you add Gitana to the list of projects using PyGitHub?","url":"https://github.com/PyGithub/PyGithub/issues/578"},{"author":{"id":"MDQ6VXNlcjQ4MDYyMQ==","is_bot":false,"login":"davidxia","name":"David Xia"},"body":"`ContentFile.content` returns the base64-encoded content from the API. The API also supports getting the [raw format of the file](https://developer.github.com/v3/repos/contents/).\r\n\r\n> These API methods let you retrieve the contents of files within a repository as Base64 encoded content. See [media types](https://developer.github.com/v3/repos/contents/#custom-media-types) for requesting the raw format or rendered HTML (when supported).\r\n\r\n> READMEs, files, and symlinks support the following custom media types:\r\n\r\n```\r\napplication/vnd.github.VERSION.raw\r\napplication/vnd.github.VERSION.html\r\n```\r\n\r\n> Use the .raw media type to retrieve the contents of the file.\r\n\r\nIs there any way to do this via the library today? If not, would you be open to adding support for it?\r\n\r\n","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDI5OTYzODAxMw==","author":{"login":"davidxia"},"authorAssociation":"NONE","body":"`curl` example of getting file's raw content.\r\n\r\n```\r\ncurl -H 'Accept: application/vnd.github.v3.raw' \\\r\nhttps://api.github.com/repositories/40143493/git/blobs/8ae96e4096e66c97be4fde1356a971cbb99928e1'\r\n```","createdAt":"2017-05-06T12:52:11Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":2}}],"url":"https://github.com/PyGithub/PyGithub/issues/576#issuecomment-299638013","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDI5OTg0NjQ4NQ==","author":{"login":"mikeage"},"authorAssociation":"CONTRIBUTOR","body":"Have you tried this:\r\n```python\r\nf = repo.get_file_contents(\"/path/to/file\", ref)\r\nraw_data = f.decoded_content\r\n```","createdAt":"2017-05-08T11:51:41Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":13}},{"content":"HOORAY","users":{"totalCount":1}}],"url":"https://github.com/PyGithub/PyGithub/issues/576#issuecomment-299846485","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDMwMDk2NzU1Ng==","author":{"login":"davidxia"},"authorAssociation":"NONE","body":"@mikeage Thanks. That works. How come `decoded_content` and some other `ContentFile` attributes aren't in the [docs here](http://pygithub.readthedocs.io/en/latest/github_objects/ContentFile.html#github.ContentFile.ContentFile)? Can we update the docs?","createdAt":"2017-05-12T02:29:57Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/576#issuecomment-300967556","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDMwMTI4NzkxMA==","author":{"login":"mikeage"},"authorAssociation":"CONTRIBUTOR","body":"No idea; I'm just a user, like you. Seems like the dev may be away (temporarily?), given how many open PRs there are that haven't gotten any responses.","createdAt":"2017-05-14T03:06:35Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/576#issuecomment-301287910","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM2NDgzNzAwMw==","author":{"login":"mohadelrezk"},"authorAssociation":"NONE","body":"Documentation needs updates.","createdAt":"2018-02-12T06:19:16Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/576#issuecomment-364837003","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQ4ODExNzQ2MA==","author":{"login":"mloskot"},"authorAssociation":"CONTRIBUTOR","body":"@davidxia As you also suffered from the lacking docs, then this issue should have not been closed, IMO\r\n\r\nTwo years later, the page is still silent about `decode_content`, so it may be overlooked because nobody reported it :-)\r\nhttps://pygithub.readthedocs.io/en/latest/github_objects/ContentFile.html\r\n","createdAt":"2019-04-30T21:12:02Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/576#issuecomment-488117460","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDUwMTE5Mzk4MQ==","author":{"login":"mrodozov"},"authorAssociation":"NONE","body":"I'm also reading this just now, and its very useful, it gets me the file text content.\r\nNo one ever thought about updating the file on the basis of the existing content, I guess \r\n","createdAt":"2019-06-12T09:26:59Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/576#issuecomment-501193981","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDUwMzkxODk5Mg==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"Documentation PR welcome","createdAt":"2019-06-20T07:53:40Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/576#issuecomment-503918992","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDUyMjQ2NTY2NQ==","author":{"login":"stale"},"authorAssociation":"NONE","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","createdAt":"2019-08-19T08:23:13Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/576#issuecomment-522465665","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDUyODg3NzU0OA==","author":{"login":"thomas-bouhon"},"authorAssociation":"NONE","body":"Hi stale_bot ! \r\n\r\nThx to you to don't close this issue, we really need this documentation update.\r\n\r\n;)","createdAt":"2019-09-06T14:29:44Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/576#issuecomment-528877548","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDYzODcxNTA2Mg==","author":{"login":"abhn"},"authorAssociation":"NONE","body":"+1ing this, faced the same issue and stumbled on this issue via search","createdAt":"2020-06-04T08:56:46Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/576#issuecomment-638715062","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDc1MTM0NTg5Mg==","author":{"login":"c-martinez"},"authorAssociation":"NONE","body":"Hi @thomas-bouhon , @abhn -- I submitted a PR couple of months ago for this issue. Now stale_bot has marked it as stale -- would you know how can we get my PR reviewed so it can be merged before it is closed by stale_bot?","createdAt":"2020-12-26T11:18:12Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/576#issuecomment-751345892","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDc1OTcwMjQwMg==","author":{"login":"mloskot"},"authorAssociation":"CONTRIBUTOR","body":"@hostingthepage Although I'm not an active contributor, I don't mind any motion for sustainable development of any project I use or contribute to.","createdAt":"2021-01-13T19:53:19Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/576#issuecomment-759702402","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs42aqXe","author":{"login":"mlexs"},"authorAssociation":"NONE","body":"My comment doesn't solve the docs issue... Anyway I always \"lookup\" attributes/methods of a given object if in doubt, in case the docs are missing (like the issue here), or I'm just lazy etc.\r\n\r\nso given this code:\r\n```python\r\nrepo = g.get_repo(\"whatever/here\")\r\ndata = repo.get_contents(\"README.md\")\r\nprint(dir(data))\r\n```\r\n\r\nit returns\r\n```bash\r\n['CHECK_AFTER_INIT_FLAG', '_CompletableGithubObject__complete', '_CompletableGithubObject__completed', '_GithubObject__makeSimpleAttribute', '_GithubObject__makeSimpleListAttribute', '_GithubObject__makeTransformedAttribute', '__class__', '__delattr__', '__dict__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__le__', '__lt__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_completeIfNeeded', '_completeIfNotSet', '_content', '_download_url', '_encoding', '_git_url', '_headers', '_html_url', '_initAttributes', '_license', '_makeBoolAttribute', '_makeClassAttribute', '_makeDatetimeAttribute', '_makeDictAttribute', '_makeDictOfStringsToClassesAttribute', '_makeFloatAttribute', '_makeIntAttribute', '_makeListOfClassesAttribute', '_makeListOfDictsAttribute', '_makeListOfIntsAttribute', '_makeListOfListOfStringsAttribute', '_makeListOfStringsAttribute', '_makeStringAttribute', '_makeTimestampAttribute', '_name', '_parentUrl', '_path', '_rawData', '_repository', '_requester', '_sha', '_size', '_storeAndUseAttributes', '_text_matches', '_type', '_url', '_useAttributes', 'content', 'decoded_content', 'download_url', 'encoding', 'etag', 'get__repr__', 'git_url', 'html_url', 'last_modified', 'license', 'name', 'path', 'raw_data', 'raw_headers', 'repository', 'setCheckAfterInitFlag', 'sha', 'size', 'text_matches', 'type', 'update', 'url']\r\n```\r\n\r\na bit of eyes prying can gives us `decoded_content`, next we try it\r\n```python\r\nbody = data.decoded_content\r\nprint(body)\r\n```\r\n\r\nvoila this renders the data in raw format.","createdAt":"2021-09-04T11:35:16Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/576#issuecomment-912958942","viewerDidAuthor":false}],"createdAt":"2017-05-05T22:22:53Z","number":576,"state":"CLOSED","title":"Is there a way to get raw format of a ContentFile?","url":"https://github.com/PyGithub/PyGithub/issues/576"},{"author":{"id":"MDQ6VXNlcjQ4MDYyMQ==","is_bot":false,"login":"davidxia","name":"David Xia"},"body":"`ContentFile`'s corresponding API response has `download_url`. See https://developer.github.com/v3/repos/contents/#get-contents. Can we add this to `ContentFile`? Compare http://pygithub.readthedocs.io/en/latest/github_objects/ContentFile.html","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDM4MjA4ODkyOQ==","author":{"login":"csidell-playq"},"authorAssociation":"NONE","body":"@sfdye Was this added or dropped?","createdAt":"2018-04-17T18:08:51Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/575#issuecomment-382088929","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM4MjIwODk5NA==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"@csidell-playq It was added in ca6fbc4","createdAt":"2018-04-18T01:02:44Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/575#issuecomment-382208994","viewerDidAuthor":false}],"createdAt":"2017-05-05T22:09:25Z","number":575,"state":"CLOSED","title":"Can we support `ContentFile.download_url`?","url":"https://github.com/PyGithub/PyGithub/issues/575"},{"author":{"id":"MDQ6VXNlcjQ4MDYyMQ==","is_bot":false,"login":"davidxia","name":"David Xia"},"body":"Thanks for the awesome repo and work. It's made my life a lot easier.\r\n\r\nI'm writing a script to comment on all open PRs created by me in order to remind people to review them. It turns out the most direct way to list all my open PRs is to use the issue search API endpoint. [See discussion here](http://stackoverflow.com/a/43807803/553994).\r\n\r\nThis works great and is better than my original [roundabout way](http://stackoverflow.com/questions/17412809/how-to-get-my-pull-requests-from-github-api/43807803#comment74624202_17438627).\r\n\r\nUnfortunately, `Github.search_issues()` returns `Issue` and there's no easy way to get the associated `PullRequest` object. There's `Issue.pull_request`, but this returns an [`IssuePullRequest`](http://pygithub.readthedocs.io/en/latest/github_objects/IssuePullRequest.html#github.IssuePullRequest.IssuePullRequest) object which isn't helpful.\r\n\r\nMy current workaround is `Issue` -> `Repository` -> `PullRequest`.\r\n\r\n```python\r\nissue.repository.get_pull(issue.number)\r\n```\r\n\r\nIs there a better way to get the corresponding `PullRequest` from an `Issue`?","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDI5OTcwMTg0MA==","author":{"login":"mikeage"},"authorAssociation":"CONTRIBUTOR","body":"I use pygithub for parsing webhooks, and as most of the notifications about a pull request come as an `issue_comment` notification, I have the same challenge you do; I haven't found anything better than `issue.repository.get_pull(issue.number)`. \r\n\r\nNot sure if that's the answer you're looking for, but at least I can confirm that you're not alone","createdAt":"2017-05-07T12:04:18Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/572#issuecomment-299701840","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDMzMDI0MzU4OQ==","author":{"login":"tmshn"},"authorAssociation":"CONTRIBUTOR","body":"I added the methods for this! (I don't know when it will be merged, though)\r\n:point_right: https://github.com/PyGithub/PyGithub/pull/630","createdAt":"2017-09-18T14:37:01Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/572#issuecomment-330243589","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM3NDg1MjI1OQ==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"Yes, there is now. You can use the `type` parameter to specify only search against PR:\r\nhttps://developer.github.com/v3/search/#parameters-3\r\n\r\nSomething like:\r\n\r\n`g.search_issues(query=\"query\", qualifiers={'type':'pr'})`","createdAt":"2018-03-21T07:29:53Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/572#issuecomment-374852259","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM3NTMyNTg5Mg==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"Feel free to re-open if needed.","createdAt":"2018-03-22T14:28:30Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/572#issuecomment-375325892","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM3NTU0NjA2Ng==","author":{"login":"tmshn"},"authorAssociation":"CONTRIBUTOR","body":"Thanks @sfdye, but I'm afraid you are seeing wrong point (though I can't re-open this cz I'm not the author).\r\n\r\nEven if you specify `{'type':'pr'}` on `search_issues`--well that's true it returns only pull requests, but it's represented in the `github.Issue.Issue` class. This is that kind of interface.\r\n\r\n```python\r\nfrom github import Github\r\n\r\ng = Github()\r\n\r\nfor pr in g.search_issues(query='License', **{'repo':'PyGithub/PyGithub', 'type':'pr'}):\r\n    print('{}\\n  - type: {}\\n  - URL: {}'.format(pr, type(pr), pr.html_url))\r\n```\r\n```\r\nIssue(title=\"Implement License API\", number=734)\r\n  - type: <class 'github.Issue.Issue'>\r\n  - URL: https://github.com/PyGithub/PyGithub/pull/734\r\nIssue(title=\"Added missing parameters for repo creation\", number=623)\r\n  - type: <class 'github.Issue.Issue'>\r\n  - URL: https://github.com/PyGithub/PyGithub/pull/623\r\nIssue(title=\"Follow redirects in the case of a 301 status code\", number=403)\r\n  - type: <class 'github.Issue.Issue'>\r\n  - URL: https://github.com/PyGithub/PyGithub/pull/403\r\n```\r\n\r\nThe point is: we want convert `github.Issue.Issue` class instance which represents pull requests into `github.PullRequest.PullRequest` class instance.","createdAt":"2018-03-23T05:03:32Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/572#issuecomment-375546066","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM3NTU0NjgyOQ==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"I understand that. Is there a specific use case to convert between the two types instead of retrieving the correct one in the first place?","createdAt":"2018-03-23T05:09:39Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/572#issuecomment-375546829","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM3NTU0NzM3Mw==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"My bad, it seems your PR is still required. Will re-open.","createdAt":"2018-03-23T05:13:43Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/572#issuecomment-375547373","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM3NTU0ODI1Ng==","author":{"login":"tmshn"},"authorAssociation":"CONTRIBUTOR","body":"> Is there a specific use case to convert between the two types instead of retrieving the correct one in the first place?\r\n\r\n[Issue→PR]\r\nYes, simply because Github provides no API to \"search pull request\" directly.\r\n\r\n[PR→Issue]\r\nMmm, probably no, I think.","createdAt":"2018-03-23T05:20:17Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/572#issuecomment-375548256","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM3NjAyODY5NA==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"Closed in #630 \r\n\r\n@tmshn Thanks for your PR!","createdAt":"2018-03-26T02:26:21Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/572#issuecomment-376028694","viewerDidAuthor":false}],"createdAt":"2017-05-05T15:10:43Z","number":572,"state":"CLOSED","title":"Is there a more direct way to get PullRequest from Issue?","url":"https://github.com/PyGithub/PyGithub/issues/572"},{"author":{"id":"MDQ6VXNlcjgxMjg5Mg==","is_bot":false,"login":"edunham","name":"E. Dunham"},"body":"It is possible to mark notifications as read in various ways through the API -- docs at https://developer.github.com/v3/activity/notifications/\r\n\r\nHowever in the docs at http://pygithub.readthedocs.io/en/latest/github_objects/Notification.html I see nothing about how to mark a notification as read. \r\n\r\nIf mark-as-read functionality exists I would expect to find it in https://github.com/PyGithub/PyGithub/blob/master/github/Notification.py or maybe in https://github.com/PyGithub/PyGithub/blob/master/github/NotificationSubject.py but I don't see it. ","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDMzMTk1MzgxOQ==","author":{"login":"edunham"},"authorAssociation":"CONTRIBUTOR","body":"Just in case I'm not literally the only person ever to have had this problem, a workaround is to use requests to send the PATCH as described in the API docs. Just remember to slap your auth token in the request somewhere. https://github.com/edunham/toys/blob/master/utilities/notification-shusher.py is where i used it.","createdAt":"2017-09-25T17:30:05Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/571#issuecomment-331953819","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM3OTQ1MjE1MA==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"Thanks for reporting. I am open for a PR on this.","createdAt":"2018-04-07T08:48:47Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/571#issuecomment-379452150","viewerDidAuthor":false}],"createdAt":"2017-05-03T23:13:26Z","number":571,"state":"CLOSED","title":"Marking notification as read from PyGithub is either missing or undocumented","url":"https://github.com/PyGithub/PyGithub/issues/571"},{"author":{"id":"MDQ6VXNlcjEwODc4Mjkx","is_bot":false,"login":"moghya","name":""},"body":"","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDI5ODE5MDEwMw==","author":{"login":"moghya"},"authorAssociation":"NONE","body":"#567 verify this , it resolves this issue.","createdAt":"2017-04-29T19:40:14Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/566#issuecomment-298190103","viewerDidAuthor":false}],"createdAt":"2017-04-29T18:54:35Z","number":566,"state":"CLOSED","title":"passing spaces in path string for creating a file raises an exception","url":"https://github.com/PyGithub/PyGithub/issues/566"},{"author":{"id":"MDQ6VXNlcjg4MDY4Nw==","is_bot":false,"login":"fridex","name":"Fridolín Pokorný"},"body":"For statistics such as `contributors` or `commit_activity`, there are no checks whether the API responded with 200. In a lot of cases, GitHub API responds with 202 as some statistics are computed asynchronously on demand [1]. Even if PyGithub does not perform waits, I would expect notification that I should retry after some time.\r\n\r\n[1] https://developer.github.com/v3/repos/statistics/#a-word-about-caching","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDM3OTY2NTEwMw==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"Good catch! @fridex Would you like to submit a PR?","createdAt":"2018-04-09T07:49:22Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/564#issuecomment-379665103","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM3OTY5NTczNA==","author":{"login":"fridex"},"authorAssociation":"NONE","body":"> Good catch! @fridex Would you like to submit a PR?\r\n\r\nIf time allows why not. However I don't see it doable in the near future so if someone is interested, feel free to pick this item.","createdAt":"2018-04-09T09:44:31Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":1}}],"url":"https://github.com/PyGithub/PyGithub/issues/564#issuecomment-379695734","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM4ODYzMTcwNQ==","author":{"login":"mfonville"},"authorAssociation":"CONTRIBUTOR","body":"I think it could be done with a relatively simple modification in `__requestRaw` where currently a `301` redirect is handled, a similar line could be added to check for a `202`, wait a few moments, and then retry until no `202` is returned anymore.","createdAt":"2018-05-13T14:39:01Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/564#issuecomment-388631705","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM4ODkwOTUzNQ==","author":{"login":"mfonville"},"authorAssociation":"CONTRIBUTOR","body":"I made a PR to fix this issue:\r\nhttps://github.com/PyGithub/PyGithub/pull/791","createdAt":"2018-05-14T18:05:10Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/564#issuecomment-388909535","viewerDidAuthor":false}],"createdAt":"2017-04-27T07:44:30Z","number":564,"state":"CLOSED","title":"No HTTP status checks in statistics","url":"https://github.com/PyGithub/PyGithub/issues/564"},{"author":{"id":"MDQ6VXNlcjIwMzE0NzQy","is_bot":false,"login":"ritiek","name":"Ritiek Malhotra"},"body":"Hi, thanks for developing this!\r\n\r\nI was wondering what is the difference between `repo.forks` and `repo.forks_count` in `class github.Repository.Repository`? I tested them and they both seem to return the number of forks of repo..\r\n\r\nHere is an example of quick testing:\r\n\r\n```\r\ngh = Github(\"<user>\", \"<pass>\")\r\nfor repo in (gh.get_user()).get_repos():\r\n        print(repo.forks == repo.forks_count)\r\n```","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDM3OTQ1NTQ5NA==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"Thanks for reporting.\r\n\r\nPlease use `forks_count` according to the latest API. I suspect `forks` was an out-dated property, which we should properly depreciate and remove.","createdAt":"2018-04-07T09:14:18Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":1}}],"url":"https://github.com/PyGithub/PyGithub/issues/563#issuecomment-379455494","viewerDidAuthor":false}],"createdAt":"2017-04-27T06:43:17Z","number":563,"state":"CLOSED","title":"What is the difference between forks and forks_count?","url":"https://github.com/PyGithub/PyGithub/issues/563"},{"author":{"id":"MDQ6VXNlcjEzMDIzMTM=","is_bot":false,"login":"drts01","name":"Carlos Meza"},"body":"https://github.com/PyGithub/PyGithub/blob/master/github/GitObject.py#L33 points to http://developer.github.com/v3/todo which no longer exist.","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDM3OTQ1NTEzMg==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"Removed.","createdAt":"2018-04-07T09:11:04Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/561#issuecomment-379455132","viewerDidAuthor":false}],"createdAt":"2017-04-25T18:56:31Z","number":561,"state":"CLOSED","title":"Bad link in Docstring - GitObject.py","url":"https://github.com/PyGithub/PyGithub/issues/561"},{"author":{"id":"MDQ6VXNlcjE5MTg1NTE=","is_bot":false,"login":"nitzan-shaked","name":"Nitzan Shaked"},"body":"Passing `False` as the value for the `recursive` parameter in `Repository.get_git_tree()` causes the resulting URL to contain `?recursive=False`, which GitHub API treats as True. The only way to get a non-recursive tree is to not pass `recursive` at all. For that matter, passing `True` causes the resulting URL to contain `?recursive=True`, which under a strict interpretation of the API docs is also a bug (should be `?recursive=1`).\r\n\r\nFrom the console debugging logs (much omitted...):\r\n\r\n```\r\nGET https://git.MY_CORP.com/api/v3/repos/MY_USER/MY_REPO/git/trees/MY_SHA?recursive=False {'Authorization': 'token (oauth token removed)', 'User-Agent': 'PyGithub/Python'} null ==> 200 {'statu...\r\n```","comments":[],"createdAt":"2017-04-24T03:36:43Z","number":560,"state":"CLOSED","title":"Repository.get_tree_tree(sha, False) buggy","url":"https://github.com/PyGithub/PyGithub/issues/560"},{"author":{"id":"MDQ6VXNlcjEwODc4Mjkx","is_bot":false,"login":"moghya","name":""},"body":"Traceback (most recent call last):\r\n  File \"C:/Users/moghya_s/Desktop/toGithub/test.py\", line 11, in <module>\r\n    test_upToGithub()\r\n  File \"C:/Users/moghya_s/Desktop/toGithub/test.py\", line 8, in test_upToGithub\r\n    user.cforceUpload('codeforcesUsername','codeforcesPassword')\r\n  File \"C:\\Users\\moghya_s\\Desktop\\toGithub\\upload\\uploader.py\", line 45, in cforceUpload\r\n    self.repo.create_file('/cforce/'+abc['contestId']+'/'+abc['problemName']+'/'+abc['id']+'.'+abc['ext'],'cforce solution for '+abc['problemName']+' with submissionId '+abc['id']+' is added.',abc['code'])\r\n  File \"C:\\Program Files\\Anaconda3\\lib\\site-packages\\github\\Repository.py\", line 1310, in create_file\r\n    input=put_parameters\r\n  File \"C:\\Program Files\\Anaconda3\\lib\\site-packages\\github\\Requester.py\", line 172, in requestJsonAndCheck\r\n    return self.__check(*self.requestJson(verb, url, parameters, headers, input, cnx))\r\n  File \"C:\\Program Files\\Anaconda3\\lib\\site-packages\\github\\Requester.py\", line 213, in requestJson\r\n    return self.__requestEncode(cnx, verb, url, parameters, headers, input, encode)\r\n  File \"C:\\Program Files\\Anaconda3\\lib\\site-packages\\github\\Requester.py\", line 252, in __requestEncode\r\n    status, responseHeaders, output = self.__requestRaw(cnx, verb, url, requestHeaders, encoded_input)\r\n  File \"C:\\Program Files\\Anaconda3\\lib\\site-packages\\github\\Requester.py\", line 283, in __requestRaw\r\n    output = response.read()\r\n  File \"C:\\Program Files\\Anaconda3\\lib\\http\\client.py\", line 458, in read\r\n    s = self.fp.read()\r\n  File \"C:\\Program Files\\Anaconda3\\lib\\socket.py\", line 575, in readinto\r\n    return self._sock.recv_into(b)\r\n  File \"C:\\Program Files\\Anaconda3\\lib\\ssl.py\", line 929, in recv_into\r\n    return self.read(nbytes, buffer)\r\n  File \"C:\\Program Files\\Anaconda3\\lib\\ssl.py\", line 791, in read\r\n    return self._sslobj.read(len, buffer)\r\n  File \"C:\\Program Files\\Anaconda3\\lib\\ssl.py\", line 575, in read\r\n    v = self._sslobj.read(len, buffer)\r\nConnectionResetError: [WinError 10054] An existing connection was forcibly closed by the remote host\r\n","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDI5ODE4NzU1Nw==","author":{"login":"moghya"},"authorAssociation":"NONE","body":"This was due to spaces in path string passed to create_file function","createdAt":"2017-04-29T18:53:42Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/559#issuecomment-298187557","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDI5ODE5MDE2OA==","author":{"login":"moghya"},"authorAssociation":"NONE","body":"#567 look into this it solves problem.","createdAt":"2017-04-29T19:41:29Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/559#issuecomment-298190168","viewerDidAuthor":false}],"createdAt":"2017-04-21T12:46:30Z","number":559,"state":"CLOSED","title":"ConnectionResetError: [WinError 10054] An existing connection was forcibly closed by the remote host","url":"https://github.com/PyGithub/PyGithub/issues/559"},{"author":{"id":"MDQ6VXNlcjQzMDMyMzY=","is_bot":false,"login":"pmlandwehr","name":"Peter M. Landwehr"},"body":"`github.Repository.Repository.create_pull()` requires that you provide it an Issue; this is contra [the corresping API call](https://developer.github.com/v3/pulls/#create-a-pull-request), which only requires a head, base, and title.","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDI5NjQxOTQxNQ==","author":{"login":"pmlandwehr"},"authorAssociation":"NONE","body":"The relevant line is [here](https://github.com/PyGithub/PyGithub/blob/master/github/Repository.py#L993)\r\n\r\nYou *can* omit a `github.Issue.Issue`, but if so you need to include a body string. However, body strings are optional in the official API, so should perhaps be optional here.","createdAt":"2017-04-23T04:46:02Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/558#issuecomment-296419415","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM4MzQ5OTk5MQ==","author":{"login":"s-t-e-v-e-n-k"},"authorAssociation":"COLLABORATOR","body":"I understand what is going on here. Since the code for create_pull() checks the number of arguments passed, not what they are, and that body is optional, the code should call the relevant method correctly based on which arguments are passed, not the count.","createdAt":"2018-04-23T08:43:18Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/558#issuecomment-383499991","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM4MzU0MTcyMQ==","author":{"login":"s-t-e-v-e-n-k"},"authorAssociation":"COLLABORATOR","body":"@sfdye I'd welcome your opinion here. The API docs clearly state that body is not required, but Repository.create_pull() does. If you use keyword arguments and not pass it, then the underlying code assumes you're passing an issue by the number of arguments.\r\n\r\nI'm tempted to refactor this by changing create_pull to only take keyword arguments, but that would be an API break.","createdAt":"2018-04-23T11:22:40Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/558#issuecomment-383541721","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM4Mzg2NTIyNQ==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"Is it? I thought there are two ways you can create a pull request, one is from head/title/base, the other is from an issue:\r\n\r\nhttps://developer.github.com/v3/pulls/?q=is%3Apr+is%3Aopen+sort%3Aupdated-desc#alternative-input\r\n\r\nIt's also reflected in the code, based on the number of arguments combined:\r\nhttps://github.com/PyGithub/PyGithub/blob/master/github/Repository.py#L1080:L1083","createdAt":"2018-04-24T09:25:03Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/558#issuecomment-383865225","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM4Mzg2ODkzMg==","author":{"login":"s-t-e-v-e-n-k"},"authorAssociation":"COLLABORATOR","body":"Yes, exactly -- either title or issue is required, but if a title is passed the body is optional. Consider:\r\n\r\n```repo.create_pull(title=\"New PR\", base=foo, head=bar)```\r\n\r\nThat will call ```__create_pull_2``` expecting an issue, when one is not provided.","createdAt":"2018-04-24T09:37:33Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/558#issuecomment-383868932","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM4NDg2ODIwMg==","author":{"login":"s-t-e-v-e-n-k"},"authorAssociation":"COLLABORATOR","body":"@sfdye I've pushed up two branches that show the problem, and also solve it in two different ways. They both have downsides and upsides, but I can't decide between them, so I've held off creating a pull request. I can do that once we have chosen a victor.\r\n\r\nAllowing body to be optional: https://github.com/s-t-e-v-e-n-k/PyGithub/commit/2a915804984bb59ad244dbec1924853cfa93f5f7\r\n\r\nRefactoring Repository.create_pull() entirely: https://github.com/s-t-e-v-e-n-k/PyGithub/commit/5eba0f0f783578fee7d64176e51c3c7fc8fa1ca8\r\n\r\nNote these two commits are not related in any way, they just share the same testcase.","createdAt":"2018-04-27T05:29:09Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/558#issuecomment-384868202","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQwMjYzMDEyNg==","author":{"login":"stale"},"authorAssociation":"NONE","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","createdAt":"2018-07-05T07:26:22Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/558#issuecomment-402630126","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQwMjk0MzMwNQ==","author":{"login":"pmlandwehr"},"authorAssociation":"NONE","body":"There are two candidate solutions in the pull requests, so it seems like someone with authority just needs to make a call about which is better and should be merged. (Or, I guess, just let this slide away without getting patched...)","createdAt":"2018-07-06T06:49:55Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/558#issuecomment-402943305","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQxODI2MzEzNQ==","author":{"login":"stale"},"authorAssociation":"NONE","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","createdAt":"2018-09-04T07:05:51Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/558#issuecomment-418263135","viewerDidAuthor":false}],"createdAt":"2017-04-21T03:44:58Z","number":558,"state":"CLOSED","title":"create_pull() requires a GitHub.Issue, contra the API","url":"https://github.com/PyGithub/PyGithub/issues/558"},{"author":{"id":"MDQ6VXNlcjI2ODkzNTYz","is_bot":false,"login":"JianXin-Yun","name":"員建新"},"body":"I think `input()`  and `print()`  in python is misleading,I think `input()` should be called `keyboard()` because this function provides a keyboard interface to react keyboard thing,read most keys of keyboard excluding Enter key(Enter key is used to end keyboard input),as for `print()` ,I thinought this should be called `output()` long ago,now I think it's better to be called `screen()` because this function name implies that its argument will be shown on the screen.  `keyboard()` and `screen()` sound very hardware,they are associated with PC I/O hardware(everyone knows keyboard is a input hardware and screen is a output hardware),if `print()` be called `output()` ,it will be less misleading,but `keyboard()` and `screen()` will be more straightforward and exact.I hope python organization will see my advise,hoping they are in GITHUB","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDI5MzYwOTYzNQ==","author":{"login":"jayfk"},"authorAssociation":"CONTRIBUTOR","body":"This may very well be the case, but it's not the right place to discuss it. You are probably looking for [CPython](https://github.com/python/cpython).","createdAt":"2017-04-12T15:12:58Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/556#issuecomment-293609635","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDI5MzczODkzMA==","author":{"login":"JianXin-Yun"},"authorAssociation":"NONE","body":"@jayfk \r\nthank you for your advise,I'll talk it on CPython","createdAt":"2017-04-12T23:53:20Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/556#issuecomment-293738930","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDI5Mzc0MTE1OQ==","author":{"login":"JianXin-Yun"},"authorAssociation":"NONE","body":"![image](https://cloud.githubusercontent.com/assets/26893563/24984429/ecfa2e4e-201f-11e7-9185-e76db3c1e197.png)\r\nbut  CPython has no issue mudule","createdAt":"2017-04-13T00:07:58Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/556#issuecomment-293741159","viewerDidAuthor":false}],"createdAt":"2017-04-12T07:34:07Z","number":556,"state":"CLOSED","title":"I think input() and print() in python is misleading","url":"https://github.com/PyGithub/PyGithub/issues/556"},{"author":{"id":"MDQ6VXNlcjEwNTAxNTY=","is_bot":false,"login":"lmazuel","name":"Laurent Mazuel"},"body":"Looks like some automatic system has messed up the file :(","comments":[],"createdAt":"2017-04-11T23:54:26Z","number":555,"state":"CLOSED","title":"doc/changes.rst broken since 1.33","url":"https://github.com/PyGithub/PyGithub/issues/555"},{"author":{"id":"MDQ6VXNlcjk4NzgyMzA=","is_bot":false,"login":"paulortman","name":"Paul Ortman"},"body":"We have working github integration code using PyGithub v1.32 that does essentially:\r\n\r\n```python\r\nintegration = github.GithubIntegration(settings.GITHUB_INTEGRATION_ID, settings.GITHUB_INTEGRATION_PRIVATE_PEM)\r\ninst_token = integration.get_access_token(installation_id).token\r\n```\r\nAfter upgrading to v1.34 this code raises \"NotImplementedError Algorithm not supported\"\r\n\r\nI suspect it has to do with the [switch to pyjwt from python-jose](https://github.com/PyGithub/PyGithub/commit/d447eb13b9f4688a4c981ca03b1b3111fb299142)","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDI5MzMwNDQ5MA==","author":{"login":"jayfk"},"authorAssociation":"CONTRIBUTOR","body":"Could you post a stacktrace? ","createdAt":"2017-04-11T15:41:15Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/554#issuecomment-293304490","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDI5MzMwNjAxMA==","author":{"login":"paulortman"},"authorAssociation":"CONTRIBUTOR","body":"Yeah, my bad.  Here is the relevant info:\r\n```\r\ninst_token = integration.get_access_token(installation_id).token\r\nFile \"github/MainClass.py\", line 657, in get_access_token\r\n                  \"Authorization\": \"Bearer {}\".format(self.create_jwt()),\r\nFile \"github/MainClass.py\", line 638, in create_jwt\r\n              algorithm=\"RS256\"\r\nFile \"jwt/api_jwt.py\", line 56, in encode\r\n              json_payload, key, algorithm, headers, json_encoder\r\nFile \"jwt/api_jws.py\", line 102, in encode\r\n              raise NotImplementedError('Algorithm not supported')\r\nNotImplementedErrorAlgorithm not supported\r\n```","createdAt":"2017-04-11T15:46:01Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/554#issuecomment-293306010","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDI5MzMwODA0OA==","author":{"login":"jayfk"},"authorAssociation":"CONTRIBUTOR","body":"Ah, I see. `RS256` requires cryptography to be installed:\r\n\r\n```\r\npip install cryptography\r\n```\r\n\r\nWe should make that an extra that can be installed via `pygithub[integrations]` and document it.","createdAt":"2017-04-11T15:52:39Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/554#issuecomment-293308048","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDI5MzMwOTYzMw==","author":{"login":"paulortman"},"authorAssociation":"CONTRIBUTOR","body":"Great, thanks for looking into it so quickly.  It's very much appreciated.  Thank you for the project as well, it's a great tool.","createdAt":"2017-04-11T15:57:33Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":1}}],"url":"https://github.com/PyGithub/PyGithub/issues/554#issuecomment-293309633","viewerDidAuthor":false}],"createdAt":"2017-04-11T15:37:17Z","number":554,"state":"CLOSED","title":"GitHub Integration raises \"NotImplementedError Algorithm not supported\"","url":"https://github.com/PyGithub/PyGithub/issues/554"},{"author":{"id":"MDQ6VXNlcjE4Nzk2MzI=","is_bot":false,"login":"nwalsh1995","name":""},"body":"It seems the get_rate_limit function will return what Github considers the 'core' rate limit. However, there are different rate limits for searching code. See [here](https://developer.github.com/v3/rate_limit/).\r\n\r\nRight now there isn't a way to get the search code rate limits as far as I can tell.","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDMzMTQ5NjM4MQ==","author":{"login":"justfortherec"},"authorAssociation":"NONE","body":"I see the same issue. Here is a small script that exemplifies the problem.\r\n\r\n```python\r\nimport os\r\nfrom datetime import datetime\r\nfrom github import Github\r\n\r\n# Login\r\nTOKEN = os.getenv(\"GITHUB_ACCESS_TOKEN\")\r\ngithub = Github(TOKEN)\r\n\r\n# Get initial rate limit and reset time\r\nrl1 = github.get_rate_limit().rate\r\nprint(\"RL1 | Limit: {}, Remaining: {}, Reset: {}.\".format(\r\n    rl1.limit, rl1.remaining, rl1.reset))\r\n# RL1 | Limit: 5000, Remaining: 5000, Reset: 2017-09-22 17:26:35.\r\n\r\n# Perform a search\r\nresults = github.search_code(\"Hello World\")\r\n\r\n# Rate limit of Github instance is unchanged after a search\r\nrl2 = github.get_rate_limit().rate\r\nprint(\"RL2 | Limit: {}, Remaining: {}, Reset: {}.\".format(\r\n    rl2.limit, rl2.remaining, rl2.reset))\r\n# RL2 | Limit: 5000, Remaining: 5000, Reset: 2017-09-22 17:26:35.\r\n\r\n# The PaginatedList instance has a Requestor with the same info\r\nrl3 = results._PaginatedList__requester.rate_limiting\r\nrl3_reset = datetime.utcfromtimestamp(int(\r\n        results._PaginatedList__requester.rate_limiting_resettime))\r\nprint(\"RL3 | Limit: {}, Remaining: {}, Reset: {}.\".format(\r\n    rl3[0], rl3[1], rl3_reset))\r\n# RL3 | Limit: 5000, Remaining: 5000, Reset: 2017-09-22 17:26:35.\r\n\r\n# However, the actual ContentFile results show a different limit\r\n# The Requester of each individual result ...\r\nresult = results[0]\r\nrl4 = result._requester.rate_limiting\r\nrl4_reset = datetime.utcfromtimestamp(int(\r\n        result._requester.rate_limiting_resettime))\r\nprint(\"RL4 | Limit: {}, Remaining: {}, Reset: {}.\".format(\r\n    rl4[1], rl4[0], rl4_reset))\r\n# RL4 | Limit: 30, Remaining: 29, Reset: 2017-09-22 16:27:36.\r\n\r\n# ... and headers stored in the content file directly show a different rate limit.\r\nrl5_limit = result._headers['x-ratelimit-limit']\r\nrl5_remaining = result._headers['x-ratelimit-remaining']\r\nrl5_reset = datetime.utcfromtimestamp(int(\r\n        result._headers['x-ratelimit-reset']))\r\nprint(\"RL5 | Limit: {}, Remaining: {}, Reset: {}.\".format(\r\n    rl5_limit, rl5_remaining, rl5_reset))\r\n# RL5 | Limit: 30, Remaining: 29, Reset: 2017-09-22 16:27:36.\r\n\r\n# In the end, the main Github instance still shows the original full rate limit\r\nrl6 = github.get_rate_limit().rate\r\nprint(\"RL6 | Limit: {}, Remaining: {}, Reset: {}.\".format(\r\n    rl6.limit, rl6.remaining, rl6.reset))\r\n# RL6 | Limit: 5000, Remaining: 5000, Reset: 2017-09-22 17:26:35.\r\n```","createdAt":"2017-09-22T16:32:49Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/553#issuecomment-331496381","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDMzNDk3NTIyMw==","author":{"login":"brentshermana"},"authorAssociation":"NONE","body":"+1 This feature is necessary for an application I'm trying to build","createdAt":"2017-10-08T00:46:48Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/553#issuecomment-334975223","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDMzNDk5NjYxNg==","author":{"login":"justfortherec"},"authorAssociation":"NONE","body":"@brentshermana for you application, consider inspecting rate limit headers (of last response; see in my example above) or polling the [`/rate_limit` endpoint](https://developer.github.com/v3/rate_limit/) yourself. That contains information about all kind of rate limits and does not count towards any rate limit.\r\n\r\nEventually, it would be nice if PyGithub would nor only parse `rate` but also parse `resources` from what `/rate_limit` returns. The information is there, it is not made available to consumers of the library unfortunately.\r\n\r\nAlso, the paginated list should return the rate limit for code search if it returns results of such a search, i.e. whatever is stored in `_headers['x-ratelimit-*']`.","createdAt":"2017-10-08T10:18:49Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/553#issuecomment-334996616","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDMzNDk5NzAwOQ==","author":{"login":"justfortherec"},"authorAssociation":"NONE","body":"btw: I just noticed, the field `rate` from JSON returned by `/rate_limit` is deprecated and information in `resources` is the recommended alternative: https://developer.github.com/v3/rate_limit/#deprecation-notice","createdAt":"2017-10-08T10:27:05Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/553#issuecomment-334997009","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDMzNTAzMDQzMg==","author":{"login":"brentshermana"},"authorAssociation":"NONE","body":"I'm doing exactly that. If anyone wants to adapt this and try and make a pull request, you have my blessing:\r\n\r\n```\r\ndef wait(seconds):\r\n    print(\"Waiting for {} seconds ...\".format(seconds))\r\n    time.sleep(seconds)\r\n    print(\"Done waiting - resume!\")\r\n\r\ndef api_wait():\r\n    url = 'https://api.github.com/rate_limit'\r\n    response = urlopen(url).read()\r\n    data = json.loads(response.decode())\r\n    if data['resources']['core']['remaining'] <= 10:  # extra margin of safety\r\n        reset_time = data['resources']['core']['reset']\r\n        wait(reset_time - time.time() + 10)\r\n    elif data['resources']['search']['remaining'] <= 2:\r\n        reset_time = data['resources']['search']['reset']\r\n        wait(reset_time - time.time() + 10)\r\n```","createdAt":"2017-10-08T19:08:48Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/553#issuecomment-335030432","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM5ODg0NTU2NQ==","author":{"login":"BBI-YggyKing"},"authorAssociation":"CONTRIBUTOR","body":"I'm experiencing a problem where my iteration over the results from search_issues stops after 1020 results when there should be 1869 results. My script stops at the same point every time. Could this be a rate-limiting issue?\r\n\r\nI do not get an error, the results just run out. If I put my query string directly into the GitHub web interface then I see all 1869 results, as expected.  1020 is a multiple of 30, which makes me wonder if it's  pagination problem?\r\n\r\nCode is as follows:\r\n```\r\nquerystring = \"type:pr is:closed repo:xxxx closed:2017-07-01..2018-06-30\"\r\nissues = git.search_issues(query=querystring, sort=\"updated\", order=\"asc\")\r\nfor issue in issues:\r\n    pull = issue.as_pull_request()\r\n    print \"%s: %s\" % (pull.number, pull.title)\r\n```\r\n\r\nMany thanks for any tips you can share as to what might be going wrong here.","createdAt":"2018-06-20T18:12:03Z","includesCreatedEdit":true,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/553#issuecomment-398845565","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM5ODg1MTc5MA==","author":{"login":"BBI-YggyKing"},"authorAssociation":"CONTRIBUTOR","body":"I also tried iterating through `issues.reversed` to see if it would start at the end of my expected 1869 results. However in this case I only get 30 issues, from the first page of results.","createdAt":"2018-06-20T18:31:57Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/553#issuecomment-398851790","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM5ODkyODI5MA==","author":{"login":"BBI-YggyKing"},"authorAssociation":"CONTRIBUTOR","body":"On further investigation, it appears that I'm running into the [1000 results per search limit](https://developer.github.com/v3/search/#about-the-search-api).","createdAt":"2018-06-20T23:25:00Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"EYES","users":{"totalCount":3}}],"url":"https://github.com/PyGithub/PyGithub/issues/553#issuecomment-398928290","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM5OTMwNDc3MA==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"What about we provide one more method `get_search_rate_limit()` for the search rate limit while the existing `get_rate_limit()` will parse the latest \"core\" rate limit suggested by Github: https://developer.github.com/v3/rate_limit/","createdAt":"2018-06-22T02:51:00Z","includesCreatedEdit":true,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":2}}],"url":"https://github.com/PyGithub/PyGithub/issues/553#issuecomment-399304770","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQxODU5NjgwOQ==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"Search API rate limit and GraphQL rate limit is available now. One method for all.\r\n\r\nBy default it will show you the \"core\" rate limit. You can also get search/graphql rate limit by accessing the respective attributes. \r\n\r\n```python\r\nr = g.get_rate_limit()\r\n>>> r\r\nRateLimit(core=Rate(remaining=4923, limit=5000))\r\n>>> r.search\r\nRate(remaining=30, limit=30)\r\n>>> r.graphql\r\nRate(remaining=5000, limit=5000)\r\n```","createdAt":"2018-09-05T04:36:30Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":4}}],"url":"https://github.com/PyGithub/PyGithub/issues/553#issuecomment-418596809","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDUwMTM4NjQ5MQ==","author":{"login":"BBI-YggyKing"},"authorAssociation":"CONTRIBUTOR","body":"Looks great, thanks @sfdye!\r\n\r\nTo emulate @brentshermana's waiting function to avoid problems with search rate limiting, you can now do something like this:\r\n```\r\nfrom datetime import datetime\r\n\r\ndef api_wait_search(git):\r\n  limits = git.get_rate_limit()\r\n  if limits.search.remaining <= 2:\r\n    seconds = (limits.search.reset - datetime.now()).total_seconds()\r\n    print \"Waiting for %d seconds ...\" % (seconds)\r\n    time.sleep(seconds)\r\n    print \"Done waiting - resume!\"\r\n```\r\n\r\nNote that calling `get_rate_limit()` will introduce a small delay, so you may want to minimize how often you call this.","createdAt":"2019-06-12T17:55:29Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/553#issuecomment-501386491","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDU0NjM3ODIyOA==","author":{"login":"pokey"},"authorAssociation":"NONE","body":"For people that land here from search engine, I modified @bbi-yggy's function a bit:\r\n\r\n```py\r\nfrom datetime import datetime, timezone\r\n\r\ndef rate_limited_retry(github):\r\n    def decorator(func):\r\n        def ret(*args, **kwargs):\r\n            for _ in range(3):\r\n                try:\r\n                    return func(*args, **kwargs)\r\n                except RateLimitExceededException:\r\n                    limits = github.get_rate_limit()\r\n                    reset = limits.search.reset.replace(tzinfo=timezone.utc)\r\n                    now = datetime.now(timezone.utc)\r\n                    seconds = (reset - now).total_seconds()\r\n                    print(f\"Rate limit exceeded\")\r\n                    print(f\"Reset is in {seconds:.3g} seconds.\")\r\n                    if seconds > 0.0:\r\n                        print(f\"Waiting for {seconds:.3g} seconds...\")\r\n                        time.sleep(seconds)\r\n                        print(\"Done waiting - resume!\")\r\n            raise Exception(\"Failed too many times\")\r\n        return ret\r\n    return decorator\r\n```\r\n\r\nThis function can be used as follows:\r\n\r\n```py\r\n@rate_limited_retry(github)\r\ndef run_query(import_string):\r\n    query_string = f\"language:Python \\\"{import_string}\\\"\"\r\n    return list(github.search_code(query_string))\r\n\r\nresults = run_query(import_string)\r\n```","createdAt":"2019-10-25T14:31:43Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":7}}],"url":"https://github.com/PyGithub/PyGithub/issues/553#issuecomment-546378228","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDgyMTk4MTk3MQ==","author":{"login":"mendhak"},"authorAssociation":"NONE","body":"Modified version of pokey's decorator above to take into account core/search/graphql.  \r\nAlso added a 30 second delay because Github doesn't reset the rate limit exactly at the time it says.  \r\n\r\n\r\n```python\r\ndef rate_limited_retry():\r\n    def decorator(func):\r\n        def ret(*args, **kwargs):\r\n            for _ in range(3):\r\n                try:\r\n                    return func(*args, **kwargs)\r\n                except RateLimitExceededException:\r\n                    limits = gh.get_rate_limit()\r\n                    print(f\"Rate limit exceeded\")\r\n                    print(\"Search:\", limits.search, \"Core:\", limits.core, \"GraphQl:\", limits.graphql)\r\n\r\n                    if limits.search.remaining == 0:\r\n                        limited = limits.search\r\n                    elif limits.graphql.remaining == 0:\r\n                        limited = limits.graphql\r\n                    else:\r\n                        limited = limits.core\r\n                    reset = limited.reset.replace(tzinfo=timezone.utc)\r\n                    now = datetime.now(timezone.utc)\r\n                    seconds = (reset - now).total_seconds() + 30\r\n                    print(f\"Reset is in {seconds} seconds.\")\r\n                    if seconds > 0.0:\r\n                        print(f\"Waiting for {seconds} seconds...\")\r\n                        time.sleep(seconds)\r\n                        print(\"Done waiting - resume!\")\r\n            raise Exception(\"Failed too many times\")\r\n        return ret\r\n    return decorator\r\n\r\n```","createdAt":"2021-04-18T12:11:45Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/553#issuecomment-821981971","viewerDidAuthor":false}],"createdAt":"2017-04-09T23:05:00Z","number":553,"state":"CLOSED","title":"Support search rate limit","url":"https://github.com/PyGithub/PyGithub/issues/553"},{"author":{"id":"MDQ6VXNlcjg2MTYyMjE=","is_bot":false,"login":"aidanholsgrove","name":"Aidan Holsgrove"},"body":"remove_from_members seems to have stopped working. \r\nCommand:\r\nimport github\r\nfrom github import Github\r\ntoken = 'github-token' # token from an org owner\r\ngithub = github.Github(token)\r\norg = github.get_organization('org-name')\r\nuser = github.get_user('test-username')\r\nprint org.has_in_members(user) # Returns True\r\norg.remove_from_members(user)\r\n\r\nDoesn't remove member for org and produces the following error:\r\nTraceback (most recent call last):\r\n  File \"github-authenticator.py\", line 51, in <module>\r\n    check_github_membership('test-username')\r\n  File \"github-authenticator.py\", line 40, in check_github_membership\r\n    org.remove_from_members(user)\r\n  File \"/Library/Python/2.7/site-packages/github/Organization.py\", line 608, in remove_from_members\r\n    self.url + \"/members/\" + member._identity\r\n  File \"/Library/Python/2.7/site-packages/github/Requester.py\", line 172, in requestJsonAndCheck\r\n    return self.__check(*self.requestJson(verb, url, parameters, headers, input, cnx))\r\n  File \"/Library/Python/2.7/site-packages/github/Requester.py\", line 180, in __check\r\n    raise self.__createException(status, responseHeaders, output)\r\ngithub.GithubException.UnknownObjectException: 404 {u'documentation_url': u'https://developer.github.com/v3/orgs/members/#remove-a-member', u'message': u'Not Found'}\r\n\r\nFrom the looks of other issues, this seems to happen when there's a change to the github api - is that right?","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDI5Mjg4ODM4Ng==","author":{"login":"talipomin"},"authorAssociation":"NONE","body":"cant reproduce, cat you post debug info?\r\nyou can switch on debug logging using `github.enable_console_debug_logging()`","createdAt":"2017-04-10T08:51:56Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/552#issuecomment-292888386","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDI5Mjg5OTkwMw==","author":{"login":"aidanholsgrove"},"authorAssociation":"NONE","body":"Thanks for the quick reply. Here's the debug result of remove_from_members(user):\r\n\r\nDELETE https://api.github.com/orgs/shopkeep/members/test-username {'Authorization': 'token (oauth token removed)', 'User-Agent': 'PyGithub/Python'} null ==> 404 {'status': '404 Not Found', 'x-accepted-oauth-scopes': 'admin:org, repo', 'content-length': '107', 'x-github-media-type': 'github.v3; format=json', 'x-content-type-options': 'nosniff', 'content-security-policy': \"default-src 'none'\", 'access-control-expose-headers': 'ETag, Link, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Reset, X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Poll-Interval', 'x-github-request-id': 'EB23:1253B:1E14381:25CFE37:58EB523B', 'strict-transport-security': 'max-age=31536000; includeSubdomains; preload', 'x-ratelimit-remaining': '4932', 'server': 'GitHub.com', 'x-ratelimit-limit': '5000', 'x-oauth-scopes': 'admin:org, admin:org_hook, admin:public_key, admin:repo_hook, gist, notifications, repo, user', 'date': 'Mon, 10 Apr 2017 09:36:59 GMT', 'x-frame-options': 'deny', 'access-control-allow-origin': '*', 'content-type': 'application/json; charset=utf-8', 'x-xss-protection': '1; mode=block', 'x-ratelimit-reset': '1491818400'} {\"message\":\"Not Found\",\"documentation_url\":\"https://developer.github.com/v3/orgs/members/#remove-a-member\"}\r\nTraceback (most recent call last):\r\n  File \"debug.py\", line 14, in <module>\r\n    org.remove_from_members(user)\r\n  File \"/Library/Python/2.7/site-packages/github/Organization.py\", line 608, in remove_from_members\r\n    self.url + \"/members/\" + member._identity\r\n  File \"/Library/Python/2.7/site-packages/github/Requester.py\", line 172, in requestJsonAndCheck\r\n    return self.__check(*self.requestJson(verb, url, parameters, headers, input, cnx))\r\n  File \"/Library/Python/2.7/site-packages/github/Requester.py\", line 180, in __check\r\n    raise self.__createException(status, responseHeaders, output)\r\ngithub.GithubException.UnknownObjectException: 404 {u'documentation_url': u'https://developer.github.com/v3/orgs/members/#remove-a-member', u'message': u'Not Found'}","createdAt":"2017-04-10T09:40:53Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/552#issuecomment-292899903","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDI5MjkyNDA5OA==","author":{"login":"aidanholsgrove"},"authorAssociation":"NONE","body":"My mistake. My authenticated user wasn't an Owner. Thanks for your help. \r\n\r\nUnrelated question - is there no method to add a user to an organization? I see a way to add them to a team, but they need to be added to the org first.","createdAt":"2017-04-10T11:35:06Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/552#issuecomment-292924098","viewerDidAuthor":false}],"createdAt":"2017-04-09T11:59:07Z","number":552,"state":"CLOSED","title":"remove_from_members stopped working","url":"https://github.com/PyGithub/PyGithub/issues/552"},{"author":{"id":"MDQ6VXNlcjczNTY1NjU=","is_bot":false,"login":"YagoGG","name":"Yago González"},"body":"I just noticed that the [docs](http://pygithub.readthedocs.io/en/latest/introduction.html) linked in the readme are very outdated (e.g. the latest version in the changelog is from October 2014).\r\n\r\nWould it be possible to update them with the latest content that is currently available in master?","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDM2NjE5MzEzMA==","author":{"login":"grahamlyons"},"authorAssociation":"NONE","body":"I notice this is still out of date:\r\n```\r\n$ curl -Is http://pygithub.readthedocs.io/en/latest/reference.html | grep Last-Modified\r\nLast-Modified: Tue, 21 Apr 2015 15:31:01 GMT\r\n```\r\n\r\nWhat's the process for updating the docs? Could we automate it with each new release?","createdAt":"2018-02-16T10:04:45Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":1}}],"url":"https://github.com/PyGithub/PyGithub/issues/551#issuecomment-366193130","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM2NjczMDgzMA==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"+1. \r\n\r\n@jasonwhite @jayfk do you know the process to update the docs?","createdAt":"2018-02-19T15:46:16Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/551#issuecomment-366730830","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM2Njc3MzA5OQ==","author":{"login":"jayfk"},"authorAssociation":"CONTRIBUTOR","body":"No idea. I’m assuming there’s still a hook in place pointing to the old repo.\r\n\r\nWe probably need to create new docs on readthedocs and update the link accordingly. We could also try to get ownership of the old readthedocs project by contacting support.","createdAt":"2018-02-19T18:33:43Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/551#issuecomment-366773099","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM2Njg0MDk1NQ==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"I guess this one only @jacquev6 can advise? \r\n\r\nWould you mind adding me as one of the maintainers on readthedocs?","createdAt":"2018-02-20T01:22:07Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/551#issuecomment-366840955","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM2OTQ2ODIzMw==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"I am requesting ownership of the current dtd, once I have access, will set up the hook to automate this.","createdAt":"2018-03-01T04:08:56Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/551#issuecomment-369468233","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM2OTUzNjIwMQ==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"Fixed in 1ca7d523fb\r\n\r\nBut right now it's still manual because I don't have access to the webhook setting.","createdAt":"2018-03-01T09:44:11Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/551#issuecomment-369536201","viewerDidAuthor":false}],"createdAt":"2017-04-08T23:41:50Z","number":551,"state":"CLOSED","title":"Update the docs","url":"https://github.com/PyGithub/PyGithub/issues/551"},{"author":{"id":"MDQ6VXNlcjE0MDI2MzA4","is_bot":false,"login":"vinayakvivek","name":"Vinayak"},"body":"error traceback :\r\n```\r\nTraceback (most recent call last):\r\n  File \"pygit-test.py\", line 48, in <module>\r\n    sha = sha, branch = 'master')\r\n  File \"<PROJECT_ROOT>/env/lib/python2.7/site-packages/github/Repository.py\", line 1369, in update_file\r\n    input=put_parameters\r\n  File \"<PROJECT_ROOT>/env/lib/python2.7/site-packages/github/Requester.py\", line 172, in requestJsonAndCheck\r\n    return self.__check(*self.requestJson(verb, url, parameters, headers, input, cnx))\r\n  File \"<PROJECT_ROOT>/env/lib/python2.7/site-packages/github/Requester.py\", line 180, in __check\r\n    raise self.__createException(status, responseHeaders, output)\r\ngithub.GithubException.UnknownObjectException: 404 {u'documentation_url': u'https://developer.github.com/v3', u'message': u'Not Found'}\r\n```\r\n\r\nI ran the following code :\r\n\r\n```python\r\nsha = repo.get_contents('test').sha\r\nrepo.update_file(\r\n\tpath = 'test', \r\n\tmessage = 'Update test using GithubAPI', \r\n\tcontent = base64.b64encode('updated test'), \r\n\tcommitter=InputGitAuthor(\"vinayakvivek\", email, \"2016-01-15T16:13:30+12:00\"),\r\n\tauthor=InputGitAuthor(\"vinayakvivek\", email, \"2016-01-15T16:13:30+12:00\"),\r\n\tsha = sha, branch = 'master')\r\n```\r\n\r\nAny help would be highly appreciated :)","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDI5MjYyMTE5Mg==","author":{"login":"vinayakvivek"},"authorAssociation":"NONE","body":"I think #545 is a similar issue. ","createdAt":"2017-04-07T18:49:29Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/550#issuecomment-292621192","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDI5NDk3OTYwNw==","author":{"login":"paulbovbel"},"authorAssociation":"NONE","body":"Seeing the same issue","createdAt":"2017-04-18T20:55:09Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/550#issuecomment-294979607","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM0NDc1MjU5MA==","author":{"login":"kevinjcash"},"authorAssociation":"NONE","body":"I am seeing this as well.","createdAt":"2017-11-15T22:37:51Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/550#issuecomment-344752590","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM0NTAzMjY1NA==","author":{"login":"kevinjcash"},"authorAssociation":"NONE","body":"I got past this, I just needed a leading slash in the path.","createdAt":"2017-11-16T19:16:43Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/550#issuecomment-345032654","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDU1ODY1Njk0NA==","author":{"login":"shufanhao"},"authorAssociation":"NONE","body":"I also hit the same issue.  ","createdAt":"2019-11-26T14:34:48Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/550#issuecomment-558656944","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDU1ODY3MjQ4Nw==","author":{"login":"shufanhao"},"authorAssociation":"NONE","body":"I find the root cause is that the role of your account must be admin role. ","createdAt":"2019-11-26T15:08:11Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/550#issuecomment-558672487","viewerDidAuthor":false}],"createdAt":"2017-04-07T18:47:28Z","number":550,"state":"CLOSED","title":"Error while trying to update a file using update_file()","url":"https://github.com/PyGithub/PyGithub/issues/550"},{"author":{"id":"MDQ6VXNlcjE4MDc5ODA=","is_bot":false,"login":"sheluchin","name":"Alex Sheluchin"},"body":"`create_git_tag` and `create_git_tag_and_release` do not create GPG signed tags, even if `.gitconfig` includes entries for the following:\r\n```\r\n[user]\r\n        ...\r\n        signingKey = <your key>\r\n[commit]\r\n        gpgsign = true\r\n[tag]\r\n        forceSignAnnotated = true\r\n```\r\n\r\nMy implementation can be seen [here](https://github.com/netquity/err-github-jira-release/blob/66f270e2b925a20a9e6b7167a8e30ffd580a8ab3/release.py#L181-L198).\r\n\r\nTo check if the tag is signed, use `git tag -v <tag>`:\r\n```\r\n$ git tag -v v1.1.0\r\nobject 0c5fa0fb65be9d8df42a8b044887764594f027ac\r\ntype commit\r\ntag v1.1.0\r\ntagger foobar <foobar@mail.com> 1491420504 +0000\r\n\r\nv1.1.0error: no signature found\r\n```\r\n\r\nLinks with some explanation:\r\n- `forceSignAnnotated`: https://github.com/git/git/commit/61c2fe0c2984a7785e2ac803ce33e23663295b24\r\n- https://help.github.com/articles/signing-commits-using-gpg/","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDQwMjY1NDIzMw==","author":{"login":"stale"},"authorAssociation":"NONE","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","createdAt":"2018-07-05T08:58:54Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/549#issuecomment-402654233","viewerDidAuthor":false}],"createdAt":"2017-04-06T14:24:10Z","number":549,"state":"CLOSED","title":"Allow create_git_tag to create signed tags","url":"https://github.com/PyGithub/PyGithub/issues/549"},{"author":{"id":"MDQ6VXNlcjUyMzUxMjc=","is_bot":false,"login":"adriens","name":"SALES"},"body":"Hi,\r\n\r\nfirst thanks a lot for having developed this api, it really rocks and makes things easy to do ! The only thing i have not found in your examples is how to create a repo : i have found how to delete on but not how to create. Indeed it seems like the Github API does allow it.\r\n\r\nSo my question is : did you implement this method, ... and if yes, can you point me to a code snippet please ?\r\n\r\nThanks in advance for you help.\r\n\r\nKind Regards,\r\n\r\nAdrien\r\n","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDMzNTU2NzY3Nw==","author":{"login":"singh1114"},"authorAssociation":"NONE","body":"I have used this library and used the `user.create_repo(reponame)` method. My user is authenticated but I am still unable to create the repo.\r\n\r\nThe error looks like this:\r\n`404 {u'documentation_url': u'https://developer.github.com/v3/repos/#create', u'message': u'Not Found'}`","createdAt":"2017-10-10T18:36:35Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/548#issuecomment-335567677","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM3MzI1MTk5Ng==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"I just checked, it should work. Check whether you personal access token has the correct permission, and whether you want to create a personal repo or org repo.\r\n\r\nhttps://developer.github.com/v3/repos/#create","createdAt":"2018-03-15T03:48:07Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/548#issuecomment-373251996","viewerDidAuthor":false}],"createdAt":"2017-04-06T09:21:02Z","number":548,"state":"CLOSED","title":"Guidelines for creating a repo","url":"https://github.com/PyGithub/PyGithub/issues/548"},{"author":{"id":"MDQ6VXNlcjMzNTAyNDM=","is_bot":false,"login":"yzhao2012","name":""},"body":"Hello! \r\nThis is more of a request, but we're currently looking for functionality similar to the functionality of:\r\n`git log <commit hash 1> <commit hash 2>` \r\n( or this page: https://github.com/octocat/linguist/compare/octocat:96d29b7%5E%5E%5E%5E%5E...octocat:96d29b7 ).\r\n\r\nI couldn't find any standing documentation on it for pygithub, but I was wondering if this was something that I could request? We're currently iterating over the parents of a commit, until we get the commit we want, then return all the commits during the iteration. However, this method doesn't work when the commits are on a different branch. \r\n\r\nThanks!\r\n","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDYxMDE2NTAwNg==","author":{"login":"nguyenl95"},"authorAssociation":"NONE","body":"Yeah I'm interested in this too","createdAt":"2020-04-07T04:21:52Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/547#issuecomment-610165006","viewerDidAuthor":false}],"createdAt":"2017-03-31T23:22:26Z","number":547,"state":"CLOSED","title":"Get commits between two commits.","url":"https://github.com/PyGithub/PyGithub/issues/547"},{"author":{"id":"MDQ6VXNlcjEyMDUwOTI2","is_bot":false,"login":"swtch1","name":"Josh"},"body":"I am attempting to make a simple connection to my GitHub Enterprise instance but I keep getting a 502 error.  The setup is very simple so I'm a bit perplexed.  I've verified I can reach port 443 on the site address with Python socket.\r\n\r\n`TOKEN = 'abc123'\r\ng = Github(TOKEN, base_url='https://my.enterprise.github.com/api/v3\r\nprint(g.get_user().name)`\r\n\r\nResulting error:\r\n`C:\\Python27\\python.exe \"C:/project/testing.py\"\r\nTraceback (most recent call last):\r\n  File \"C:/project/testing.py\", line 18, in <module>\r\n    print(g.get_user().name)\r\n  File \"C:\\Python27\\lib\\site-packages\\github\\AuthenticatedUser.py\", line 221, in name\r\n    self._completeIfNotSet(self._name)\r\n  File \"C:\\Python27\\lib\\site-packages\\github\\GithubObject.py\", line 251, in _completeIfNotSet\r\n    self._completeIfNeeded()\r\n  File \"C:\\Python27\\lib\\site-packages\\github\\GithubObject.py\", line 255, in _completeIfNeeded\r\n    self.__complete()\r\n  File \"C:\\Python27\\lib\\site-packages\\github\\GithubObject.py\", line 260, in __complete\r\n    self._url.value\r\n  File \"C:\\Python27\\lib\\site-packages\\github\\Requester.py\", line 172, in requestJsonAndCheck\r\n    return self.__check(*self.requestJson(verb, url, parameters, headers, input, cnx))\r\n  File \"C:\\Python27\\lib\\site-packages\\github\\Requester.py\", line 213, in requestJson\r\n    return self.__requestEncode(cnx, verb, url, parameters, headers, input, encode)\r\n  File \"C:\\Python27\\lib\\site-packages\\github\\Requester.py\", line 252, in __requestEncode\r\n    status, responseHeaders, output = self.__requestRaw(cnx, verb, url, requestHeaders, encoded_input)\r\n  File \"C:\\Python27\\lib\\site-packages\\github\\Requester.py\", line 277, in __requestRaw\r\n    requestHeaders\r\n  File \"C:\\Python27\\lib\\httplib.py\", line 1057, in request\r\n    self._send_request(method, url, body, headers)\r\n  File \"C:\\Python27\\lib\\httplib.py\", line 1097, in _send_request\r\n    self.endheaders(body)\r\n  File \"C:\\Python27\\lib\\httplib.py\", line 1053, in endheaders\r\n    self._send_output(message_body)\r\n  File \"C:\\Python27\\lib\\httplib.py\", line 897, in _send_output\r\n    self.send(msg)\r\n  File \"C:\\Python27\\lib\\httplib.py\", line 859, in send\r\n    self.connect()\r\n  File \"C:\\Python27\\lib\\httplib.py\", line 1270, in connect\r\n    HTTPConnection.connect(self)\r\n  File \"C:\\Python27\\lib\\httplib.py\", line 839, in connect\r\n    self._tunnel()\r\n  File \"C:\\Python27\\lib\\httplib.py\", line 821, in _tunnel\r\n    message.strip()))\r\nsocket.error: Tunnel connection failed: 502 Bad Gateway`\r\n\r\nPython Version: 2.7.11 and 3.5.2\r\nPyGithub Version: 1.33","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDMwNDQ0OTk1OQ==","author":{"login":"ctcreel"},"authorAssociation":"NONE","body":"https://stackoverflow.com/questions/21698009/github-api-502-error","createdAt":"2017-05-27T12:50:42Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/546#issuecomment-304449959","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM2MjkxNzI1Ng==","author":{"login":"angelonakosge"},"authorAssociation":"NONE","body":"How did you end up solving your issue? Thx","createdAt":"2018-02-04T15:54:19Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/546#issuecomment-362917256","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM4NDUyMjQ5Ng==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"@swtch1 is this still an issue please?","createdAt":"2018-04-26T05:57:45Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/546#issuecomment-384522496","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM4NDYxNjM5MA==","author":{"login":"swtch1"},"authorAssociation":"NONE","body":"Retested and confirmed.  This is working correctly now.  Thank you for following up.","createdAt":"2018-04-26T12:04:16Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"HOORAY","users":{"totalCount":1}}],"url":"https://github.com/PyGithub/PyGithub/issues/546#issuecomment-384616390","viewerDidAuthor":false}],"createdAt":"2017-03-30T05:15:15Z","number":546,"state":"CLOSED","title":"Issues Connecting with Github Enterprise","url":"https://github.com/PyGithub/PyGithub/issues/546"},{"author":{"id":"MDQ6VXNlcjMxNDcxNg==","is_bot":false,"login":"astrofrog","name":"Thomas Robitaille"},"body":"It looks like ``create_file`` is broken:\r\n\r\n```\r\nimport github\r\ngh = github.Github('...')\r\nuser = gh.get_user()\r\nrepo = user.create_repo('testing')\r\nrepo.create_file('test', 'commit message', 'banana')\r\n```\r\n\r\ngives:\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"test_gh_api.py\", line 7, in <module>\r\n    repo.create_file('test', 'commit message', 'banana')\r\n  File \"/Users/tom/miniconda3/envs/dev/lib/python3.6/site-packages/github/Repository.py\", line 1310, in create_file\r\n    input=put_parameters\r\n  File \"/Users/tom/miniconda3/envs/dev/lib/python3.6/site-packages/github/Requester.py\", line 172, in requestJsonAndCheck\r\n    return self.__check(*self.requestJson(verb, url, parameters, headers, input, cnx))\r\n  File \"/Users/tom/miniconda3/envs/dev/lib/python3.6/site-packages/github/Requester.py\", line 180, in __check\r\n    raise self.__createException(status, responseHeaders, output)\r\ngithub.GithubException.UnknownObjectException: 404 {'message': 'Not Found', 'documentation_url': 'https://developer.github.com/v3'}\r\n```","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDI5NjE3NzYwMg==","author":{"login":"moghya"},"authorAssociation":"NONE","body":"@astrofrog  you're doing it wrong way.\r\n\r\nFirst parameter is path and it has to be relative from root\r\nsimply adding backslash at the start of path works \r\n\r\n`repo.create_file('/test', 'commit message', 'banana')`\r\n\r\nhappy coding :)","createdAt":"2017-04-21T12:28:39Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":2}}],"url":"https://github.com/PyGithub/PyGithub/issues/545#issuecomment-296177602","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDI5ODE4NzY2NA==","author":{"login":"moghya"},"authorAssociation":"NONE","body":"@astrofrog  please review the suggested method and close this issue \r\n","createdAt":"2017-04-29T18:55:33Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/545#issuecomment-298187664","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDU1ODY1NzM2NA==","author":{"login":"shufanhao"},"authorAssociation":"NONE","body":"> @astrofrog you're doing it wrong way.\r\n> \r\n> First parameter is path and it has to be relative from root\r\n> simply adding backslash at the start of path works\r\n> \r\n> `repo.create_file('/test', 'commit message', 'banana')`\r\n> \r\n> happy coding :)\r\n\r\nIt doesn't work for me. ","createdAt":"2019-11-26T14:35:41Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/545#issuecomment-558657364","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs5MTy4X","author":{"login":"VSNSAINIVAS"},"authorAssociation":"NONE","body":"> @astrofrog you're doing it wrong way.\r\n> \r\n> First parameter is path and it has to be relative from root simply adding backslash at the start of path works\r\n> \r\n> `repo.create_file('/test', 'commit message', 'banana')`\r\n> \r\n> happy coding :)\r\n\r\nThis doesnot work for me","createdAt":"2022-10-17T04:14:26Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/545#issuecomment-1280257559","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs5ofhOp","author":{"login":"lendoo73"},"authorAssociation":"NONE","body":"same issue here as well...\r\n\r\n```\r\nauth = Auth.Token(\"token\")\r\ng = Github(auth=auth)\r\nrepo = g.get_repo('myname/GitTest')\r\n\r\nrepo.create_file(\"text.txt\", \"more tests\", \"content\")\r\n```\r\n\r\ngithub.GithubException.UnknownObjectException: 404 {\"message\": \"Not Found\", \"documentation_url\"\r\n\r\nsame result with repo.create_file(\"/text.txt\", \"more tests\", \"content\") too","createdAt":"2023-10-09T14:12:21Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/545#issuecomment-1753093033","viewerDidAuthor":false}],"createdAt":"2017-03-29T12:10:32Z","number":545,"state":"CLOSED","title":"create_file fails","url":"https://github.com/PyGithub/PyGithub/issues/545"},{"author":{"id":"MDQ6VXNlcjIxMjYwMDQ=","is_bot":false,"login":"indrgun","name":"Indra Gunawan"},"body":"The environment variable no_proxy should be checked in case the Github API URL hostname is included.","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDM4MTMwMDA5OQ==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"@indrgun I agree. Would you like to make an PR? I am happy to review.","createdAt":"2018-04-14T03:29:28Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/543#issuecomment-381300099","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM4MTMwMTM3Nw==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"Relates #400","createdAt":"2018-04-14T03:59:50Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/543#issuecomment-381301377","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDUzMTA4NzQ1Ng==","author":{"login":"stale"},"authorAssociation":"NONE","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","createdAt":"2019-09-13T03:48:33Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/543#issuecomment-531087456","viewerDidAuthor":false}],"createdAt":"2017-03-27T18:10:50Z","number":543,"state":"CLOSED","title":"no_proxy is not supported","url":"https://github.com/PyGithub/PyGithub/issues/543"},{"author":{"is_bot":true,"login":"app/"},"body":"Python-jose depends on pycrypto, which is no longer developed at this time. The developer of that project [has said](https://github.com/mpdavis/python-jose/pull/43#issuecomment-284202876) that he will maintain that dependency because it is available on google app engine standard. However, PyCrypto is insecure and has known vulnerabilities.\r\n\r\nIf you want, I can publish a python-jose that depends on cryptography and then you can change your dependency to that package. I am open to whatever is acceptable to eliminate PyCrypto.\r\n\r\n","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDI4OTE5ODEwMQ==","author":{"login":"jayfk"},"authorAssociation":"CONTRIBUTOR","body":"Thanks for raising this issue.\r\n\r\nGiven the lack of responsibilty on upstream to use secure transitive dependencies by default, we should probably switch to pyjwt or something else.\r\n\r\nOn top of that, JWT is needed for integrations support only. We can probably install dependencies for this use case as an extra with pygithub[integrations].\r\n\r\nWhat do you think?\r\n","createdAt":"2017-03-25T08:34:59Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/542#issuecomment-289198101","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDI4OTIyMzk5Ng==","author":{"login":"jzelinskie"},"authorAssociation":"CONTRIBUTOR","body":"Yes, I use pyjwt in another project and highly recommend we switch to it. Cryptography is such a good library.","createdAt":"2017-03-25T16:49:35Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/542#issuecomment-289223996","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDI4OTI0MDI4Mw==","author":{"login":""},"authorAssociation":"NONE","body":"Currently I've submitted a pull request for python-jose that replaces the backend with cryptography. If it isn't merged soon, then I'll publish a replacement package.","createdAt":"2017-03-25T21:20:43Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/542#issuecomment-289240283","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDI4OTQ1Mjc3NQ==","author":{"login":"jayfk"},"authorAssociation":"CONTRIBUTOR","body":"Switched to pyjwt in https://github.com/PyGithub/PyGithub/commit/d447eb13b9f4688a4c981ca03b1b3111fb299142.","createdAt":"2017-03-27T13:27:22Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/542#issuecomment-289452775","viewerDidAuthor":false}],"createdAt":"2017-03-25T05:26:57Z","number":542,"state":"CLOSED","title":"Dependency on python-jose/PyCrypto","url":"https://github.com/PyGithub/PyGithub/issues/542"},{"author":{"id":"MDQ6VXNlcjk4MjA3","is_bot":false,"login":"jwodder","name":"John T. Wodder II"},"body":"The PyGithub documentation (both <http://pygithub.readthedocs.io/en/latest/> and <https://pygithub.github.io/PyGithub/v1/index.html>) is still at version 1.25.2 (released two and a half years ago), even though the project is now at version 1.32.  Please fix this.","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDI5MDk5MTczNw==","author":{"login":"NicoHood"},"authorAssociation":"NONE","body":"Please!","createdAt":"2017-04-02T15:00:32Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/541#issuecomment-290991737","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDMxMDIzMDk2NA==","author":{"login":"ndpete"},"authorAssociation":"NONE","body":"So I don't know much about Sphinx but I tried to build the docs locally and this is a little of what I found. Hopefully this helps someone with a little more knowledge than me.\r\n\r\nLine 324 in doc/conf.py will cause the build to fail immediately. To troubleshoot I commented it out.\r\nLine 356 in doc/conf.py will also fail so I commented that out. \r\n\r\nAfter that It appears the documentation builds successfully however looking through it it looks like some of the newer undocumented methods I've used are formatted funny. And the changelog stuff is super screwy.\r\n\r\nThe conf.py file I was able to get a passing build with: [My Fork](https://github.com/ndpete/PyGithub/blob/master/doc/conf.py)","createdAt":"2017-06-21T23:15:04Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/541#issuecomment-310230964","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM3OTQ1NDY2Nw==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"Fixed.","createdAt":"2018-04-07T09:07:03Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/541#issuecomment-379454667","viewerDidAuthor":false}],"createdAt":"2017-03-23T21:40:35Z","number":541,"state":"CLOSED","title":"Documentation sites out of date","url":"https://github.com/PyGithub/PyGithub/issues/541"},{"author":{"id":"MDQ6VXNlcjI2MTQxMjQy","is_bot":false,"login":"McaDipali","name":"Dipali"},"body":"after installing githubpy\r\n\r\nnext i want to use it\r\nthen \r\nit get error in python like'\r\n\r\n from github import Github\r\nImportError: cannot import name Github\r\n\r\n\r\nplz help me if anyone know how to use","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDI4OTAyNDA0MQ==","author":{"login":"hreeder"},"authorAssociation":"NONE","body":"This repo is [pygithub](https://pypi.python.org/pypi/PyGithub), not [githubpy](https://pypi.python.org/pypi/githubpy), which is a separate project.\r\n\r\nFor the documentation in this repo to be valid for your case, you will need to have installed pygithub.","createdAt":"2017-03-24T13:36:12Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":1}}],"url":"https://github.com/PyGithub/PyGithub/issues/540#issuecomment-289024041","viewerDidAuthor":false}],"createdAt":"2017-03-23T13:24:14Z","number":540,"state":"CLOSED","title":"import error","url":"https://github.com/PyGithub/PyGithub/issues/540"},{"author":{"id":"MDQ6VXNlcjEzNTQzNDcx","is_bot":false,"login":"allevin","name":"Aaron L. Levine"},"body":"When running the [automated testing](https://github.com/PyGithub/PyGithub/blob/master/CONTRIBUTING.md#automated-tests), if http_proxy is setup in the environment, tests will fail with \"AttributeError: ReplayingConnection instance has no attribute 'set_tunnel'\"\r\n\r\nRemoving the http_proxy environment variable fixes the problem.\r\n\r\n```\r\n> python -s -m github.tests PullRequest\r\nEEEEEEEEEEEE\r\n======================================================================\r\nERROR: testAttributes (github.tests.PullRequest.PullRequest)\r\n----------------------------------------------------------------------\r\nTraceback (most recent call last):\r\n  File \"github/tests/PullRequest.py\", line 35, in setUp\r\n    self.repo = self.g.get_user().get_repo(\"PyGithub\")\r\n  File \"github/AuthenticatedUser.py\", line 851, in get_repo\r\n    \"/repos/\" + self.login + \"/\" + name\r\n  File \"github/AuthenticatedUser.py\", line 213, in login\r\n    self._completeIfNotSet(self._login)\r\n  File \"github/GithubObject.py\", line 251, in _completeIfNotSet\r\n    self._completeIfNeeded()\r\n  File \"github/GithubObject.py\", line 255, in _completeIfNeeded\r\n    self.__complete()\r\n  File \"github/GithubObject.py\", line 260, in __complete\r\n    self._url.value\r\n  File \"github/Requester.py\", line 172, in requestJsonAndCheck\r\n    return self.__check(*self.requestJson(verb, url, parameters, headers, input, cnx))\r\n  File \"github/Requester.py\", line 213, in requestJson\r\n    return self.__requestEncode(cnx, verb, url, parameters, headers, input, encode)\r\n  File \"github/Requester.py\", line 252, in __requestEncode\r\n    status, responseHeaders, output = self.__requestRaw(cnx, verb, url, requestHeaders, encoded_input)\r\n  File \"github/Requester.py\", line 269, in __requestRaw\r\n    cnx = self.__createConnection()\r\n  File \"github/Requester.py\", line 345, in __createConnection\r\n    conn.set_tunnel(self.__hostname, self.__port, headers)\r\nAttributeError: ReplayingConnection instance has no attribute 'set_tunnel'\r\n\r\n```","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDM4MTMwMTI1MA==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"@allevin Good catch! I feel the proxy setting is not applicable in automated tests. So what do you say if we unset the `http_proxy` env var during tests?","createdAt":"2018-04-14T03:56:46Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/539#issuecomment-381301250","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM4MTYyMTcyOA==","author":{"login":"allevin"},"authorAssociation":"CONTRIBUTOR","body":"@sfdye It's been a while since I wrote this.  I don't recall all the details on this issue.  However the recommended change did correct the problem for me.\r\n\r\nAlso, BTW, thank you for all you are doing for PyGithub.  There has been tremendous progress on the project since you started addressing the issues and PR's!","createdAt":"2018-04-16T14:37:36Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"HEART","users":{"totalCount":1}}],"url":"https://github.com/PyGithub/PyGithub/issues/539#issuecomment-381621728","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM4MTYyMzg1Mg==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"@allevin Thank you for your comment, it made my day. BTW, we are in the middle of migrating to `requests` from `httplib`, after which the proxy related issues should be addressed automatically. (I hope)","createdAt":"2018-04-16T14:43:34Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/539#issuecomment-381623852","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM4MTYyNzkzNg==","author":{"login":"allevin"},"authorAssociation":"CONTRIBUTOR","body":"@sfdye Glad I could put a smile on your face!\r\n\r\nI have been aware of the effort to move to requests. \r\n\r\nOne question/request.  Is there a way (or does it already exist) to implement a retry function in the low level communications?  I.e. if a request fails, that the PyGithub library could be setup to automatically retry after a user defined delay and with a limited number of retries?  \r\n\r\nOur network is behind an aggressive proxy server/filter and we occasionally lose responses from Github.  This causes comm exceptions that could be avoided if the low level code would just perform an (optional - user configured) retry.  \r\n\r\nI was considering trying to address this in the current code set, but feel its a waste since the code is moving to requests.  I have high level solution (extremely ugly) that I implemented a long time ago but a low level solution would be so much more elegant. \r\n","createdAt":"2018-04-16T14:54:43Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/539#issuecomment-381627936","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM4MTYzODU0NQ==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"How about this:\r\nhttp://docs.python-requests.org/en/latest/api/?highlight=max_retries#requests.adapters.HTTPAdapter\r\n\r\n","createdAt":"2018-04-16T15:08:48Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/539#issuecomment-381638545","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM4MTgzNjM4NA==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"@allevin Can you help me test the alpha release with `requests`. If anything goes well, we can consider adding the retry option.\r\n\r\n`pip install --pre PyGithub==1.40a1`","createdAt":"2018-04-17T04:31:08Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/539#issuecomment-381836384","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM4MjAwODIzMw==","author":{"login":"allevin"},"authorAssociation":"CONTRIBUTOR","body":"Sorry for hijacking the thread on this issue.  Moved conversation regarding retries to #757.","createdAt":"2018-04-17T14:15:12Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/539#issuecomment-382008233","viewerDidAuthor":false}],"createdAt":"2017-03-21T17:12:41Z","number":539,"state":"CLOSED","title":"Automated Testing fails if http_proxy is set in the environment","url":"https://github.com/PyGithub/PyGithub/issues/539"},{"author":{"id":"MDQ6VXNlcjEwMDEzNTE=","is_bot":false,"login":"withoutairs","name":"Chris Brown"},"body":"I'd like to be able to get to Permission values for a User, which is currently a [preview feature](https://developer.github.com/v3/repos/collaborators/#check-if-a-user-is-a-collaborator).\r\n\r\nIn order to do this, the Requester needs to send \"Accept: application/vnd.github.korra-preview\", but the class is currently hardcoded to send only \"application/vnd.github.moondragon+json\".  Maybe instead of a boolean, the api_preview parameter could be a collection of strings that would be added as \"Accepted\" to the header.\r\n\r\nI can try to put up a PR for this, I'm just starting with the issue in case it is something that's been thought through before. ","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDI4NzQ2ODAyMw==","author":{"login":"allevin"},"authorAssociation":"CONTRIBUTOR","body":"@withoutairs \r\n\r\nI am investigating doing something similar for the [review requests preview feature](https://developer.github.com/v3/pulls/reviews/).\r\n\r\nI agree that passing a collection of strings to the api_preview would easier.\r\n\r\nAs a workaround, you can set the \"Accept\" header in the call that populates the object.  Here is my example below (I use inspection instead of review because get_review_comment() is already in the PyGithub API.\r\n\r\nInside of PullRequest.py:\r\n\r\n    def get_inspection_comment(self, id):\r\n        \"\"\"\r\n        :calls: `GET /repos/:owner/:repo/pulls/:number/reviews/:id <http://developer.github.com/v3/issues/comments>`_\r\n        :param id: integer\r\n        :rtype: :class:`github.InspectionComment.InspectionComment`\r\n        \"\"\"\r\n        assert isinstance(id, (int, long)), id\r\n        headers, data = self._requester.requestJsonAndCheck(\r\n            \"GET\",\r\n            self.url + \"/reviews/\" + str(id),\r\n            headers={'Accept': 'application/vnd.github.black-cat-preview+json'}\r\n            #application/vnd.github.black-cat-preview+json\r\n        )\r\n        return github.InspectionComment.InspectionComment(self._requester, headers, data, completed=True)\r\n\r\n    def get_inspection_comments(self):\r\n        \"\"\"\r\n        :calls: `GET /repos/:owner/:repo/pulls/:number/reviews <http://developer.github.com/v3/issues/comments>`_\r\n        :rtype: :class:`github.PaginatedList.PaginatedList` of :class:`github.InspectionComment.InspectionComment`\r\n        \"\"\"\r\n        return github.PaginatedList.PaginatedList(\r\n            github.InspectionComment.InspectionComment,\r\n            self._requester,\r\n            self.url + \"/reviews\",\r\n            None,\r\n            headers={'Accept': 'application/vnd.github.black-cat-preview+json'}\r\n        )\r\n\r\n","createdAt":"2017-03-17T20:52:09Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/535#issuecomment-287468023","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQwMjY1NDI0OQ==","author":{"login":"stale"},"authorAssociation":"NONE","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","createdAt":"2018-07-05T08:58:56Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/535#issuecomment-402654249","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQxOTg2ODQ3OQ==","author":{"login":"stale"},"authorAssociation":"NONE","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","createdAt":"2018-09-10T10:38:13Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/535#issuecomment-419868479","viewerDidAuthor":false}],"createdAt":"2017-03-14T17:28:39Z","number":535,"state":"CLOSED","title":"Support multiple \"api_preview\" values","url":"https://github.com/PyGithub/PyGithub/issues/535"},{"author":{"id":"MDQ6VXNlcjI4NzAx","is_bot":false,"login":"mlainez","name":"Marc Lainez"},"body":"Hi,\r\n\r\nI'm having trouble calling get_repo with the name of a repo I have access to in an organization.\r\n\r\nHere's what I simply do:\r\n```python\r\nrepo = me.get_user().get_repo(name_of_organization_repo_i_have_access_to)\r\n```\r\n\r\nThis is what I get:\r\n````\r\ngithub.GithubException.UnknownObjectException: 404 {'documentation_url': 'https://developer.github.com/v3', 'message': 'Not Found'}\r\n````\r\nIt works fine with a repo associated to my own account. But as soon as I need one from an organization it fails.\r\n\r\nWhat is strange to me is that:\r\n```python\r\nrepos = me.get_user().get_repos()\r\n```\r\nShows the repo in the list as expected.\r\n\r\nAm I missing something obvious?","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDI4NjMwMTU5Nw==","author":{"login":"RichardJTorres"},"authorAssociation":"NONE","body":"+1 I am having the same issue. The problem is that this line sets the user to be the authenticated user explicitly. I can't seem to find another method in the API that allows us access to the repo by full name. \r\n\r\nhttps://github.com/PyGithub/PyGithub/blob/master/github/AuthenticatedUser.py#L851","createdAt":"2017-03-14T02:16:58Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/534#issuecomment-286301597","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDI4NjMwNDg4OQ==","author":{"login":"RichardJTorres"},"authorAssociation":"NONE","body":"@mlainez Actually, looks like we should be using the `get_repo()` method on the main class. So it would be:\r\n\r\n<pre>\r\n>> g = Github(\"user\", \"password\")\r\n>> repo = g.get_repo(\"Org/RepoName\", lazy=False)\r\n>> repo \r\nRepository(full_name=\"Org/RepoName\")\r\n</pre>","createdAt":"2017-03-14T02:39:07Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":11}}],"url":"https://github.com/PyGithub/PyGithub/issues/534#issuecomment-286304889","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM3NzQzMDg0Nw==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"I will probably add this to some example usage page.","createdAt":"2018-03-30T02:48:41Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/534#issuecomment-377430847","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQxMDI5NjQ1NQ==","author":{"login":"PedroGFonseca"},"authorAssociation":"NONE","body":"I'm trying @RichardJTorres's solution, but still get a 404. Can access non private repos, but not organization repos. ","createdAt":"2018-08-03T15:52:50Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/534#issuecomment-410296455","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQxMDI5NzAwNg==","author":{"login":"PedroGFonseca"},"authorAssociation":"NONE","body":"Ah, the problem was that I hadn't given the token the right permissions. Clear. ","createdAt":"2018-08-03T15:54:45Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/534#issuecomment-410297006","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDc1NzQyOTEyOA==","author":{"login":"thecturner"},"authorAssociation":"NONE","body":"> Ah, the problem was that I hadn't given the token the right permissions. Clear.\r\n\r\n@PedroGFonseca do you remember what permissions the token needed for this? I'm experiencing the same issue.","createdAt":"2021-01-10T07:09:33Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/534#issuecomment-757429128","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDc2OTk4MTIwMQ==","author":{"login":"sgupta-wish"},"authorAssociation":"NONE","body":"@thecturner It works for me with the `repo` [scope](https://docs.github.com/en/developers/apps/scopes-for-oauth-apps#available-scopes).","createdAt":"2021-01-29T18:45:36Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/534#issuecomment-769981201","viewerDidAuthor":false}],"createdAt":"2017-03-06T11:07:02Z","number":534,"state":"CLOSED","title":"get_repo sends 404 for repos from organizations","url":"https://github.com/PyGithub/PyGithub/issues/534"},{"author":{"id":"MDQ6VXNlcjEzMjQyMQ==","is_bot":false,"login":"romanlevin","name":"Roman Levin"},"body":"I assume it's the same for other `GithubObjects`.\r\n```python\r\n>>> u = g.get_users()[0]\r\n>>> u\r\nNamedUser(login=\"mojombo\")\r\n>>> u._followers\r\nNotSet\r\n>>> p = pickle.dumps(u)\r\n>>> p\r\n>>> unpickled_user = pickle.loads(p)\r\n>>> unpickled_user\r\nNamedUser(login=\"mojombo\")\r\n>>> unpickled_user == u\r\nTrue\r\n>>> unpickled_user is u\r\nFalse\r\n>>> u._followers\r\nNotSet\r\n>>> u.followers\r\n19969\r\n>>> unpickled_user._followers\r\nNotSet\r\n>>> print(unpickled_user.followers)\r\nNone  # Should be 19969\r\n```","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDQwMjY1NDI1Ng==","author":{"login":"stale"},"authorAssociation":"NONE","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","createdAt":"2018-07-05T08:58:57Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/528#issuecomment-402654256","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQxOTg2ODQ4OQ==","author":{"login":"stale"},"authorAssociation":"NONE","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","createdAt":"2018-09-10T10:38:14Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/528#issuecomment-419868489","viewerDidAuthor":false}],"createdAt":"2017-02-17T22:29:39Z","number":528,"state":"CLOSED","title":"Unpickled NamedUser objects don't autocomplete when getting NotSet attribute","url":"https://github.com/PyGithub/PyGithub/issues/528"},{"author":{"id":"MDQ6VXNlcjM1OTUwMjU=","is_bot":false,"login":"ankona","name":"Chris McBride"},"body":"API Documentation found here:\r\nhttps://developer.github.com/v3/repos/releases/#list-assets-for-a-release\r\nhttps://developer.github.com/v3/repos/releases/#upload-a-release-asset\r\nhttps://developer.github.com/v3/repos/releases/#get-a-single-release-asset\r\nhttps://developer.github.com/v3/repos/releases/#edit-a-release-asset\r\nhttps://developer.github.com/v3/repos/releases/#delete-a-release-asset\r\n\r\nI've created the following PR with the APIs added in:\r\nhttps://github.com/PyGithub/PyGithub/pull/525","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDM3Mzg5NTM5OA==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"Fixed in #525","createdAt":"2018-03-17T05:17:01Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/526#issuecomment-373895398","viewerDidAuthor":false}],"createdAt":"2017-02-09T16:02:05Z","number":526,"state":"CLOSED","title":"Missing support for release asset APIs","url":"https://github.com/PyGithub/PyGithub/issues/526"},{"author":{"id":"MDQ6VXNlcjEzMDQ3MzQ=","is_bot":false,"login":"ANDRIUS-D-ILGUNAS","name":"ADI"},"body":"Hi,\r\n\r\nI don't know if this is the right place to notify someone that the links on https://pygithub.readthedocs.io/en/latest/introduction.html that points to http://jacquev6.net/PyGithub/v1 are dead.  Both links are in the What's Next? section.\r\n\r\nPerhaps they should point to https://pygithub.github.io/PyGithub/v1/reference.html instead?\r\n\r\nIf this isn't the right place, could you please let me know whom I should advise?","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDM3OTQ1NTAzNw==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"This is fixed.","createdAt":"2018-04-07T09:10:25Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/521#issuecomment-379455037","viewerDidAuthor":false}],"createdAt":"2017-02-04T03:26:33Z","number":521,"state":"CLOSED","title":"Docs link is broken","url":"https://github.com/PyGithub/PyGithub/issues/521"},{"author":{"id":"MDQ6VXNlcjMzODYzNA==","is_bot":false,"login":"nhomar","name":"Nhomar [Vauxoo]"},"body":"Hello.\r\n\r\nWe have a lot of things to improve, I ask for permission to refactor some things in order to take care of them.\r\n\r\n1. Coverage, we use internally codecov as here: https://github.com/vauxoo/cfdilib\r\n2. Convert all a little more like what is proposed here: https://jeffknupp.com/blog/2013/08/16/open-sourcing-a-python-project-the-right-way/\r\n3. Automate the publish process to pypi with a -dev for master.\r\n4. Follow more stuff as cookiecutter.\r\n5. Document the release process and the maitainance environment as here: https://github.com/Vauxoo/cfdilib/blob/master/PREPARE_RELEASE.md\r\n6. Enable changelog and bumpversion.\r\n7. Include doctest and autodoc, and its automation to gh-pages as I have it here: https://github.com/Vauxoo/odoo/commit/4db163c40689a6c8d03bce22066c9dfbcb74460e (that's for translations but it can be easily be sent with raw version what I want to show is the process itself).\r\n\r\nI can do that this weekend, but I want ask to maintainers if it is ok for you guys? or maybe you can enlight me a little bit how is the current process for that, maybe it is being done but I do not understand pretty well how.\r\n\r\nRegards.","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDI3MzcxNDIyOQ==","author":{"login":"jayfk"},"authorAssociation":"CONTRIBUTOR","body":"Most of the things you mention are already there:\r\n\r\nTake a look at [manage.sh](https://github.com/PyGithub/PyGithub/blob/master/manage.sh#L4) on how the release process looks like. Running `sh manage.sh publish` runs tests, lets you pick a new version, tags the release, creates a changelog and travis publishes the release to PyPi.\r\n\r\nAdding some automation to this project is a very good Idea, especially when it comes to tools like Coverage.\r\n\r\nIf I had unlimited time I'd probably:\r\n - Rewrite the testing framework and all the tests, switching to something like betamax et. al. and document how to create tests.\r\n - Rip out all the stuff that's in [Requester.py](https://github.com/PyGithub/PyGithub/blob/master/github/Requester.py) and move to requests with sessions.\r\n\r\n\r\n\r\n> Follow more stuff as cookiecutter.\r\n\r\nWhat does this mean?","createdAt":"2017-01-19T08:46:18Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":1}}],"url":"https://github.com/PyGithub/PyGithub/issues/517#issuecomment-273714229","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM2NjgyNjM4OQ==","author":{"login":"labrys"},"authorAssociation":"NONE","body":"> Follow more stuff as cookiecutter.\r\n\r\n@jayfk [cookiecutter](https://github.com/audreyr/cookiecutter) as described by the readme:\r\n\r\n>A command-line utility that creates projects from cookiecutters (project templates), e.g. creating a Python package project from a Python package project template.\r\n\r\nIt's mostly used with templates like [ionelmc](https://github.com/ionelmc/cookiecutter-pylibrary) to set up a new project with things like Tox, Travis, Coveralls etc.","createdAt":"2018-02-19T23:28:51Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/517#issuecomment-366826389","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQwMjY1NDE5Mw==","author":{"login":"stale"},"authorAssociation":"NONE","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","createdAt":"2018-07-05T08:58:49Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/517#issuecomment-402654193","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQxODA1NTY1Mw==","author":{"login":"stale"},"authorAssociation":"NONE","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","createdAt":"2018-09-03T09:23:30Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/517#issuecomment-418055653","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQzNTM4NjM0Ng==","author":{"login":"stale"},"authorAssociation":"NONE","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","createdAt":"2018-11-02T13:50:59Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/517#issuecomment-435386346","viewerDidAuthor":false}],"createdAt":"2017-01-19T04:32:54Z","number":517,"state":"CLOSED","title":"Refactor managing of repository.","url":"https://github.com/PyGithub/PyGithub/issues/517"},{"author":{"id":"MDQ6VXNlcjE5NjYwMjQ0","is_bot":false,"login":"hyadav5","name":"Hemant Yadav"},"body":"Facing problem at the very first step, I know later calls might be smooth. Below is my code:\r\n\r\n#--------------------------\r\nfrom github import Github\r\ng= Github(\"My github user login ID\", \"My github passwd\", \"http://github.com/OpenSCAP\", 1000)\r\nprint( g.get_user().name)    #print None\r\nprint (g.get_repo(\"openscap\").full_name)    #print None\r\nprint (g.get_repo(\"openscap\").name)    #print None\r\nfor repo in g.get_user().get_repos():\r\n\tprint (repo.name)    # Giving below traceback.\r\n#---------------------------\r\n\r\nTraceback (most recent call last):\r\n  File \"C:\\MyDrive\\SecureShield\\GitHub\\src\\mygit.py\", line 10, in <module>\r\n    print (repo.name)\r\n  File \"C:\\Python27\\Lib\\site-packages\\github\\Repository.py\", line 435, in name\r\n    self._completeIfNotSet(self._name)\r\n  File \"C:\\Python27\\Lib\\site-packages\\github\\GithubObject.py\", line 248, in _completeIfNotSet\r\n    self._completeIfNeeded()\r\n  File \"C:\\Python27\\Lib\\site-packages\\github\\GithubObject.py\", line 252, in _completeIfNeeded\r\n    self.__complete()\r\n  File \"C:\\Python27\\Lib\\site-packages\\github\\GithubObject.py\", line 257, in __complete\r\n    self._url.value\r\n  File \"C:\\Python27\\Lib\\site-packages\\github\\Requester.py\", line 172, in requestJsonAndCheck\r\n    return self.__check(*self.requestJson(verb, url, parameters, headers, input, cnx))\r\n  File \"C:\\Python27\\Lib\\site-packages\\github\\Requester.py\", line 213, in requestJson\r\n    return self.__requestEncode(cnx, verb, url, parameters, headers, input, encode)\r\n  File \"C:\\Python27\\Lib\\site-packages\\github\\Requester.py\", line 243, in __requestEncode\r\n    url = self.__makeAbsoluteUrl(url)\r\n  File \"C:\\Python27\\Lib\\site-packages\\github\\Requester.py\", line 304, in __makeAbsoluteUrl\r\n    if url.startswith(\"/\"):\r\nAttributeError: 'NoneType' object has no attribute 'startswith'\r\n\r\nI know, I might be doing some wrong, but I have tried all the way and finally boiled down to this error. But unfortunetly got very less information on google. Any idea, what I am doind wrong. Have raised the issue over stackOverflow also.\r\n\r\nhttp://stackoverflow.com/questions/41696232/not-able-to-instantiate-pygithub-modules-github-object\r\n\r\nThanks,\r\nHemant","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDI3MzQxOTQ5NQ==","author":{"login":"jayfk"},"authorAssociation":"CONTRIBUTOR","body":"Your GitHub password has just been sent to ~62 people by mail. Please change it.","createdAt":"2017-01-18T09:00:02Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":2}}],"url":"https://github.com/PyGithub/PyGithub/issues/515#issuecomment-273419495","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDI3NjkyNzM2MQ==","author":{"login":"kemsta"},"authorAssociation":"NONE","body":"change base_url to 'https://api.github.com' or delete him","createdAt":"2017-02-02T10:58:06Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/515#issuecomment-276927361","viewerDidAuthor":false}],"createdAt":"2017-01-18T08:53:43Z","number":515,"state":"CLOSED","title":"Cannot get the access to Github API, getting 404 error while connecting.","url":"https://github.com/PyGithub/PyGithub/issues/515"},{"author":{"id":"MDQ6VXNlcjc4NzczNzE=","is_bot":false,"login":"zhigangh","name":"zhiganghuang"},"body":"Hi,\r\nI know i can use \"PyGithub Error Handling\" to handling error like this:\r\n```\r\n        try:\r\n            self.g.get_user().create_key(\"Bad key\", \"xxx\")\r\n        except github.GithubException, exception:\r\n            raised = True\r\n```\r\nBut how to handling error when i used Pagination?\r\nFor example:\r\n```\r\nfor repo in user.get_repos():\r\n    print repo.name\r\n```\r\nI alway get `ssl.SSLError: The read operation timed out` in Pagination.\r\n```\r\nTraceback (most recent call last):\r\n  File \"getRepositories.py\", line 230, in <module>\r\n    GetRepos(o)\r\n  File \"getRepositories.py\", line 28, in __init__\r\n    self.getGithubOrganizationMembers()\r\n  File \"getRepositories.py\", line 173, in getGithubOrganizationMembers\r\n    self.getGithubMembersRepos(owner_login)\r\n  File \"getRepositories.py\", line 179, in getGithubMembersRepos\r\n    for repos in members_repos:\r\n  File \"/usr/local/lib/python2.7/dist-packages/github/PaginatedList.py\", line 49, in __iter__\r\n    newElements = self._grow()\r\n  File \"/usr/local/lib/python2.7/dist-packages/github/PaginatedList.py\", line 61, in _grow\r\n    newElements = self._fetchNextPage()\r\n  File \"/usr/local/lib/python2.7/dist-packages/github/PaginatedList.py\", line 162, in _fetchNextPage\r\n    headers=self.__headers\r\n  File \"/usr/local/lib/python2.7/dist-packages/github/Requester.py\", line 172, in requestJsonAndCheck\r\n    return self.__check(*self.requestJson(verb, url, parameters, headers, input, cnx))\r\n  File \"/usr/local/lib/python2.7/dist-packages/github/Requester.py\", line 213, in requestJson\r\n    return self.__requestEncode(cnx, verb, url, parameters, headers, input, encode)\r\n  File \"/usr/local/lib/python2.7/dist-packages/github/Requester.py\", line 252, in __requestEncode\r\n    status, responseHeaders, output = self.__requestRaw(cnx, verb, url, requestHeaders, encoded_input)\r\n  File \"/usr/local/lib/python2.7/dist-packages/github/Requester.py\", line 279, in __requestRaw\r\n    response = cnx.getresponse()\r\n  File \"/usr/lib/python2.7/httplib.py\", line 1089, in getresponse\r\n    response.begin()\r\n  File \"/usr/lib/python2.7/httplib.py\", line 444, in begin\r\n    version, status, reason = self._read_status()\r\n  File \"/usr/lib/python2.7/httplib.py\", line 400, in _read_status\r\n    line = self.fp.readline(_MAXLINE + 1)\r\n  File \"/usr/lib/python2.7/socket.py\", line 476, in readline\r\n    data = self._sock.recv(self._rbufsize)\r\n  File \"/usr/lib/python2.7/ssl.py\", line 341, in recv\r\n    return self.read(buflen)\r\n  File \"/usr/lib/python2.7/ssl.py\", line 260, in read\r\n    return self._sslobj.read(len)\r\nssl.SSLError: The read operation timed out\r\n```","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDQyNzY3Mzg2Nw==","author":{"login":"0x48piraj"},"authorAssociation":"NONE","body":"Same error.\r\n```\r\n\r\npulls = repo.get_pulls(state='closed')\r\n for p in pulls:\r\n```","createdAt":"2018-10-07T18:07:06Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/514#issuecomment-427673867","viewerDidAuthor":false}],"createdAt":"2017-01-12T03:31:30Z","number":514,"state":"CLOSED","title":"handling error when used Pagination","url":"https://github.com/PyGithub/PyGithub/issues/514"},{"author":{"id":"MDQ6VXNlcjEyMzY2ODc=","is_bot":false,"login":"dpocock","name":"Daniel Pocock"},"body":"If I query an issue and access ```issue.created_at.tzinfo```, it is ```None```, indicating a naive datetime object\r\n\r\nThe values always appear to be UTC values so the ```tzinfo``` should be set to UTC (offset 0)\r\n\r\nIf the values are naive, all kinds of unusual bugs can occur in programs that try to insert the values into databases or other systems that assume a naive datetime is in local time.","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDQwMjYzMDE0OQ==","author":{"login":"stale"},"authorAssociation":"NONE","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","createdAt":"2018-07-05T07:26:27Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/512#issuecomment-402630149","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQwODk2OTIxNA==","author":{"login":"BBI-YggyKing"},"authorAssociation":"CONTRIBUTOR","body":"It would be great if the main Github object provided a mechanism for setting desired time zone, and that all retrieved datetimes would respect it. Alternatively, make all times timezone aware based on their local context - for example the datetime on a commit should indicate the timezone where the commit occurred.","createdAt":"2018-07-30T18:45:37Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/512#issuecomment-408969214","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQwODk3MjQ3Mw==","author":{"login":"BBI-YggyKing"},"authorAssociation":"CONTRIBUTOR","body":"By the way, for anyone arriving here who wants to get the PyGithub datetimes converted to a particular time zone, this should help:\r\n```\r\nimport pytz  # Need to \"pip install pytz\"\r\ndef LocalDateTimeFromUTC(utc):\r\n    tzLocal = pytz.timezone('America/Vancouver')  # insert your time zone here (list available here: https://stackoverflow.com/questions/13866926/is-there-a-list-of-pytz-timezones)\r\n    return pytz.utc.localize(utc).astimezone(tzLocal)\r\n```","createdAt":"2018-07-30T18:55:53Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/512#issuecomment-408972473","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQyNTU0NjUyNQ==","author":{"login":"stale"},"authorAssociation":"NONE","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","createdAt":"2018-09-28T19:48:44Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/512#issuecomment-425546525","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDUzMDE2NDQ3Mw==","author":{"login":"docktermj"},"authorAssociation":"NONE","body":"I ran into this issue with when coding\r\n\r\n```python\r\n                        created_at_epoch = int(comment.created_at.timestamp())\r\n```\r\n\r\nhttps://github.com/docktermj/python-github-tasks/blob/5014d05990b181aec36b9fe2c8374450ec66dad8/github-tasks.py#L688","createdAt":"2019-09-10T23:58:59Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/512#issuecomment-530164473","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDUzMDE5NTA3NQ==","author":{"login":"docktermj"},"authorAssociation":"NONE","body":"Is this a reasonable work-around?\r\n\r\n```python\r\nlocal_timezone = pytz.timezone(\"GMT\")\r\ncreated_at = local_timezone.localize(comment.created_at)\r\ncreated_at_epoch = int(created_at.timestamp())\r\n```","createdAt":"2019-09-11T02:38:48Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/512#issuecomment-530195075","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDUzMDE5NjE1Mw==","author":{"login":"docktermj"},"authorAssociation":"NONE","body":"@dpocock @bbi-yggy @sfdye @s-t-e-v-e-n-k \r\n\r\nThis is no longer a stale issue.   How can this issue be reopened?   ...or do I open another issue?","createdAt":"2019-09-11T02:44:45Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/512#issuecomment-530196153","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDUzMDE5NjM3NQ==","author":{"login":"docktermj"},"authorAssociation":"NONE","body":"@sfdye,  thank you!  I'll close #1218 ","createdAt":"2019-09-11T02:45:55Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/512#issuecomment-530196375","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDU1MjE1ODU1Mg==","author":{"login":"stale"},"authorAssociation":"NONE","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","createdAt":"2019-11-10T03:21:19Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/512#issuecomment-552158552","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDU1NDgxMTM2MA==","author":{"login":"docktermj"},"authorAssociation":"NONE","body":"@dpocock @bbi-yggy @sfdye @s-t-e-v-e-n-k\r\n\r\nThis is no longer a stale issue. How can this issue be reopened? ...or do I open another issue?","createdAt":"2019-11-18T01:13:19Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/512#issuecomment-554811360","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDU3NTQzNTI0OQ==","author":{"login":"stale"},"authorAssociation":"NONE","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","createdAt":"2020-01-17T02:22:08Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/512#issuecomment-575435249","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDU3NzQ2OTA0Nw==","author":{"login":"docktermj"},"authorAssociation":"NONE","body":"@dpocock @bbi-yggy @sfdye @s-t-e-v-e-n-k\r\n\r\nThis is no longer a stale issue. How can this issue be reopened? ...or do I open another issue?\r\n\r\nOr is it fixed?","createdAt":"2020-01-23T01:52:19Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/512#issuecomment-577469047","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDYwMjM5OTcxMw==","author":{"login":"stale"},"authorAssociation":"NONE","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","createdAt":"2020-03-23T05:51:05Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/512#issuecomment-602399713","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDY0MzcyMDkyMQ==","author":{"login":"dato"},"authorAssociation":"NONE","body":"It'd be nice to see this fixed. It can be trivially fixed in application code:\r\n\r\n```\r\nauthor_date = commit.author.date.replace(tzinfo=datetime.timezone.utc)\r\n```\r\n\r\nbut a strong argument for fixing it in the library is that it's easy to forget to replace tzinfo _on every single date use_.\r\n\r\nThanks for considering.","createdAt":"2020-06-14T05:29:23Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/512#issuecomment-643720921","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDY0MzczNDc0Mg==","author":{"login":"s-t-e-v-e-n-k"},"authorAssociation":"COLLABORATOR","body":"This might be a little bit of 'perfect is the enemy of good', but I've been wanting to solve this by allowing users to pass in a timezone to the Github() constructor, *but* there's no good library without awkward sharp edges to parse things like 'Australia/Sydney' and 'Europe/Berlin' into what GitHub is expecting. But it has been a little while since I dug into this code.","createdAt":"2020-06-14T08:19:25Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/512#issuecomment-643734742","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDY3NDQ5Njc1MA==","author":{"login":"stale"},"authorAssociation":"NONE","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","createdAt":"2020-08-16T08:17:59Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/512#issuecomment-674496750","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDY5Nzc1OTAzNg==","author":{"login":"dato"},"authorAssociation":"NONE","body":"Given that (last time I looked) times from Github API always come in UTC, even when the original (commit date was not UTC), it may be best to leave them as naive datetime objects after all. ","createdAt":"2020-09-23T17:35:39Z","includesCreatedEdit":true,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/512#issuecomment-697759036","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDY5ODc1ODExMQ==","author":{"login":"Saviq"},"authorAssociation":"NONE","body":"Well, if it's known they're in UTC, why would keeping them naive be better?","createdAt":"2020-09-25T06:55:53Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":1}}],"url":"https://github.com/PyGithub/PyGithub/issues/512#issuecomment-698758111","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDY5ODc3MTg4Mw==","author":{"login":"dato"},"authorAssociation":"NONE","body":"Because they're lossy. They're (if I recall correctly) unconditionally in UTC (`+0000`), whereas the actual commit as stored in Git itself, do record the timezone offset (e.g. `+0300`).\r\n\r\nSo I believe it's better to keep them naive, because it allows for the following semantics:\r\n\r\n  - if PyGithub gives you a naive datetime, it's in UTC, as per Github's default behavior\r\n  - if PyGithub gives you a non-naive datetime, it's because Github started exposing the real timezone information (`+0300` in the date string, or true `+0000` in the date string), and we've applied it for you\r\n\r\nIf you start marking Github's current behavior as non-naive, there won't be a way to distinguish a proper UTC timestamp (recorded in Git as `+0000`), or Github defaulting to UTC.\r\n\r\n(Well, re: \"there won't be a way\", there could be others; the one I proposed above wouldn't work.)\r\n\r\n----\r\n\r\nIt's true that it imposes a bit more work on library users at the present time—but, as a library user, I prefer this kind of control. (Personally, for example, upon receiving a naive date, I apply the timezone of the _server_ the commit was generated in. Which is not quite as having the actual metadata from Git, but it's close enough for my usecase.)","createdAt":"2020-09-25T07:29:50Z","includesCreatedEdit":true,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/512#issuecomment-698771883","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDc5MTMzNTQzMw==","author":{"login":"RJPercival"},"authorAssociation":"NONE","body":"@dato The problem is that users will deal the naive datetimes by calling `my_datetime.replace(tzinfo=datetime.timezone.utc)` (as you can see in this thread). That works fine while you're returning naive datetimes but, if you ever made your proposed change of returning non-naive datetimes with a non-UTC timezone, you'd introduce bugs into every bit of code that does that (since it'll overwrite the timezone with UTC without adjusting the time appropriately). Really, the only options available to PyGithub IMO are to keep returning naive datetimes or to return non-naive datetimes with the UTC timezone (and save your users having to implement that workaround).","createdAt":"2021-03-05T10:39:13Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":3}}],"url":"https://github.com/PyGithub/PyGithub/issues/512#issuecomment-791335433","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs5ROHSe","author":{"login":"jgehrcke"},"authorAssociation":"NONE","body":"I worked around this behavior in all projects I have used pygithub in. Examples:\r\n\r\nhttps://github.com/jgehrcke/dcos-dev-prod-analysis/blob/389e37561698a0bd4b1b8c76e6a395023cb260be/dcos-dev-prod-analysis.py#L585\r\n```python\r\n    if ocs_to_analyze:\r\n        oldest_created_at = min(c['comment_obj'].created_at for c in ocs_to_analyze)\r\n        newest_created_at = max(c['comment_obj'].created_at for c in ocs_to_analyze)\r\n        # `oldest_created_at` is a naive timezone object representing the time\r\n        # of the comment creation in UTC. GitHub returns tz information, but PyGitHub\r\n        # does not parse it properly. See\r\n        # https://github.com/PyGithub/PyGithub/blob/365a0a24d3d2f06eeb4c93b4487fcfb88ae95dd0/github/GithubObject.py#L168\r\n        # and https://github.com/PyGithub/PyGithub/issues/512 and\r\n        # https://stackoverflow.com/a/30696682/145400.\r\n        reportfragment.write(f'Oldest override command issued at {oldest_created_at} (UTC), ')\r\n        reportfragment.write(f'newest issued at {newest_created_at} (UTC).')\r\n```\r\n\r\n\r\n\r\nhttps://github.com/jgehrcke/github-repo-stats/blob/306db38ad131cab2aa5f2cd3062bf6f8aa78c1aa/fetch.py#L350\r\n\r\n\r\n```python\r\n    # The GitHub API returns ISO 8601 timestamp strings encoding the timezone\r\n    # via the Z suffix, i.e. Zulu time, i.e. UTC. pygithub doesn't parse that\r\n    # timezone. That is, whereas the API returns `starred_at` in UTC, the\r\n    # datetime obj created by pygithub is a naive one. Correct for that.\r\n    forktimes_aware = [pytz.timezone(\"UTC\").localize(f.created_at) for f in forks]\r\n```\r\n\r\n","createdAt":"2022-12-22T10:13:55Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/512#issuecomment-1362654366","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs5kgwYf","author":{"login":"awaisdar001"},"authorAssociation":"NONE","body":"I hope this be helpful for you. \r\n\r\n```\r\nfrom github import Github\r\nimport pytz\r\nfrom datetime import datetime\r\n\r\n# Create a Github instance with your access token\r\naccess_token = 'YOUR_ACCESS_TOKEN'\r\ngithub = Github(access_token)\r\n\r\n# Get the repository\r\nrepository = github.get_repo(\"owner/repo\")\r\n\r\n# Get a specific pull request (replace with the actual pull request number)\r\npull_request_number = 123\r\npull_request = repository.get_pull(pull_request_number)\r\n\r\n# Retrieve the created_at timestamp\r\ncreated_at_utc = pull_request.created_at\r\n\r\n# Define timezone offsets for Pakistan (PKT) and Kuwait\r\ntimezone_offsets = {\r\n    'PKT': timedelta(hours=5),  # Pakistan Time (UTC+5)\r\n    'Kuwait': timedelta(hours=3),  # Kuwait Time (UTC+3)\r\n    ...\r\n}\r\n\r\n# Convert the timestamp to Pakistan Time (PKT) and Kuwait Time\r\ncreated_at_pkt = created_at_utc + timezone_offsets['PKT']\r\ncreated_at_kuwait = created_at_utc + timezone_offsets['Kuwait']\r\n\r\nprint(f'PKT Time: {created_at_pkt}')\r\nprint(f'Kuwait Time: {created_at_kuwait}')\r\n\r\n```","createdAt":"2023-08-21T13:14:18Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/512#issuecomment-1686308383","viewerDidAuthor":false}],"createdAt":"2017-01-02T19:54:31Z","number":512,"state":"CLOSED","title":"Datetime returned is naive, should be UTC","url":"https://github.com/PyGithub/PyGithub/issues/512"},{"author":{"id":"MDQ6VXNlcjgwNjU5MTM=","is_bot":false,"login":"OrkoHunter","name":"Himanshu Mishra"},"body":"Hello,\r\n\r\nI was unable to find the link for the documentation of the library. I cloned it and built the doc myself. It would be great to have the docs configured over `readthedocs.io`.","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDI2OTM5NTgzNg==","author":{"login":"jidicula"},"authorAssociation":"NONE","body":"I've been using http://pygithub.readthedocs.org/en/stable, which is linked in the README in this button: \r\n![screen shot 2016-12-27 at 6 05 30 pm](https://cloud.githubusercontent.com/assets/12765385/21510242/26839cf0-cc5f-11e6-9a20-08f99a2d4f20.png)\r\n\r\nI'm not sure whether it's updated though, because it seems to be missing the \"update_file\" function. Can you link to your clone of the docs?\r\n","createdAt":"2016-12-27T23:08:58Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/509#issuecomment-269395836","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDI2OTM5NjE2OQ==","author":{"login":"OrkoHunter"},"authorAssociation":"NONE","body":"I'm sorry, I didn't look in the badges. :)\r\nI still wish to have a section of documentation in the Readme.","createdAt":"2016-12-27T23:12:23Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/509#issuecomment-269396169","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDI2OTM5NjM0NA==","author":{"login":"jidicula"},"authorAssociation":"NONE","body":"> I still wish to have a section of documentation in the Readme.\r\n\r\nI would too :)","createdAt":"2016-12-27T23:14:10Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/509#issuecomment-269396344","viewerDidAuthor":false}],"createdAt":"2016-12-27T07:01:51Z","number":509,"state":"CLOSED","title":"Documentation link","url":"https://github.com/PyGithub/PyGithub/issues/509"},{"author":{"id":"MDQ6VXNlcjIwMzYwNzk0","is_bot":false,"login":"tedg-cisco","name":"Ted Gauthier"},"body":"GitHub License API is not supported:  https://developer.github.com/v3/licenses/#get-the-contents-of-a-repositorys-license\r\n\r\nWe need to programmatically determine the open source license associated with a repository where the open source license was specified when the repository was created.\r\nWhen would that be possible?","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDM3MzI0MTExOA==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"@tedg-cisco I am aware of this. See #724 \r\n\r\nIf you really want this feature, you could submit a PR and I will review or someone else could take it but that will take some time.\r\n","createdAt":"2018-03-15T02:37:10Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/508#issuecomment-373241118","viewerDidAuthor":false}],"createdAt":"2016-12-21T14:33:52Z","number":508,"state":"CLOSED","title":"Repository.get_license() not supported","url":"https://github.com/PyGithub/PyGithub/issues/508"},{"author":{"id":"MDQ6VXNlcjExMTgxNDM3","is_bot":false,"login":"lbrownell-gpsw","name":"Lonnie Brownell"},"body":"Here's what I'm doing.  All's well until I try either method to add a user.\r\n\r\nDefinitions:\r\n\r\n- args.org:  The organization name; the team and the user are both in this org.\r\n- args.team: The team name to add the user as a member\r\n- args.token: Github oauth token.\r\n- args.user:  The login name of the user to add.  This user is a member of the org, but not yet of the team -- which is what I'm trying to do, add the user to the team.  Note that for memberships, it shouldn't matter if the user is a member of the org or not, as it will invite the user to the org and, if accepted, add them to the team.  Very handy that.\r\n```\r\nfrom github import Github\r\ngh = Github(token)\r\norg = gh.get_organization(args.org)\r\nteam = None\r\n# Find the team ID.\r\nfor t in org.get_teams():\r\n    if t.name == args.team:\r\n        team = t\r\n        break\r\n\r\nif team:\r\n    team.add_membership(args.user)\r\n    team.add_to_members(args.user)\r\n```\r\nIn each case, I get the following:\r\n```\r\nTraceback (most recent call last):\r\n  File \"addUsersToTeamInOrg.py\", line 52, in <module>\r\n    team.add_to_members(args.user)\r\n  File \"C:\\Python27\\lib\\site-packages\\github\\Team.py\", line 122, in add_to_members\r\n    assert isinstance(member, github.NamedUser.NamedUser), member\r\nAssertionError: joe-user\r\n```\r\nNote that \"joe-user\" isn't the user login used, but the one that was used is valid and should've worked. Directly calling the APIs did work, in fact.\r\n\r\nIn the github API documentation, you supply the login ID for `username`:\r\n```\r\nPUT /teams/:id/members/:username\r\nPUT /teams/:id/memberships/:username\r\n```\r\n\r\nOne other thing:  For `memberships`, there is an optional `role` parameter, which you also don't seem to support.\r\n\r\nThanks.","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDI2ODMxNDQzMQ==","author":{"login":"lbrownell-gpsw"},"authorAssociation":"NONE","body":"Oh hell, nevermind...mostly.  You pass the user object, not the login name when `username` is used.  Duh.\r\n\r\nHowever, that last thing...is the `role` parameter for memberships working?","createdAt":"2016-12-20T18:08:20Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/507#issuecomment-268314431","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDI2ODMzNjQ4Mw==","author":{"login":"lbrownell-gpsw"},"authorAssociation":"NONE","body":"But...how to you get a` NamedUser`?  If I have a `username` (e.g., their login ID), how can I get a NamedUser object for that, without search thru an organization or team?  E.g., what's your implementation for `GET /users/:username`?  If you want to use the `membership` action to invite someone from outside the organization, searching for them won't work.","createdAt":"2016-12-20T19:34:48Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/507#issuecomment-268336483","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDI2ODMzODY5Mw==","author":{"login":"lbrownell-gpsw"},"authorAssociation":"NONE","body":"Damn...so, yeah just get_user(username) does the trick.\r\n\r\nI'm lame, and your docs are lacking...it's a tough combo.  :-)\r\n\r\nHowever...still, please look into the `membership` `role` parameter.","createdAt":"2016-12-20T19:42:43Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/507#issuecomment-268338693","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDI3MzYzNDc3NQ==","author":{"login":"bbriggs"},"authorAssociation":"NONE","body":"+1 for showing me how to get a NamedUser ;)","createdAt":"2017-01-18T23:25:31Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/507#issuecomment-273634775","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDMxODQxMTk3MA==","author":{"login":"suranc"},"authorAssociation":"NONE","body":"@lbrownell-gpsw I had an use case for the `membership` `role` parameter, and added it in pull request #602 \r\n\r\nHowever, I have just opened the pull request, so it has not yet been merged.","createdAt":"2017-07-27T16:18:03Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/507#issuecomment-318411970","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM2NTUwMjkyNw==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"Fixed in #638 ","createdAt":"2018-02-14T05:46:43Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/507#issuecomment-365502927","viewerDidAuthor":false}],"createdAt":"2016-12-20T17:24:25Z","number":507,"state":"CLOSED","title":"Problems with NamedUser and membership","url":"https://github.com/PyGithub/PyGithub/issues/507"},{"author":{"id":"MDQ6VXNlcjQwMTM0ODU=","is_bot":false,"login":"rmamba","name":"Red Mamba"},"body":"```\r\nFile \"D:\\GIT\\bitbucket.com\\gitLabels\\src\\flask_website\\githubwrapper.py\", line 180, in set_labels\r\n    _repo.create_label(\"Test label\", \"00ff00\")\r\n  File \"C:\\Python27\\lib\\site-packages\\github\\Repository.py\", line 932, in create_label\r\n    input=post_parameters\r\n  File \"C:\\Python27\\lib\\site-packages\\github\\Requester.py\", line 172, in requestJsonAndCheck\r\n    return self.__check(*self.requestJson(verb, url, parameters, headers, input, cnx))\r\n  File \"C:\\Python27\\lib\\site-packages\\github\\Requester.py\", line 180, in __check\r\n    raise self.__createException(status, responseHeaders, output)\r\nUnknownObjectException: 404 {u'documentation_url': u'https://developer.github.com/v3/issues/labels/#create-a-label', u'message': u'Not Found'}\r\n```","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDI2NjI3Nzg3Ng==","author":{"login":"rmamba"},"authorAssociation":"NONE","body":"This happens when using token auth instead of user/pass for pyGitHub. And my app uses token authentication.","createdAt":"2016-12-11T11:56:25Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/504#issuecomment-266277876","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM3OTY2MTQxNQ==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"In that case, I suspect the token does not have the permission to create a label. Feel free to re-open if this is still an issue.","createdAt":"2018-04-09T07:33:53Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/504#issuecomment-379661415","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDU0NjQ5NjMyMw==","author":{"login":"jminardi"},"authorAssociation":"NONE","body":"What permissions are needed to create labels? I would assume the same permissions needed to create issues, but I am currently able to create issues and still get a 404 on `repo.create_label()`","createdAt":"2019-10-25T20:13:06Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/504#issuecomment-546496323","viewerDidAuthor":false}],"createdAt":"2016-12-10T22:18:34Z","number":504,"state":"CLOSED","title":"Repository.create_label fails with UnknownObjectException: 404","url":"https://github.com/PyGithub/PyGithub/issues/504"},{"author":{"id":"MDQ6VXNlcjE2MzY1ODAz","is_bot":false,"login":"Harshdeep1996","name":"Harshdeep "},"body":"Can we get a paginated list of all the pull requests within a certain date? \r\n```\r\ng = Github(token, per_page=100)\r\norg = g.get_organization('cloudant')\r\ncode = org.get_repo('chef-repo')\r\npaignated_list = code.get_pulls(state='closed') ```\r\n\r\nlike can we use `get_pulls` for a certain date range?","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDM3OTY2NTY4NA==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"Yes there is.\r\n\r\nuse the `g.search_issues()` method:\r\nhttps://developer.github.com/v3/search/#search-issues\r\n\r\nBecause pull request IS also considered an issue.","createdAt":"2018-04-09T07:51:44Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/502#issuecomment-379665684","viewerDidAuthor":false}],"createdAt":"2016-12-08T14:36:34Z","number":502,"state":"CLOSED","title":"Get pull requests on the basis of some parameter","url":"https://github.com/PyGithub/PyGithub/issues/502"},{"author":{"id":"MDQ6VXNlcjkzNTI1NjA=","is_bot":false,"login":"rikibarel","name":"Riki Barel"},"body":"Hi,\r\nWhen are you planning to release new version ?\r\nI am using version 2.1 , and protect_branch not there\r\nThanks a lot \r\nRiki","comments":[],"createdAt":"2016-12-07T07:55:32Z","number":501,"state":"CLOSED","title":"protect_branch","url":"https://github.com/PyGithub/PyGithub/issues/501"},{"author":{"id":"MDQ6VXNlcjgzNzUyNw==","is_bot":false,"login":"sjcorbett","name":"Sam Corbett"},"body":"Example using Python 2.7:\r\n```\r\nfrom github import Github\r\ng = Github(user, token)\r\nr = g.get_repo(\"apache/brooklyn-server\")\r\nr.get_pull(465)\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"/Users/sam/.virtualenvs/brooklyn-changelog/lib/python2.7/site-packages/github/PullRequest.py\", line 48, in __repr__\r\n    return self.get__repr__({\"number\": self._number.value, \"title\": self._title.value})\r\n  File \"/Users/sam/.virtualenvs/brooklyn-changelog/lib/python2.7/site-packages/github/GithubObject.py\", line 226, in get__repr__\r\n    params=\", \".join(list(format_params(params)))\r\n  File \"/Users/sam/.virtualenvs/brooklyn-changelog/lib/python2.7/site-packages/github/GithubObject.py\", line 223, in format_params\r\n    yield '{k}=\"{v}\"'.format(k=k, v=v) if isinstance(v, (str, unicode)) else '{k}={v}'.format(k=k, v=v)\r\nUnicodeEncodeError: 'ascii' codec can't encode character u'\\u2026' in position 69: ordinal not in range(128)\r\n```\r\n\r\nThe character in question is '…'","comments":[],"createdAt":"2016-11-29T17:37:00Z","number":494,"state":"CLOSED","title":"GithubObject get__repr__ chokes on non-ascii values","url":"https://github.com/PyGithub/PyGithub/issues/494"},{"author":{"id":"MDQ6VXNlcjE1MDc5MDIy","is_bot":false,"login":"kinmanz","name":"kinmanz"},"body":"I have 100 repositories objects and make 100 sequential requests on them \r\n\r\n`repo.get_stats_contributors() `\r\n\r\nBy time this requests start to return None objects, I sure it happens because of abusing of rate limit, in that case I want to get **Retry-After** header to wait and continue again.\r\n\r\nhttps://developer.github.com/guides/best-practices-for-integrators/#dealing-with-rate-limits\r\n\r\nHow can I get the header?\r\n","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDM5OTM2NjI4Nw==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"I suspect this is not due to rate limit but rather a duplicate of #564. Github calculates this stats on demand so we need to wait for some time for it to finish. #791 should resolve it.\r\n\r\n\r\n","createdAt":"2018-06-22T08:33:46Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/493#issuecomment-399366287","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM5OTM3MjU5Mg==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"Closing as #791 is merged.","createdAt":"2018-06-22T08:56:09Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/493#issuecomment-399372592","viewerDidAuthor":false}],"createdAt":"2016-11-27T16:22:34Z","number":493,"state":"CLOSED","title":"repo.get_stats_contributors() return None and how get Retry-After.","url":"https://github.com/PyGithub/PyGithub/issues/493"},{"author":{"id":"MDQ6VXNlcjEwMTQyNzU3","is_bot":false,"login":"tasugi","name":"Takahiro Sugiura"},"body":"I have tried to search code like\r\n```\r\ng.search_code(query='addClass', language='js', repo='jquery/jquery', in='file')\r\n```\r\nHowever, I can't do that because the word 'in' conflicts Python's syntax.\r\nAre there any method to solve this probrem?","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDI5NjI0MjA1MQ==","author":{"login":"ClaudiuCreanga"},"authorAssociation":"NONE","body":"it should be like this\r\n`g.search_code(\"keyword in:filename.php language:xml\")`","createdAt":"2017-04-21T16:42:05Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":1}}],"url":"https://github.com/PyGithub/PyGithub/issues/489#issuecomment-296242051","viewerDidAuthor":false}],"createdAt":"2016-11-19T06:30:50Z","number":489,"state":"CLOSED","title":"Can't use 'in' qualifier to search code.","url":"https://github.com/PyGithub/PyGithub/issues/489"},{"author":{"id":"MDQ6VXNlcjc1MTk0ODc=","is_bot":false,"login":"dlutsch","name":"Daniel Lutsch"},"body":"Repository.create_git_tag() does not seem to do anything for me when called (though other Repository methods do work). Sample code:\r\n\r\n```\r\ngithub_instance = Github(\"user\", \"pass\")\r\nrepo = github_instance.get_repo(\"MyOrg/myrepo\")\r\nrepo.create_git_tag(tag=\"test_tag\", message=\"hello world\", type=\"commit\", object=\"f82f379529ad40a25a6\")\r\n```\r\n\r\nAfter running this I don't see any tag created on the repo in github. Also when I look at the GitTag object returned the sha value is different every time I run this (and not equal to the \"object\" parameter in create_git_tag)\r\n\r\nThis is PyGithub 1.29 and Python 3.5.2","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDI2ODU2Njc5OA==","author":{"login":"paxenos"},"authorAssociation":"NONE","body":"I'm also experiencing this issue using PyGithub 1.29 and Python 2.7","createdAt":"2016-12-21T16:27:01Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/488#issuecomment-268566798","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDI3NDkzOTIwNg==","author":{"login":"sheluchin"},"authorAssociation":"NONE","body":"I'm also getting an inconsistent object reference.\r\n\r\nPyGithub 1.29\r\nPython 3.5.2","createdAt":"2017-01-24T21:08:48Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/488#issuecomment-274939206","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDI3ODE0MTUzOA==","author":{"login":"sheluchin"},"authorAssociation":"NONE","body":"Still getting this issue on PyGithub 1.32.","createdAt":"2017-02-07T21:12:31Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/488#issuecomment-278141538","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDI4NzIyOTExNw==","author":{"login":"nueverest"},"authorAssociation":"NONE","body":"Creating a tag is the primary reason that I wanted to use this library.","createdAt":"2017-03-17T00:04:07Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/488#issuecomment-287229117","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDI4OTU2OTUxMQ==","author":{"login":"oantonelli"},"authorAssociation":"NONE","body":"`create_git_tag()` only creates a tag object and it doesn't create a reference in github. To generate this reference you need to call the method `create_git_ref()`:\r\n\r\n```\r\ngithub_instance = Github(\"user\", \"pass\")\r\nrepo = github_instance.get_repo(\"MyOrg/myrepo\")\r\nt = repo.create_git_tag(tag=\"test_tag\", message=\"hello world\", type=\"commit\", object=\"f82f379529ad40a25a6\")\r\nrepo.create_git_ref('refs/tags/{}'.format(t.tag), t.sha)\r\n```\r\n\r\n","createdAt":"2017-03-27T20:05:58Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":7}},{"content":"HOORAY","users":{"totalCount":6}}],"url":"https://github.com/PyGithub/PyGithub/issues/488#issuecomment-289569511","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDI5MTkwMDE1Mw==","author":{"login":"sheluchin"},"authorAssociation":"NONE","body":"@oantonelli Thanks! Using `create_git_ref` did fix my issue.\r\n\r\nI'm wondering if `create_git_tag_and_release` _can_ work properly. My understanding is that the tag needs to be created, then the reference for that tag must be created in GitHub, and only then the tag can be used for a release. When using `create_git_tag_and_release`, the reference isn't being created. I don't believe creating a reference in GitHub after creating the release would help.","createdAt":"2017-04-05T15:33:20Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/488#issuecomment-291900153","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQwMjY1NDIzNw==","author":{"login":"stale"},"authorAssociation":"NONE","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","createdAt":"2018-07-05T08:58:55Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/488#issuecomment-402654237","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQxOTg2ODQ3Ng==","author":{"login":"stale"},"authorAssociation":"NONE","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","createdAt":"2018-09-10T10:38:12Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/488#issuecomment-419868476","viewerDidAuthor":false}],"createdAt":"2016-11-18T22:46:56Z","number":488,"state":"CLOSED","title":"create_git_tag not working","url":"https://github.com/PyGithub/PyGithub/issues/488"},{"author":{"id":"MDQ6VXNlcjMwMTk2NjU=","is_bot":false,"login":"jakirkham","name":""},"body":"Ran into this rather odd issue locally. Not quite sure what is going on, but figured it deserved an issue as I saw it repeatedly.\r\n\r\n```python\r\n>>> l\r\n<github.PaginatedList.PaginatedList instance at 0x...>\r\n>>> l[0]\r\n>>> IssueComment(user=NamedUser(login=\"...\"), id=...)\r\n>>> l.totalCount\r\n---------------------------------------------------------------------------\r\nAttributeError                            Traceback (most recent call last)\r\n<ipython-input-34-ba47f831ae47> in <module>()\r\n----> 1 l.totalCount\r\n\r\n/zopt/conda2/lib/python2.7/site-packages/github/PaginatedList.pyc in totalCount(self)\r\n    125     def totalCount(self):\r\n    126         if not self.__totalCount:\r\n--> 127             self._grow()\r\n    128 \r\n    129         return self.__totalCount\r\n\r\n/zopt/conda2/lib/python2.7/site-packages/github/PaginatedList.pyc in _grow(self)\r\n     59 \r\n     60     def _grow(self):\r\n---> 61         newElements = self._fetchNextPage()\r\n     62         self.__elements += newElements\r\n     63         return newElements\r\n\r\n/zopt/conda2/lib/python2.7/site-packages/github/PaginatedList.pyc in _fetchNextPage(self)\r\n    160             self.__nextUrl,\r\n    161             parameters=self.__nextParams,\r\n--> 162             headers=self.__headers\r\n    163         )\r\n    164         data = data if data else []\r\n\r\n/zopt/conda2/lib/python2.7/site-packages/github/Requester.pyc in requestJsonAndCheck(self, verb, url, parameters, headers, input, cnx)\r\n    170 \r\n    171     def requestJsonAndCheck(self, verb, url, parameters=None, headers=None, input=None, cnx=None):\r\n--> 172         return self.__check(*self.requestJson(verb, url, parameters, headers, input, cnx))\r\n    173 \r\n    174     def requestMultipartAndCheck(self, verb, url, parameters=None, headers=None, input=None):\r\n\r\n/zopt/conda2/lib/python2.7/site-packages/github/Requester.pyc in requestJson(self, verb, url, parameters, headers, input, cnx)\r\n    211             return \"application/json\", json.dumps(input)\r\n    212 \r\n--> 213         return self.__requestEncode(cnx, verb, url, parameters, headers, input, encode)\r\n    214 \r\n    215     def requestMultipart(self, verb, url, parameters=None, headers=None, input=None):\r\n\r\n/zopt/conda2/lib/python2.7/site-packages/github/Requester.pyc in __requestEncode(self, cnx, verb, url, parameters, requestHeaders, input, encode)\r\n    241             requestHeaders[\"Accept\"] = \"application/vnd.github.moondragon+json\"\r\n    242 \r\n--> 243         url = self.__makeAbsoluteUrl(url)\r\n    244         url = self.__addParametersToUrl(url, parameters)\r\n    245 \r\n\r\n/zopt/conda2/lib/python2.7/site-packages/github/Requester.pyc in __makeAbsoluteUrl(self, url)\r\n    302         # URLs generated locally will be relative to __base_url\r\n    303         # URLs returned from the server will start with __base_url\r\n--> 304         if url.startswith(\"/\"):\r\n    305             url = self.__prefix + url\r\n    306         else:\r\n\r\nAttributeError: 'NoneType' object has no attribute 'startswith'\r\n```\r\n\r\nUsing version `1.29` on Python `2.7`.","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDI2MjA1Nzk3Mg==","author":{"login":"rapha-opensource"},"authorAssociation":"NONE","body":"I'm seeing the same error using version 1.27 with Python3.5.\r\n\r\ngh = Github(...,...)\r\nuser = gh.get_user(...)\r\nrepos = user.get_repos()\r\nrepo = repos[0]\r\nrepos.totalCount\r\n>>> repos.totalCount\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"/venv/rq/lib/python3.5/site-packages/github/PaginatedList.py\", line 127, in totalCount\r\n    self._grow()\r\n  File \"/venv/rq/lib/python3.5/site-packages/github/PaginatedList.py\", line 61, in _grow\r\n    newElements = self._fetchNextPage()\r\n  File \"/venv/rq/lib/python3.5/site-packages/github/PaginatedList.py\", line 162, in _fetchNextPage\r\n    headers=self.__headers\r\n  File \"/venv/rq/lib/python3.5/site-packages/github/Requester.py\", line 172, in requestJsonAndCheck\r\n    return self.__check(*self.requestJson(verb, url, parameters, headers, input, cnx))\r\n  File \"/venv/rq/lib/python3.5/site-packages/github/Requester.py\", line 213, in requestJson\r\n    return self.__requestEncode(cnx, verb, url, parameters, headers, input, encode)\r\n  File \"/venv/rq/lib/python3.5/site-packages/github/Requester.py\", line 243, in __requestEncode\r\n    url = self.__makeAbsoluteUrl(url)\r\n  File \"/venv/rq/lib/python3.5/site-packages/github/Requester.py\", line 304, in __makeAbsoluteUrl\r\n    if url.startswith(\"/\"):\r\nAttributeError: 'NoneType' object has no attribute 'startswith'\r\n\r\ndigging deeper, repos._PaginatedList__nextUrl is 'None'.","createdAt":"2016-11-21T20:30:40Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/487#issuecomment-262057972","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDI2MjQ5Njk4Mw==","author":{"login":"advantik-bot"},"authorAssociation":"NONE","body":"Same problem here:\r\n\r\n```\r\nl = github_instance.get_repo(71583602).get_contributors()\r\nl.totalCount\r\n```\r\n\r\nleads to\r\n\r\n>   File \"...\\lib\\site-packages\\github\\Requester.py\", line 304, in __makeAbsoluteUrl\r\n>     if url.startswith(\"/\"):\r\n> AttributeError: 'NoneType' object has no attribute 'startswith'","createdAt":"2016-11-23T12:08:05Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/487#issuecomment-262496983","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQwMjY1NDI2Mw==","author":{"login":"stale"},"authorAssociation":"NONE","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","createdAt":"2018-07-05T08:58:58Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/487#issuecomment-402654263","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQwMjc0ODcxNg==","author":{"login":"jakirkham"},"authorAssociation":"NONE","body":"This is a bug people are seeing. Why is it being ignored and marked as stale?","createdAt":"2018-07-05T14:51:21Z","includesCreatedEdit":true,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/487#issuecomment-402748716","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQwMjkwNzQzMg==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"@jakirkham please understand this is just stale bot's default behavior to mark issues > 2 months old as stale, will remove the label if it's still an issue.","createdAt":"2018-07-06T02:31:24Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/487#issuecomment-402907432","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQwMjkzMzAwOQ==","author":{"login":"jakirkham"},"authorAssociation":"NONE","body":"Have noticed this bot popping up in more issues on different repos. Thus far have seen it cause more than a few undesirable interactions. Namely closing issues that have not gotten attention from the project's core developer team (often simply because they are busy, which is ok). As a user interested in an OSS project's improvement, I find the bot's behavior in these cases discouraging. FWIW it seems like there is a similar discussion happening over with the stale bot's developer team, which outlines this problem well.\r\n\r\nxref: https://github.com/probot/stale/issues/67","createdAt":"2018-07-06T05:49:50Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/487#issuecomment-402933009","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQwMjkzNDYxNw==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"@jakirkham Thanks for sharing this. Going back to the issue itself, please see the latest development #820, as we are trying to fix this.","createdAt":"2018-07-06T06:00:22Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/487#issuecomment-402934617","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQwMzI1NzY5Mg==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"Fixed in #820 ","createdAt":"2018-07-08T02:45:19Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/487#issuecomment-403257692","viewerDidAuthor":false}],"createdAt":"2016-11-18T00:37:30Z","number":487,"state":"CLOSED","title":"PaginatedList totalCount raises AttributeError","url":"https://github.com/PyGithub/PyGithub/issues/487"},{"author":{"is_bot":true,"login":"app/"},"body":"If gist object haven't complete, files in this gist has no content.\r\nI create an pull request using Just4test account.","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDQwMjY1NDI2OA==","author":{"login":"stale"},"authorAssociation":"NONE","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","createdAt":"2018-07-05T08:58:59Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/485#issuecomment-402654268","viewerDidAuthor":false}],"createdAt":"2016-11-12T01:58:13Z","number":485,"state":"CLOSED","title":"GistFile.content is None If Gist haven't complete","url":"https://github.com/PyGithub/PyGithub/issues/485"},{"author":{"id":"MDQ6VXNlcjU3NTM1Mw==","is_bot":false,"login":"kennknowles","name":"Kenn Knowles"},"body":"It seems that the `get_comments()` and `get_review_comments()` methods have an issue in the latest release.\r\n\r\nFor a pull request with a number of comments (https://github.com/apache/incubator-beam/pull/1013) these APIs return no results.\r\n\r\n```python\r\nIn [4]: len(list(Github().get_repo('apache/incubator-beam').get_pull(1013).get_comments()))\r\nOut[4]: 0\r\n\r\nIn [5]: len(list(Github().get_repo('apache/incubator-beam').get_pull(1013).get_review_comments()))\r\nOut[5]: 0\r\n```","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDM3OTY2NjM3OQ==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"There have been some confusion for the method names. The correct one to retrieve comments for an issue would be `get_issue_comments`. Actually `get_comments` is just an alias of `get_review_comments` so there will always return you the same results.","createdAt":"2018-04-09T07:54:42Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/484#issuecomment-379666379","viewerDidAuthor":false}],"createdAt":"2016-11-07T23:24:07Z","number":484,"state":"CLOSED","title":"Pull request get_comments() method returning no results","url":"https://github.com/PyGithub/PyGithub/issues/484"},{"author":{"is_bot":true,"login":"app/"},"body":"version: pygithub>=1.29\n\nhook.delete() does not work (creating the hook via repo.create_hook(...) works fine).\n\nerror log:\n\n```\nFile \"/var/task/beedo/gh_source.py\", line 239, in delete_sns_hook\nhook.delete()\nFile \"/var/task/github/Hook.py\", line 128, in delete\nself.url\nFile \"/var/task/github/Requester.py\", line 172, in requestJsonAndCheck\nreturn self.__check(*self.requestJson(verb, url, parameters, headers, input, cnx))\nFile \"/var/task/github/Requester.py\", line 180, in __check\nraise self.__createException(status, responseHeaders, output)\nUnknownObjectException: 404 {u'documentation_url': u'https://developer.github.com/v3', u'message': u'Not Found'}\n```\n\nmy code:\n\n``` python2.7\ndef get_sns_hook(token, repo):\n    hooks = list_hooks(token, repo)\n    for hook in hooks:\n        if hook.name == 'amazonsns':\n            return hook\n\ndef list_hooks(token, repo):\n    g = Github(token)\n    repo = g.get_repo(repo)\n    return repo.get_hooks()\n\ndef delete_sns_hook(token, repo):\n    log.info('Deleting SNS hook for %s' % repo)\n    hook = get_sns_hook(token, repo)\n    log.info(hook.name)\n    log.info(hook.id)\n    log.info(dir(hook))\n    hook.delete()\n```\n\nThe Github API token has suitable credentials (both write:repo_hook and read:repo_hook). So I believe this is a problem in pygithub. Any ideas?\n","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDI1NzA5NjY4NA==","author":{"login":""},"authorAssociation":"NONE","body":"what I found out: \n\"404 Not Found\" in this context means you have no permission. IMHO this Github API response is lame. Anyway, it worked after setting the token permission to \"admin:repo_hook\".\n","createdAt":"2016-10-29T15:08:02Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/483#issuecomment-257096684","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDI1NzA5NzYxNg==","author":{"login":"topic2k"},"authorAssociation":"NONE","body":"From the [API docs](https://developer.github.com/v3/#authentication): This is to prevent the accidental leakage of private repositories to unauthorized users.\n","createdAt":"2016-10-29T15:24:13Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/483#issuecomment-257097616","viewerDidAuthor":false}],"createdAt":"2016-10-29T11:56:24Z","number":483,"state":"CLOSED","title":"issue when deleting repo hook","url":"https://github.com/PyGithub/PyGithub/issues/483"},{"author":{"id":"MDQ6VXNlcjExMjk0ODU2","is_bot":false,"login":"ericbrandwein","name":"Eric Brandwein"},"body":"The sort param is missing from the docs: http://pygithub.readthedocs.io/en/latest/github_objects/Repository.html#github.Repository.Repository.get_pulls\n","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDM3OTY2NjU4NA==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"It is there now.","createdAt":"2018-04-09T07:55:40Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/482#issuecomment-379666584","viewerDidAuthor":false}],"createdAt":"2016-10-27T23:11:27Z","number":482,"state":"CLOSED","title":"Update get_pulls() documentation","url":"https://github.com/PyGithub/PyGithub/issues/482"},{"author":{"id":"MDQ6VXNlcjExMjk0ODU2","is_bot":false,"login":"ericbrandwein","name":"Eric Brandwein"},"body":"I can't pass the `base` or the `head` query parameters to the call to `Repository.get_pulls()`, or at least it doesn't say anything about it in [the docs](http://pygithub.readthedocs.io/en/latest/github_objects/Repository.html#github.Repository.Repository.get_pulls)\nThey are defined by the documentation on GitHub's API [here](https://developer.github.com/v3/pulls/#list-pull-requests).\n","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDM3OTY2NjkyMA==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"This was fixed in master.\r\nhttp://pygithub.readthedocs.io/en/latest/github_objects/Repository.html#github.Repository.Repository.get_pulls","createdAt":"2018-04-09T07:56:59Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/481#issuecomment-379666920","viewerDidAuthor":false}],"createdAt":"2016-10-27T23:10:32Z","number":481,"state":"CLOSED","title":"Get pulls missing params","url":"https://github.com/PyGithub/PyGithub/issues/481"},{"author":{"id":"MDQ6VXNlcjE5Mzc0Mjgw","is_bot":false,"login":"RitamDey","name":"Ritam Dey"},"body":"Where is the Documentation for the library??\n","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDI1NjEwMzA1NQ==","author":{"login":"MichaelPereira"},"authorAssociation":"CONTRIBUTOR","body":"http://pygithub.readthedocs.io/en/latest/introduction.html\n","createdAt":"2016-10-25T17:27:30Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/480#issuecomment-256103055","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDI1Njc5Nzg0MQ==","author":{"login":"ericbrandwein"},"authorAssociation":"NONE","body":"Where are the documentation files? I couldn't find them in /doc: https://github.com/PyGithub/PyGithub/tree/master/doc. They need an update, and I would gladly make a PR if they were available\n","createdAt":"2016-10-27T23:25:14Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/480#issuecomment-256797841","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDI1NjkzNTk1Mw==","author":{"login":"MichaelPereira"},"authorAssociation":"CONTRIBUTOR","body":"@ericbrandwein The documentation detail are in the code itself: https://github.com/PyGithub/PyGithub/blob/master/github/Commit.py#L159-L166\n","createdAt":"2016-10-28T14:32:10Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/480#issuecomment-256935953","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDI1Njk0MjY3Nw==","author":{"login":"ericbrandwein"},"authorAssociation":"NONE","body":"@MichaelPereira oh great, then the documentation on ReadTheDocs needs an update, because the  \"edit on github\" button sends me to the `/doc` directory in this repo 😕 \n","createdAt":"2016-10-28T14:54:45Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/480#issuecomment-256942677","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDI1Njk0ODA0NA==","author":{"login":"MichaelPereira"},"authorAssociation":"CONTRIBUTOR","body":"Which is fine because this is where the introduction, table of contents, etc are located, but the location of the code documentation could be made a little more explicit\n","createdAt":"2016-10-28T15:14:53Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/480#issuecomment-256948044","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDI1Njk2NTUzOQ==","author":{"login":"ericbrandwein"},"authorAssociation":"NONE","body":"But when I go here: http://pygithub.readthedocs.io/en/latest/apis.html, and click that button, it takes me to a 404: https://github.com/PyGithub/PyGithub/blob/master/doc/apis.rst\n","createdAt":"2016-10-28T16:26:18Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/480#issuecomment-256965539","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDI1NzYyNzk3Mw==","author":{"login":"gvanrossum"},"authorAssociation":"NONE","body":"Would be nice if the README contained a link to the docs.\n","createdAt":"2016-11-01T17:13:33Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/480#issuecomment-257627973","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDI1NzY1NDk3Mg==","author":{"login":"Quentin-M"},"authorAssociation":"NONE","body":"@gvanrossum There you go.\n\n![2016-11-01 19-35-43](https://cloud.githubusercontent.com/assets/1332289/19902343/aa8fd85e-a06a-11e6-9758-ae10932d2577.png)\n","createdAt":"2016-11-01T18:37:52Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":1}},{"content":"THUMBS_DOWN","users":{"totalCount":1}}],"url":"https://github.com/PyGithub/PyGithub/issues/480#issuecomment-257654972","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDI1NzY2NjA0Nw==","author":{"login":"gvanrossum"},"authorAssociation":"NONE","body":"Hidden in plain sight. :-(\n","createdAt":"2016-11-01T19:19:32Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":1}}],"url":"https://github.com/PyGithub/PyGithub/issues/480#issuecomment-257666047","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDI1ODA0MjE1Ng==","author":{"login":"jzelinskie"},"authorAssociation":"CONTRIBUTOR","body":"That's the problem when you have too many badges. I think docs is a bit more important than a badge, so this should definitely be expanded on more in the readme.\n","createdAt":"2016-11-03T00:47:51Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/480#issuecomment-258042156","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDI2MzEyMjUxNg==","author":{"login":"tmshn"},"authorAssociation":"CONTRIBUTOR","body":"In addition to the README, it would be nicer if the link to the doc is added here:\r\n<img width=\"642\" alt=\"url_here\" src=\"https://cloud.githubusercontent.com/assets/3760893/20648716/d5010694-b4f1-11e6-9d85-80b6a76957e6.png\">\r\n","createdAt":"2016-11-27T13:35:53Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"HOORAY","users":{"totalCount":1}}],"url":"https://github.com/PyGithub/PyGithub/issues/480#issuecomment-263122516","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDI2ODMzNjU0OA==","author":{"login":"blaisep"},"authorAssociation":"NONE","body":"IMHO @gvanrossum  and @tmshn are spot on. \r\nIn fact, the description in the `readme.md` could be nothing more than the link to the correct docs.(because the current description contains only links to super well-known sources.\r\n @jzelinskie , if you have the access, Please approve @gamefiend 's https://github.com/PyGithub/PyGithub/pull/499","createdAt":"2016-12-20T19:35:02Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":1}}],"url":"https://github.com/PyGithub/PyGithub/issues/480#issuecomment-268336548","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDI2OTQxMzI5Mg==","author":{"login":"jzelinskie"},"authorAssociation":"CONTRIBUTOR","body":"Closed by #499 ","createdAt":"2016-12-28T02:09:41Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/480#issuecomment-269413292","viewerDidAuthor":false}],"createdAt":"2016-10-23T01:52:15Z","number":480,"state":"CLOSED","title":"Where is the documentation???","url":"https://github.com/PyGithub/PyGithub/issues/480"},{"author":{"id":"MDQ6VXNlcjE2Njc0MjM1","is_bot":false,"login":"kdottiemo","name":"Katie Moore Dejwakh"},"body":"Towards expansion of the library for handling the experimental \"Traffic\" API (https://developer.github.com/v3/repos/traffic/), I wanted to take a stab at adding a \"Clones.py\" to extract clone information (https://developer.github.com/v3/repos/traffic/#clones). \r\n\r\nI retrieve the parent information fine via the following added funtion in Repository.py:\r\n\r\n```\r\n    def get_clones(self, per):\r\n        \"\"\"\r\n        :calls: `GET /repos/:owner/:repo/traffic/clones\r\n        :rtype: :class:`github.PaginatedList.PaginatedList` of :class:`github.Clone.Clone`\r\n        \"\"\"\r\n        return github.PaginatedList.PaginatedList(\r\n            github.Clone.Clone,\r\n            self._requester,\r\n            self.url + \"/traffic/clones?per=\" + str(per),\r\n            None,\r\n            headers={'Accept': 'application/vnd.github.spiderman-preview'}\r\n        )\r\n```\r\n\r\nThat's all fine I think. But in creating Clones.py, I don't think I have the syntax right. Say I just want the class to be able to get the number of \"uniques.\" I have this:\r\n\r\n```\r\nclass Clone(github.GithubObject.CompletableGithubObject):\r\n    def __repr__(self):\r\n        return self.get__repr__({\"uniques\": self._uniques.value})\r\n\r\n    @property\r\n    def uniques(self):\r\n        \"\"\"\r\n        :type: integer\r\n        \"\"\"\r\n        return self._uniques.value\r\n\r\n    def _initAttributes(self):\r\n        self._uniques = github.GithubObject.NotSet\r\n\r\n    def _useAttributes(self, attributes):\r\n        if \"uniques\" in attributes:\r\n            self._uniques = self._makeIntAttribute(attributes[\"uniques\"])\r\n```\r\n\r\nBut when I test it by creating a clone object, it fails with: \r\n    **self._uniques = self._makeIntAttribute(attributes[\"uniques\"])\r\n    TypeError: string indices must be integers**\r\n\r\nWhat am I missing? Just jumping into this; can't admit that I know if, for instance, Clones should be a \"CompletableGithubObject,\" the nuances of the nested clone information, etc. I'd like to get the basics of this working though and contribute to PyGithub however.\r\n\r\nThanks.\r\n","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDMyMTAwNjkwMw==","author":{"login":"alanbernstein"},"authorAssociation":"NONE","body":"I'm interested in this. @kdottiemo, did you make any progress in resolving this error?","createdAt":"2017-08-08T16:19:37Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/478#issuecomment-321006903","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM0NDkyNTMzNw==","author":{"login":"gomesfernanda"},"authorAssociation":"NONE","body":"I'm also interested! :)","createdAt":"2017-11-16T13:40:18Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/478#issuecomment-344925337","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM1MzQ2NjM0Nw==","author":{"login":"Jessime"},"authorAssociation":"NONE","body":"I'd love to have access to traffic info!","createdAt":"2017-12-21T21:50:03Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/478#issuecomment-353466347","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQwMjY1NDIwMQ==","author":{"login":"stale"},"authorAssociation":"NONE","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","createdAt":"2018-07-05T08:58:50Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/478#issuecomment-402654201","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQxODA1NTY0OA==","author":{"login":"stale"},"authorAssociation":"NONE","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","createdAt":"2018-09-03T09:23:29Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/478#issuecomment-418055648","viewerDidAuthor":false}],"createdAt":"2016-10-19T22:17:40Z","number":478,"state":"CLOSED","title":"Adding Some Traffic Info. - Attributes Error?","url":"https://github.com/PyGithub/PyGithub/issues/478"},{"author":{"id":"MDQ6VXNlcjE2Njc0MjM1","is_bot":false,"login":"kdottiemo","name":"Katie Moore Dejwakh"},"body":"Hi there,\n\nI check a repo's downloads status by checking the Repository class's `has_downloads` attribute, which is True. However, there is apparently nothing in the list. Sample code:\n\n```\n# Is true: \nprint str(repo.has_downloads)\n\n# Is apparently empty:\ndwnlds = repo.get_downloads()\nfor d in dwnlds:\n   print dwnld.id\n```\n\nAm I missing something?\nRepo is: https://github.com/NASA-DEVELOP/dnppy/\n","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDI1NDY5MjYzNA==","author":{"login":"jzelinskie"},"authorAssociation":"CONTRIBUTOR","body":"Seems like a bug on Github's side:\n\nhttps://api.github.com/repos/NASA-DEVELOP/dnppy\nreturns an object that has `downloads` set to True, but if you go to https://api.github.com/repos/NASA-DEVELOP/dnppy/downloads you get an empty list.\n","createdAt":"2016-10-19T02:20:22Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/477#issuecomment-254692634","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDI1NDk1MzgzNQ==","author":{"login":"kdottiemo"},"authorAssociation":"NONE","body":"Interesting...guess I'll bring it up with them! Thanks @jzelinskie.\n","createdAt":"2016-10-19T22:01:05Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/477#issuecomment-254953835","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQwMjY1NDI3Mw==","author":{"login":"stale"},"authorAssociation":"NONE","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","createdAt":"2018-07-05T08:59:00Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/477#issuecomment-402654273","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQxOTUwMzA5OQ==","author":{"login":"stale"},"authorAssociation":"NONE","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","createdAt":"2018-09-07T17:00:46Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/477#issuecomment-419503099","viewerDidAuthor":false}],"createdAt":"2016-10-18T21:34:16Z","number":477,"state":"CLOSED","title":"has_downloads is True, but apparently no downloads","url":"https://github.com/PyGithub/PyGithub/issues/477"},{"author":{"id":"MDQ6VXNlcjE1MTMzMQ==","is_bot":false,"login":"azatelli","name":"Anthony Zatelli"},"body":"import github works but nothing seems to be under github. Using Python 2.7. \n\npip install PyGithub\n\nThoughts?\n","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDI1MzAwMzExNA==","author":{"login":"andrewgross"},"authorAssociation":"NONE","body":"`from github import Github` is the best way to get started.  Check the documentation for some examples of how to use different auth types.\n","createdAt":"2016-10-11T18:28:55Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/472#issuecomment-253003114","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDI1MzE1MTg5MQ==","author":{"login":"10c8"},"authorAssociation":"NONE","body":"`from github import Github` will result in an error stating that `MainClass` doesn't exist.\n","createdAt":"2016-10-12T08:32:22Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/472#issuecomment-253151891","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDI1MzIyNzUzMA==","author":{"login":"andrewgross"},"authorAssociation":"NONE","body":"Hmm, that is very strange, possible that you have conflicting dependencies?  Can you list the results of `pip freeze`?\n","createdAt":"2016-10-12T14:23:01Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/472#issuecomment-253227530","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDI1MzIzMTkyNg==","author":{"login":"azatelli"},"authorAssociation":"NONE","body":"pip freeze:\n\nprettytable==0.7.2\n\nPyGithub==1.29\n\nrequests==2.11.1\n\nOn Wed, Oct 12, 2016 at 10:23 AM, Andrew Gross notifications@github.com\nwrote:\n\n> Hmm, that is very strange, possible that you have conflicting\n> dependencies? Can you list the results of pip freeze?\n> \n> —\n> You are receiving this because you authored the thread.\n> Reply to this email directly, view it on GitHub\n> https://github.com/PyGithub/PyGithub/issues/472#issuecomment-253227530,\n> or mute the thread\n> https://github.com/notifications/unsubscribe-auth/AAJPI7AQ-d-K0ux--s9819NQZtMDT0EHks5qzO1IgaJpZM4KTIZ4\n> .\n","createdAt":"2016-10-12T14:39:26Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/472#issuecomment-253231926","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDI1MzIzNTgzNg==","author":{"login":"andrewgross"},"authorAssociation":"NONE","body":"In the directory you are working in, do you have a file called `github.py`? (or a folder with an `__init__.py` inside of it?\n","createdAt":"2016-10-12T14:51:36Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":20}},{"content":"HOORAY","users":{"totalCount":12}}],"url":"https://github.com/PyGithub/PyGithub/issues/472#issuecomment-253235836","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDI1MzI0Njc3Mw==","author":{"login":"azatelli"},"authorAssociation":"NONE","body":"Yes sir.\n\nOn Wed, Oct 12, 2016 at 10:51 AM, Andrew Gross notifications@github.com\nwrote:\n\n> In the directory you are working in, do you have a file called github.py?\n> (or a folder with an **init**.py inside of it?\n> \n> —\n> You are receiving this because you authored the thread.\n> Reply to this email directly, view it on GitHub\n> https://github.com/PyGithub/PyGithub/issues/472#issuecomment-253235836,\n> or mute the thread\n> https://github.com/notifications/unsubscribe-auth/AAJPIx7SioI6d7e4qTTN4VZaRIIUtY-Bks5qzPP7gaJpZM4KTIZ4\n> .\n","createdAt":"2016-10-12T15:27:20Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/472#issuecomment-253246773","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDI1MzI0NjkwMQ==","author":{"login":"azatelli"},"authorAssociation":"NONE","body":"Yes sir, github.py\n\nOn Wed, Oct 12, 2016 at 11:27 AM, Anthony Zatelli azatelli@gmail.com\nwrote:\n\n> Yes sir.\n> \n> On Wed, Oct 12, 2016 at 10:51 AM, Andrew Gross notifications@github.com\n> wrote:\n> \n> > In the directory you are working in, do you have a file called github.py?\n> > (or a folder with an **init**.py inside of it?\n> > \n> > —\n> > You are receiving this because you authored the thread.\n> > Reply to this email directly, view it on GitHub\n> > https://github.com/PyGithub/PyGithub/issues/472#issuecomment-253235836,\n> > or mute the thread\n> > https://github.com/notifications/unsubscribe-auth/AAJPIx7SioI6d7e4qTTN4VZaRIIUtY-Bks5qzPP7gaJpZM4KTIZ4\n> > .\n","createdAt":"2016-10-12T15:27:44Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/472#issuecomment-253246901","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDI1MzI1MTE2Mg==","author":{"login":"andrewgross"},"authorAssociation":"NONE","body":"Yep, that'll do it.  Python will try to import from that file first, try changing the name of your local file and it should work.\n","createdAt":"2016-10-12T15:41:52Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/472#issuecomment-253251162","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDI1MzI3MDg2OQ==","author":{"login":"azatelli"},"authorAssociation":"NONE","body":"Awesome! Thank you. :)\n\nOn Wed, Oct 12, 2016 at 11:41 AM, Andrew Gross notifications@github.com\nwrote:\n\n> Yep, that'll do it. Python will try to import from that file first, try\n> changing the name of your local file and it should work.\n> \n> —\n> You are receiving this because you authored the thread.\n> Reply to this email directly, view it on GitHub\n> https://github.com/PyGithub/PyGithub/issues/472#issuecomment-253251162,\n> or mute the thread\n> https://github.com/notifications/unsubscribe-auth/AAJPIyvN4e2IXEfvfN7o-8OD0HisOCSpks5qzP_CgaJpZM4KTIZ4\n> .\n","createdAt":"2016-10-12T16:50:52Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/472#issuecomment-253270869","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDI2MDE4MTU3Ng==","author":{"login":"tzatter"},"authorAssociation":"NONE","body":"I met the same problem. then I got here. Thank you!\n","createdAt":"2016-11-13T11:53:40Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/472#issuecomment-260181576","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDI4NjE1NjY3NA==","author":{"login":"nirzari"},"authorAssociation":"NONE","body":"I was facing the similar issue. This helped. Thanks","createdAt":"2017-03-13T16:12:55Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/472#issuecomment-286156674","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM4OTM4NDE0OQ==","author":{"login":"AsinRay"},"authorAssociation":"NONE","body":"I met the same problem. then I got here. Thank you!","createdAt":"2018-05-16T03:35:17Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/472#issuecomment-389384149","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQwNjUwMTAxNQ==","author":{"login":"prakhar21"},"authorAssociation":"NONE","body":"Thanks @andrewgross \r\n","createdAt":"2018-07-20T06:23:29Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/472#issuecomment-406501015","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQzNTU5MDAwMA==","author":{"login":"enricorotundo"},"authorAssociation":"NONE","body":"LOL we all got into the `github.py` trap 🤖","createdAt":"2018-11-03T13:58:53Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":6}}],"url":"https://github.com/PyGithub/PyGithub/issues/472#issuecomment-435590000","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQ2MDA5MDkwMQ==","author":{"login":"jbradforddillon"},"authorAssociation":"NONE","body":"Haaaaaa. yep. Thanks for this!","createdAt":"2019-02-03T21:35:54Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/472#issuecomment-460090901","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDUyNTQ0NzIyMQ==","author":{"login":"docktermj"},"authorAssociation":"NONE","body":"Just fell into the trap myself.","createdAt":"2019-08-27T19:24:36Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/472#issuecomment-525447221","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs449-ee","author":{"login":"abubelinha"},"authorAssociation":"NONE","body":"[me too](https://stackoverflow.com/questions/68532135/pygithub-cant-import-github-from-github/68532816?noredirect=1#comment123333271_68532816)","createdAt":"2021-10-31T18:33:07Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":2}}],"url":"https://github.com/PyGithub/PyGithub/issues/472#issuecomment-955770782","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs5UKald","author":{"login":"neiltranter"},"authorAssociation":"NONE","body":"me too!","createdAt":"2023-02-01T12:59:07Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/472#issuecomment-1412016477","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs5ZANyF","author":{"login":"toughjay318"},"authorAssociation":"NONE","body":"@andrewgross so I don’t have a file named github.py, but I do have a folder labeled ‘’’__init__.py’’’. I am receiving the same Import error for github","createdAt":"2023-04-02T05:33:51Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":1}}],"url":"https://github.com/PyGithub/PyGithub/issues/472#issuecomment-1493228677","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs5ZA1Y3","author":{"login":"andrewgross"},"authorAssociation":"NONE","body":"Is your folder named `github`? ","createdAt":"2023-04-02T16:58:36Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/472#issuecomment-1493390903","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs5ZA2Uq","author":{"login":"toughjay318"},"authorAssociation":"NONE","body":"I believe it is. I will check again tomorrow at school. I will let you know when I am 100% sure. Sincerely, Jalen GriffinOn Apr 2, 2023, at 11:58 AM, Andrew Gross ***@***.***> wrote:﻿\nIs your folder named github?\n\n—Reply to this email directly, view it on GitHub, or unsubscribe.You are receiving this because you commented.Message ID: ***@***.***>","createdAt":"2023-04-02T17:15:18Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/472#issuecomment-1493394730","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs5ZA2mA","author":{"login":"andrewgross"},"authorAssociation":"NONE","body":"Ok, you should make sure you don't have a folder, file or class named Github to avoid the import issues.","createdAt":"2023-04-02T17:21:03Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/472#issuecomment-1493395840","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs5j96Nv","author":{"login":"rparamanandam-equinix"},"authorAssociation":"NONE","body":"This is fixed my issue\r\npip3 install --upgrade pip\r\npip3 install --upgrade pygithub ","createdAt":"2023-08-14T11:46:37Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/472#issuecomment-1677173615","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs5n8rz5","author":{"login":"kumgaurav"},"authorAssociation":"NONE","body":"This is fixed my issue\r\npip3 install --upgrade pip\r\npip3 install --upgrade pygithub","createdAt":"2023-10-03T00:17:11Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/472#issuecomment-1743961337","viewerDidAuthor":false}],"createdAt":"2016-10-11T00:48:10Z","number":472,"state":"CLOSED","title":"Python 2.7 Error - ImportError: cannot import name Github","url":"https://github.com/PyGithub/PyGithub/issues/472"},{"author":{"id":"MDQ6VXNlcjI4ODY4Ng==","is_bot":false,"login":"jpopelka","name":"Jiri Popelka"},"body":"```\n$ python3 -c \"import github; token='...'; print(github.Github(token).get_repo('spumko/boom').raw_headers['status'])\"\n\n200 OK\n```\n\n```\npython3 -c \"import github, logging; logging.basicConfig(level=logging.DEBUG); token='...'; print(github.Github(token).get_repo('spumko/boom').raw_headers['status'])\"\n\nTraceback (most recent call last):\n  File \"<string>\", line 1, in <module>\n  File \"/usr/lib/python3.5/site-packages/github/GithubObject.py\", line 105, in raw_headers\n    self._completeIfNeeded()\n  File \"/usr/lib/python3.5/site-packages/github/GithubObject.py\", line 252, in _completeIfNeeded\n    self.__complete()\n  File \"/usr/lib/python3.5/site-packages/github/GithubObject.py\", line 257, in __complete\n    self._url.value\n  File \"/usr/lib/python3.5/site-packages/github/Requester.py\", line 172, in requestJsonAndCheck\n    return self.__check(*self.requestJson(verb, url, parameters, headers, input, cnx))\n  File \"/usr/lib/python3.5/site-packages/github/Requester.py\", line 180, in __check\n    raise self.__createException(status, responseHeaders, output)\ngithub.GithubException.BadCredentialsException: 401 {'documentation_url': 'https://developer.github.com/v3', 'message': 'Bad credentials'}\n```\n","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDQwMjY1NDI4MQ==","author":{"login":"stale"},"authorAssociation":"NONE","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","createdAt":"2018-07-05T08:59:01Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/470#issuecomment-402654281","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQxODA1NTYzMg==","author":{"login":"stale"},"authorAssociation":"NONE","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","createdAt":"2018-09-03T09:23:26Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/470#issuecomment-418055632","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQxODA3MTM2Nw==","author":{"login":"jpopelka"},"authorAssociation":"CONTRIBUTOR","body":"Seems to be fixed since 1.40","createdAt":"2018-09-03T10:22:07Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"LAUGH","users":{"totalCount":2}}],"url":"https://github.com/PyGithub/PyGithub/issues/470#issuecomment-418071367","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDc1MTM4OTkzMg==","author":{"login":"scovetta"},"authorAssociation":"NONE","body":"This issue seems to exist in 1.53 -- using the same tests from from the top of the issue, getting 401 / \"Bad Credentials\" when logging is set to DEBUG.\r\n\r\nIt looks like this is happening here in Requester's __log function:\r\nhttps://github.com/PyGithub/PyGithub/blob/master/github/Requester.py#L583\r\n","createdAt":"2020-12-26T19:48:50Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/470#issuecomment-751389932","viewerDidAuthor":false}],"createdAt":"2016-10-10T15:54:58Z","number":470,"state":"CLOSED","title":"Getting redirected repo does not work if debug logging is enabled.","url":"https://github.com/PyGithub/PyGithub/issues/470"},{"author":{"id":"MDQ6VXNlcjI2MzM2","is_bot":false,"login":"tony","name":"Tony Narlock"},"body":"Didn't know this was a GPL license, as they're pretty rare to find in python.\n\nwww.github.com/tony/patches is MIT and can't use viral code. I originally wanted to pull this lib in thinking it was permissively licensed, but it won't work.\n\nNot sure why a client lib (or anything python FWIW) needs to be virally licensed, even LGPL is strict relative to other python libs. Don't want to introduce troubles for downstream users down the road.\n\nI'm kind of going to be stuck using direct API calls / wrappers, but it'd be nice to have this on a more portable license to not reinvent the wheel.\n\nI recommend something like zlib, MIT, BSD, Apache 2, etc.\n","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDI1MjQzNTExNA==","author":{"login":"jzelinskie"},"authorAssociation":"CONTRIBUTOR","body":"I agree that I would prefer this project not be GPL licensed, but rather something like Apache. However, it's difficult to get all contributors to a project to sign off on changing the license this late into the game. You may find by reading a bit more that the LGPL isn't viral for languages like Java or Python: http://stackoverflow.com/a/12167947/877887\n","createdAt":"2016-10-08T16:47:18Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/468#issuecomment-252435114","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDI1MjQzNzIzNA==","author":{"login":"tony"},"authorAssociation":"NONE","body":"> It's difficult to get all contributors to PyGithub to sign off on changing the license this late into the game.\n\nyea i've shepherded a few projects over the years. Lots of gray hairs, and often I moved on to something else by the time its done.\n\nI do think more permissive tends to be the better choice in the long run, and if its in the realm of reason, should be done sooner rather than later.\n\nLGPL really does close doors. By the time we have a license with viral clauses, we've crossed the rubicon from bikeshedding to ramifications that could effect downstream projects.\n\n> You may find by reading a bit more that the LGPL isn't viral for languages like Java or Python: http://stackoverflow.com/a/12167947/877887\n\nI've read up on it, some of these prior issues are LGPL+python related: https://github.com/ScottDuckworth/python-anyvcs/issues/32, https://github.com/urwid/urwid/issues/41, https://github.com/django-wiki/django-wiki/issues/454, https://github.com/jgm/peg-markdown/issues/35, https://github.com/saitoha/canossa/issues/1, https://github.com/pytest-dev/pytest-mock/issues/45\n\n(Not a lawyer) Ultimately, FSF has no binding power to clarify license ambiguities after the fact. And you typically with legal language, you don't want to cross your fingers and hope clarification would be done in the wording of license itself by articulating things beyond the realm of ambiguity and uncertainty. Individual courts are the the deciders, and the scenario I'm trying to avoid is a couple of things:\n- A big guy (company, a lawsuit troll) could use the GPL as a way to file suits against a little guy (startup, open source project, developer). Stress and costs incurred aren't worth it\n- Make it hard down the road for license changes and portability. MIT / zlib / etc. can fit right into LGPL and GPL, but the other way around requires a big process that scales proportionally as more contributors send in backwards-incompatible patches.\n- Misunderstandings on licensing period tend to get averted completely. \n- Its rare to see licenses go from permissive to viral (even soft ones like LGPL). Then again, WINE did it. Its hard to make a case on the merits to go from permissive to viral.\n- While it's a temptation deter freeloaders who don't give contributions back, the evidence is overwhelming that the viral terms do more harm and little evidence they result in useful reciprocity upstream. Look at Apple and Clang, look at Apple/Canonical and ZFS.\n\nThe big thing about licenses is ambiguity and lack of specificity could give a party legroom to disagree. Even if cases prevail, I'm assuming LGPL is meant in the best faith possible, but someone who complains still a right to use the vagueness as a weapon. It'd be distracting and costly, and the precedent may not be of much value outside of jurisdictions where the decision was made.\n\nMaybe I'm the one who misunderstands the license. But I don't want to expose my own downstream users' with the legalities / headaches down the road.\n\nIMO its ok if this closes, if https://github.com/sigmavirus24/github3.py gets the same thing done.\n","createdAt":"2016-10-08T17:25:12Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/468#issuecomment-252437234","viewerDidAuthor":false}],"createdAt":"2016-10-08T15:30:25Z","number":468,"state":"CLOSED","title":"More portable LICENSE?","url":"https://github.com/PyGithub/PyGithub/issues/468"},{"author":{"id":"MDQ6VXNlcjE2Njc0MjM1","is_bot":false,"login":"kdottiemo","name":"Katie Moore Dejwakh"},"body":"Hi, I'm not sure if this is the correct forum for posting this because it may end up being more about unfamiliarity with the Github and PyGithub APIs. However, I am just trying to confirm that I am indeed finding a public repo using PyGithub with the following commands:\n\n```\n  from github import Github\n  g = Github()\n  repository = 'https://github.com/NASA-DEVELOP/dnppy'\n  repo = g.get_repo(repository)\n  print repo.name\n```\n\nOn that \"print repo.name\" line, I get the error:\n\nraise.self.__createException(status, responseHeaders, output) github.GithubException.UnknownObjectException: 404 {u'documentation_url': u'https://developer.github.com/v3', u'message': u'Not Found'}\n\nThis should be a public repo. Therefore, I am trying to access it without authentication. Even with my GitHub credentials in there, it doesn't seem to find the object (which I would expect to be \"dnppy.\") Am I doing something wrong here? Thanks!\n","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDI1MTIzMjc2NQ==","author":{"login":"kdottiemo"},"authorAssociation":"NONE","body":"Fixed by using \"get_organization()\" method with \"NASA-DEVELOP.\"\n","createdAt":"2016-10-03T21:28:43Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":2}}],"url":"https://github.com/PyGithub/PyGithub/issues/465#issuecomment-251232765","viewerDidAuthor":false}],"createdAt":"2016-10-03T20:34:35Z","number":465,"state":"CLOSED","title":"Public Repo Not Recognized?","url":"https://github.com/PyGithub/PyGithub/issues/465"},{"author":{"id":"MDQ6VXNlcjEwNjgyMDU0","is_bot":false,"login":"arpit1997","name":"Arpit Solanki"},"body":"Github API provides the feature for deleting a user repository. I can not find any method corresponding to this in the documentation. So if it is not yet implemented then i request for this feature to be added for [PyGithub](https://github.com/PyGithub/PyGithub) \nIf so then i will be happy to implement this feature.\nIf it is already implemented then provide documentation for it\n","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDI1MTYxNzM3Nw==","author":{"login":"jayfk"},"authorAssociation":"CONTRIBUTOR","body":"You just need to get the repo and then call `delete` on it.\n\n``` python\nfrom github import Github\ngh = Github(\"<token>\")\n\nrepo = gh.get_repo(full_name=\"what/ever\")\nrepo.delete()\n```\n","createdAt":"2016-10-05T08:46:39Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":1}}],"url":"https://github.com/PyGithub/PyGithub/issues/464#issuecomment-251617377","viewerDidAuthor":false}],"createdAt":"2016-09-30T17:06:59Z","number":464,"state":"CLOSED","title":"Delete a repository","url":"https://github.com/PyGithub/PyGithub/issues/464"},{"author":{"id":"MDQ6VXNlcjM0NDcxMzI=","is_bot":false,"login":"MountainRider","name":""},"body":"If I try to use `create_git_tree` to add a PNG file, I get the dreaded\n\n>  UnicodeDecodeError: 'utf8' codec can't decode byte 0x89 in position 0: invalid start byte\n\nIf I `base64` encode the PNG data, I can change it later using `update_file`. However, this results in two separate commits.\n","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDQwMjY1NDMwMQ==","author":{"login":"stale"},"authorAssociation":"NONE","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","createdAt":"2018-07-05T08:59:05Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/459#issuecomment-402654301","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQxODA1NTYxNg==","author":{"login":"stale"},"authorAssociation":"NONE","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","createdAt":"2018-09-03T09:23:23Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/459#issuecomment-418055616","viewerDidAuthor":false}],"createdAt":"2016-09-22T00:38:33Z","number":459,"state":"CLOSED","title":"create_git_tree cannot handle binary data","url":"https://github.com/PyGithub/PyGithub/issues/459"},{"author":{"id":"MDQ6VXNlcjU4Njc4NTQ=","is_bot":false,"login":"fvanboven","name":"Frank van Boven"},"body":"Hi, \n\nFetching the organization members does not return the email address of the github user (which is correct according to the documentation: https://developer.github.com/v3/orgs/members/#response)\n\nIt is an idea to add an additional call tot fetch the user itself (https://developer.github.com/v3/users/#get-a-single-user) so completed NamedUser objects are returned?\n","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDM3OTY2ODE0MA==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"@fvanboven Yes, you are right.\r\n\r\nSince the member API does not give email. You need get the user using `g.get_user(username)` and pass in the `login` attribute from the previous call as the username.","createdAt":"2018-04-09T08:01:46Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/457#issuecomment-379668140","viewerDidAuthor":false}],"createdAt":"2016-09-20T07:22:08Z","number":457,"state":"CLOSED","title":"Fetching the Organization's members does not return the email address","url":"https://github.com/PyGithub/PyGithub/issues/457"},{"author":{"id":"MDQ6VXNlcjM4MTEwMDI=","is_bot":false,"login":"timsmith00","name":""},"body":"my objective is to automate the following, but the documentation isnt clear/has gaps\n1.  Create a tag\n2.  Create a branch\n3.  Touch a version file\n4.  Commit version touch from step 3\n5.  Build and deploy apps\n6.  Push branch upon successful build & deploy\n\ndoes anyone have a functioning example - I have searched all the links posted previously and they all link back to the very trivial hello world example in the documentation.  \n","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDQwMjY1NDMwNQ==","author":{"login":"stale"},"authorAssociation":"NONE","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","createdAt":"2018-07-05T08:59:06Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/456#issuecomment-402654305","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQwNTY2NDQxNg==","author":{"login":"RayBB"},"authorAssociation":"NONE","body":"I've also been looking for a while on how to make a branch and it's obvious. I think this could be helpful.\r\nHere's a guide on how to create a new branch though!\r\nhttps://stackoverflow.com/questions/46120240/how-to-checkout-to-a-new-branch-with-pygithub","createdAt":"2018-07-17T17:35:24Z","includesCreatedEdit":true,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/456#issuecomment-405664416","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQxNDU5MzYxOA==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"See #874","createdAt":"2018-08-21T08:26:24Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":2}}],"url":"https://github.com/PyGithub/PyGithub/issues/456#issuecomment-414593618","viewerDidAuthor":false}],"createdAt":"2016-09-19T14:46:32Z","number":456,"state":"CLOSED","title":"Guide or documentation for . . . . .","url":"https://github.com/PyGithub/PyGithub/issues/456"},{"author":{"id":"MDQ6VXNlcjU4Njc4NTQ=","is_bot":false,"login":"fvanboven","name":"Frank van Boven"},"body":"As mentioned at https://developer.github.com/v3/orgs/teams/ , a team also has a description. This is currently not part of the Teams https://github.com/PyGithub/PyGithub/blob/master/github/Team.py\n\nWould be great if this can be added\n","comments":[],"createdAt":"2016-09-16T09:28:26Z","number":450,"state":"CLOSED","title":"Add description to teams","url":"https://github.com/PyGithub/PyGithub/issues/450"},{"author":{"id":"MDQ6VXNlcjI4ODY4Ng==","is_bot":false,"login":"jpopelka","name":"Jiri Popelka"},"body":"Hello,\n\nI'm getting `None` when trying to get properties of redirected repo, for example https://github.com/visionmedia/express is redirected to https://github.com/expressjs/express\n\n```\nprint(github.Github(token).get_repo('expressjs/express').forks_count)\n5103\nprint(github.Github(token).get_repo('visionmedia/express').forks_count)\nNone\n```\n\nthe same for `stargazers_count`, `open_issues_count`, `full_name`, etc.\n\nUsing version 1.28\n","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDI1MTM3NTAxOA==","author":{"login":"jpopelka"},"authorAssociation":"CONTRIBUTOR","body":"https://github.com/PyGithub/PyGithub/pull/451 fixes the problem for me. Can we have a new release, please ?\n","createdAt":"2016-10-04T12:34:16Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/447#issuecomment-251375018","viewerDidAuthor":false}],"createdAt":"2016-09-12T11:58:08Z","number":447,"state":"CLOSED","title":"forks_count / stargazers_count / open_issues_count is None if redirected repo","url":"https://github.com/PyGithub/PyGithub/issues/447"},{"author":{"id":"MDQ6VXNlcjYxNzg1MTA=","is_bot":false,"login":"mingrammer","name":"MinJae Kwon (Miti)"},"body":"Some codes (variables, methods) don't follow PEP8.\n\nWhy the codes don't follow PEP8?\n","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDI0OTE5MTU3MA==","author":{"login":"arpit1997"},"authorAssociation":"NONE","body":"I ran some inspections and found some PEP8 code style violation like: \n- Function name should be lowercase \n- variable in function name should be lowercase\n- CamelCase variable imported as constant\n\nwhile we ignore line length limit for all files\n","createdAt":"2016-09-23T13:24:25Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/446#issuecomment-249191570","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDI0OTE5Mzk1Nw==","author":{"login":"mingrammer"},"authorAssociation":"NONE","body":"Yes those are\n\nAre you contributor of here? @arpit1997\n","createdAt":"2016-09-23T13:33:00Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/446#issuecomment-249193957","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDI0OTIyNTY3Mw==","author":{"login":"arpit1997"},"authorAssociation":"NONE","body":"No I am not a contributor of here but if this issue is correct and need to be solved then i can try to solve it  @mingrammer \n","createdAt":"2016-09-23T15:35:47Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/446#issuecomment-249225673","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDI0OTM3MDIwMA==","author":{"login":"mingrammer"},"authorAssociation":"NONE","body":"Oh, welcome! @arpit1997. Are you willing to resolve the issues with me?\n","createdAt":"2016-09-24T15:22:34Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/446#issuecomment-249370200","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDI0OTM3ODI3OA==","author":{"login":"arpit1997"},"authorAssociation":"NONE","body":"i will first try to resolve with some of my tools including pycharm, PEP8 command line etc and we can discuss it later on for further corrections\n","createdAt":"2016-09-24T17:55:40Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/446#issuecomment-249378278","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDI0OTM4MDg3MQ==","author":{"login":"mingrammer"},"authorAssociation":"NONE","body":"79 lines limits applied?\n","createdAt":"2016-09-24T18:45:24Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/446#issuecomment-249380871","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDI0OTM4MTE0NA==","author":{"login":"arpit1997"},"authorAssociation":"NONE","body":"Sorry i did not understand clearly what you are saying. Can you please explain?\n","createdAt":"2016-09-24T18:51:50Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/446#issuecomment-249381144","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDI0OTM4MTYyMA==","author":{"login":"mingrammer"},"authorAssociation":"NONE","body":"Ah, sorry.\nUm, your PR seems like to resolve the problems related to line limits of PEP8 (79 lines). But, I can not see the fixed codes for camelCase related problems.\n","createdAt":"2016-09-24T19:01:33Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/446#issuecomment-249381620","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDI0OTM4MTc5OQ==","author":{"login":"arpit1997"},"authorAssociation":"NONE","body":"I saw that mistake just now. Thanks for for your advice, i will try to resolve this by tomorrow or in 2-3 days\n","createdAt":"2016-09-24T19:05:05Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/446#issuecomment-249381799","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDI0OTM4MTg5MA==","author":{"login":"mingrammer"},"authorAssociation":"NONE","body":"Ye, thanks for your efforts.\n","createdAt":"2016-09-24T19:06:39Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/446#issuecomment-249381890","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQwMjY1NDI5OA==","author":{"login":"stale"},"authorAssociation":"NONE","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","createdAt":"2018-07-05T08:59:04Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/446#issuecomment-402654298","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQxODA1NTYyMA==","author":{"login":"stale"},"authorAssociation":"NONE","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","createdAt":"2018-09-03T09:23:24Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/446#issuecomment-418055620","viewerDidAuthor":false}],"createdAt":"2016-09-12T05:22:47Z","number":446,"state":"CLOSED","title":"Follow PEP8","url":"https://github.com/PyGithub/PyGithub/issues/446"},{"author":{"id":"MDQ6VXNlcjk0MTE5OTk=","is_bot":false,"login":"devashishd12","name":"Devashish Deshpande"},"body":"Hi, I'm encountering a small issue wherein the `.contributions` attribute of a `NamedUser` instance returns `None`. Here's the code:\n\n``` python\nuser = gh.get_user('example_user')\nprint user.contributions\n```\n\nThe output is always `None`. Here `gh` is the `MainClass.Github` authorized instance. Am I doing something wrong here? Thanks a lot for the help!\nP.S. My `pygithub` is in sync with upstream.\n","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDI1NjE4NTQ1Ng==","author":{"login":"kinmanz"},"authorAssociation":"NONE","body":"I think github api just doesn't provide function to get contributions for certain user, I don't know why authors of this library place such field to User class. You can look up here : https://developer.github.com/v3/repos/statistics/#get-the-number-of-additions-and-deletions-per-week\n","createdAt":"2016-10-25T21:45:54Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":1}}],"url":"https://github.com/PyGithub/PyGithub/issues/443#issuecomment-256185456","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM3NzQzMjc4OQ==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"Looking at the latest API:\r\nhttps://developer.github.com/v3/repos/statistics/#get-contributors-list-with-additions-deletions-and-commit-counts\r\n\r\nI believe the `contributions` is an out-dated attribute from the old API:\r\n`/repos/:owner/:repo/contributors`\r\n\r\nThis attribute should be removed and this API needs to be updated as well.\r\n","createdAt":"2018-03-30T03:04:15Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/443#issuecomment-377432789","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM4NTE1NTI0NA==","author":{"login":"s-t-e-v-e-n-k"},"authorAssociation":"COLLABORATOR","body":"The statistics API was implemented years ago -- first added in a4910ac922c12cd1e3ce58766ebda8780391aae4 and completed in c6671c64668d67018cc89b364887dd056a498277.\r\n\r\n(The relevant methods are Repository.get_stats_*)","createdAt":"2018-04-28T09:04:17Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/443#issuecomment-385155244","viewerDidAuthor":false}],"createdAt":"2016-08-31T08:04:56Z","number":443,"state":"CLOSED","title":"Repo stats API out-dated","url":"https://github.com/PyGithub/PyGithub/issues/443"},{"author":{"id":"MDQ6VXNlcjU4Njc4NTQ=","is_bot":false,"login":"fvanboven","name":"Frank van Boven"},"body":"Currently it is not possible to specify, set or update the permissions of a team for a repository. The team's default permissions are used:\n\nThis is possible in the GitHub API:\nhttps://developer.github.com/v3/orgs/teams/#parameters-3\n\nIdea to add this to: https://github.com/PyGithub/PyGithub/blob/master/github/Team.py#L137\n?\n","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDI2MTE5NzIzOA==","author":{"login":"NegatioN"},"authorAssociation":"NONE","body":"This is very useful for us as well. I would like to migrate all repos of our organization while giving certain teams admin-permissions. Doing this manually for hundreds of repos is not desirable.\n","createdAt":"2016-11-17T09:28:09Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/441#issuecomment-261197238","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDMzMjY4NTgzOQ==","author":{"login":"gunkl"},"authorAssociation":"NONE","body":"this appears to be fixed in 1.35, it doesn't seem documented, but set_repo_permission is in the code. tested and works.\r\n\r\nsee def set_repo_permission in 1.35, Teams.py","createdAt":"2017-09-27T23:40:09Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":1}}],"url":"https://github.com/PyGithub/PyGithub/issues/441#issuecomment-332685839","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM3NjAxNzczNA==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"It's in the docs now: http://pygithub.readthedocs.io/en/latest/github_objects/Team.html#github.Team.Team.set_repo_permission","createdAt":"2018-03-26T00:47:04Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/441#issuecomment-376017734","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDg3NjM0NjU4NQ==","author":{"login":"daniel-torresc"},"authorAssociation":"NONE","body":"This should work:\r\n\r\n`g.get_organization(org-name).get_team(team-id).set_repo_permission(\r\n        g.get_organization(org-name\").create_repo(repo-name),\r\n        \"admin\")`\r\n\r\nIt is deprecated, but still works.","createdAt":"2021-07-08T11:06:11Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":1}}],"url":"https://github.com/PyGithub/PyGithub/issues/441#issuecomment-876346585","viewerDidAuthor":false}],"createdAt":"2016-08-26T06:51:50Z","number":441,"state":"CLOSED","title":"Set permissions when adding a repository to a team","url":"https://github.com/PyGithub/PyGithub/issues/441"},{"author":{"id":"MDQ6VXNlcjkzOTUwMQ==","is_bot":false,"login":"jacebrowning","name":"Jace Browning"},"body":"I found the documentation here (http://pygithub.readthedocs.io/), but I didn't see a link to there from GitHub. Perhaps this could be added to the README or set as the project's website on GitHub?\n","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDI0MzY0MDYxOA==","author":{"login":"gtalarico"},"authorAssociation":"NONE","body":"Thank you for posting this @jacebrowning \nFor a moment I thought there was no documentation.\nI actually came here to propose we start one\n","createdAt":"2016-08-31T02:28:07Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/440#issuecomment-243640618","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDI2NDM1Nzc0OA==","author":{"login":"zhangoose"},"authorAssociation":"NONE","body":"Hmm, it's not that easily noticeable but it's a badge on the README\r\n\r\n![image](https://cloud.githubusercontent.com/assets/2905198/20821061/9f329586-b80d-11e6-8af1-70facfbf00b7.png)\r\n\r\n\r\nMaybe it should be more obvious? \r\n\r\n----\r\nEdit\r\n\r\nThere is a fix for this here:\r\n\r\nhttps://github.com/PyGithub/PyGithub/pull/499","createdAt":"2016-12-02T02:33:37Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/440#issuecomment-264357748","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDI2NDM1ODE3OA==","author":{"login":"gtalarico"},"authorAssociation":"NONE","body":"Wouldn't hurt!","createdAt":"2016-12-02T02:36:45Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/440#issuecomment-264358178","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDI2NDM1ODgwNg==","author":{"login":"jacebrowning"},"authorAssociation":"NONE","body":"Or just make it the repository's website:\r\n\r\n![screen shot 2016-12-01 at 9 41 01 pm](https://cloud.githubusercontent.com/assets/939501/20821232/e976d9b2-b80e-11e6-8e72-10e6c6ed7f34.png)\r\n","createdAt":"2016-12-02T02:41:38Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/440#issuecomment-264358806","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDI2OTQxMzI4NA==","author":{"login":"jzelinskie"},"authorAssociation":"CONTRIBUTOR","body":"Closed by #499 ","createdAt":"2016-12-28T02:09:36Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/440#issuecomment-269413284","viewerDidAuthor":false}],"createdAt":"2016-08-20T16:51:20Z","number":440,"state":"CLOSED","title":"Add a link to the documentation?","url":"https://github.com/PyGithub/PyGithub/issues/440"},{"author":{"id":"MDQ6VXNlcjExMzQwMDY=","is_bot":false,"login":"erelson","name":"Eric Relson"},"body":"Is officially part of the API as per:\nhttps://developer.github.com/changes/2016-07-12-ending-multiple-assignees-preview-period/\n\nAlso possibly deprecate the assignee keyword for issue creation. Item 25 here: https://developer.github.com/v3/versions/#v3-deprecations\n","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDI0MTM5MDQ3MA==","author":{"login":"cheungpat"},"authorAssociation":"NONE","body":"This seems to be a duplicate of #404\n","createdAt":"2016-08-22T11:53:13Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/439#issuecomment-241390470","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDI0MTQ3ODEzNA==","author":{"login":"erelson"},"authorAssociation":"NONE","body":"Indeed. My quick check for a similar topic was too quick. :+1: \n","createdAt":"2016-08-22T16:57:42Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/439#issuecomment-241478134","viewerDidAuthor":false}],"createdAt":"2016-08-18T23:48:52Z","number":439,"state":"CLOSED","title":"Add support for multiple assignees","url":"https://github.com/PyGithub/PyGithub/issues/439"},{"author":{"id":"MDQ6VXNlcjE4NTAwNA==","is_bot":false,"login":"RSully","name":"Ryan"},"body":"`gh.get_user().get_repos()` is missing parameters: visibility, affiliation\n\nhttps://developer.github.com/v3/repos/#list-your-repositories\n","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDQyNjY2Mzk3Nw==","author":{"login":"elfosardo"},"authorAssociation":"CONTRIBUTOR","body":"I would like to take care of this","createdAt":"2018-10-03T14:43:55Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/435#issuecomment-426663977","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQyNjY4OTczMg==","author":{"login":"elfosardo"},"authorAssociation":"CONTRIBUTOR","body":"I went ahead and created PR #915 ","createdAt":"2018-10-03T15:51:42Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/435#issuecomment-426689732","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQyNzIyNzU1MA==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"Fixed #915 ","createdAt":"2018-10-05T02:28:27Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/435#issuecomment-427227550","viewerDidAuthor":false}],"createdAt":"2016-08-09T18:22:11Z","number":435,"state":"CLOSED","title":"Get repos missing params","url":"https://github.com/PyGithub/PyGithub/issues/435"},{"author":{"id":"MDQ6VXNlcjE4NTAwNA==","is_bot":false,"login":"RSully","name":"Ryan"},"body":"`GET /user/teams` (e.g. `user.get_teams()`) returns more data than the `Team` object supports. For example, the organization dictionary. Links to docs: https://developer.github.com/v3/orgs/teams/#list-user-teams https://developer.github.com/v3/orgs/teams/#get-team\n","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDMxMDE5ODk3MA==","author":{"login":"CJ-Wright"},"authorAssociation":"NONE","body":"Can this please be solved?","createdAt":"2017-06-21T20:42:12Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/434#issuecomment-310198970","viewerDidAuthor":false}],"createdAt":"2016-08-09T18:17:07Z","number":434,"state":"CLOSED","title":"Can't get organization from Team object","url":"https://github.com/PyGithub/PyGithub/issues/434"},{"author":{"id":"MDQ6VXNlcjI5MzA0NzI=","is_bot":false,"login":"jayfk","name":"Jannis Gebauer"},"body":"PyGithub comes with it's own testing framework that allows to record and replay requests.\n\nCurrently, there is no straightforward documentation for it.\n","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDI1MDc3MTYzMA==","author":{"login":"jakirkham"},"authorAssociation":"NONE","body":"Honestly that would be amazing. We were discussing in another project how to improve our test suite. Right now we are tied to testing with a GitHub token and real GitHub objects. It would be much better if we could use mock objects and not call GitHub's API at all (or very little at least). We were just wondering how you are doing testing (as we use PyGithub heavily) and wondered if there were things we could learn from your approach.\n","createdAt":"2016-09-30T15:16:40Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":1}}],"url":"https://github.com/PyGithub/PyGithub/issues/432#issuecomment-250771630","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDI1MDc3NTk2NQ==","author":{"login":"jakirkham"},"authorAssociation":"NONE","body":"Should also add there are tons of PRs without tests. Maybe this is naive on my part, but I would think there would be many more PRs with tests if people understood how they worked.\n","createdAt":"2016-09-30T15:32:25Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/432#issuecomment-250775965","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDI1MjM1NDcxOQ==","author":{"login":"jakirkham"},"authorAssociation":"NONE","body":"xref: https://github.com/PyGithub/PyGithub/pull/254#issuecomment-77063099 ?\n","createdAt":"2016-10-07T20:35:34Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/432#issuecomment-252354719","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM3NDgwMzc1Nw==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"Still true today, took me a while to understand the testing framework","createdAt":"2018-03-21T00:35:53Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/432#issuecomment-374803757","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM3NDgwOTA0Mg==","author":{"login":"jakirkham"},"authorAssociation":"NONE","body":"Any thoughts on writing up something about what you learned about the testing framework? ;)","createdAt":"2018-03-21T01:13:00Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/432#issuecomment-374809042","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM3NDkyNjE4NQ==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"@jakirkham Maybe in a bit, when I have some free time.","createdAt":"2018-03-21T12:52:53Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/432#issuecomment-374926185","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM5MTczMjA5MQ==","author":{"login":"iliapolo"},"authorAssociation":"NONE","body":"@sfdye I recently wrote a library that also relies heavily on PyGithub. \r\n\r\nI took the time to learn the testing framework and extracted an isolated class that can be used to record and replay. I specifically use it inside py.test suites, not unittest.\r\n\r\nIs it possible for me to release such a class as a library on PyPI? I mean license wise. And if so, would you like to have a look?\r\n\r\n@jakirkham fyi","createdAt":"2018-05-24T14:18:51Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/432#issuecomment-391732091","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM5MTkzMTA1Mg==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"@iliapolo I did not author the original test framework, but I guess that should be fine, since PyGithub is LGPL.","createdAt":"2018-05-25T03:30:48Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/432#issuecomment-391931052","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQwNzI3MjY2MQ==","author":{"login":"stale"},"authorAssociation":"NONE","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","createdAt":"2018-07-24T03:52:52Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/432#issuecomment-407272661","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQxNzczNzY1Ng==","author":{"login":"edthrn"},"authorAssociation":"NONE","body":"Just FYI, to whom is reading this, I've spent 4h trying to figure out how the testing framework works, but couldn't manage to crack it all...\r\n\r\nI decided to move on, and [hacked a quick solution](https://gist.github.com/edthrn/ce28cb1a8a86caab0129a302d8c2bc33). This is probably not the best, but at least it does the job temporarily...","createdAt":"2018-08-31T17:34:57Z","includesCreatedEdit":true,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":3}}],"url":"https://github.com/PyGithub/PyGithub/issues/432#issuecomment-417737656","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDY3NDU4NTA4OA==","author":{"login":"ChaiBapchya"},"authorAssociation":"NONE","body":"@jayfk @sfdye since this documentation is pending since 2016 & many folks have requested it. Can you atleast point to how users can mock pygithub API tests? Framework.py file doesn't cut it... It'd be really helpful if we could get documentation or a working example of how to mock Github APIs in python.\r\n","createdAt":"2020-08-16T22:20:27Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/432#issuecomment-674585088","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs6G7tZA","author":{"login":"curiositycasualty"},"authorAssociation":"NONE","body":"> Just FYI, to whom is reading this, I've spent 4h trying to figure out how the testing framework works, but couldn't manage to crack it all...\r\n> \r\n> I decided to move on, and [hacked a quick solution](https://gist.github.com/edouardtheron/ce28cb1a8a86caab0129a302d8c2bc33). This is probably not the best, but at least it does the job temporarily...\r\n\r\nhttps://gist.github.com/edthrn/ce28cb1a8a86caab0129a302d8c2bc33","createdAt":"2024-08-01T19:19:58Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/432#issuecomment-2263799360","viewerDidAuthor":false}],"createdAt":"2016-08-09T07:45:13Z","number":432,"state":"CLOSED","title":"Document testing framework","url":"https://github.com/PyGithub/PyGithub/issues/432"},{"author":{"id":"MDQ6VXNlcjIzNzE0NQ==","is_bot":false,"login":"makuk66","name":"Martijn Koster"},"body":"In April, Github introduced squash merges, see https://github.com/blog/2141-squash-your-commits\n\nThis functionality is exposed through a preview API: https://developer.github.com/changes/2016-04-01-squash-api-preview/\n\nPyGithub should support this in https://github.com/PyGithub/PyGithub/blob/master/github/PullRequest.py's \"merge\" method.\n","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDIzNzU4OTE0Mg==","author":{"login":"makuk66"},"authorAssociation":"CONTRIBUTOR","body":"Duplicate of https://github.com/PyGithub/PyGithub/pull/418\n","createdAt":"2016-08-04T15:28:37Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/431#issuecomment-237589142","viewerDidAuthor":false}],"createdAt":"2016-08-04T14:59:22Z","number":431,"state":"CLOSED","title":"Add support for squash merge","url":"https://github.com/PyGithub/PyGithub/issues/431"},{"author":{"id":"MDQ6VXNlcjYzNzAwNQ==","is_bot":false,"login":"garrettheel","name":"Garrett"},"body":"Hi, can you please publish a new release. `add_membership` is currently broken in the latest release due to this changeset not being included:\n\nhttps://github.com/PyGithub/PyGithub/commit/a06b5ecfb215eda49c63d06a49cfefb33b12ad9e#diff-20d5f1aeabe90232d524e590cc5d1972\n","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDIzNzY3NDkwNA==","author":{"login":"babineaum"},"authorAssociation":"CONTRIBUTOR","body":"👍 \n","createdAt":"2016-08-04T20:33:54Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/430#issuecomment-237674904","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDIzNzY3NTAwOQ==","author":{"login":"babineaum"},"authorAssociation":"CONTRIBUTOR","body":"I would love to have this cut off master, or wait till we can get a few of the smaller PRs in.\n","createdAt":"2016-08-04T20:34:16Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/430#issuecomment-237675009","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDIzODExNDE2Ng==","author":{"login":"jakirkham"},"authorAssociation":"NONE","body":"Dup of issue ( https://github.com/PyGithub/PyGithub/issues/391 ).\n","createdAt":"2016-08-07T23:01:31Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/430#issuecomment-238114166","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDIzODI0NDgxMA==","author":{"login":"babineaum"},"authorAssociation":"CONTRIBUTOR","body":"Great that its a dupe... Maybe if we will the issues up we can get a release?\n","createdAt":"2016-08-08T13:53:03Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/430#issuecomment-238244810","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDIzODQzMTkxMg==","author":{"login":"jzelinskie"},"authorAssociation":"CONTRIBUTOR","body":"Hey,\n\nI'd love to get another release out, but the build appears to be broken by the last commit.\n@jayfk is there an ETA on a fix for this? Next time you should really open a pull request, so that the head of master is always able to be deployed.\n","createdAt":"2016-08-09T01:57:01Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/430#issuecomment-238431912","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDIzODQ3Njk2OA==","author":{"login":"jayfk"},"authorAssociation":"CONTRIBUTOR","body":"@jzelinskie Sorry, I've tested it locally but forgot to add the changes to the replay data to the commit. For whatever reason they weren't serializable. \n\nFixed in https://github.com/PyGithub/PyGithub/commit/9134aa2b0454f71ab2baf8a99b12b23d47c6be69, build is green again.\n\nHave you got a chance to think about my comment in https://github.com/PyGithub/PyGithub/issues/391#issuecomment-234951469?\n\nIt's a bit of more work right now, but saves you a lot of time for each new release in the future.\n","createdAt":"2016-08-09T07:38:06Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/430#issuecomment-238476968","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDIzOTIwNDU2OA==","author":{"login":"babineaum"},"authorAssociation":"CONTRIBUTOR","body":"SWEET! thanks guys! (and ladies if involved)\n","createdAt":"2016-08-11T15:54:12Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/430#issuecomment-239204568","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDIzOTM3NjEzOQ==","author":{"login":"jayfk"},"authorAssociation":"CONTRIBUTOR","body":"I'm happy to announce that PyGithub `1.27.1` is out :)\n","createdAt":"2016-08-12T07:06:18Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"HOORAY","users":{"totalCount":1}}],"url":"https://github.com/PyGithub/PyGithub/issues/430#issuecomment-239376139","viewerDidAuthor":false}],"createdAt":"2016-08-03T23:16:55Z","number":430,"state":"CLOSED","title":"New release","url":"https://github.com/PyGithub/PyGithub/issues/430"},{"author":{"id":"MDQ6VXNlcjI3ODkwMA==","is_bot":false,"login":"blast-hardcheese","name":"Devon Stewart"},"body":"The current implementation of 2FA is to generate an authorization token and use that for subsequent commands. Unfortunately, this is incompatible with the authorizations API itself:\n\n```\n    github = Github(args.username, args.password)\n    user = github.get_user()\n\n    try:\n        otp_auth = user.create_authorization(scopes=['user'], note='otp_auth')\n    except GithubException as e:\n        # Unable to import TwoFactorAuthentication for some reason. Just assume anything\n        # that goes wrong is due to 2fa.\n        otp_key = raw_input(\"Enter github Two-Factor Auth key: \")\n        otp_auth = user.create_authorization(scopes=['user'], note='otp_auth', onetime_password=otp_key)\n\n    github = Github(otp_auth.token)\n    for authorization in github.get_user().get_authorizations():\n        authorization.delete()\n```\n\nresults in\n\n```\ngithub.GithubException.GithubException: 403 {\n    u'documentation_url': u'https://developer.github.com/enterprise/2.6/v3/oauth_authorizations/#oauth-authorizations-api',\n    u'message': u'This API can only be accessed with username and password Basic Auth'\n}\n```\n\nI see two options:\n- Adding a top-level `otp_key` parameter that gets passed down into the `Requester`\n  - This would be easy to implement, but the github object would have to be reinitialized frequently as OTP keys changed\n- Permitting all API methods to specify their own `otp_key`, which gets added to `requestHeaders`\n  - This would be frustrating, but would ensure that there are no API calls that can't be used via this API.\n","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDMzMzQ3MTA1Mw==","author":{"login":"dadokkio"},"authorAssociation":"NONE","body":"There is any update on this issue? I tried to use TwoFactorAuthentication and pratically it works only the first time. As soon I try to get old authorization or delete the actual one it fails:\r\n\r\n`\r\ngithub.GithubException.TwoFactorException: 401 {u'documentation_url': u'https://developer.github.com/v3/auth#working-with-two-factor-authentication', u'message': u'Must specify two-factor authentication OTP code.'}\r\n`\r\n\r\nAnd I need to delete actual token from my github setting page.\r\n","createdAt":"2017-10-02T08:27:33Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/429#issuecomment-333471053","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM3OTE5NzA3NA==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"@blast-hardcheese Were you able to solve this? ","createdAt":"2018-04-06T09:17:29Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/429#issuecomment-379197074","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM3OTU2NjYyMA==","author":{"login":"blast-hardcheese"},"authorAssociation":"NONE","body":"@sfdye I no longer need to integrate with the Github API using Python, so this problem is no longer applicable to me. I'm actually wondering if this issue is entirely invalid, as `This API can only be accessed with username and password Basic Auth` actually does make sense for `authorization.delete()`.","createdAt":"2018-04-08T17:20:56Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/429#issuecomment-379566620","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM3OTYzOTg0Nw==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"@blast-hardcheese Good point. I am closing this for now.","createdAt":"2018-04-09T05:48:26Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":1}}],"url":"https://github.com/PyGithub/PyGithub/issues/429#issuecomment-379639847","viewerDidAuthor":false}],"createdAt":"2016-07-30T00:49:00Z","number":429,"state":"CLOSED","title":"Two-Factor Authentication should be available for all commands","url":"https://github.com/PyGithub/PyGithub/issues/429"},{"author":{"id":"MDQ6VXNlcjE4NTAwNA==","is_bot":false,"login":"RSully","name":"Ryan"},"body":"I'm using PyCharm for my development environment. I noticed that your code is rather well documented using docstrings. For example:\n\n``` python\n    def get_user(self, login=github.GithubObject.NotSet):\n        \"\"\"\n        :calls: `GET /users/:user <http://developer.github.com/v3/users>`_ or `GET /user <http://developer.github.com/v3/users>`_\n        :param login: string\n        :rtype: :class:`github.NamedUser.NamedUser`\n        \"\"\"\n```\n\nHowever, this seems to not be the appropriate syntax, as my IDE still thinks the result could be Any. However, if I remove the `:class:`, it works properly. Could you send me any links that point to the `:class:` standard? I am going off of [this](https://www.jetbrains.com/help/pycharm/2016.1/type-hinting-in-pycharm.html#legacy).\n","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDQwMjYzMDE0Ng==","author":{"login":"stale"},"authorAssociation":"NONE","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","createdAt":"2018-07-05T07:26:25Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/427#issuecomment-402630146","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQxOTg2ODUwNQ==","author":{"login":"stale"},"authorAssociation":"NONE","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","createdAt":"2018-09-10T10:38:18Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/427#issuecomment-419868505","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQyMDEyNDQzMA==","author":{"login":"RSully"},"authorAssociation":"NONE","body":"There has been no change or answer. Do not auto-close. ","createdAt":"2018-09-11T02:22:59Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/427#issuecomment-420124430","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQzNzU1MzIyMQ==","author":{"login":"stale"},"authorAssociation":"NONE","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","createdAt":"2018-11-10T03:00:33Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/427#issuecomment-437553221","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQ1MjgwMTE3MA==","author":{"login":"stale"},"authorAssociation":"NONE","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","createdAt":"2019-01-09T18:21:27Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/427#issuecomment-452801170","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQ3MTYyNjcxOQ==","author":{"login":"stale"},"authorAssociation":"NONE","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","createdAt":"2019-03-11T16:56:18Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/427#issuecomment-471626719","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQ5MTM4MDU3Mw==","author":{"login":"stale"},"authorAssociation":"NONE","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","createdAt":"2019-05-10T18:05:51Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/427#issuecomment-491380573","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDUxMDcwMTE2OQ==","author":{"login":"stale"},"authorAssociation":"NONE","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","createdAt":"2019-07-12T00:34:57Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/427#issuecomment-510701169","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDUxMTI3MTcwOQ==","author":{"login":"s-t-e-v-e-n-k"},"authorAssociation":"COLLABORATOR","body":"It's hinting for our docs build -- see https://pygithub.readthedocs.io/en/latest/github_objects/Branch.html#github.Branch.Branch.get_required_status_checks, without the :class: it doesn't link the return type to the class.","createdAt":"2019-07-15T04:36:35Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/427#issuecomment-511271709","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDUxNDAzMjE5Mg==","author":{"login":"RSully"},"authorAssociation":"NONE","body":"Is it possible that during the 3 years since this issue was filed that the syntax has changed? More-so, I was more interested in finding a link to the documentation that shows it is necessary (not a link to where your docs show it in us), as - at least 3 years ago (to the day, no less!) - this syntax broke PyCharm. I imagine it must be standardized by now. \r\n\r\nPS: I must say I am quite surprised to see any activity on this, me and stale bot have become quite good friends in the meantime 😊 ","createdAt":"2019-07-23T02:49:44Z","includesCreatedEdit":true,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/427#issuecomment-514032192","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDUxNDA3NzI2OQ==","author":{"login":"s-t-e-v-e-n-k"},"authorAssociation":"COLLABORATOR","body":"It's possible the syntax has changed, but I can't find any documentation for Sphinx about it, and it works, so I'm loathe to change it. Also, it pre-dates my involvement in the project, so that goes double.","createdAt":"2019-07-23T06:47:47Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/427#issuecomment-514077269","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDUzMzc3NjMzMw==","author":{"login":"stale"},"authorAssociation":"NONE","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","createdAt":"2019-09-21T07:34:35Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/427#issuecomment-533776333","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDUzMzgyMDA1NA==","author":{"login":"RSully"},"authorAssociation":"NONE","body":"Do as you wish, but I'd encourage you to use a syntax that IDEs use to make things easier for contributors. I'm not sure if PyCharm supports this syntax or not now, but at the time it definitely did not.","createdAt":"2019-09-21T18:28:17Z","includesCreatedEdit":true,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":1}}],"url":"https://github.com/PyGithub/PyGithub/issues/427#issuecomment-533820054","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDU1NjI1MDE4MA==","author":{"login":"stale"},"authorAssociation":"NONE","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","createdAt":"2019-11-20T19:00:26Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/427#issuecomment-556250180","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDU3NjMwOTY3Mg==","author":{"login":"stale"},"authorAssociation":"NONE","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","createdAt":"2020-01-20T14:55:23Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/427#issuecomment-576309672","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDYwMjEyODM5MA==","author":{"login":"stale"},"authorAssociation":"NONE","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","createdAt":"2020-03-22T00:46:28Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/427#issuecomment-602128390","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDYwNDE4MTMxOQ==","author":{"login":"RSully"},"authorAssociation":"NONE","body":"Why don't other issues get marked as stale? Can we untag this as a question?","createdAt":"2020-03-26T01:49:55Z","includesCreatedEdit":true,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/427#issuecomment-604181319","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDYwNDIyNDg2Mg==","author":{"login":"s-t-e-v-e-n-k"},"authorAssociation":"COLLABORATOR","body":"Ah ha, I found the documentation. https://www.sphinx-doc.org/en/1.5/domains.html#python-roles\r\n\r\nHave you considered filing a bug against PyCharm for this?","createdAt":"2020-03-26T04:39:33Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/427#issuecomment-604224862","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDYzMzM4NDg1OQ==","author":{"login":"stale"},"authorAssociation":"NONE","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","createdAt":"2020-05-25T05:33:39Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_DOWN","users":{"totalCount":1}}],"url":"https://github.com/PyGithub/PyGithub/issues/427#issuecomment-633384859","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDYzMzY5OTk0OQ==","author":{"login":"RSully"},"authorAssociation":"NONE","body":"From what I can tell, the `:class:` syntax is to create a link to a class within Sphinx documentation, not to actually designate a return type in `:rtype:`.\r\n\r\nFor example, I would expect this is how it would be used (not tested):\r\n\r\n```\r\n:rtype: github.NamedUser.NamedUser The rest of this text is describing the return type and may contain links to other classes like :class:`github.CommitStatus.CommitStatus` which would show up in the Sphinx documentation.\r\n```\r\n","createdAt":"2020-05-25T19:56:59Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/427#issuecomment-633699949","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDY2MzgyNjAyMw==","author":{"login":"stale"},"authorAssociation":"NONE","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","createdAt":"2020-07-25T08:05:00Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_DOWN","users":{"totalCount":1}}],"url":"https://github.com/PyGithub/PyGithub/issues/427#issuecomment-663826023","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDcwMzE4OTYyMQ==","author":{"login":"stale"},"authorAssociation":"NONE","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","createdAt":"2020-10-04T02:16:06Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_DOWN","users":{"totalCount":1}}],"url":"https://github.com/PyGithub/PyGithub/issues/427#issuecomment-703189621","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDcwMzIxMTc4NA==","author":{"login":"Croydon"},"authorAssociation":"NONE","body":"Hi! This is my generic reply for every issue which is still relevant and is on the edge of getting closed by a stale bot.","createdAt":"2020-10-04T06:48:22Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":1}},{"content":"LAUGH","users":{"totalCount":1}}],"url":"https://github.com/PyGithub/PyGithub/issues/427#issuecomment-703211784","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDc0ODQ0MDA3Mw==","author":{"login":"stale"},"authorAssociation":"NONE","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","createdAt":"2020-12-19T08:16:28Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/427#issuecomment-748440073","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs48GNao","author":{"login":"stale"},"authorAssociation":"NONE","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","createdAt":"2022-01-09T09:20:40Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/427#issuecomment-1008260776","viewerDidAuthor":false}],"createdAt":"2016-07-22T17:43:40Z","number":427,"state":"CLOSED","title":"Docstrings problem","url":"https://github.com/PyGithub/PyGithub/issues/427"},{"author":{"id":"MDQ6VXNlcjM3NTQ0OTA=","is_bot":false,"login":"Lucashuang0802","name":"Lucas Huang"},"body":"Can we add a new property `GitCommit` for a shorter description of the commit message especially for squashed commit introduced lately by Git.\n","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDM3OTY3MDI0Mw==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"@Lucashuang0802 Can you elaborate a bit more? Why do you need this and how?","createdAt":"2018-04-09T08:10:44Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/423#issuecomment-379670243","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs5FL536","author":{"login":"buhtz"},"authorAssociation":"NONE","body":"Seems outdated and could be closed.","createdAt":"2022-06-20T18:46:53Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":1}}],"url":"https://github.com/PyGithub/PyGithub/issues/423#issuecomment-1160748538","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs5RX3mu","author":{"login":"chouetz"},"authorAssociation":"CONTRIBUTOR","body":"@sfdye can you close this issue?","createdAt":"2022-12-26T14:08:41Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/423#issuecomment-1365211566","viewerDidAuthor":false}],"createdAt":"2016-07-18T18:42:54Z","number":423,"state":"CLOSED","title":"Feature request","url":"https://github.com/PyGithub/PyGithub/issues/423"},{"author":{"id":"MDQ6VXNlcjE2NDM5NjI=","is_bot":false,"login":"hryamzik","name":"Roman Belyakovsky"},"body":"There's a [timeline](https://developer.github.com/v3/issues/timeline/) object in github API, but it's not presented in this library. It provides more information than events. At least it seem to be the only way to get `unsubscribed` events.\n","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDI1NzY0MzE5Mw==","author":{"login":"malex984"},"authorAssociation":"NONE","body":":+1: \n","createdAt":"2016-11-01T18:03:04Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/422#issuecomment-257643193","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDYxMjk2NTQ3Mw==","author":{"login":"mawkee"},"authorAssociation":"CONTRIBUTOR","body":"Wasn't this closed?","createdAt":"2020-04-13T16:08:15Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/422#issuecomment-612965473","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDYxMzc0OTk5Mw==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"Closed in #1302","createdAt":"2020-04-15T00:37:26Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/422#issuecomment-613749993","viewerDidAuthor":false}],"createdAt":"2016-07-18T12:00:06Z","number":422,"state":"CLOSED","title":"Timeline missing","url":"https://github.com/PyGithub/PyGithub/issues/422"},{"author":{"id":"MDQ6VXNlcjM2NTc4NTk=","is_bot":false,"login":"GrapeBaBa","name":"Chen Kai"},"body":"It seems when in iteration, the request will duplicate every item. How to deal with it? For example, the user.get_watched() will do many requests to Github, but actually I just need one time.\n\n``` python\nfor repo in user.get_watched()\n```\n","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDIzMDA5ODkxNA==","author":{"login":"GrapeBaBa"},"authorAssociation":"NONE","body":"sorry, i found the problem\n","createdAt":"2016-07-02T12:14:04Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/416#issuecomment-230098914","viewerDidAuthor":false}],"createdAt":"2016-07-02T11:17:24Z","number":416,"state":"CLOSED","title":"Duplicate request for every iteration","url":"https://github.com/PyGithub/PyGithub/issues/416"},{"author":{"id":"MDQ6VXNlcjM2NTc4NTk=","is_bot":false,"login":"GrapeBaBa","name":"Chen Kai"},"body":"My question is why invoking totalCount directly return None, but iterate will get the number.\n\n``` python\n            repo_commits = repo.get_commits()\n            repo_total = 0\n            for _ in repo_commits:\n                repo_total = repo_total + 1\n```\n\n``` python\n            repo_total = repo.get_commits().totalCount\n```\n","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDIzMDE1NTY3Nw==","author":{"login":"GrapeBaBa"},"authorAssociation":"NONE","body":"I paste my code\n\n``` python\nimport json\nimport os\n\nimport github\nfrom github import Github\n\n# First create a Github instance:\n\ng = Github(\"grapebaba\", \"heatonn1\",per_page=1000)\n\n\ndef main():\n    '''\n    Use small data for this application\n    :return:\n    '''\n    with open(os.path.join(os.path.expanduser(\"~\"),'recruitbot_data.txt'),'w') as f:\n        for user in g.search_users(\"type:user\")[0:10000]:\n            user_dict = {}\n            user_dict['username'] = user.login\n            user_dict['id'] = user.id\n            user_dict['profile_url'] = user.html_url\n            user_dict['location'] = user.location\n            user_dict['followers'] = user.followers\n            user_dict['private_gists'] = user.private_gists\n            user_dict['public_gists'] = user.public_gists\n            user_dict['name'] = user.name\n            user_dict['company'] = user.company\n            user_dict['blog_url'] = user.blog\n            user_dict['email'] = user.email\n            user_dict['id'] = user.id\n            user_dict['contributions']={}\n            for repo in user.get_watched():\n                try:\n                    repo_total = 0\n                    for _ in repo.get_commits():\n                        repo_total = repo_total + 1\n                    if repo.get_stats_contributors() is not None:\n                        for contributor in repo.get_stats_contributors():\n                            if contributor is not None and contributor.author.id == user_dict['id']:\n                                user_dict['contributions'][repo.name]={}\n                                user_dict['contributions'][repo.name]['contributor_commits']=contributor.total\n                                user_dict['contributions'][repo.name]['repo_commits']=repo_total\n                                user_dict['contributions'][repo.name]['language']=repo.language\n                                user_dict['contributions'][repo.name]['stars']=repo.stargazers_count\n                                print user_dict\n                                break\n                except github.GithubException as e:\n                    print e\n\n            f.write(json.dumps(user_dict)+\"\\n\")\n\nif __name__ == '__main__':\n    main()\n\n```\n","createdAt":"2016-07-03T14:19:30Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/415#issuecomment-230155677","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDIzMDE1NTc1Mg==","author":{"login":"GrapeBaBa"},"authorAssociation":"NONE","body":"I have another issue, sometimes I will get a SSL error\n\n``` shell\nTraceback (most recent call last):\n  File \"/tmp/collector.py\", line 54, in <module>\n    main()\n  File \"/tmp/collector.py\", line 36, in main\n    for _ in repo.get_commits():\n  File \"/usr/local/lib/python2.7/dist-packages/github/PaginatedList.py\", line 48, in __iter__\n    newElements = self._grow()\n  File \"/usr/local/lib/python2.7/dist-packages/github/PaginatedList.py\", line 60, in _grow\n    newElements = self._fetchNextPage()\n  File \"/usr/local/lib/python2.7/dist-packages/github/PaginatedList.py\", line 161, in _fetchNextPage\n    headers=self.__headers\n  File \"/usr/local/lib/python2.7/dist-packages/github/Requester.py\", line 171, in requestJsonAndCheck\n    return self.__check(*self.requestJson(verb, url, parameters, headers, input, cnx))\n  File \"/usr/local/lib/python2.7/dist-packages/github/Requester.py\", line 212, in requestJson\n    return self.__requestEncode(cnx, verb, url, parameters, headers, input, encode)\n  File \"/usr/local/lib/python2.7/dist-packages/github/Requester.py\", line 251, in __requestEncode\n    status, responseHeaders, output = self.__requestRaw(cnx, verb, url, requestHeaders, encoded_input)\n  File \"/usr/local/lib/python2.7/dist-packages/github/Requester.py\", line 281, in __requestRaw\n    output = response.read()\n  File \"/usr/lib/python2.7/httplib.py\", line 557, in read\n    s = self._safe_read(self.length)\n  File \"/usr/lib/python2.7/httplib.py\", line 664, in _safe_read\n    chunk = self.fp.read(min(amt, MAXAMOUNT))\n  File \"/usr/lib/python2.7/socket.py\", line 380, in read\n    data = self._sock.recv(left)\n  File \"/usr/lib/python2.7/ssl.py\", line 341, in recv\n    return self.read(buflen)\n  File \"/usr/lib/python2.7/ssl.py\", line 260, in read\n    return self._sslobj.read(len)\n```\n","createdAt":"2016-07-03T14:21:35Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/415#issuecomment-230155752","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDIzODIyNjQ4MA==","author":{"login":"pgmillon"},"authorAssociation":"NONE","body":"Hi,\nAbout your totalCount being None, I have the same with repo.get_pulls().totalCount.\nI think the issue is that the returned JSON doesn't contain data['total_count'].\nMaybe the PaginatedList should implement `__len__` with :\n\n``` python\nif self.__totalCount:\n    return self.__totalCount\nelse:\n   return len(self.__elements)\n```\n","createdAt":"2016-08-08T12:54:14Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/415#issuecomment-238226480","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDIzODQzMjE5OQ==","author":{"login":"jzelinskie"},"authorAssociation":"CONTRIBUTOR","body":"@pgmillon that sounds fair.\nIf you want to draft a tiny PR that does that, I'd be willing to merge it.\n","createdAt":"2016-08-09T01:59:03Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":1}}],"url":"https://github.com/PyGithub/PyGithub/issues/415#issuecomment-238432199","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDIzODU3MDM5OA==","author":{"login":"RSully"},"authorAssociation":"NONE","body":"Noticed the same thing, PaginatedList never sets totalCount. Returning len of elements is not what I am looking for, I want to know how many items there actually are that could be fetched. \n","createdAt":"2016-08-09T14:27:50Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/415#issuecomment-238570398","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDIzODYxNjc1Nw==","author":{"login":"pgmillon"},"authorAssociation":"NONE","body":"Agreed but AFAIK the API don't give any way to know that. So the only way is the present workaround: \n\n``` python\nopened_pulls = repository.get_pulls()\npulls_count = 0\n# Fix no count available on pulls list\nfor _ in opened_pulls:\n    pulls_count += 1\n```\n","createdAt":"2016-08-09T16:53:19Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/415#issuecomment-238616757","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDI1MzEyNzUxMQ==","author":{"login":"gil9red"},"authorAssociation":"NONE","body":"For gists:\n\n```\n    from github import Github\n    gh = Github()\n    gists = gh.get_user('gil9red').get_gists()\n    print(gists.totalCount)  # None\n    print(len(list(gists)))  # 7\n```\n","createdAt":"2016-10-12T06:06:56Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":6}}],"url":"https://github.com/PyGithub/PyGithub/issues/415#issuecomment-253127511","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDI3MDMzMDY3OA==","author":{"login":"qcabanes-hobby"},"authorAssociation":"NONE","body":"Still the same problem:\r\n\r\n```\r\nfrom github import Github\r\ng = Github()\r\nrepos = g.get_repos()\r\nprint(repos.totalCount) # None\r\n```","createdAt":"2017-01-04T09:37:32Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/415#issuecomment-270330678","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDI5OTM0NTU1MA==","author":{"login":"davidxia"},"authorAssociation":"NONE","body":"@gil9red @Tigralt Are you trying to get the total number of items that's returned from iterating over the PaginatedList? If so, there's no way to do that without iterating over the PaginatedList and incrementing a count. See [docs here][docs] (even though they're old they are correct)\r\n\r\n> GitHub provide no way to know the number of items a paginated request will return, so PaginatedList has no length:\r\n>...\r\n> If you really mean to take the length of a PaginatedList, you have to explicitelly [sic] construct a list and then use its length:\r\n\r\nIf you're trying to get the number of items on one page in the PaginatedList, looks like [this PR](https://github.com/PyGithub/PyGithub/issues/433) is still open and being discussed. \r\n\r\n  [docs]: http://pygithub.github.io/PyGithub/v2/user_guide.html#module-PyGithub.Blocking._paginated_list","createdAt":"2017-05-05T00:36:49Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/415#issuecomment-299345550","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM4MTAwNzI2OQ==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"Looking at a few related issues #433 #487 #596\r\n\r\nI guess the `total_count` is from the old Github API response? Shall we remove the `TotalCount` attribute on `PaginatedList` since its implementation is broken and always returns `None`. Instead, we could add something in the docs like:\r\n```\r\n# To get the total number of available elements in PaginatedList\r\nrepos = g.get_user().get_repos()\r\nprint(len(list(repos)))  # we can't avoid to iterate through the whole set to get total count\r\n```\r\n\r\nAnd maybe we can implement the `__len__` to return the current elements count?","createdAt":"2018-04-13T03:02:06Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/415#issuecomment-381007269","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM4MTA1MDA0Nw==","author":{"login":"Tommos0"},"authorAssociation":"NONE","body":"I think the Github API will return the total amount of pages for a query, so if you set `per_page=1` you should be able to get the total number of items from a single request. This can be a lot more efficient than iterating (for large result sets).","createdAt":"2018-04-13T07:32:27Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/415#issuecomment-381050047","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM4MTA1MjU5OQ==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"@Tommos0 I see, this is probably a good idea. We can even do a `HEAD` instead of `GET` just to retrieve the `Link` header.","createdAt":"2018-04-13T07:43:45Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/415#issuecomment-381052599","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQwMjYzMDEzNA==","author":{"login":"stale"},"authorAssociation":"NONE","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","createdAt":"2018-07-05T07:26:23Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/415#issuecomment-402630134","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQwMzI1NzcwNg==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"Fixed in #820 ","createdAt":"2018-07-08T02:45:37Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/415#issuecomment-403257706","viewerDidAuthor":false}],"createdAt":"2016-07-02T09:38:17Z","number":415,"state":"CLOSED","title":"github.PaginatedList.PaginatedList totalCount return None","url":"https://github.com/PyGithub/PyGithub/issues/415"},{"author":{"id":"MDQ6VXNlcjUwMjMwMTI=","is_bot":false,"login":"lnunno","name":"Lucas Nunno"},"body":"I have had no success getting PyGithub to work with an Enterprise installation and am having difficulty debugging the issue. I have tried the example in the introduction. For example:\n\n``` python\nfrom github import Github\naccess_token = 'BLAH'\ngh = Github(access_token, base_url='https://myorg.github.com/api/v3')\ngh.get_user().name\n```\n\nAnd then I get:\n\n```\n/home/llnunno/.local/lib/python2.7/site-packages/github/GithubObject.pyc in _storeAndUseAttributes(self, headers, attributes)\n     84         self._headers = headers\n     85         self._rawData = attributes\n---> 86         self._useAttributes(attributes)\n     87 \n     88     @property\n\n/home/llnunno/.local/lib/python2.7/site-packages/github/AuthenticatedUser.pyc in _useAttributes(self, attributes)\n   1085 \n   1086     def _useAttributes(self, attributes):\n-> 1087         if \"avatar_url\" in attributes:  # pragma no branch\n   1088             self._avatar_url = self._makeStringAttribute(attributes[\"avatar_url\"])\n   1089         if \"bio\" in attributes:  # pragma no branch\n\nTypeError: argument of type 'NoneType' is not iterable\n```\n\nDo I need additional information in the `Github` constructor? There is no documentation for any of the constructor arguments.\n\nWhere the access token is generated via Account Settings -> Applications -> Personal access tokens. I know the access token is valid because I can send requests to the API manually and get responses.\n","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDIyODk0MzAwNA==","author":{"login":"jzelinskie"},"authorAssociation":"CONTRIBUTOR","body":"What version of Python and GH Enterprise?\n","createdAt":"2016-06-28T04:07:24Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/411#issuecomment-228943004","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDIyOTE0OTY1Mg==","author":{"login":"lnunno"},"authorAssociation":"NONE","body":"Python version 2.7.5\nGithub Enterprise 11.10.353\n","createdAt":"2016-06-28T19:03:51Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/411#issuecomment-229149652","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDMwMjQ4MTMxMA==","author":{"login":"psalaberria002"},"authorAssociation":"NONE","body":"@lnunno Try the folowing. It works for me.\r\n\r\n```\r\ngh = Github(username, access_token, base_url='https://myorg.github.com/api/v3')\r\n```\r\n\r\nEDIT: Nevermind. Access token and url also work, without the username.","createdAt":"2017-05-18T17:21:37Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":2}}],"url":"https://github.com/PyGithub/PyGithub/issues/411#issuecomment-302481310","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM4NDUzNDA5NQ==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"Added in de6c2ec4e2b939cdc24da9802cfab2704d32ad80","createdAt":"2018-04-26T06:58:25Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/411#issuecomment-384534095","viewerDidAuthor":false}],"createdAt":"2016-06-28T00:08:43Z","number":411,"state":"CLOSED","title":"Example using OAUTH Access Token with Enterprise Installation","url":"https://github.com/PyGithub/PyGithub/issues/411"},{"author":{"id":"MDQ6VXNlcjc3OTEzMjk=","is_bot":false,"login":"mandeeps708","name":"Mandeep Singh"},"body":"I was using PyGithub for a while now. Lately, I was using Personal\nAccess tokens for doing authentication.\n\nNow I want to use it as a registered application. Can you provide a\nhint of how to do this? I used the Client ID in place of token but it\ndidn't work out.\n\nI am working on an application that is in command-line interface currently.\n","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDI1MDA3MzYwMQ==","author":{"login":"arpit1997"},"authorAssociation":"NONE","body":"As much as i understand you want to distribute your application to other users. If so then you can use Github OAuth for this purpose. You can generate a link from your application which will redirects user to authorise your application for his account. Once you have recieved OAuth token yuo can exchange it with access otken from Github api or this python wrapper (PyGithub). \nNote: you must create a new application for your Github API key and secret.\nFor more details you can refer to [this](http://developer.github.com)\n","createdAt":"2016-09-28T05:15:16Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/410#issuecomment-250073601","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDI1MDA3NTAyOA==","author":{"login":"mandeeps708"},"authorAssociation":"NONE","body":"Hello @arpit1997 \nThanks for replying.\n\nWhat if I am working on a CLI application?\n","createdAt":"2016-09-28T05:27:20Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/410#issuecomment-250075028","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDI1MDA3NjUyOA==","author":{"login":"arpit1997"},"authorAssociation":"NONE","body":"@mandeeps708 \nwhether you are working on a CLI application on GUI application the back-end of your application won't change. You can use some library like [Python-requests](https://github.com/kennethreitz/requests) or Curl if you are a linux user for your api requests and authorization.. You can view some python requests example and Github api [example](http://developer.github.com). I would like to help you need any further help.\n","createdAt":"2016-09-28T05:39:01Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/410#issuecomment-250076528","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDI1MDA3NzA5NQ==","author":{"login":"mandeeps708"},"authorAssociation":"NONE","body":"Thanks @arpit1997 \n\nYou mean to say I can have give user a link in the command-line that he would open in the browser and authorize the application?\n\nThen how the auth token will get there in my application?\n","createdAt":"2016-09-28T05:43:29Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/410#issuecomment-250077095","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDI1MDA3ODkyOQ==","author":{"login":"arpit1997"},"authorAssociation":"NONE","body":"there are two ways that you can use for your application to authorise the use\n- first is basic authentication: this way every time user has to enter his password or you can cache the passwords here is an example.\n  `curl -u username https://api.github.com/user`\n  this will prompt you for password corresponding to that user. when password is correct you can access the user account from your application\n- another way is a two factor authentication which is OAuth. Even though it is cumbersome and lengthy it is a very good choice for security reason and user's trust on your application. Since OAuth is a big procedure you can read it by yourself [here on github](https://developer.github.com/v3/oauth_authorizations/#create-a-new-authorization)\n","createdAt":"2016-09-28T05:58:33Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/410#issuecomment-250078929","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDI1MDA4Nzc1NQ==","author":{"login":"mandeeps708"},"authorAssociation":"NONE","body":"I meant I tried following the docs a few time back and I think I couldn't find a way to have OAuth working through CLI application.\n\nMaybe you can give me some overview of how it will work?\n\nAnyways, thank you.\n","createdAt":"2016-09-28T07:01:15Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/410#issuecomment-250087755","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDI1MDM4MTc0OQ==","author":{"login":"arpit1997"},"authorAssociation":"NONE","body":"Here are some examples, I suppose these can help you out from your problem\nyou need to create an OAuth token using [Github API OAuth](http://developer.github.com/v3/oauth/#oauth-authorizations-api) once per user then you can store it with some mechanism\n`curl https://api.github.com/authorizations \\\n--user \"USERNAME\" \\\n--data '{\"scopes\":[\"gist\"],\"note\":\"Demo\"}'`\nreplace USERNAME with the username of the user\nYou can change the data parameter depending upon which user data you want to access.\nThe above will prompt user for his account password, after entering the password a JSON response is returned containing a token field. Now that you have the OAuth token yuo can use it to access user data like this\n`curl -H \"Authorization: token OAUTH-TOKEN\" https://api.github.com/gists/starred`\nreplace OAUTH-TOKEN field with the token that you recieved in json response. \nyou can also list out authorisations that you have for a user\n`curl --user \"USERNAME\" https://api.github.com/authorizations`\nin this example this should return that you have access to user's gists\n\nfeel free to ask any other question\n","createdAt":"2016-09-29T06:29:55Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/410#issuecomment-250381749","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQwMjY1NDI5Mg==","author":{"login":"stale"},"authorAssociation":"NONE","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","createdAt":"2018-07-05T08:59:03Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/410#issuecomment-402654292","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQxODA1NTYyNg==","author":{"login":"stale"},"authorAssociation":"NONE","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","createdAt":"2018-09-03T09:23:25Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/410#issuecomment-418055626","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDUzNjYyMTE0Ng==","author":{"login":"xor2003"},"authorAssociation":"NONE","body":"The attached works for me:\r\n[github_access_token_for_app.zip](https://github.com/PyGithub/PyGithub/files/3672027/github_access_token_for_app.zip)\r\nIt will generate password.\r\nUsername is x-access-token\r\nhttps://developer.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-an-installation","createdAt":"2019-09-30T15:39:42Z","includesCreatedEdit":true,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/410#issuecomment-536621146","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs5DG858","author":{"login":"jonashartwig"},"authorAssociation":"NONE","body":"Here is an updated version of the above provided python script. Can a feature like this be added to this package?\r\n\r\n```python\r\ndef get_token_from_application(app_id: str, app_private_key: str) -> str:\r\n    \"\"\"\r\n    See\r\n    https://developer.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app\r\n    for an explanation of how/why this is like it is.\r\n    Requires: requests pyjwt github3 cryptography\r\n    \"\"\"\r\n\r\n    payload = {\r\n        # issued at time\r\n        'iat': int(time.time()),\r\n        # JWT expiration time (10 minute maximum)\r\n        'exp': int(time.time() + (10 * 60)),\r\n        # GitHub App's identifier\r\n        'iss': str(app_id)\r\n    }\r\n\r\n    url = \"https://api.github.com/app\"\r\n    jwt_payload = jwt.encode(payload, app_private_key, algorithm=\"RS256\")\r\n    # print (jwt_payload)\r\n    headers = {\"Authorization\": \"Bearer {jwt}\".format(jwt=jwt_payload),\r\n               \"Accept\": \"application/vnd.github.machine-man-preview+json\"}\r\n\r\n    # Requests \"helpfully\" clobbers Authentication headers if you don't use your own\r\n    # authentication method. Thanks, requests.\r\n    class CustomJWTAuth(requests.auth.AuthBase):\r\n        def __call__(self, r):\r\n            r.headers['Authorization'] = headers['Authorization']\r\n            return r\r\n\r\n    response = requests.get(url, headers=headers, auth=CustomJWTAuth())\r\n    response.raise_for_status()\r\n\r\n    installations_url = \"https://api.github.com/app/installations\"\r\n    installations_response = requests.get(installations_url, headers=headers, auth=CustomJWTAuth())\r\n    installations_response.raise_for_status()\r\n\r\n    print(installations_response.json())\r\n\r\n    for item in installations_response.json():\r\n        access_tokens_url = item[\"access_tokens_url\"]\r\n        access_tokens_response = requests.post(access_tokens_url, headers=headers, auth=CustomJWTAuth())\r\n        access_tokens_response.raise_for_status()\r\n\r\n        token = access_tokens_response.json()['token']\r\n\r\n        return token\r\n\r\n    raise Exception(\"No app installations\")\r\n```","createdAt":"2022-05-13T10:28:59Z","includesCreatedEdit":true,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/410#issuecomment-1125895804","viewerDidAuthor":false}],"createdAt":"2016-06-27T06:25:27Z","number":410,"state":"CLOSED","title":"Using Registered App?","url":"https://github.com/PyGithub/PyGithub/issues/410"},{"author":{"id":"MDQ6VXNlcjMxNDcxNg==","is_bot":false,"login":"astrofrog","name":"Thomas Robitaille"},"body":"It looks like the repository class is missing a `create_file` method to implement the following API:\n\nhttps://developer.github.com/v3/repos/contents/#create-a-file\n","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDIzMzM3MTAyNg==","author":{"login":"jayfk"},"authorAssociation":"CONTRIBUTOR","body":"That's now possible, see https://github.com/PyGithub/PyGithub/pull/379\n","createdAt":"2016-07-18T15:52:22Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/409#issuecomment-233371026","viewerDidAuthor":false}],"createdAt":"2016-06-22T17:16:54Z","number":409,"state":"CLOSED","title":"No method to create files","url":"https://github.com/PyGithub/PyGithub/issues/409"},{"author":{"id":"MDQ6VXNlcjc3OTEzMjk=","is_bot":false,"login":"mandeeps708","name":"Mandeep Singh"},"body":"``` python\nrepo = g.get_user(github_username).get_repo(repository)\nfor x in repo.get_dir_contents(\"\"):\n    if(x.raw_data.get(\"type\") == \"submodule\"):\n        print(x.name)\n        print(x.raw_data.get(\"submodule_git_url\"))\n```\n\nHow can I get the owner name and description of the submodule? I got the URL of submodule already.\n\nThank you.\n\nEntire code is here: https://github.com/mandeeps708/Github-API-Fun/blob/master/get-submodules.py\nhttps://mandeep7.wordpress.com/2016/06/14/fetching-github-submodules/\n","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDIyODI2MjU0MA==","author":{"login":"mandeeps708"},"authorAssociation":"NONE","body":"I figured it out. There is no way to get the username from the URL.\nI used \"re\" to extract the username/repository from the URL and then passed them to the Github() and then accessed the required information.\n","createdAt":"2016-06-24T05:41:42Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/408#issuecomment-228262540","viewerDidAuthor":false}],"createdAt":"2016-06-19T12:25:56Z","number":408,"state":"CLOSED","title":"How to get submodule owner name?","url":"https://github.com/PyGithub/PyGithub/issues/408"},{"author":{"id":"MDQ6VXNlcjE5NTM3NDUy","is_bot":false,"login":"joshfrazier-navera","name":""},"body":"How would I go about verifying if a PaginatedList is empty, or returned nothing from my repo? I have tried the usual python mechanisms for checking if a list is empty like: if not <listObject>: and so on, but they do not seem to work on the PaginatedList. The tool I am building grabs the latest pull request and commit information from a given repo. If there are no open pull requests, I would like to do something other than throwing a list index out of range exception every time.  \n","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDI2NTQzMjIxNw==","author":{"login":"jloh"},"authorAssociation":"NONE","body":"Did you ever manage to figure this out? I'm running into this issue at the moment.","createdAt":"2016-12-07T12:12:50Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/406#issuecomment-265432217","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDI5OTQ4Njg5MQ==","author":{"login":"davidxia"},"authorAssociation":"NONE","body":"@joshfrazier-navera You can simply iterate through and break out of the loop after the first iteration.\r\n\r\n```python\r\nfor pull in pulls:\r\n    # do stuff\r\n    break\r\n```","createdAt":"2017-05-05T14:54:09Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/406#issuecomment-299486891","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQwMjY1NDIyMQ==","author":{"login":"stale"},"authorAssociation":"NONE","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","createdAt":"2018-07-05T08:58:53Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/406#issuecomment-402654221","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQxODA1NTYzOQ==","author":{"login":"stale"},"authorAssociation":"NONE","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","createdAt":"2018-09-03T09:23:27Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/406#issuecomment-418055639","viewerDidAuthor":false}],"createdAt":"2016-06-10T16:27:55Z","number":406,"state":"CLOSED","title":"Check if PaginatedList isEmpty","url":"https://github.com/PyGithub/PyGithub/issues/406"},{"author":{"id":"MDQ6VXNlcjEyNDQxMjM=","is_bot":false,"login":"birkholz","name":"Brandon Birkholz"},"body":"Deploy keys have a field \"read_only\", which cannot currently be set or retrieved.\nhttps://developer.github.com/v3/repos/keys/\n","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDM1MDE2NjYzOA==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"+1","createdAt":"2017-12-08T04:04:50Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/405#issuecomment-350166638","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM1MDE2NzUzMw==","author":{"login":"jasonwhite"},"authorAssociation":"COLLABORATOR","body":"Fixed in #570.","createdAt":"2017-12-08T04:12:57Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/405#issuecomment-350167533","viewerDidAuthor":false}],"createdAt":"2016-05-30T00:20:02Z","number":405,"state":"CLOSED","title":"Add support for read only deploy keys","url":"https://github.com/PyGithub/PyGithub/issues/405"},{"author":{"id":"MDQ6VXNlcjM4MDk1MA==","is_bot":false,"login":"diwu1989","name":"DW"},"body":"see https://github.com/blog/2178-multiple-assignees-on-issues-and-pull-requests\n\nhttps://developer.github.com/v3/issues/assignees/#add-assignees-to-an-issue\n","comments":[],"createdAt":"2016-05-27T20:51:15Z","number":404,"state":"CLOSED","title":"support multiple assignees on issues","url":"https://github.com/PyGithub/PyGithub/issues/404"},{"author":{"id":"MDQ6VXNlcjk3MzA1MDg=","is_bot":false,"login":"jfach","name":"Jordan Facibene"},"body":"When calling `help()` on anything within the repo, for example `help(github)`, I get the following error:\n\n```\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\n  File \"/usr/lib64/python2.6/site.py\", line 432, in __call__\n    import pydoc\n  File \"/usr/lib64/python2.6/pydoc.py\", line 52, in <module>\n    import sys, imp, os, re, types, inspect, __builtin__, pkgutil\n  File \"/usr/lib64/python2.6/inspect.py\", line 39, in <module>\n    import tokenize\n  File \"/usr/lib64/python2.6/tokenize.py\", line 38, in <module>\n    COMMENT = N_TOKENS\nNameError: name 'N_TOKENS' is not defined\n```\n","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDIzOTU1NjY4MQ==","author":{"login":"jepler"},"authorAssociation":"NONE","body":"The module where the problem occurs, `tokenize`, is a built-in module in Python 2.6.\n\nDoes this problem occur if you execute `python2.6 -c 'import tokenize'`?  If so, it could indicate a damaged Python installation.\n\n`N_TOKENS` is expected to be imported into tokenize by `from tokens import *`.  A file `tokens.py` in PYTHONPATH that is not the system `tokens.py` could cause this problem.  `python -c 'from tokens import *; print N_TOKENS` could test this specifically, and `python -c 'import tokens; print tokens.__file__'` will show you if tokens.py is coming from an unexpected location.\n","createdAt":"2016-08-12T20:51:47Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/402#issuecomment-239556681","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDI4MDQzNDc0OQ==","author":{"login":"neoranger"},"authorAssociation":"NONE","body":"I have this problem. What is the solution?\r\n\r\nCheers.","createdAt":"2017-02-16T19:34:47Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/402#issuecomment-280434749","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDUzMTA4NzQ1Nw==","author":{"login":"stale"},"authorAssociation":"NONE","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","createdAt":"2019-09-13T03:48:34Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/402#issuecomment-531087457","viewerDidAuthor":false}],"createdAt":"2016-05-23T14:22:23Z","number":402,"state":"CLOSED","title":"N_TOKENS is not defined","url":"https://github.com/PyGithub/PyGithub/issues/402"},{"author":{"id":"MDQ6VXNlcjMyNzE0Ng==","is_bot":false,"login":"jacquev6","name":"Vincent Jacques"},"body":"Hello,\n\nin the readme, you're asking people to send me an e-mail if they want to contribute. I'm afraid I'm doing a terrible job at replying their messages, so you should handle this without involving me.\n\n@jzelinskie you're now an admin of the org so that you can add people and make them admins as well if appropriate. Please let me know in this issue if you need me to do anything else.\n\nThanks,\n","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDIyODk0MTk2MQ==","author":{"login":"jzelinskie"},"authorAssociation":"CONTRIBUTOR","body":"I've updated a few of the project files and removed this section of the README.\n","createdAt":"2016-06-28T03:57:46Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/401#issuecomment-228941961","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDIyOTA2NzU5OA==","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"Thanks!\n","createdAt":"2016-06-28T14:33:03Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/401#issuecomment-229067598","viewerDidAuthor":false}],"createdAt":"2016-05-23T07:31:06Z","number":401,"state":"CLOSED","title":"Please don't ask people to send me email","url":"https://github.com/PyGithub/PyGithub/issues/401"},{"author":{"id":"MDQ6VXNlcjEzOTM0MjY=","is_bot":false,"login":"sidewinder12s","name":"Geoff Webster"},"body":"Add support for this endpoint. \n\nhttps://developer.github.com/v3/orgs/members/#add-or-update-organization-membership\n","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDI1Njk3NTg0NQ==","author":{"login":"carltonmason"},"authorAssociation":"NONE","body":"I'd really like to see this in PyGithub too...\n","createdAt":"2016-10-28T17:11:02Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/399#issuecomment-256975845","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDMzNzY5MTY4OA==","author":{"login":"alertedsnake"},"authorAssociation":"NONE","body":"So.. this seems to work fine, can we get it merged in?  It's been months...","createdAt":"2017-10-18T18:51:09Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/399#issuecomment-337691688","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM1NDE3MDc3Mg==","author":{"login":"moghya"},"authorAssociation":"NONE","body":"how to invite someone with just email id using PyGithub ?","createdAt":"2017-12-27T20:08:40Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":1}}],"url":"https://github.com/PyGithub/PyGithub/issues/399#issuecomment-354170772","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM3ODQxMjAxMA==","author":{"login":""},"authorAssociation":"NONE","body":"Hmm, what's the status of this issue? I see the following PRs that appear to address it:\r\n\r\n- https://github.com/PyGithub/PyGithub/pull/424\r\n- https://github.com/PyGithub/PyGithub/pull/726\r\n\r\nNeither of the above have unittests.\r\n\r\nBut these 2 commits referenced above add the tests:\r\n- https://github.com/jbweston/PyGithub/commit/c1ce18a24632e8d4b0752b19ab3fec9806e54593\r\n- https://github.com/jwplayer/PyGithub/commit/3fb0e82d71bb112f3d4632e6b5883fd98d680866\r\n\r\n","createdAt":"2018-04-03T21:54:49Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/399#issuecomment-378412010","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM3ODU0MjUwOQ==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"@tjboring You are right. Would you like to glue the pieces together so we can merge this change?","createdAt":"2018-04-04T09:42:52Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/399#issuecomment-378542509","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM3ODYzMTQzMQ==","author":{"login":""},"authorAssociation":"NONE","body":"@sfdye Sure. Let me figure out the best way to proceed. I'll update this thread with the steps once I figure it out.","createdAt":"2018-04-04T14:59:50Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":1}}],"url":"https://github.com/PyGithub/PyGithub/issues/399#issuecomment-378631431","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM3ODY1NDYyNA==","author":{"login":""},"authorAssociation":"NONE","body":"@sfdye I'm open to other suggestions, but what I've come up with is this:\r\n\r\n- create a new fork\r\n- copy/paste the changes from PRs 424 and 726\r\n- write tests and get them to pass\r\n- create new PR","createdAt":"2018-04-04T16:04:17Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/399#issuecomment-378654624","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM3ODY2NjE1NQ==","author":{"login":""},"authorAssociation":"NONE","body":"@sfdye I'm getting a 404 trying to create the replay data:\r\n\r\n```\r\n$ python -m github.tests Organization.testAddMembers --record --auth_with_token\r\nGET /orgs/BeaverSoftware None {'Authorization': 'token XXXXXX', 'User-Agent': 'PyGithub/Python'} => 404\r\n```","createdAt":"2018-04-04T16:40:44Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/399#issuecomment-378666155","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM3ODgwMzM4OQ==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"@tjboring As I mentioned in another thread, the `BeaverSoftware` organization does not seem to exist anymore. \r\n\r\nMaybe you can open a PR to merge the commits first and I will take a look? ","createdAt":"2018-04-05T02:35:30Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/399#issuecomment-378803389","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM3OTAwMzc3OQ==","author":{"login":""},"authorAssociation":"NONE","body":"I figured out a workaround. PR forthcoming.","createdAt":"2018-04-05T16:54:57Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/399#issuecomment-379003779","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM3OTAxNTc1OA==","author":{"login":""},"authorAssociation":"NONE","body":"@sfdye https://github.com/PyGithub/PyGithub/pull/741","createdAt":"2018-04-05T17:33:07Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/399#issuecomment-379015758","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM3OTgyOTA0Mw==","author":{"login":""},"authorAssociation":"NONE","body":"@sfdye since you merged #741, should this issue be closed? Also, when will the next release be created? i'll need to pull that version in to my project at work.","createdAt":"2018-04-09T17:24:03Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/399#issuecomment-379829043","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM3OTkyOTQ0NQ==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"I will make a release today.","createdAt":"2018-04-09T23:58:46Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/399#issuecomment-379929445","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM3OTk1MjkwNA==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"Released 1.39","createdAt":"2018-04-10T02:22:55Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/399#issuecomment-379952904","viewerDidAuthor":false}],"createdAt":"2016-05-03T23:11:30Z","number":399,"state":"CLOSED","title":"Add support for adding/updating organization membership","url":"https://github.com/PyGithub/PyGithub/issues/399"},{"author":{"id":"MDQ6VXNlcjEzMjI2MQ==","is_bot":false,"login":"BrunoVernay","name":"Bruno Vernay"},"body":"GitHub does the job of parsing the repository's License file to extract License info https://developer.github.com/v3/licenses/#get-a-repositorys-license\n\nIt would be nice to have this available in the PyGithub.\n","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDM3Mzk3MDUwMA==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"Close as duplicate of #508 ","createdAt":"2018-03-18T03:38:53Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/398#issuecomment-373970500","viewerDidAuthor":false}],"createdAt":"2016-04-24T14:33:41Z","number":398,"state":"CLOSED","title":"Implement get_license as provided in preview by GitHub","url":"https://github.com/PyGithub/PyGithub/issues/398"},{"author":{"id":"MDQ6VXNlcjMwMzE2NA==","is_bot":false,"login":"zaibon","name":"Christophe de Carvalho"},"body":"Format of date in create milstone doesn't follow github api. See https://developer.github.com/v3/issues/milestones/#create-a-milestone\n\ntest code\n\n```\nimport datetime\nimport github\n\nsecret = '********'\napi=github.Github(secret)\nrepo = api.get_repo(\"zaibon/temp\")\nrepo.create_milestone(title=\"test\", description=\"hello word\", due_on=datetime.datetime.now())\n```\n\nError\n\n```\nTraceback (most recent call last):\n  File \"test.py\", line 8, in <module>\n    repo.create_milestone(title=\"test\", description=\"hello word\", due_on=datetime.datetime.now())\n  File \"/usr/local/lib/python3.5/dist-packages/github/Repository.py\", line 954, in create_milestone\n    input=post_parameters\n  File \"/usr/local/lib/python3.5/dist-packages/github/Requester.py\", line 171, in requestJsonAndCheck\n    return self.__check(*self.requestJson(verb, url, parameters, headers, input, cnx))\n  File \"/usr/local/lib/python3.5/dist-packages/github/Requester.py\", line 179, in __check\n    raise self.__createException(status, responseHeaders, output)\ngithub.GithubException.GithubException: 422 {'message': 'Invalid request.\\n\\n2016-04-13 is not a valid date-time.', 'documentation_url': 'https://developer.github.com/v3/issues/milestones/#create-a-milestone'}\n```\n\nI have a fix in my forked repo.\nhttps://github.com/zaibon/PyGithub/commit/8b0399c08286a0d4690d492a02f8b17cd2a24113\nIf it's good enough I can create a pull request.\n","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDIxMjQyMDczMA==","author":{"login":"pnavarrc"},"authorAssociation":"NONE","body":"I found a workaround for this, create the milestone and then edit the milestone’s due date:\n\n``` python\n# Create the milestone and set its due date\nmilestone = repo.create_milestone(\"title\", description=\"description\")\nmilestone.edit(\"title\", due_on=datetime.datetime.now())\n```\n\n@zaibon solution looks good in my opinion, I am available to review and test if that helps.\n","createdAt":"2016-04-20T13:19:38Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/396#issuecomment-212420730","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDIxMjQyODE4MQ==","author":{"login":"zaibon"},"authorAssociation":"NONE","body":"Thanks for the workaround, it help me to continue while waiting a proper fix.\n\nI opened a PR for it at https://github.com/PyGithub/PyGithub/pull/397\n","createdAt":"2016-04-20T13:41:18Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/396#issuecomment-212428181","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDI2OTQ0MTYyNA==","author":{"login":"pr-lawrence"},"authorAssociation":"NONE","body":"Hello :) I met the same problem.\r\nWhy this issue and PR are pending?","createdAt":"2016-12-28T08:07:04Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/396#issuecomment-269441624","viewerDidAuthor":false}],"createdAt":"2016-04-13T06:56:31Z","number":396,"state":"CLOSED","title":"Bad format of due date in create milestone","url":"https://github.com/PyGithub/PyGithub/issues/396"},{"author":{"id":"MDQ6VXNlcjE2Njk4MTk4","is_bot":false,"login":"conda-forge-admin","name":"automatic conda-forge administrator"},"body":"I've been looking for a while to figure out how to post comments which contain emojis. It seems that a comment which contains `:+1:` posted with pygithub isn't rendered as a :+1: on the comment. Any ideas?\n\nThanks!\n","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDIwMjI5NzkzMQ==","author":{"login":"pelson"},"authorAssociation":"NONE","body":"Sorry, was logged in with the wrong account when I posted this. :wink: \nAny help greatly appreciated.\n","createdAt":"2016-03-28T08:24:52Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/394#issuecomment-202297931","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDIwODAxMzc4Nw==","author":{"login":"adamtheturtle"},"authorAssociation":"MEMBER","body":"Thanks for reporting this issue @pelson . Unfortunately I have been unable to recreate it.\n\nI used the following code:\n\n``` python\nfrom github import Github\n\ng = Github(token)\n\nrepo = g.get_repo('adamtheturtle/github-experiment')\nissue = repo.get_issue(1)\nissue.create_comment('This is an emoji: :+1:')\n```\n\nand the comment is rendered with the emoji at https://github.com/adamtheturtle/github-experiment/issues/1. Please could you post the part of your code which is not working?\n\nAdam\n","createdAt":"2016-04-10T16:46:49Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/394#issuecomment-208013787","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDIwODE4NDEzMQ==","author":{"login":"pelson"},"authorAssociation":"NONE","body":"This is an emoji :+1:\n","createdAt":"2016-04-11T06:40:00Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/394#issuecomment-208184131","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDIwODE4NDE4OA==","author":{"login":"pelson"},"authorAssociation":"NONE","body":"This is an emoji :+1:\n","createdAt":"2016-04-11T06:40:30Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/394#issuecomment-208184188","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDIwODE4NTYyMg==","author":{"login":"pelson"},"authorAssociation":"NONE","body":"How weird. I was certainly having this problem 2 weeks ago, but I agree, it now appears to work as expected. Thanks for looking @adamtheturtle!\n","createdAt":"2016-04-11T06:44:45Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/394#issuecomment-208185622","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDIwODI3ODk4Mw==","author":{"login":"adamtheturtle"},"authorAssociation":"MEMBER","body":"@pelson Great. I'll close this. I'm curious what the problem was. Please re-raise if you have any trouble.\n","createdAt":"2016-04-11T10:44:34Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":1}}],"url":"https://github.com/PyGithub/PyGithub/issues/394#issuecomment-208278983","viewerDidAuthor":false}],"createdAt":"2016-03-28T08:18:20Z","number":394,"state":"CLOSED","title":"Rendering emojis from comments","url":"https://github.com/PyGithub/PyGithub/issues/394"},{"author":{"id":"MDQ6VXNlcjE2MTY1MzE=","is_bot":false,"login":"cptanalatriste","name":"Carlos Gavidia-Calderon"},"body":"I'm trying to get a list of release for a repository. For that, I'm trying the following:\n\n```\n\n    client = Github(config.get_github_token(), per_page=PER_PAGE)\n    user = client.get_user('user')\n    repository = client.get_repo('repo')\n    releases = repository.get_releases()\n\n    for release in releases:\n        print 'release ', release\n        print 'release.name ', release.name\n```\n\nHowever, I got this error as a response:\n\n```\n File \"\\site-packages\\github\\PaginatedList.py\", line 48, in __iter__\n    newElements = self._grow()\n  File \"\\site-packages\\github\\PaginatedList.py\", line 60, in _grow\n    newElements = self._fetchNextPage()\n  File \"\\site-packages\\github\\PaginatedList.py\", line 161, in _fetchNextPage\n    headers=self.__headers\n  File \"\\site-packages\\github\\Requester.py\", line 171, in requestJsonAndCheck\n    return self.__check(*self.requestJson(verb, url, parameters, headers, input, cnx))\n  File \"\\site-packages\\github\\Requester.py\", line 179, in __check\n    raise self.__createException(status, responseHeaders, output)\ngithub.GithubException.GithubException: 400 {'data': 'Error page'}\n\n\n```\n","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDE5NzU0ODg0Ng==","author":{"login":"cptanalatriste"},"authorAssociation":"NONE","body":"FYI, If you get the repository instance this way, it works:\n`repository = user.get_repo(repository_name)`\n","createdAt":"2016-03-16T21:04:25Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/392#issuecomment-197548846","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDE5Nzk3OTYxNg==","author":{"login":"jzelinskie"},"authorAssociation":"CONTRIBUTOR","body":"Are you providing the full name (including namespace) or the ID in the call to `client.get_repo`?\n","createdAt":"2016-03-17T17:13:19Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/392#issuecomment-197979616","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDE5Nzk4NzQ3Nw==","author":{"login":"cptanalatriste"},"authorAssociation":"NONE","body":"I'm doing something like this:\n\n```\n    client = Github(config.get_github_token(), per_page=PER_PAGE)\n    user = client.get_user('PyGithub')\n    repository = client.get_repo('PyGithub')\n    releases = repository.get_releases()\n\n    for release in releases:\n        print 'release ', release\n        print 'release.name ', release.name\n```\n","createdAt":"2016-03-17T17:27:45Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/392#issuecomment-197987477","viewerDidAuthor":false}],"createdAt":"2016-03-16T12:55:33Z","number":392,"state":"CLOSED","title":"Getting releases for a repository","url":"https://github.com/PyGithub/PyGithub/issues/392"},{"author":{"id":"MDQ6VXNlcjI5MDc2OTY=","is_bot":false,"login":"lost-a-tooth","name":"Chris Chen"},"body":"It would be great if we can do a release.  I need the code for combined CommitStatus and get pull requests with head branch.\n\nThanks!\n","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDE5MzQ3NDE5NQ==","author":{"login":"khornberg"},"authorAssociation":"CONTRIBUTOR","body":":+1: \n","createdAt":"2016-03-07T21:58:37Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/391#issuecomment-193474195","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDIwODEwMTQ4Mg==","author":{"login":"nhomar"},"authorAssociation":"CONTRIBUTOR","body":"I will try to make a release for end of March.\n","createdAt":"2016-04-11T00:34:04Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":1}}],"url":"https://github.com/PyGithub/PyGithub/issues/391#issuecomment-208101482","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDIxNzExNDE5NQ==","author":{"login":"ashwin31"},"authorAssociation":"NONE","body":":+1: \n","createdAt":"2016-05-05T09:45:29Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/391#issuecomment-217114195","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDIxNzY0ODkwNQ==","author":{"login":"nibalizer"},"authorAssociation":"NONE","body":":+1: \n","createdAt":"2016-05-07T16:28:59Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/391#issuecomment-217648905","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDIyNTcwNjExOA==","author":{"login":"SegFaultAX"},"authorAssociation":"NONE","body":"@nhomar @jacquev6 @jzelinskie @adamtheturtle Any chance we'll see a release of PyGithub this month?\n","createdAt":"2016-06-13T20:57:19Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/391#issuecomment-225706118","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDIzMzU1MDU4OQ==","author":{"login":"jakirkham"},"authorAssociation":"NONE","body":"Also would love to see a release. 😄\n","createdAt":"2016-07-19T07:14:49Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/391#issuecomment-233550589","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDIzMzU1MDc2OA==","author":{"login":"jakirkham"},"authorAssociation":"NONE","body":"Should add I need the merged PR ( https://github.com/PyGithub/PyGithub/pull/379 ) in there if at all possible.\n","createdAt":"2016-07-19T07:15:50Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/391#issuecomment-233550768","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDIzNDc0OTA0MQ==","author":{"login":"AraHaan"},"authorAssociation":"NONE","body":"It would be nice if it was simple to get all open / closed Issues (including PR's) and to somehow have a event for if and when a new issue/ PR is open for a timely response. Why? Because I want my Discord Bot to utilize it making it also look cool at the same time.\n\nSo, yeah that is what I would like in a nutshell. (got to love cross references with multible python libraries)\n","createdAt":"2016-07-24T00:29:42Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/391#issuecomment-234749041","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDIzNDk1MTQ2OQ==","author":{"login":"jayfk"},"authorAssociation":"CONTRIBUTOR","body":"Maybe we could switch to a release process based on git tags and let travis issue new releases.\n\nThere's a pretty straightforward recipe here: https://github.com/audreyr/cookiecutter-pypackage/blob/master/%7B%7Bcookiecutter.project_slug%7D%7D/travis_pypi_setup.py\n\n@jzelinskie, @jacquev6 I'd be happy to set that up with you. It's basically just encrypting the PyPi password and adding the publik key to travis.\n","createdAt":"2016-07-25T13:23:34Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":3}}],"url":"https://github.com/PyGithub/PyGithub/issues/391#issuecomment-234951469","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDIzNTA5Mjg3NA==","author":{"login":"SegFaultAX"},"authorAssociation":"NONE","body":"This project hasn't seen a release on [PyPI since 2015-11-06](https://pypi.python.org/pypi/PyGithub). Is the core team for this project looking for additional maintainers? I'd happily commit time to help keep things rolling along smoothly (and it sounds like a few other community members would as well).\n","createdAt":"2016-07-25T21:34:47Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":3}}],"url":"https://github.com/PyGithub/PyGithub/issues/391#issuecomment-235092874","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDIzODMyODc0NQ==","author":{"login":"nikogura"},"authorAssociation":"NONE","body":"👍   What can we do to help get a release cut?  Personally, I'd like to see repo.update_file() available from PyPI\n","createdAt":"2016-08-08T18:19:12Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":2}}],"url":"https://github.com/PyGithub/PyGithub/issues/391#issuecomment-238328745","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDIzODYzMDMzNA==","author":{"login":"jzelinskie"},"authorAssociation":"CONTRIBUTOR","body":"@jayfk what prevents someone from posting a PR that changes the .travis.yml to ship off the decrypted pypi credentials to wherever they want? If this system is robust against that attack, I'm totally fine with it.\n","createdAt":"2016-08-09T17:38:01Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/391#issuecomment-238630334","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDIzODY0ODYwMg==","author":{"login":"jayfk"},"authorAssociation":"CONTRIBUTOR","body":"@jzelinskie the commit has to be tagged to start the deploy process:\n\n```\ndeploy:\n  ...\n  on:\n    tags: true\n```\n\n Tags can only be pushed by owners/members of the repository which makes the group of attackers relatively small, but nevertheless it would be possible for someone from this group to extract your password this way (but not silently, unless they have access to the travis environment).\n\nTo make the attack vector even smaller, you could create a new pypi account and run the process with the credentials of the new user.\n\nFor more info, see\n- https://docs.travis-ci.com/user/environment-variables/#Encrypted-Variables\n- https://github.com/audreyr/cookiecutter-pypackage/blob/master/docs/travis_pypi_setup.rst\n","createdAt":"2016-08-09T18:36:09Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"HOORAY","users":{"totalCount":4}}],"url":"https://github.com/PyGithub/PyGithub/issues/391#issuecomment-238648602","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDIzODcxNTU0Nw==","author":{"login":"jzelinskie"},"authorAssociation":"CONTRIBUTOR","body":"@jayfk I'm totally for this. Email me, and I'll send you the credentials for a pypi account with maintainer that I just created. That cookiecutter template looks great and removing some of the needless scripts lying around like our twitter script would be nice.\n","createdAt":"2016-08-09T22:45:52Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"HOORAY","users":{"totalCount":3}}],"url":"https://github.com/PyGithub/PyGithub/issues/391#issuecomment-238715547","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDIzODcxNjMzNw==","author":{"login":"SegFaultAX"},"authorAssociation":"NONE","body":"Fantastic, thanks for working on this everyone!\n","createdAt":"2016-08-09T22:49:57Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/391#issuecomment-238716337","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDIzOTM3NjI0NA==","author":{"login":"jayfk"},"authorAssociation":"CONTRIBUTOR","body":"I'm happy to announce that PyGithub `1.27.1` is out :)\n","createdAt":"2016-08-12T07:06:52Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/391#issuecomment-239376244","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDIzOTM5Mjc3Mw==","author":{"login":"AraHaan"},"authorAssociation":"NONE","body":"About time. >.>\n","createdAt":"2016-08-12T08:42:28Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/391#issuecomment-239392773","viewerDidAuthor":false}],"createdAt":"2016-03-07T21:50:16Z","number":391,"state":"CLOSED","title":"Release needed","url":"https://github.com/PyGithub/PyGithub/issues/391"},{"author":{"id":"MDQ6VXNlcjgxMDY2Mw==","is_bot":false,"login":"pelson","name":"Phil Elson"},"body":"The github API supports an affiliations parameter when requesting repos, but that doesn't seem to be part of the pygithub API.\n\nI therefore copied the contents of AuthenticatedUser, and added the capability:\n\n```\ndef my_repos(gh_user):\n    import github\n    return github.PaginatedList.PaginatedList(\n                github.Repository.Repository,\n                gh_user._requester,\n                gh_user.url + \"/repos\",\n                dict(affiliation=\"owner\"))\n```\n\nIs there a better way?\n\nThanks!\n","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDIwNzk3MjM3Mw==","author":{"login":"adamtheturtle"},"authorAssociation":"MEMBER","body":"Hi @pelson, and thank you for your question. Please bear with me as I am new to\nthis project.\n\nIn experimenting with this, I have found that the following works, at least for\nmy account. Please let me know if this is or is not suitable.\n\n``` python\nimport github\n\nfrom github import Github\n\ng = Github(token)\n\ngh_user = g.get_user()\n\npelson_example = github.PaginatedList.PaginatedList(\n            github.Repository.Repository,\n            gh_user._requester,\n            gh_user.url + \"/repos\",\n            dict(affiliation=\"owner\"))\npelson_repos = [repo for repo in pelson_example]\n\nadamtheturtle_repos = [\n    repo for repo in gh_user.get_repos() if\n    repo.owner.login == gh_user.login\n]\n\nassert pelson_repos == adamtheturtle_repos\n```\n\nAdam\n","createdAt":"2016-04-10T12:08:24Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/390#issuecomment-207972373","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDIwODE4MzUwNw==","author":{"login":"pelson"},"authorAssociation":"NONE","body":"Thanks @adamtheturtle. I guess the question was more about the fact that [the `get_repos` method](https://github.com/PyGithub/PyGithub/blob/master/github/AuthenticatedUser.py#L849-872) doesn't expose all of the options that the GitHub API does (namely affiliations). If we don't pass that parameter through, then inevitably the GitHub API is going to return more repositories than it needs to, and we are going to have to filter them on client side.\n\nI really like your solution of using a list comprehension. @nhomar in general if the API is missing parameters, should I just add a PR to add them?\n","createdAt":"2016-04-11T06:37:16Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/390#issuecomment-208183507","viewerDidAuthor":false}],"createdAt":"2016-03-03T06:22:37Z","number":390,"state":"CLOSED","title":"Is there a better way of listing my own repos?","url":"https://github.com/PyGithub/PyGithub/issues/390"},{"author":{"id":"MDQ6VXNlcjIwNzM0NTg=","is_bot":false,"login":"bebehei","name":"Benedikt Heine"},"body":"It would be great, if there are **eq** methods in the most classes. Programming would get much easier and less complex.\n\nThis is a dupe of #257 (which was closed, because of the deprecation of v2!?)\n","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDQwMjY1NDMxMg==","author":{"login":"stale"},"authorAssociation":"NONE","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","createdAt":"2018-07-05T08:59:07Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/388#issuecomment-402654312","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQxODA1NTYxMg==","author":{"login":"stale"},"authorAssociation":"NONE","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","createdAt":"2018-09-03T09:23:22Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/388#issuecomment-418055612","viewerDidAuthor":false}],"createdAt":"2016-02-21T21:02:30Z","number":388,"state":"CLOSED","title":"Implement functions to distinguish Equality of Objects","url":"https://github.com/PyGithub/PyGithub/issues/388"},{"author":{"id":"MDQ6VXNlcjU0MTYyNDI=","is_bot":false,"login":"datomnurdin","name":"Mohammad Nurdin (鳴持无)"},"body":"Is it possible to get consecutive days? Please advice. Thank you.\n","comments":[],"createdAt":"2016-02-21T15:20:23Z","number":387,"state":"CLOSED","title":"Get consecutive days","url":"https://github.com/PyGithub/PyGithub/issues/387"},{"author":{"id":"MDQ6VXNlcjk3MzA1MDg=","is_bot":false,"login":"jfach","name":"Jordan Facibene"},"body":"I am trying to make an object out of a repository as follows: \n\n``` python\ng = Github(username, password)\ng.get_user().get_repo(\"testrepo\")\n```\n\nThis returns the following error:\n\n``` python\ngithub.GithubException.UnknownObjectException: 404 {u'documentation_url': u'https://developer.github.com/v3', u'message': u'Not Found'}\n```\n\nAm I using get_repo incorrectly?\n","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDE3OTc1NTQ4OQ==","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"This looks correct and you do have a repo named \"testrepo\" so my only hypothesis is that username and/or password are wrong. (Maybe you're testing your \"isebot\"?)\n\nCan you please `print(g.get_user().name)`?\n","createdAt":"2016-02-04T10:24:17Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":1}}],"url":"https://github.com/PyGithub/PyGithub/issues/385#issuecomment-179755489","viewerDidAuthor":false}],"createdAt":"2016-02-03T21:28:05Z","number":385,"state":"CLOSED","title":"UnknownObjectException","url":"https://github.com/PyGithub/PyGithub/issues/385"},{"author":{"id":"MDQ6VXNlcjEzNTE4ODU5","is_bot":false,"login":"yannispanousis","name":"Yannis"},"body":"In https://developer.github.com/v3/repos/releases/#create-a-release there is a parameter called `target_commitish` which makes it possible to tag objects other than the current head of the default branch of the repository.\n\nCurrently we are trying to create GitHub releases with PyGithub but it is in a broken state since all our releases so far are incorrectly tagged.\n\nWe've tested and confirmed that using this parameter fixes the problem. The patch that works is very simple, see below.\n\nCould we add this please?\n\nThanks in advance!\n\n```\nFrom 10ffec64efcd1b5983c5d9c1a4df91ef86c6d774 Mon Sep 17 00:00:00 2001\nFrom: Yannis <yannis@lystable.com>\nDate: Wed, 20 Jan 2016 13:51:23 +0000\nSubject: [PATCH] Expose target_commitish parameter in create_git_release\n\nSee https://developer.github.com/v3/repos/releases/#create-a-release\n\n---\n github/Repository.py | 6 ++++--\n 1 file changed, 4 insertions(+), 2 deletions(-)\n\ndiff --git a/github/Repository.py b/github/Repository.py\nindex 3803548..d483905 100644\n--- a/github/Repository.py\n+++ b/github/Repository.py\n@@ -746,11 +746,11 @@ class Repository(github.GithubObject.CompletableGithubObject):\n         )\n         return github.GitRef.GitRef(self._requester, headers, data, completed=True)\n\n-    def create_git_tag_and_release(self, tag, tag_message, release_name, release_message, object, type, tagger=github.GithubObject.NotSet, draft=False, prerelease=False):\n+    def create_git_tag_and_release(self, tag, tag_message, release_name, release_message, object, type, tagger=github.GithubObject.NotSet, target_commitish=None, draft=False, prerelease=False):\n         self.create_git_tag(tag, tag_message, object, type, tagger)\n         return self.create_git_release(tag, release_name, release_message, draft, prerelease)\n\n-    def create_git_release(self, tag, name, message, draft=False, prerelease=False):\n+    def create_git_release(self, tag, name, message, target_commitish=None, draft=False, prerelease=False):\n         assert isinstance(tag, (str, unicode)), tag\n         assert isinstance(name, (str, unicode)), name\n         assert isinstance(message, (str, unicode)), message\n@@ -763,6 +763,8 @@ class Repository(github.GithubObject.CompletableGithubObject):\n             \"draft\": draft,\n             \"prerelease\": prerelease,\n         }\n+        if target_commitish:\n+            post_parameters[\"target_commitish\"] = target_commitish\n         headers, data = self._requester.requestJsonAndCheck(\n             \"POST\",\n             self.url + \"/releases\",\n-- \n2.5.0\n```\n","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDE3MzIxMzQwNQ==","author":{"login":"yannispanousis"},"authorAssociation":"NONE","body":"Closing this issue as I've created a PR https://github.com/PyGithub/PyGithub/pull/381\n","createdAt":"2016-01-20T14:05:47Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/380#issuecomment-173213405","viewerDidAuthor":false}],"createdAt":"2016-01-20T13:58:57Z","number":380,"state":"CLOSED","title":"Expose target_commitish parameter when creating GitHub releases","url":"https://github.com/PyGithub/PyGithub/issues/380"},{"author":{"id":"MDQ6VXNlcjQ0NjA2Mg==","is_bot":false,"login":"iandanforth","name":"Ian Danforth"},"body":"``` python\n    g = Github(username, password)\n    repo = g.get_repo(\"fetchrobotics/repo\")\n    issues = sandbox.legacy_search_issues(\"open\", \"searchterm\")\n\n    for issue in issues:\n        print \"#\" + str(issue.number), issue.title\n```\n\nI expect a list with dozens of results. But I'm getting 10. `issues` is also a plain list and not a paginated list. \n","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDM3OTQ0ODIxOQ==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"@iandanforth Thanks for reporting.\r\n\r\nhttps://developer.github.com/v3/search/legacy/#search-issues\r\nAlthough it's called search_issues, the endpoint actually returns single match.\r\n\r\nNow that the legacy search is officially depreciated by Github, I am closing this issue for now and will depreciate this method in PyGithub soon.","createdAt":"2018-04-07T08:17:16Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/377#issuecomment-379448219","viewerDidAuthor":false}],"createdAt":"2016-01-13T23:15:09Z","number":377,"state":"CLOSED","title":"legacy_search_issues doesn't return paginated list","url":"https://github.com/PyGithub/PyGithub/issues/377"},{"author":{"is_bot":true,"login":"app/"},"body":"I am using Python 2.7.8. When I run `import github`, this happens:\n\n```\n>>> import github\n\nTraceback (most recent call last):\n  File \"<pyshell#0>\", line 1, in <module>\n    import github\n  File \"C:\\Python27\\github\\__init__.py\", line 36, in <module>\n    from .MainClass import Github\n  File \"C:\\Python27\\github\\MainClass.py\", line 28, in <module>\n    import urllib.request, urllib.parse, urllib.error\nImportError: No module named request\n```\n\nDid I install PyGithub incorrectly?\n","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDE3MTQ2MTcwNw==","author":{"login":""},"authorAssociation":"NONE","body":"never mind, reinstalled and fixed\n","createdAt":"2016-01-13T22:47:31Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/376#issuecomment-171461707","viewerDidAuthor":false}],"createdAt":"2016-01-11T23:18:09Z","number":376,"state":"CLOSED","title":"ImportError: No module named \"request\"","url":"https://github.com/PyGithub/PyGithub/issues/376"},{"author":{"id":"MDQ6VXNlcjgxMDY2Mw==","is_bot":false,"login":"pelson","name":"Phil Elson"},"body":"When you first visit github, the link above all of the code for PyGitHub links to http://jacquev6.github.io/PyGithub not http://pygithub.github.io/PyGithub/v1/index.html.\n\nOnly a person with merge rights may update this.\n","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDE3MDQ5MTg1NQ==","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"Fixed, thanks!\n","createdAt":"2016-01-11T09:51:28Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/374#issuecomment-170491855","viewerDidAuthor":false}],"createdAt":"2016-01-11T08:31:40Z","number":374,"state":"CLOSED","title":"Repository link needs updating","url":"https://github.com/PyGithub/PyGithub/issues/374"},{"author":{"id":"MDQ6VXNlcjEzMzM5OTI4","is_bot":false,"login":"BGR360","name":"Ben Reeves"},"body":"In the documentation section, the [introduction.rst file](doc/introduction.rst) has links to pages which say \"Which class implements which API feature?\" They redirect to a 404 error page.\n","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDE3MDcyOTU1Mw==","author":{"login":""},"authorAssociation":"NONE","body":"The entire \"https://github.com/PyGithub/PyGithub/issues/doc/introduction.rst\" site redirects to a 404 error\n","createdAt":"2016-01-11T23:19:21Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/373#issuecomment-170729553","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDIwODAxNDk0OA==","author":{"login":"adamtheturtle"},"authorAssociation":"MEMBER","body":"Thank you for this report.\n\n@qlstudio This is unfortunately just @BGR360 's markup not working, I am fairly sure that https://github.com/PyGithub/PyGithub/blob/master/doc/introduction.rst is the intended link.\n\nNote that this is rendered at http://pygithub.readthedocs.org/en/latest/introduction.html. I believe that http://pygithub.readthedocs.org/en/latest/apis.html is the page which should be linked to and I will create a Pull Request for this when I have some time.\n\nThis also makes me think that perhaps some other links are broken. Sphinx has a link checker which can be set up to run as part of the CI system. See http://www.sphinx-doc.org/en/stable/builders.html#sphinx.builders.linkcheck.CheckExternalLinksBuilder.\n","createdAt":"2016-04-10T16:52:27Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/373#issuecomment-208014948","viewerDidAuthor":false}],"createdAt":"2016-01-08T21:18:15Z","number":373,"state":"CLOSED","title":"Links don't work in introduction.rst","url":"https://github.com/PyGithub/PyGithub/issues/373"},{"author":{"is_bot":true,"login":"app/"},"body":"I get this error:\n\n```\nPython 3.5.1 (v3.5.1:37a07cee5969, Dec  6 2015, 01:38:48) [MSC v.1900 32 bit (Intel)] on win32\nType \"copyright\", \"credits\" or \"license()\" for more information.\n>>> from github import Github\nTraceback (most recent call last):\n  File \"<pyshell#0>\", line 1, in <module>\n    from github import Github\n  File \"C:\\Users\\DARREN\\AppData\\Local\\Programs\\Python\\Python35-32\\github\\__init__.py\", line 36, in <module>\n    from MainClass import Github\nImportError: No module named 'MainClass'\n>>> \n```\n\nHuh?\n","comments":[],"createdAt":"2016-01-05T22:35:12Z","number":371,"state":"CLOSED","title":"ImportError?","url":"https://github.com/PyGithub/PyGithub/issues/371"},{"author":{"id":"MDQ6VXNlcjQxNDAyODI=","is_bot":false,"login":"GeorgeL9","name":"George Lejnine"},"body":"When I search a repo, I only get emails returning if the users profile has an email, but for the majority I simply get `None`, even though when I look at the API response by hand, I can see the email. \n\nExample below returns None for email:\n\ncommit: {\n         author: {\n                        name: \"George Lejnine\",\n                        email: \"lejnine@gmail.com\",\n                        date: \"2015-11-22T21:56:30Z\"\n}\n","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDE2ODgzMjI3Mg==","author":{"login":"GeorgeL9"},"authorAssociation":"NONE","body":"It also appears that for every commit when calling\n\n```\nfor commit in repo.get_commits():\n    print(commit.author.email)\n```\n\nuses an API call. \n","createdAt":"2016-01-04T22:33:53Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/370#issuecomment-168832272","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDE2ODg0MjI1MA==","author":{"login":"GeorgeL9"},"authorAssociation":"NONE","body":"Figured out that I need to access the commits commit. \n\n```\nfor commit in repo.get_commits():\n    print(commit.commit.author.email)\n```\n","createdAt":"2016-01-04T23:20:50Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/370#issuecomment-168842250","viewerDidAuthor":false}],"createdAt":"2016-01-04T22:28:00Z","number":370,"state":"CLOSED","title":"Commit Author's Email returns None","url":"https://github.com/PyGithub/PyGithub/issues/370"},{"author":{"id":"MDQ6VXNlcjM0NDIwNTE=","is_bot":false,"login":"khornberg","name":"Kyle Hornberg"},"body":"I needed to protect some branches recently. I thought I'd share the code here. I'm sure the options will need to be changed.\n\n```\ndef protect_branch(self, branch):\n    \"\"\"\n    :calls: `PATCH /repos/:owner/:repo/branches/:branch <https://developer.github.com/v3/repos/#enabling-and-disabling-branch-protection>`\n    :param branch: string\n    :rtype: None\n    \"\"\"\n    post_parameters = {\n        \"protection\": {\n            \"enabled\": True,\n            \"required_status_checks\": {\n                \"enforcement_level\": \"everyone\",\n                \"contexts\": [\n                    \"required-status\"\n                ]\n            }\n        }\n    }\n    headers, data = self._requester.requestJsonAndCheck(\n        \"PATCH\",\n        self.url + \"/branches/\" + branch,\n        input=post_parameters,\n        headers={'Accept': 'application/vnd.github.loki-preview+json'}\n    )\n```\n","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDE2Nzk1NjE4OQ==","author":{"login":"jzelinskie"},"authorAssociation":"CONTRIBUTOR","body":"If you'd like to open up a PR, we can review this for merging upstream into the library.\n","createdAt":"2015-12-30T08:21:07Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/368#issuecomment-167956189","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDE2OTY3ODAzMg==","author":{"login":"khornberg"},"authorAssociation":"CONTRIBUTOR","body":"PR #372 \n","createdAt":"2016-01-07T14:24:09Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/368#issuecomment-169678032","viewerDidAuthor":false}],"createdAt":"2015-12-29T20:37:41Z","number":368,"state":"CLOSED","title":"Protect a branch","url":"https://github.com/PyGithub/PyGithub/issues/368"},{"author":{"id":"MDQ6VXNlcjEyNTY3Ng==","is_bot":false,"login":"lipis","name":"Lipis"},"body":".. and obviously wrong! The right number for the watchers should be the `subscribers_count`.\n\nRelated #318\n","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDI2MzEyMzI1Ng==","author":{"login":"Sylvus"},"authorAssociation":"CONTRIBUTOR","body":"This is not wrong but the way the API works. Check our https://api.github.com/repos/Lasagne/Lasagne for example. Watchers are stargazers and it is there for compatibility.  Further reading https://developer.github.com/changes/2012-09-05-watcher-api/","createdAt":"2016-11-27T13:51:25Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/367#issuecomment-263123256","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDI2MzEyMzY2NA==","author":{"login":"lipis"},"authorAssociation":"NONE","body":"I see.. thanks :)","createdAt":"2016-11-27T13:56:37Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/367#issuecomment-263123664","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDczOTQ3ODIxNA==","author":{"login":"tik9"},"authorAssociation":"NONE","body":"What is the watch number in the api? \r\n![image](https://user-images.githubusercontent.com/3178925/101276691-ee7def80-37ae-11eb-8564-98417223fed3.png)\r\n","createdAt":"2020-12-06T09:36:58Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":1}}],"url":"https://github.com/PyGithub/PyGithub/issues/367#issuecomment-739478214","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs45TSwx","author":{"login":"nokome"},"authorAssociation":"NONE","body":"> What is the watch number in the api? \r\n\r\n`subscribers_count`\r\n\r\n","createdAt":"2021-11-04T19:39:11Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":3}}],"url":"https://github.com/PyGithub/PyGithub/issues/367#issuecomment-961358897","viewerDidAuthor":false}],"createdAt":"2015-12-21T17:51:02Z","number":367,"state":"CLOSED","title":"Repository.watchers_count and Repository.stargazers_count are always the same","url":"https://github.com/PyGithub/PyGithub/issues/367"},{"author":{"id":"MDQ6VXNlcjY4NDgzNjY=","is_bot":false,"login":"maojr","name":""},"body":"Hi,\n\nI am writing a script to unfollow all of followings and stars and I used the basic authentication like the example in the introduction.\n\n```\nfrom github import Github\n\ng = Github(\"user\", \"password\")\nfor repo in g.get_user().get_repos():\n    print repo.name\n    repo.edit(has_wiki=False)\n```\n\nBut when I enter an incorrect password, I can also get a GitHub instance and a user.\nIs there a method that validates the user? \n\nThank you!\n","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDE2NzUxNjUwNw==","author":{"login":"sparkline-charlie"},"authorAssociation":"NONE","body":"I think based you will encounter an error if the username and password is invalid.\nI don't know if this is a correct approach. But this may help.\ndef validate_login():\n    try:\n        g = Github(username, password)\n        data = [(s.name, s.name) for s in g.get_user().get_repos()]\n        return True\n    except:\n        return flask.render_template('login_error.html', html_class='welcome')\n","createdAt":"2015-12-28T08:50:58Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/366#issuecomment-167516507","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDE2NzcwMzg2Mw==","author":{"login":"maojr"},"authorAssociation":"NONE","body":"@sparkline-charlie Thank you for your solution.\n\nI hava solved the problem without using PyGithub.\n\n I am inspired by the example in requests [README](https://github.com/kennethreitz/requests)\n\n```\n>>> r = requests.get('https://api.github.com', auth=('user', 'pass'))\n>>> r.status_code\n204\n>>> r.headers['content-type']\n'application/json'\n>>> r.text\n```\n\nSo I can verify GitHub accounts using the returned **status_code**.Requests is awesome!\n","createdAt":"2015-12-29T02:48:45Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/366#issuecomment-167703863","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDE2NzcwNDAyNQ==","author":{"login":"sparkline-charlie"},"authorAssociation":"NONE","body":"Yes you can use either of the two methods.\n","createdAt":"2015-12-29T02:51:51Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/366#issuecomment-167704025","viewerDidAuthor":false}],"createdAt":"2015-12-20T07:44:48Z","number":366,"state":"CLOSED","title":"How can I check a valid account?","url":"https://github.com/PyGithub/PyGithub/issues/366"},{"author":{"id":"MDQ6VXNlcjM5MzE3ODE=","is_bot":false,"login":"aronwc","name":""},"body":"There's a misspelled call to requestJsonAndCheck in Team.add_membership.\n\n``` diff\n--- a/github/Team.py\n+++ b/github/Team.py\n@@ -128,7 +128,7 @@ class Team(github.GithubObject.CompletableGithubObject):\n         :rtype: None\n         \"\"\"\n         assert isinstance(member, github.NamedUser.NamedUser), member\n-        headers, data = self._requester.requestjsonandcheck(\n+        headers, data = self._requester.requestJsonAndCheck(\n             \"PUT\",\n             self.url + \"/memberships/\" + member._identity\n         )\n```\n\nPull request is imminent.\n\nThanks for a great library!\n","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDIwODA0MjI3MQ==","author":{"login":"adamtheturtle"},"authorAssociation":"MEMBER","body":"Thanks @aronwc for the issue and PR. I'm closing this as the PR resolved the issue.\n","createdAt":"2016-04-10T18:43:13Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/363#issuecomment-208042271","viewerDidAuthor":false}],"createdAt":"2015-12-15T23:20:25Z","number":363,"state":"CLOSED","title":"misspelling in Team.add_membership","url":"https://github.com/PyGithub/PyGithub/issues/363"},{"author":{"id":"MDQ6VXNlcjE2MTMzMTg0","is_bot":false,"login":"droegier","name":"David Roegiers"},"body":"Hi,\n\nI have a problem that I can't really figure out. This is all new for me and I am posting for the first time ever on GitHub. If this is not the right place for my question: apologies. \n\nMy goal is to get all Issues from a project starting with the oldest one.\n\nWhen calling the function get_issues() on a Repository, I set the 'direction' parameter to the two possible values \"asc\" and \"desc\". However this doesn't change anything in the eventual order. Do you know on which property the sort takes place (creation date?). I understand this relates more to the GitHub api then the PyGithub library, but I wasn't able to find an answer, so I thought I just try here.\n\nAnother approach would maybe be to get the final page and call 'reverse' provided by the Pagination class? Or did I get that wrong.\n\nThanks for the help in advance.\n","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDE2NDA1MTEwOA==","author":{"login":"bweir"},"authorAssociation":"NONE","body":"Why not just iterate over the Pagination class backwards?\nhttp://effbot.org/pyfaq/how-do-i-iterate-over-a-sequence-in-reverse-order.htm\n\nOn Tue, Dec 8, 2015 at 10:19 AM, droegier notifications@github.com wrote:\n\n> Hi,\n> \n> I have a problem that I can't really figure out. This is all new for me\n> and I am posting for the first time ever on GitHub. If this is not the\n> right place for my question: apologies.\n> \n> My goal is to get all Issues from a project starting with the oldest one.\n> \n> When calling the function get_issues() on a Repository, I set the\n> 'direction' parameter to the two possible values \"asc\" and \"desc\". However\n> this doesn't change anything in the eventual order. Do you know on which\n> property the sort takes place (creation date?). I understand this relates\n> more to the GitHub api then the PyGithub library, but I wasn't able to find\n> an answer, so I thought I just try here.\n> \n> Another approach would maybe be to get the final page and call 'reverse'\n> provided by the Pagination class? Or did I get that wrong.\n> \n> Thanks for the help in advance.\n> \n> —\n> Reply to this email directly or view it on GitHub\n> https://github.com/PyGithub/PyGithub/issues/362.\n\n## \n\n_Brett Weir_, Founder\n\nEngineering Made Awesome\n310.245.1775  • brett@lamestation.com • lamestation.com\n","createdAt":"2015-12-11T21:24:33Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/362#issuecomment-164051108","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM5ODg0NjgyOQ==","author":{"login":"BBI-YggyKing"},"authorAssociation":"CONTRIBUTOR","body":"The `search_issues` method supports `sort` and `order` parameters, perhaps that would meet your needs?","createdAt":"2018-06-20T18:16:10Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/362#issuecomment-398846829","viewerDidAuthor":false}],"createdAt":"2015-12-08T18:19:04Z","number":362,"state":"CLOSED","title":"Sort direction in Repository.get_issues()","url":"https://github.com/PyGithub/PyGithub/issues/362"},{"author":{"id":"MDQ6VXNlcjU3MTY1MjA=","is_bot":false,"login":"sils","name":"Lasse Schuirmann"},"body":"I can now set the context but not get it apparently.\n","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDIzNTM1MDEzMw==","author":{"login":"makuk66"},"authorAssociation":"CONTRIBUTOR","body":"For example:\n\n```\nfrom github import Github\n\ngithub = Github('user','password')\nrepo = github.get_repo('docker/docker')\npull = repo.get_pull(25076)\ncommit = repo.get_commit(pull.head.sha)\nstatuses = commit.get_statuses()\n\nfor status in statuses:\n    if status.context == 'docker/dco-signed':\n        print \"context={}, state={}, description={}.\".format(status.context, status.state, status.description)\n```\n\nprints:\n\n```\n$ python no-context.py\nTraceback (most recent call last):\n  File \"no-context.py\", line 10, in <module>\n    if status.context == 'docker/dco-signed':\nAttributeError: 'CommitStatus' object has no attribute 'context'\n```\n\ninstead of:\n\n```\ncontext=docker/dco-signed, state=success, description=All commits signed.\n```\n","createdAt":"2016-07-26T17:53:27Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/358#issuecomment-235350133","viewerDidAuthor":false}],"createdAt":"2015-11-21T19:36:46Z","number":358,"state":"CLOSED","title":"CommitStatus has no context","url":"https://github.com/PyGithub/PyGithub/issues/358"},{"author":{"id":"MDQ6VXNlcjk2ODU4NjA=","is_bot":false,"login":"babineaum","name":"Matt Babineau"},"body":"Hi we use the pygithub lib a lot, infact we have built our own tool on top of it. We did this because collecting data on PRs was getting difficult with 2 possible objects to look for information in. The PR obj contains lots of helpful info but doesn't contain the \"Labels\" or \"comments\" that aren't inline comments. These are contained in the \"Issue\" obj.\n\nSo my question/suggestion is would it be too much to add a sort of \"super class\" that would be a PR_ISSUE object that could contain a combination of the two together so that collecting multiple objects are not required? If this is just and insane idea and other people have implemented other ways to handle this we would love to hear about them. We understand that it's just a few calls to github but with our scripts we are making a lot of calls at once and hitting our max limits quickly. Any suggestions are very helpful and we would also be willing to contribute to the community as well. Thanks.\n\nMatt Babineau \nRelease Engineer\nDataXu\n\nhttps://github.com/dataxu/github-pr\n","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDIzNDk3NTg1Mg==","author":{"login":"AraHaan"},"authorAssociation":"NONE","body":"Well it makes sence as:\n\n> As far as the API is concerned, every pull request is an issue, but not every issue is a pull request.\n\nhere is a link to where it says [this](https://developer.github.com/v3/issues/#list-issues-for-a-repository).\n","createdAt":"2016-07-25T14:50:09Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/356#issuecomment-234975852","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM5ODg0NzY1NQ==","author":{"login":"BBI-YggyKing"},"authorAssociation":"CONTRIBUTOR","body":"You can also use the `as_pull_request()` method of the [issue class](https://pygithub.readthedocs.io/en/latest/github_objects/Issue.html), which lets you use the same object through either interface.","createdAt":"2018-06-20T18:18:48Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/356#issuecomment-398847655","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQxNDE0NzY2Mg==","author":{"login":"stale"},"authorAssociation":"NONE","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","createdAt":"2018-08-19T18:54:09Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/356#issuecomment-414147662","viewerDidAuthor":false}],"createdAt":"2015-11-17T16:50:22Z","number":356,"state":"CLOSED","title":"Unification of PR and ISSUE objects??","url":"https://github.com/PyGithub/PyGithub/issues/356"},{"author":{"id":"MDQ6VXNlcjY4NjM5OA==","is_bot":false,"login":"klmitch","name":"Kevin L. Mitchell"},"body":"I have code that is expecting get_repo() to raise an UnknownObjectException if it calls get_repo() on a repository that doesn't exist.  With the 1.26.0 release, this is no longer happening; get_repo() returns an object, then subsequent (unprotected) code is getting the UnknownObjectException when it attempts to refer to an attribute on that object (in this case, full_name).\n","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDE2ODgwMDk3Nw==","author":{"login":"klmitch"},"authorAssociation":"NONE","body":"Is there any movement on this?  This is a very serious bug that prevents me from using the latest version of PyGithub…\n","createdAt":"2016-01-04T20:41:55Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/353#issuecomment-168800977","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDE4MTk4MzQxOA==","author":{"login":"acsrujan"},"authorAssociation":"NONE","body":"I'm getting 404 on get_repo(\"repo_not_present\") as intended.\n\n```\ngithub_instance = Github(\"acsrujan\", \"password\")\nuser = github_instance.get_user()\nuser.get_repo(\"repo_not_present\")\n---------------------------------------------------------------------------\nUnknownObjectException                    Traceback (most recent call last)\n<ipython-input-22-50a1bf2f4078> in <module>()\n----> 1 user.get_repo(\"repo_not_present\")\n/Users/acsrujan/projects/github-in-github/test-gig/lib/python2.7/site-packages/github/AuthenticatedUser.pyc in get_repo(self, name)\n    843         headers, data = self._requester.requestJsonAndCheck(\n    844             \"GET\",\n--> 845             \"/repos/\" + self.login + \"/\" + name\n    846         )\n    847         return github.Repository.Repository(self._requester, headers, data, completed=True)\n\n/Users/acsrujan/projects/github-in-github/test-gig/lib/python2.7/site-packages/github/Requester.pyc in requestJsonAndCheck(self, verb, url, parameters, headers, input, cnx)\n    169\n    170     def requestJsonAndCheck(self, verb, url, parameters=None, headers=None, input=None, cnx=None):\n--> 171         return self.__check(*self.requestJson(verb, url, parameters, headers, input, cnx))\n    172\n    173     def requestMultipartAndCheck(self, verb, url, parameters=None, headers=None, input=None):\n\n/Users/acsrujan/projects/github-in-github/test-gig/lib/python2.7/site-packages/github/Requester.pyc in __check(self, status, responseHeaders, output)\n    177         output = self.__structuredFromJson(output)\n    178         if status >= 400:\n--> 179             raise self.__createException(status, responseHeaders, output)\n    180         return responseHeaders, output\n    181\n\nUnknownObjectException: 404 {u'documentation_url': u'https://developer.github.com/v3', u'message': u'Not Found'}\n```\n","createdAt":"2016-02-09T18:02:15Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/353#issuecomment-181983418","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDE4MjAwOTY0OA==","author":{"login":"klmitch"},"authorAssociation":"NONE","body":"Can you try that using the top-level get_repo() method call with the repository's full name?  I'm not using the user-level get_repo() call.\n","createdAt":"2016-02-09T19:07:32Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/353#issuecomment-182009648","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDIwODA0Mzg5NQ==","author":{"login":"adamtheturtle"},"authorAssociation":"MEMBER","body":"Thank you both for reporting and looking into this issue. @klmitch I have determined that the top level `get_repo` method does not raise, while the user-level `get_repo` does.\n","createdAt":"2016-04-10T18:53:52Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/353#issuecomment-208043895","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQxNjEwODcwOQ==","author":{"login":"s-t-e-v-e-n-k"},"authorAssociation":"COLLABORATOR","body":"@sfdye PR #425 can be closed as a consequence of my PR merging.","createdAt":"2018-08-27T04:07:31Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/353#issuecomment-416108709","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQxNjEwODg5Ng==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"@s-t-e-v-e-n-k Done","createdAt":"2018-08-27T04:09:15Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/353#issuecomment-416108896","viewerDidAuthor":false}],"createdAt":"2015-11-06T21:09:42Z","number":353,"state":"CLOSED","title":"get_repo() doesn't raise 404","url":"https://github.com/PyGithub/PyGithub/issues/353"},{"author":{"id":"MDQ6VXNlcjU3MTY1MjA=","is_bot":false,"login":"sils","name":"Lasse Schuirmann"},"body":"Hi,\n\nI'm using PyGitHub and found myself in the position of needing Commit Status Contexts desperately, eventually copying code from your development version into my prototype application. On long term it would be awesome if you could do a release :) (Given the last one was a year ago)\n","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDE1MzM4MzUxNg==","author":{"login":"jzelinskie"},"authorAssociation":"CONTRIBUTOR","body":"Hi,\nSorry about the delay in releases. We've had a change of maintainer-ship and a few other changes with the project. I plan to get a release out sometime this week.\n","createdAt":"2015-11-03T15:09:38Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/351#issuecomment-153383516","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDE1MzM4NDY5Mw==","author":{"login":"sils"},"authorAssociation":"NONE","body":"That is super awesome! Thanks!\n\n2015-11-03 16:09 GMT+01:00 Jimmy Zelinskie notifications@github.com:\n\n> Hi,\n> Sorry about the delay in releases. We've had a change of maintainer-ship\n> and a few other changes with the project. I plan to get a release out\n> sometime this week.\n> \n> —\n> Reply to this email directly or view it on GitHub\n> https://github.com/PyGithub/PyGithub/issues/351#issuecomment-153383516.\n","createdAt":"2015-11-03T15:14:02Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/351#issuecomment-153384693","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDE1NDExMjA1Mw==","author":{"login":"andi-bigswitch"},"authorAssociation":"NONE","body":"Cool! Same here, waiting for the status context, release would be much appreciated.\n","createdAt":"2015-11-05T16:26:43Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/351#issuecomment-154112053","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDE1NDI0MDA3OA==","author":{"login":"gforcada"},"authorAssociation":"NONE","body":"Seems this is the week of people needing a status context on pygithub, I'm also waiting for it!\n","createdAt":"2015-11-06T00:11:09Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/351#issuecomment-154240078","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDIwODI4MDMwNw==","author":{"login":"adamtheturtle"},"authorAssociation":"MEMBER","body":"Thank you all - I am going to look into whether I can do or help with a release sometime soon (no promises / deadlines though :smile: ). For now I will close this in favour of the more recently updated duplicate https://github.com/PyGithub/PyGithub/issues/391.\n","createdAt":"2016-04-11T10:48:05Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/351#issuecomment-208280307","viewerDidAuthor":false}],"createdAt":"2015-11-03T12:21:10Z","number":351,"state":"CLOSED","title":"Release needed","url":"https://github.com/PyGithub/PyGithub/issues/351"},{"author":{"id":"MDQ6VXNlcjEzNTkyOTA4","is_bot":false,"login":"tasnim07","name":"Tasneem Haider"},"body":"Hey,\nI am trying to use pygithub but unfortunately can't be able to understand how to use this library as I am new to these sort of things. I am building an app based on github api for the very first time. I am having lots of problem. Is there any tutorial which can help me out? please suggest anything which will solve my problem.\n","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDE1MzIxNzM5NQ==","author":{"login":"jzelinskie"},"authorAssociation":"CONTRIBUTOR","body":"[The docs](https://pygithub.readthedocs.org/en/stable/introduction.html) has a tiny introduction. If I was trying to get familiar, I'd run the `ipython` REPL and just play with the library using tab to explore the API.\n","createdAt":"2015-11-03T02:07:39Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/350#issuecomment-153217395","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDE1MzIxOTUzNw==","author":{"login":"tasnim07"},"authorAssociation":"NONE","body":"I am having problem in getting the access token. How to use that \"code\" which we get after successfully getting the access. And what are the settings required? I am trying hard but nothing is working.\n","createdAt":"2015-11-03T02:24:30Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/350#issuecomment-153219537","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDE1NzE1NDQ3Nw==","author":{"login":"tasnim07"},"authorAssociation":"NONE","body":"Thanks @jzelinskie for your help! Played on the REPL and managed to solve it. :)\n","createdAt":"2015-11-16T20:05:27Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/350#issuecomment-157154477","viewerDidAuthor":false}],"createdAt":"2015-11-03T01:55:55Z","number":350,"state":"CLOSED","title":"Unable to use Pygithub","url":"https://github.com/PyGithub/PyGithub/issues/350"},{"author":{"id":"MDQ6VXNlcjI1ODcyMDI=","is_bot":false,"login":"OldPanda","name":""},"body":"I'm using version 1.25.2, but I didn't find a proper [API](http://jacquev6.net/PyGithub/v1/apis.html) to do this. Any advice will be appreciated. \n","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDE1MzkyMjYyMw==","author":{"login":"OldPanda"},"authorAssociation":"NONE","body":"Ah, I just figured it out. I should call this function: http://jacquev6.net/PyGithub/v1/github_objects/Issue.html#github.Issue.Issue.edit with `state=\"closed\"`\n","createdAt":"2015-11-05T01:15:23Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/349#issuecomment-153922623","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM4NDI1ODk0NA==","author":{"login":"p00j4"},"authorAssociation":"NONE","body":"Though it's closed, don't want to create a new issue for my query. @OldPanda its would be great if you can help me with the method name which accepts state argument. \r\nI'm trying to *close a Pull Request*, I find only update(self) method inside [GithubObject.py](https://github.com/PyGithub/PyGithub/blob/master/github/GithubObject.py#L273) which doesn't take any inputs. ","createdAt":"2018-04-25T11:48:45Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/349#issuecomment-384258944","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM4NDM1ODM1NA==","author":{"login":"OldPanda"},"authorAssociation":"NONE","body":"@p00j4 On my intuition, as for the operation of pull request, you should find a method in a file named like \"pullrequest.py\" instead of `GithubObject.py`","createdAt":"2018-04-25T16:55:51Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":1}}],"url":"https://github.com/PyGithub/PyGithub/issues/349#issuecomment-384358354","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM4NDM2OTQwNA==","author":{"login":"p00j4"},"authorAssociation":"NONE","body":"thanks @OldPanda, yes had checked pullrequest.py as well, and hadn't find any update, however  re scan reveals probably \"edit\" is the method. Will try out and keep posted. \r\n#Time to contribute to the documentation.","createdAt":"2018-04-25T17:30:53Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/349#issuecomment-384369404","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM4NDU4NjQyMg==","author":{"login":"p00j4"},"authorAssociation":"NONE","body":"yes *edit* is the function for Pull request. \r\nhttps://github.com/PyGithub/PyGithub/pull/772","createdAt":"2018-04-26T10:09:07Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/349#issuecomment-384586422","viewerDidAuthor":false}],"createdAt":"2015-11-02T22:01:16Z","number":349,"state":"CLOSED","title":"[Need Help] How should I close one issue given its name or id? ","url":"https://github.com/PyGithub/PyGithub/issues/349"},{"author":{"id":"MDQ6VXNlcjIwODcxMQ==","is_bot":false,"login":"primalmotion","name":""},"body":"I tried a lot of things, but I can't figure out how to simply rename a file in a repo using PyGithub.\n\nAny pointer?\n","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDE4MTk4ODg3NA==","author":{"login":"acsrujan"},"authorAssociation":"NONE","body":"I'm afraid that's not so trivial. Github API doesn't provide a way to rename a file directly. You can create new file and delete old one, but it would be of two commits.\n\nTo accomplish this in single commit, you might need to use low level git api. https://developer.github.com/v3/git/\n","createdAt":"2016-02-09T18:15:32Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/348#issuecomment-181988874","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDE4MTk5MDk1Mg==","author":{"login":"primalmotion"},"authorAssociation":"NONE","body":"Yeah.. I ended up deleting/recreating the file. Not very optimal but hey.. it's working\n\nThanks\n","createdAt":"2016-02-09T18:21:58Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/348#issuecomment-181990952","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQ2NzYxNzQ2Ng==","author":{"login":"Jie-Yang"},"authorAssociation":"NONE","body":"Hi, \r\nI am looking at renaming files, just wondering whether there is any better way yet for the same problem, since it has been 3 years:)\r\nThanks","createdAt":"2019-02-26T21:17:58Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/348#issuecomment-467617466","viewerDidAuthor":false}],"createdAt":"2015-10-24T07:45:42Z","number":348,"state":"CLOSED","title":"How could I rename a file?","url":"https://github.com/PyGithub/PyGithub/issues/348"},{"author":{"id":"MDQ6VXNlcjk4MzAx","is_bot":false,"login":"danvk","name":"Dan Vanderkam"},"body":"See https://developer.github.com/v3/activity/starring/#list-stargazers\n\nWhen requesting a list of stargazers, you can set a custom media type to find out when each user starred your repo. It would be great if pygithub supported this.\n","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDE0NzI4NjQ4NA==","author":{"login":"danvk"},"authorAssociation":"CONTRIBUTOR","body":"Here's some code:\n\n``` python\nclass Stargazer(github.GithubObject.NonCompletableGithubObject):\n    @property\n    def starred_at(self):\n        \"\"\"\n        :type: datetime.datetime\n        \"\"\"\n        return self._starred_at.value\n\n    @property\n    def user(self):\n        \"\"\"\n        :type: :class:`github.NamedUser`\n        \"\"\"\n        return self._user.value\n\n    def _initAttributes(self):\n        self._starred_at = github.GithubObject.NotSet\n        self._user = github.GithubObject.NotSet\n        self._url = github.GithubObject.NotSet\n\n    def _useAttributes(self, attributes):\n        if 'starred_at' in attributes:\n            self._starred_at = self._makeDatetimeAttribute(attributes['starred_at'])\n        if 'user' in attributes:\n            self._user = self._makeClassAttribute(github.NamedUser.NamedUser, attributes['user'])\n\n\ndef get_stargazers(repo):\n    return github.PaginatedList.PaginatedList(\n        Stargazer,\n        repo._requester,\n        repo.url + \"/stargazers\",\n        None,\n        # XXX: pygithub doesn't support this:\n        headers={\n            'Accept': 'application/vnd.github.v3.star+json'\n        }\n    )\n```\n\nand then you have to modify `PaginatedList` to accept a `headers` keyword arg which it passes through the call to `self.__requester.requestJsonAndCheck`.\n","createdAt":"2015-10-12T04:00:57Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/345#issuecomment-147286484","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDE0NzI4ODk4OA==","author":{"login":"danvk"},"authorAssociation":"CONTRIBUTOR","body":"(I'd be happy to turn this into a pull request if there's interest and adding a `headers` parameter seems like the way to go.)\n","createdAt":"2015-10-12T04:16:28Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/345#issuecomment-147288988","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs5_JREi","author":{"login":"mahmoudtuy7"},"authorAssociation":"NONE","body":"# GitHub CLI api\r\n# https://cli.github.com/manual/gh_api\r\n\r\ngh api \\\r\n  --method PATCH \\\r\n  -H \"Accept: application/vnd.github+json\" \\\r\n  -H \"X-GitHub-Api-Version: 2022-11-28\" \\\r\n  /user \\\r\n   -f \"blog=https://github.com/blog\" -f \"name=monalisa octocat\"","createdAt":"2024-05-27T10:06:49Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/345#issuecomment-2133135650","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs5_JRR0","author":{"login":"mahmoudtuy7"},"authorAssociation":"NONE","body":"{\r\n  \"login\": \"octocat\",\r\n  \"id\": 1,\r\n  \"node_id\": \"MDQ6VXNlcjE=\",\r\n  \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\r\n  \"gravatar_id\": \"\",\r\n  \"url\": \"https://api.github.com/users/octocat\",\r\n  \"html_url\": \"https://github.com/octocat\",\r\n  \"followers_url\": \"https://api.github.com/users/octocat/followers\",\r\n  \"following_url\": \"https://api.github.com/users/octocat/following{/other_user}\",\r\n  \"gists_url\": \"https://api.github.com/users/octocat/gists{/gist_id}\",\r\n  \"starred_url\": \"https://api.github.com/users/octocat/starred{/owner}{/repo}\",\r\n  \"subscriptions_url\": \"https://api.github.com/users/octocat/subscriptions\",\r\n  \"organizations_url\": \"https://api.github.com/users/octocat/orgs\",\r\n  \"repos_url\": \"https://api.github.com/users/octocat/repos\",\r\n  \"events_url\": \"https://api.github.com/users/octocat/events{/privacy}\",\r\n  \"received_events_url\": \"https://api.github.com/users/octocat/received_events\",\r\n  \"type\": \"User\",\r\n  \"site_admin\": false,\r\n  \"name\": \"monalisa octocat\",\r\n  \"company\": \"GitHub\",\r\n  \"blog\": \"https://github.com/blog\",\r\n  \"location\": \"San Francisco\",\r\n  \"email\": \"octocat@github.com\",\r\n  \"hireable\": false,\r\n  \"bio\": \"There once was...\",\r\n  \"twitter_username\": \"monatheoctocat\",\r\n  \"public_repos\": 2,\r\n  \"public_gists\": 1,\r\n  \"followers\": 20,\r\n  \"following\": 0,\r\n  \"created_at\": \"2008-01-14T04:33:35Z\",\r\n  \"updated_at\": \"2008-01-14T04:33:35Z\",\r\n  \"private_gists\": 81,\r\n  \"total_private_repos\": 100,\r\n  \"owned_private_repos\": 100,\r\n  \"disk_usage\": 10000,\r\n  \"collaborators\": 8,\r\n  \"two_factor_authentication\": true,\r\n  \"plan\": {\r\n    \"name\": \"Medium\",\r\n    \"space\": 400,\r\n    \"private_repos\": 20,\r\n    \"collaborators\": 0\r\n  }\r\n}","createdAt":"2024-05-27T10:07:17Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/345#issuecomment-2133136500","viewerDidAuthor":false}],"createdAt":"2015-10-12T01:08:38Z","number":345,"state":"CLOSED","title":"Support application/vnd.github.v3.star+json","url":"https://github.com/PyGithub/PyGithub/issues/345"},{"author":{"id":"MDQ6VXNlcjYzODc5Nw==","is_bot":false,"login":"crwilcox","name":"Christopher Wilcox"},"body":"Labels can be added from strings and there is no reason strings can't be allowed in the list for issue creation.  The change requires relaxing the assertion and adding a conditional to the adding of labels to the post.\n\nCurrently\n\n``` python\nrepo.create_issue('name', body = \"body\", labels = [repo.get_label('label')])\n```\n\nAfter the Change\n\n``` python\nrepo.create_issue('name', body = \"body\", labels = ['label'])\n```\n","comments":[],"createdAt":"2015-09-15T19:41:45Z","number":339,"state":"CLOSED","title":"Allow strings in the labels list of create_issue","url":"https://github.com/PyGithub/PyGithub/issues/339"},{"author":{"id":"MDQ6VXNlcjM0MzUzOQ==","is_bot":false,"login":"jzelinskie","name":"Jimmy Zelinskie"},"body":"I think it needs to be deleted and remade because of the repo rename.\n","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDI1NjQ1MzA3OQ==","author":{"login":"arpit1997"},"authorAssociation":"NONE","body":"I guess travis api status is working pretty fine. I checked in [build history](https://travis-ci.org/PyGithub/PyGithub/builds) which shows that last build was on 9 days gao with commit https://github.com/PyGithub/PyGithub/commit/612befe650a16ffa54453339846d9c72b8546180\nPlease check again @jzelinskie and respond\n","createdAt":"2016-10-26T19:31:55Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/338#issuecomment-256453079","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDI1NjUzOTk2NQ==","author":{"login":"jzelinskie"},"authorAssociation":"CONTRIBUTOR","body":"Yep, this was fixed a while ago, but this issue was never closed. Thanks.\n","createdAt":"2016-10-27T03:50:43Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/338#issuecomment-256539965","viewerDidAuthor":false}],"createdAt":"2015-09-14T21:43:47Z","number":338,"state":"CLOSED","title":"travis status API isn't working","url":"https://github.com/PyGithub/PyGithub/issues/338"},{"author":{"id":"MDQ6VXNlcjY1MDU2MQ==","is_bot":false,"login":"klnrajareddy","name":"Raja Reddy Karri"},"body":"remove_from_labels should escape the spaces and other special characters in the label name, if passed as a string.\n","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDEzNTM3NDQ4Mg==","author":{"login":"klnrajareddy"},"authorAssociation":"CONTRIBUTOR","body":"Please see if the submitted pull request https://github.com/PyGithub/PyGithub/pull/336 helps.\n","createdAt":"2015-08-27T10:26:46Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/335#issuecomment-135374482","viewerDidAuthor":false}],"createdAt":"2015-08-27T10:17:17Z","number":335,"state":"CLOSED","title":"Issue.remove_from_labels fails when the label passed is a string with whitespace characters","url":"https://github.com/PyGithub/PyGithub/issues/335"},{"author":{"id":"MDQ6VXNlcjEyMjczMzg=","is_bot":false,"login":"LocutusOfBorg","name":"Gianfranco Costamagna"},"body":"Hi, I would like to report a test that is throwing a warning with python3\n\n```\ntestGetIssuesEvents (github.tests.Repository.Repository) ... /tmp/buildd/pygithub-1.25.2/.pybuild/pythonX.Y_3.4/build/github/GithubObject.py:111: ResourceWarning: unclosed file <_io.BufferedReader name='/tmp/buildd/pygithub-1.25.2/.pybuild/pythonX.Y_3.4/build/github/tests/ReplayData/Persistence.setUp.txt'>\n  return _ValuedAttribute(value)\n/tmp/buildd/pygithub-1.25.2/.pybuild/pythonX.Y_3.4/build/github/GithubObject.py:111: ResourceWarning: unclosed file <_io.BufferedReader name='/tmp/buildd/pygithub-1.25.2/.pybuild/pythonX.Y_3.4/build/github/tests/ReplayData/Persistence.testLoadAndUpdate.txt'>\n  return _ValuedAttribute(value)\nok\ntestGetIssuesWithArguments (github.tests.Repository.Repository) ... ok\n```\n\nI'm not sure if it is bad or not, this is why I'm reporting there :)\n\nthanks!\n","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDQwMTUzMDEyNw==","author":{"login":"mloskot"},"authorAssociation":"CONTRIBUTOR","body":"For those who search through the issues archives:\r\n *ResourceWarning: unclosed socket.socket when I run a unittest*, https://github.com/requests/requests/issues/3912","createdAt":"2018-06-30T09:41:04Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/332#issuecomment-401530127","viewerDidAuthor":false}],"createdAt":"2015-08-08T14:14:25Z","number":332,"state":"CLOSED","title":"pygithub: test warning on python3","url":"https://github.com/PyGithub/PyGithub/issues/332"},{"author":{"id":"MDQ6VXNlcjEyMjczMzg=","is_bot":false,"login":"LocutusOfBorg","name":"Gianfranco Costamagna"},"body":"Hi, following up on bugs.debian.org/790655 I noticed that the code has many python3 incompatibilities\ne.g.\n\"import httplib\" is now \"import http.client\"\nand urlparse is not inside urllib\n-        o = urlparse.urlparse(base_url)\n-        o = urllib.parse(base_url)\n\nbut I stopped to this problem \n\n```\npython3 github/__init__.py \nTraceback (most recent call last):\n  File \"github/__init__.py\", line 36, in <module>\n    from MainClass import Github\n  File \"/tmp/pygithub-1.25.2/github/MainClass.py\", line 32, in <module>\n    import AuthenticatedUser\n  File \"/tmp/pygithub-1.25.2/github/AuthenticatedUser.py\", line 30, in <module>\n    import github.GithubObject\n  File \"/usr/lib/python3/dist-packages/github/__init__.py\", line 36, in <module>\n    from MainClass import Github\nImportError: cannot import name 'Github'\n```\n\ncan you please update the package to a python3 version?\n","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDEyODAzMzgzNg==","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"Just a note from the initial author : pip install PyGithub works with\npython3 because 2to3 is ran during the install. I think writing code to be\ncompatible with python3 as-is would be a large task, but maybe 2to3 could\nbe used during the packaging process.\nOn Aug 5, 2015 5:13 PM, \"Gianfranco Costamagna\" notifications@github.com\nwrote:\n\n> Hi, following up on bugs.debian.org/790655 I noticed that the code has\n> many python3 incompatibilities\n> e.g.\n> \"import httplib\" is now \"import http.client\"\n> and urlparse is not inside urllib\n> - o = urlparse.urlparse(base_url)\n> - o = urllib.parse(base_url)\n> \n> but I stopped to this problem\n> \n> python3 github/**init**.py\n> Traceback (most recent call last):\n>   File \"github/**init**.py\", line 36, in <module>\n>     from MainClass import Github\n>   File \"/tmp/pygithub-1.25.2/github/MainClass.py\", line 32, in <module>\n>     import AuthenticatedUser\n>   File \"/tmp/pygithub-1.25.2/github/AuthenticatedUser.py\", line 30, in <module>\n>     import github.GithubObject\n>   File \"/usr/lib/python3/dist-packages/github/**init**.py\", line 36, in <module>\n>     from MainClass import Github\n> ImportError: cannot import name 'Github'\n> \n> can you please update the package to a python3 version?\n> \n> —\n> Reply to this email directly or view it on GitHub\n> https://github.com/PyGithub/PyGithub/issues/331.\n","createdAt":"2015-08-05T15:18:05Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/331#issuecomment-128033836","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDEyODAzOTUxMQ==","author":{"login":"LocutusOfBorg"},"authorAssociation":"NONE","body":"Hi, isn't is possible to run 2to3 and commit the result in the repo? isn't that compatible with python2 too?\n\nI'm not a python coder, so I can't help too much, but Debian disallows usage of pip, and running 2to3 might be hacky :)\n","createdAt":"2015-08-05T15:29:01Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/331#issuecomment-128039511","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDEyODA0MTIzMg==","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"Once modified by 2to3, the code is definitely not compatible with python2.\nI'll let the current maintainers decide what's good.\nOn Aug 5, 2015 5:29 PM, \"Gianfranco Costamagna\" notifications@github.com\nwrote:\n\n> Hi, isn't is possible to run 2to3 and commit the result in the repo? isn't\n> that compatible with python2 too?\n> \n> I'm not a python coder, so I can't help too much, but Debian disallows\n> usage of pip, and running 2to3 might be hacky :)\n> \n> —\n> Reply to this email directly or view it on GitHub\n> https://github.com/PyGithub/PyGithub/issues/331#issuecomment-128039511.\n","createdAt":"2015-08-05T15:32:05Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/331#issuecomment-128041232","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDEyODEwNTQ1NQ==","author":{"login":"LocutusOfBorg"},"authorAssociation":"NONE","body":"Ok I get the point.. so what about running 3to2 or 2to3 (I would prefer the former) in your setup.py script?\n\nI think you can do something like this https://sources.debian.net/src/python-guess-language/0.5.2-3/setup.py/\n\nafter converting the code to python3 (note, I'm not a python developer so I might find really difficult giving a patch)\n","createdAt":"2015-08-05T18:48:05Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/331#issuecomment-128105455","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDEyODgwMTUwMw==","author":{"login":"LocutusOfBorg"},"authorAssociation":"NONE","body":"We found out that 2to3 wasn't run at build time due to a packaging bug :) sorry for the noise!\n","createdAt":"2015-08-07T19:25:44Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/331#issuecomment-128801503","viewerDidAuthor":false}],"createdAt":"2015-08-05T15:13:39Z","number":331,"state":"CLOSED","title":"the code doesn't work with python3","url":"https://github.com/PyGithub/PyGithub/issues/331"},{"author":{"id":"MDQ6VXNlcjM0MjI2MjY=","is_bot":false,"login":"pelegm","name":"Peleg Michaeli"},"body":"The following fails:\n\n``` python\n>>> u = g.get_user()\n>>> u\n<github.AuthenticatedUser.AuthenticatedUser at 0x7fd96b0762d0>\n>>> org = u.get_orgs()[0]\n>>> org\n<github.Organization.Organization at 0x7fd96b076750>\n>>> org.has_in_members(u)\n```\n\nExpected result: `True`. Instead, an exception is raised:\n\n``` pytb\nTraceback (most recent call last):\n  File \"<ipython-input-6-77c92f204530>\", line 1, in <module>\n    org.has_in_members(u)\n  File \"/usr/local/lib/python2.7/dist-packages/github/Organization.py\", line 557, in has_in_members\n    assert isinstance(member, github.NamedUser.NamedUser), member\nAssertionError: <github.AuthenticatedUser.AuthenticatedUser object at 0x7fd96b0762d0>\n```\n\nSo, apparently an authenticated user is not a \"named\" user. Is this a bug, or is it the intended behaviour?\n","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDM3OTY3Mjk2Ng==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"I guess it's intended. Since there is no inheritance between `NamedUser` and `AuthenticatedUser` so this is not possible.\r\n\r\n`org.has_in_members(g.get_user(u.login))` should do the trick.","createdAt":"2018-04-09T08:21:28Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/330#issuecomment-379672966","viewerDidAuthor":false}],"createdAt":"2015-07-29T11:19:30Z","number":330,"state":"CLOSED","title":"Organization.has_in_members does not accept authenticated users","url":"https://github.com/PyGithub/PyGithub/issues/330"},{"author":{"id":"MDQ6VXNlcjM0MjI2MjY=","is_bot":false,"login":"pelegm","name":"Peleg Michaeli"},"body":"I have an organization which owns several (15) private repositories. I assign it to `org` via `get_organization('name_of_organization')`. Indeed,\n\n``` python\n>>> type(org)\ngithub.Organization.Organization\n```\n\nHowever, when I check the organization of a (private) repository owned by that organization, I get a different object with different properties.\n\nFor example,\n\n``` python\n>>> assert org.get_repos()[0].organization.total_private_repos == org.total_private_repos\n```\n\nfails.\n\nIn addition,\n\n``` python\n>>> org.get_repos()[0].organization.plan\n```\n\nis `None`, where\n\n``` python\n>>> org.plan.name\nu'silver'\n```\n\nIt may worth mentioning that\n\n``` python\nassert org.get_repos()[0].organization.id == org.id\n```\n\ndoes not fail.\n","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDM3OTY3Nzc4NA==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"See https://developer.github.com/v3/repos/#get\r\n\r\nThe reason is when you create a `Organization` object out of the response of a `get_repo` call, you only a subset of the all the organization data, like:\r\n```\r\n\"organization\": {\r\n    \"login\": \"octocat\",\r\n    \"id\": 1,\r\n    \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\r\n    \"gravatar_id\": \"\",\r\n    \"url\": \"https://api.github.com/users/octocat\",\r\n    \"html_url\": \"https://github.com/octocat\",\r\n    \"followers_url\": \"https://api.github.com/users/octocat/followers\",\r\n    \"following_url\": \"https://api.github.com/users/octocat/following{/other_user}\",\r\n    \"gists_url\": \"https://api.github.com/users/octocat/gists{/gist_id}\",\r\n    \"starred_url\": \"https://api.github.com/users/octocat/starred{/owner}{/repo}\",\r\n    \"subscriptions_url\": \"https://api.github.com/users/octocat/subscriptions\",\r\n    \"organizations_url\": \"https://api.github.com/users/octocat/orgs\",\r\n    \"repos_url\": \"https://api.github.com/users/octocat/repos\",\r\n    \"events_url\": \"https://api.github.com/users/octocat/events{/privacy}\",\r\n    \"received_events_url\": \"https://api.github.com/users/octocat/received_events\",\r\n    \"type\": \"Organization\",\r\n    \"site_admin\": false\r\n  },\r\n```\r\n\r\nIf you really want to compare, you have to get back the full organization by `g.get_organization(org.id)`","createdAt":"2018-04-09T08:39:10Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/329#issuecomment-379677784","viewerDidAuthor":false}],"createdAt":"2015-07-29T11:15:05Z","number":329,"state":"CLOSED","title":"The organization of a (private) repository of an organization (is not the same)","url":"https://github.com/PyGithub/PyGithub/issues/329"},{"author":{"id":"MDQ6VXNlcjQyNTM2NzQ=","is_bot":false,"login":"Shengjiezh","name":"Shengjie Zhang"},"body":"Hi,\n\nI want to create a iterable object 'contributors' for particular repo using 'get_stats_contributors()'. However, when I loop through contributors object, it always returns a 'TypeError: 'NoneType' object is not iterable' for the first contributor. When I ran a second time, first contributor is fine but second will returns the same error. So on and so forth. \nIs that normal? Is there any trick to fix this error?\n\nThanks a lot!\n","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDEzODM1MzkwMA==","author":{"login":"t47io"},"authorAssociation":"NONE","body":"I have the same issue. It seems the first time it won't work. But if you run again it will catch on. Not sure why.\n","createdAt":"2015-09-07T18:30:45Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/328#issuecomment-138353900","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDEzODM1ODA2NQ==","author":{"login":"Shengjiezh"},"authorAssociation":"NONE","body":"Please check this thread. I hope it would help. \nhttp://stackoverflow.com/questions/31442518/python-need-to-request-github-api-repo-statistics-contributors-url-twice-to-get/31464160#31464160\n","createdAt":"2015-09-07T18:54:40Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/328#issuecomment-138358065","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQwMTIyMDI1Nw==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"See #493 and #564","createdAt":"2018-06-29T01:26:12Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/328#issuecomment-401220257","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQxNjQyOTUxOA==","author":{"login":"stale"},"authorAssociation":"NONE","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","createdAt":"2018-08-28T02:24:00Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/328#issuecomment-416429518","viewerDidAuthor":false}],"createdAt":"2015-07-16T22:52:10Z","number":328,"state":"CLOSED","title":"get_stats_contributors() not iterable","url":"https://github.com/PyGithub/PyGithub/issues/328"},{"author":{"id":"MDQ6VXNlcjc1Njk0MDM=","is_bot":false,"login":"kokosing","name":"Grzegorz Kokosiński"},"body":"Hey, \nMay I ask to list my project in the doc page?\n\nhttps://github.com/kokosing/git-gifi\n\nPyGithub is a great library, everything worked smoothly.\n\nThanks ;)\n","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDEyMDc3NDM1Nw==","author":{"login":"jzelinskie"},"authorAssociation":"CONTRIBUTOR","body":"I'd be glad to merge it, if you create a PR.\n","createdAt":"2015-07-12T23:49:52Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/325#issuecomment-120774357","viewerDidAuthor":false}],"createdAt":"2015-07-09T20:56:14Z","number":325,"state":"CLOSED","title":"Another project which is using PyGithub - git-gifi","url":"https://github.com/PyGithub/PyGithub/issues/325"},{"author":{"id":"MDQ6VXNlcjI3MzQ1NA==","is_bot":false,"login":"jantman","name":"Jason Antman"},"body":"As far as I can tell, pygithub lacks support for repository hooks (both get and POST).\n","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDI1NzA4Nzk4OQ==","author":{"login":""},"authorAssociation":"NONE","body":"the functionality is there and at least the create works fine:\nhttp://pygithub.readthedocs.io/en/latest/github_objects/Hook.html#github.Hook\n","createdAt":"2016-10-29T12:05:25Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/324#issuecomment-257087989","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM1NDMxNzE3NA==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"Repository hooks is there, but lacks org hook.","createdAt":"2017-12-28T16:39:27Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/324#issuecomment-354317174","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM3OTE5MTM3MQ==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"Closed in #729","createdAt":"2018-04-06T08:54:53Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/324#issuecomment-379191371","viewerDidAuthor":false}],"createdAt":"2015-07-08T15:32:06Z","number":324,"state":"CLOSED","title":"Add support for repository hooks","url":"https://github.com/PyGithub/PyGithub/issues/324"},{"author":{"id":"MDQ6VXNlcjkwMTkyMjM=","is_bot":false,"login":"Nightrord","name":"Neal"},"body":"I try to collect the collaborators of some project, but the website send the message \"Requires authentication \". Could you  explain how to user your system to complete it? Thanks for your help.\n","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDIwODM5ODQwNQ==","author":{"login":"adamtheturtle"},"authorAssociation":"MEMBER","body":"Hi @Nightrord , thank you for your interest in this project.\n\nThe following code gets a list of collaborators for a repository:\n\n``` python\nfrom github import Github\n\n# Generate a token at https://github.com/settings/tokens\ntoken = 'XXX'\n\ng = Github(token)\n\nrepo_name = 'adamtheturtle/github-experiment'\nrepo = g.get_repo(repo_name)\ncollaborators = repo.get_collaborators()\n\nfor collaborator in collaborators:\n    print collaborator.login\n```\n\nPlease let me know whether this helps.\n\nAdam\n","createdAt":"2016-04-11T15:19:19Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/323#issuecomment-208398405","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDIxMjQwNjgyMQ==","author":{"login":"dmiro"},"authorAssociation":"NONE","body":"Hi @adamtheturtle , a question. It's possible to obtain collaborator list without passing 'token' param?\n","createdAt":"2016-04-20T12:37:19Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/323#issuecomment-212406821","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDIxMjQyMjMyNw==","author":{"login":"khornberg"},"authorAssociation":"CONTRIBUTOR","body":"@dmiro Yes you can pass a username and password to authenticate as well.\nhttps://github.com/PyGithub/PyGithub/blob/master/github/MainClass.py#L57\n","createdAt":"2016-04-20T13:22:46Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":1}}],"url":"https://github.com/PyGithub/PyGithub/issues/323#issuecomment-212422327","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDIxMjQ0MTU1Mg==","author":{"login":"dmiro"},"authorAssociation":"NONE","body":"I don't understand because authentication is mandatory in a public repository if only want retrieve the collaborator list :-/  .... collaborator list it's a public data\n","createdAt":"2016-04-20T14:11:40Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/323#issuecomment-212441552","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDIxMjQ0ODUwOQ==","author":{"login":"adamtheturtle"},"authorAssociation":"MEMBER","body":"@dmiro Apologies for my limited knowledge on this but it seems that getting the collaborators via GitHub's API requires authentication for this.\n\n``` sh\n(playground) Adam@Adam-Dangoor ~/D/scratch> curl https://api.github.com/repos/adamtheturtle/github-experiment/collaborators\n{\n  \"message\": \"Requires authentication\",\n  \"documentation_url\": \"https://developer.github.com/v3\"\n}\n(playground) Adam@Adam-Dangoor ~/D/scratch> curl --user \"adamtheturtle:$TOKEN\" https://api.github.com/repos/adamtheturtle/github-experiment/collaborators\n[\n  {\n    \"login\": \"adamtheturtle\",\n    \"id\": 797801,\n    \"avatar_url\": \"https://avatars.githubusercontent.com/u/797801?v=3\",\n    \"gravatar_id\": \"\",\n    \"url\": \"https://api.github.com/users/adamtheturtle\",\n    \"html_url\": \"https://github.com/adamtheturtle\",\n    \"followers_url\": \"https://api.github.com/users/adamtheturtle/followers\",\n    \"following_url\": \"https://api.github.com/users/adamtheturtle/following{/other_user}\",\n    \"gists_url\": \"https://api.github.com/users/adamtheturtle/gists{/gist_id}\",\n    \"starred_url\": \"https://api.github.com/users/adamtheturtle/starred{/owner}{/repo}\",\n    \"subscriptions_url\": \"https://api.github.com/users/adamtheturtle/subscriptions\",\n    \"organizations_url\": \"https://api.github.com/users/adamtheturtle/orgs\",\n    \"repos_url\": \"https://api.github.com/users/adamtheturtle/repos\",\n    \"events_url\": \"https://api.github.com/users/adamtheturtle/events{/privacy}\",\n    \"received_events_url\": \"https://api.github.com/users/adamtheturtle/received_events\",\n    \"type\": \"User\",\n    \"site_admin\": false,\n    \"permissions\": {\n      \"admin\": true,\n      \"push\": true,\n      \"pull\": true\n    }\n  },\n  {\n    \"login\": \"davidoliverSP2\",\n    \"id\": 12032446,\n    \"avatar_url\": \"https://avatars.githubusercontent.com/u/12032446?v=3\",\n    \"gravatar_id\": \"\",\n    \"url\": \"https://api.github.com/users/davidoliverSP2\",\n    \"html_url\": \"https://github.com/davidoliverSP2\",\n    \"followers_url\": \"https://api.github.com/users/davidoliverSP2/followers\",\n    \"following_url\": \"https://api.github.com/users/davidoliverSP2/following{/other_user}\",\n    \"gists_url\": \"https://api.github.com/users/davidoliverSP2/gists{/gist_id}\",\n    \"starred_url\": \"https://api.github.com/users/davidoliverSP2/starred{/owner}{/repo}\",\n    \"subscriptions_url\": \"https://api.github.com/users/davidoliverSP2/subscriptions\",\n    \"organizations_url\": \"https://api.github.com/users/davidoliverSP2/orgs\",\n    \"repos_url\": \"https://api.github.com/users/davidoliverSP2/repos\",\n    \"events_url\": \"https://api.github.com/users/davidoliverSP2/events{/privacy}\",\n    \"received_events_url\": \"https://api.github.com/users/davidoliverSP2/received_events\",\n    \"type\": \"User\",\n    \"site_admin\": false,\n    \"permissions\": {\n      \"admin\": false,\n      \"push\": true,\n      \"pull\": true\n    }\n  }\n]\n```\n","createdAt":"2016-04-20T14:30:56Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":2}}],"url":"https://github.com/PyGithub/PyGithub/issues/323#issuecomment-212448509","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDIxMjQ2NjY1NQ==","author":{"login":"dmiro"},"authorAssociation":"NONE","body":"Thanks for the clarification. It mean than github API impose a limitation.\nYou've hunted the guilty ;-))\n","createdAt":"2016-04-20T15:04:45Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/323#issuecomment-212466655","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM3NjQyNTkyNg==","author":{"login":"tamaramois"},"authorAssociation":"NONE","body":"Hi , Thank you all.\r\nbut can you explain how can I print the collaborator ?\r\nI am getting error on these two lines:\r\n\"\r\nfor collaborator in collaborators:\r\nprint (collaborator.login)\r\n\"","createdAt":"2018-03-27T07:32:55Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/323#issuecomment-376425926","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM4ODY2MDA5Mw==","author":{"login":"gagarine"},"authorAssociation":"NONE","body":"A python 3 version (not much change). Keep in mind you must have push access to view a given repository collaborators.\r\n\r\n```\r\n#!/usr/bin/env python3\r\n\r\nfrom github import Github\r\n\r\n# Generate a token at https://github.com/settings/tokens\r\ntoken = 'XXX'\r\n\r\ng = Github(token)\r\n\r\nrepo_name = 'bitcoin/bitcoin'\r\nrepo = g.get_repo(repo_name)\r\ncollaborators = repo.get_collaborators()\r\n\r\nfor collaborator in collaborators:\r\n    print(collaborator.login)\r\n```\r\n","createdAt":"2018-05-13T22:21:20Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/323#issuecomment-388660093","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs6CWBMp","author":{"login":"Silverdale-NomanNaeem"},"authorAssociation":"NONE","body":"can i get the owner name of repo wtih only giving repo name as input.","createdAt":"2024-06-24T15:10:41Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/323#issuecomment-2186810153","viewerDidAuthor":false}],"createdAt":"2015-07-08T11:30:32Z","number":323,"state":"CLOSED","title":"How to collect collaborators of a projects?","url":"https://github.com/PyGithub/PyGithub/issues/323"},{"author":{"id":"MDQ6VXNlcjQyNTM2NzQ=","is_bot":false,"login":"Shengjiezh","name":"Shengjie Zhang"},"body":"Hi,\n\nI want to create a iterable object 'contributors' for particular repo using 'get_stats_contributors()'. However, when I loop through contributors object, it always returns a 'TypeError: 'NoneType' object is not iterable' for the first contributor. When I ran a second time, first contributor is fine but second will returns the same error. So on and so forth. \nIs that normal? Is there any trick to fix this error? \n\nThanks a lot!\n","comments":[],"createdAt":"2015-06-27T00:26:15Z","number":322,"state":"CLOSED","title":"Question about 'get_stats_contributors()'","url":"https://github.com/PyGithub/PyGithub/issues/322"},{"author":{"id":"MDQ6VXNlcjQwMTkwNTQ=","is_bot":false,"login":"davidawad","name":"David Awad"},"body":"there's no way to know how to use this if you've never used the github API before. \n","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDEyNTkyMzkwMw==","author":{"login":"pelegm"},"authorAssociation":"NONE","body":"I wouldn't say it is true, and in any case, you are more than welcome to contribute.\n\nAs a quick start, try:\n\n``` python\n>>> g = github.Github(token)\n>>> u = g.get_user()\n>>> print u.name\nDavid Awad\n>>> print u.hireable\nTrue\n>>> print u.followers\n94\n>>> r = sorted(u.get_repos(), key=lambda r: r.stargazers_count, reverse=True)[0]\n>>> print \"The repository {r.name} has {r.stargazers_count} stars!\".format(r=r)\nThe repository SpaceShare has 32 stars!\n```\n\netc.\n","createdAt":"2015-07-29T11:28:21Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/321#issuecomment-125923903","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDE2NTEwODQ3Nw==","author":{"login":"thefourtheye"},"authorAssociation":"NONE","body":"Totally agree. If I have to quickly create a program, then this module is totally of no use. I have to go through the classes and understand how to use them.\n","createdAt":"2015-12-16T13:40:16Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":7}}],"url":"https://github.com/PyGithub/PyGithub/issues/321#issuecomment-165108477","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDE2NTE4MjgxMQ==","author":{"login":"pconrad"},"authorAssociation":"NONE","body":"So, I put a lot of time into writing a collection of such examples and putting them on the \"wiki\" associated with the repo.    But I don't see a way to access that \"wiki\" anymore, and I'm wondering if github.com dropped the \"wiki\" associated with each repo while I wasn't paying attention?\n","createdAt":"2015-12-16T17:21:39Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/321#issuecomment-165182811","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDE2NTE4MzI5MQ==","author":{"login":"pconrad"},"authorAssociation":"NONE","body":"Here are some: https://github.com/UCSB-CS-Using-GitHub-In-Courses/PyGitHubExamples\n","createdAt":"2015-12-16T17:23:39Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":9}},{"content":"HEART","users":{"totalCount":2}}],"url":"https://github.com/PyGithub/PyGithub/issues/321#issuecomment-165183291","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDE2NTY3MjAyNQ==","author":{"login":"thefourtheye"},"authorAssociation":"NONE","body":"@pconrad Oh thanks :-) But I ended up using github3.py\n","createdAt":"2015-12-18T04:39:32Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":2}}],"url":"https://github.com/PyGithub/PyGithub/issues/321#issuecomment-165672025","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDIzMDc0MDM2NA==","author":{"login":"bronger"},"authorAssociation":"NONE","body":"http://pygithub.github.io/PyGithub/ is also of interest.  Is it linked from somewhere here?  I think the links in https://github.com/PyGithub/PyGithub/blob/master/doc/introduction.rst should be updated.\n","createdAt":"2016-07-06T10:51:55Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/321#issuecomment-230740364","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDI2NDUzMzg5Mw==","author":{"login":"a35joshi"},"authorAssociation":"NONE","body":"https://media.readthedocs.org/pdf/pygithub/stable/pygithub.pdf\r\nGood document but requires some effort to comprehend.\r\n","createdAt":"2016-12-02T18:59:39Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/321#issuecomment-264533893","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDI3OTcwMjQ4Ng==","author":{"login":"p00j4"},"authorAssociation":"NONE","body":"is there any good usage doc on dealing with Pull Requests?\r\n[this](http://pygithub.github.io/PyGithub/v1/github_objects/PullRequest.html)  is more of a dev doc\r\nI want to use it for easy parsing for a any pull request-  event received from github webhook in which I get is the [payload json](https://developer.github.com/v3/pulls/), which @ the moment, I'm parsing on my own. i'm keen to look at usage examples to analyze if this using PyGithub, the tedious parsing efforts are gonna actually be reduced.","createdAt":"2017-02-14T13:08:00Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/321#issuecomment-279702486","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM3MDE0MTk3MA==","author":{"login":"sks444"},"authorAssociation":"NONE","body":"Hello everyone,\r\nI have started writing examples for PyGithub, [have a look](https://github.com/sks444/Pygithub-Examples) and feel free to contribute ;)","createdAt":"2018-03-03T11:54:53Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":1}}],"url":"https://github.com/PyGithub/PyGithub/issues/321#issuecomment-370141970","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM3MTczOTI5Nw==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"Latest docs on [readthedocs](http://pygithub.readthedocs.io/en/latest/) site should be easy to follow now.","createdAt":"2018-03-09T07:52:23Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/321#issuecomment-371739297","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM3NDY3MjA1Ng==","author":{"login":"MaslowCommunityGardenRobot"},"authorAssociation":"NONE","body":"I still think that more and better documentation is needed, especially examples. The documentation is easy to read and well done, but having never worked with the github API before it is not clear how to actually implement the functions. What is a blob...how to I create one...etc","createdAt":"2018-03-20T16:49:40Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":3}}],"url":"https://github.com/PyGithub/PyGithub/issues/321#issuecomment-374672056","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM3NDgxMDk1Mw==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"@MaslowCommunityGardenRobot I agree. I am thinking of starting a new PyGithub by examples section on the docs, but we would require a lot of user contributions for it. Is this something that would interest you?","createdAt":"2018-03-21T01:27:32Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":1}}],"url":"https://github.com/PyGithub/PyGithub/issues/321#issuecomment-374810953","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM3NzMxNjA0OQ==","author":{"login":"BarbourSmith"},"authorAssociation":"NONE","body":"I would gladly contribute if it was easy to make pull requests to. After working with pygithub for a couple weeks now it's really easy to use and well written, but a couple clear examples would have helped me a lot getting started and I am happy to contribute them as long as you give them a look over to make sure I'm doing things right 😉 ","createdAt":"2018-03-29T17:44:10Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/321#issuecomment-377316049","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM3NzQzMTU1MQ==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"@BarbourSmith That sounds brilliant! I can't wait to see you PR. Maybe start with a simple `doc/example-usage.rst`? Once the page looks good I will try to merge it to readthedocs itself 😃","createdAt":"2018-03-30T02:54:14Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/321#issuecomment-377431551","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM4MTc2MzI2Nw==","author":{"login":"allardbrain"},"authorAssociation":"NONE","body":"@sfdye I'd like to jump in here and start the Examples section. Like others have said above, PyGithub is a great resource but took me some time to figure out how to manipulate the Classes and methods for my use. Any preference for how to structure the Examples section? I'm thinking a simple Class-by-Class approach might be good, to mirror the reference documentation itself.","createdAt":"2018-04-16T21:57:31Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":1}}],"url":"https://github.com/PyGithub/PyGithub/issues/321#issuecomment-381763267","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM4MTc3MjAyNg==","author":{"login":"BarbourSmith"},"authorAssociation":"NONE","body":"This is still on my todo list too. Life keeps getting in the way, but I would love to help @allardbrain ","createdAt":"2018-04-16T22:37:36Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/321#issuecomment-381772026","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM4MTc3NzI1MQ==","author":{"login":"allardbrain"},"authorAssociation":"NONE","body":"@BarbourSmith Great! Let's each pick a few examples we'd like to start with so we don't overlap. Since my current personal project involves using the ContentFile class, I'll start there. [Here's a link](https://github.com/allardbrain/PyGithub) to my forked version which now has `doc/example-usage.rst` and some boilerplate.","createdAt":"2018-04-16T23:04:56Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/321#issuecomment-381777251","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM4MTc4MzcyMA==","author":{"login":"BarbourSmith"},"authorAssociation":"NONE","body":"Great! It's going to be at least another week or two before I will really have time to dig in, but I'm mostly dealing with reading issues and comments and merging pull requests so it sounds like we'll have good coverage ","createdAt":"2018-04-16T23:42:27Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/321#issuecomment-381783720","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM4MTgyMjczNQ==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"Thank you @allardbrain @BarbourSmith for bringing up this topic.\r\n\r\nHow about we start a `examples` folder under `docs`, and document each class with one rst? i.e. `examples/issue.rst`, `examples/pullrequest.rst`. Please share your PR once it's ready 😉 so we have a place to discuss.","createdAt":"2018-04-17T03:21:55Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":1}}],"url":"https://github.com/PyGithub/PyGithub/issues/321#issuecomment-381822735","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM4MTgyOTE1MQ==","author":{"login":"allardbrain"},"authorAssociation":"NONE","body":"@sfdye Sounds good to me. Excited to work on this!\r\n\r\n@BarbourSmith no problem. ","createdAt":"2018-04-17T03:53:22Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"HEART","users":{"totalCount":1}}],"url":"https://github.com/PyGithub/PyGithub/issues/321#issuecomment-381829151","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM4MjkwNTQwMw==","author":{"login":"BarbourSmith"},"authorAssociation":"NONE","body":"I'm running into an issue while documenting the `PullRequest `class which is that a lot of the features that users will want when interacting with pull requests are ONLY available by using the `issue` class.\r\n\r\nTo read the comments on a pull request you need to open it as an issue instead of a pull request and access the comments that way. The `PullRequest` class has a comments attribute, but it is not the comments you see when opening the pull request on the GitHub website which is what you would expect.\r\n\r\nSimilarly to close a pull request you need to open it as an issue and use `prAsIssue.edit(state='closed')` .\r\n\r\nBecause a good example often includes multiple classes I think we might be better off with a single examples.rst file instead of separate files for each class. \r\n\r\n**How do we feel about having a single examples.rst file?**","createdAt":"2018-04-19T22:56:50Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/321#issuecomment-382905403","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM4MjkwNjk3Ng==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"@BarbourSmith Wouldn’t hurt, let’s start with that :)","createdAt":"2018-04-19T23:05:31Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"HEART","users":{"totalCount":1}}],"url":"https://github.com/PyGithub/PyGithub/issues/321#issuecomment-382906976","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM4MjkxNDIzOQ==","author":{"login":"BarbourSmith"},"authorAssociation":"NONE","body":"I opened #762 to start us off","createdAt":"2018-04-19T23:40:29Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/321#issuecomment-382914239","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM4NTA0NDE3Ng==","author":{"login":"BarbourSmith"},"authorAssociation":"NONE","body":"@allardbrain Have you had a chance to work on this any more? I'm looking for info on using the using the ContentFile class, even just one simple example would help me a lot.\r\n\r\nThis blog post also includes more examples which are useful:\r\n\r\nhttps://chase-seibert.github.io/blog/2016/07/22/pygithub-examples.html","createdAt":"2018-04-27T17:46:47Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":1}}],"url":"https://github.com/PyGithub/PyGithub/issues/321#issuecomment-385044176","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM4NTU4MzAyNw==","author":{"login":"allardbrain"},"authorAssociation":"NONE","body":"@BarbourSmith I am still trying to figure out how to use parts of this package for a project I have due on Friday. I can start writing examples once I submit it. This should help in the mean time:\r\n\r\n```\r\nfrom github import Github\r\nimport os\r\n\r\nGITHUB_API_KEY = os.environ['GITHUB_API_KEY']\r\ng = Github(GITHUB_API_KEY)\r\n\r\ndef get_code():\r\n    user = g.get_user('scipy')\r\n    repo = user.get_repo('scipy')\r\n    self.code = repo.get_contents('setup.py').decoded_content\r\n\r\n    return\r\n```","createdAt":"2018-05-01T02:17:53Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"HEART","users":{"totalCount":1}}],"url":"https://github.com/PyGithub/PyGithub/issues/321#issuecomment-385583027","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM4NTcyMTU0OA==","author":{"login":"BarbourSmith"},"authorAssociation":"NONE","body":"That helps a ton. Thank you.","createdAt":"2018-05-01T16:50:32Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/321#issuecomment-385721548","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM5MDEwNjkyMw==","author":{"login":"vipulgupta2048"},"authorAssociation":"NONE","body":"Anyone who is working on PyGithub examples will earn a free `Issue fixed` in your repo. We need more examples desperately. @BarbourSmith  I am looking at your examples, they help so much. Thanks for being an angel.","createdAt":"2018-05-18T06:23:30Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"HEART","users":{"totalCount":1}}],"url":"https://github.com/PyGithub/PyGithub/issues/321#issuecomment-390106923","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM5MDU5MDk5OQ==","author":{"login":"p00j4"},"authorAssociation":"NONE","body":"I'm adding my examples in this [Pull Reuest](https://github.com/PyGithub/PyGithub/pull/772/files#diff-08a899baa39d1ee2d988828dec8205fb), would like to know, where to add them, as  examples/pullrequest.rst structure is still not in this repository.\r\nCan we have a branch out where the skelenton is started and all contributors work from that branch and when its looks in shape, we can again raise to the master @vipulgupta2048 @sfdye ?\r\n","createdAt":"2018-05-21T08:39:48Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/321#issuecomment-390590999","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM5MDYxMzgwOA==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"@p00j4 Commented on #762 and let's use that thread to discuss.","createdAt":"2018-05-21T10:16:50Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/321#issuecomment-390613808","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQxNDU5NDMxNw==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"Please see #874","createdAt":"2018-08-21T08:28:47Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/321#issuecomment-414594317","viewerDidAuthor":false}],"createdAt":"2015-06-26T02:10:36Z","number":321,"state":"CLOSED","title":"Please write better examples for documentation","url":"https://github.com/PyGithub/PyGithub/issues/321"},{"author":{"id":"MDQ6VXNlcjczOTY2OA==","is_bot":false,"login":"soundofjw","name":"Josh Whelchel"},"body":"We use PyGithub and love it. We'd love to be mentioned. :)\n\nhttps://github.com/Loudr/asana-hub\n","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDExNTMwMTg3MA==","author":{"login":"jzelinskie"},"authorAssociation":"CONTRIBUTOR","body":"If you make a PR, I'm more than willing to merge it.\n","createdAt":"2015-06-25T15:53:19Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/320#issuecomment-115301870","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDExNTMyMzg0MQ==","author":{"login":"soundofjw"},"authorAssociation":"NONE","body":"Thanks! Will do :+1: \n","createdAt":"2015-06-25T16:59:47Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/320#issuecomment-115323841","viewerDidAuthor":false}],"createdAt":"2015-06-25T05:30:05Z","number":320,"state":"CLOSED","title":"Add loudr/asana-hub to introduction doc","url":"https://github.com/PyGithub/PyGithub/issues/320"},{"author":{"id":"MDQ6VXNlcjE1NDY1MzI=","is_bot":false,"login":"tarzzz","name":"Tarun Gaba"},"body":"Hi\nI am trying to use the API to get the number of repositories for a particular `created` interval, but I am getting zero results.\n\nHere is the code snippet I am trying to execute:\n\n```\nIn [1]: import github as gt   \nIn [8]: g = gt.Github(\"my_token\")\nIn [9]: f = g.search_repositories(\"location:California created:2008-01-01..2008-01-28\")\nIn [10]: f.totalCount\nOut[10]: 0\n```\n\nI have tried changing the location as well as created interval, but still getting zero results.\nThe same search query gives results in github search bar, though:\n\n![image](https://cloud.githubusercontent.com/assets/1546532/8143746/35af5f8a-11d9-11e5-9b34-5b9792b86547.png)\n\nI have also tried using `search_issues` with similar filters, but getting zero count for the same as well.\n`search_users` seem to work fine though.\n","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDEzODMwMDI2NA==","author":{"login":"era"},"authorAssociation":"NONE","body":"Hello @tarzzz, \n\nThe problem seems to be the \"location:California\". If you hit [the api at](https://api.github.com/search/repositories?sort=stars&q=created%3A2008-01-01..2008-01-28&order=desc) using only the created:2008-01-01..2008-01-28 you will receive the 39 results (this is consistent with the PyGithub). If you include the [\"location:California\"](https://api.github.com/search/repositories?sort=stars&q=location%3ACalifornia+created%3A2008-01-01..2008-01-28&order=desc) you will receive 0 results.\n\nI tried to find in the [Github documentation](https://developer.github.com/v3/search/#search-repositories) the keyword location and I didn't find. If you saw that on the documentation, could you please provide the link?\n\nTo the maintainers, if this is not a bug, should we remove any search qualifiers that is not supported by github before every request to avoid this type of problem? \n","createdAt":"2015-09-07T13:32:28Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/319#issuecomment-138300264","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDIyNDcwMDczMw==","author":{"login":"michaelrupert-wf"},"authorAssociation":"NONE","body":"I believe that for some reason, search issues doesnt seem to work with multiple queries, I\"m trying to find issues with mentions:user+state:open, and getting the same error\n","createdAt":"2016-06-08T19:26:37Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/319#issuecomment-224700733","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQwMzI1ODAxMA==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"This should be fixed in #820 ","createdAt":"2018-07-08T02:54:05Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/319#issuecomment-403258010","viewerDidAuthor":false}],"createdAt":"2015-06-13T09:06:37Z","number":319,"state":"CLOSED","title":"Getting zero count for every request","url":"https://github.com/PyGithub/PyGithub/issues/319"},{"author":{"id":"MDQ6VXNlcjQwNjI5OQ==","is_bot":false,"login":"justinclift","name":"Justin Clift"},"body":"Just noticed the Repository object seems to be missing 'subscribers_count'.  (this is what shows up in the GitHub UI as the number of Watchers)\n\neg:\n\nrepo_data = gh.get_repo('sqlitebrowser/sqlitebrowser')\n\nrepo_data **should** have an integer property 'subscribers_count' containing the number of subscribers.  But it doesn't (on OSX 10.9 anyway). :frowning: \n\nDirectly calling the API using a browser shows the property:\n\n&nbsp; &nbsp; https://api.github.com/repos/sqlitebrowser/sqlitebrowser\n\nIt's just not getting into the Repository object.\n","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDE2NjM3MjUzOQ==","author":{"login":"lipis"},"authorAssociation":"NONE","body":":100: Yes please!\n","createdAt":"2015-12-21T17:49:02Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/318#issuecomment-166372539","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDI2MzEyMzEyNQ==","author":{"login":"Sylvus"},"authorAssociation":"CONTRIBUTOR","body":"I also need this. Implementation is super easy but I guess the tests have to be updated as well.\r\n\r\nAnyway, I send a pull request:  #492 ","createdAt":"2016-11-27T13:48:52Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/318#issuecomment-263123125","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDI2MzYxNjY0Nw==","author":{"login":"jzelinskie"},"authorAssociation":"CONTRIBUTOR","body":"This was merged and will be in the next release! Thanks!","createdAt":"2016-11-29T16:16:13Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/318#issuecomment-263616647","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDI2Mzc0Mjk5Ng==","author":{"login":"justinclift"},"authorAssociation":"NONE","body":"Awesome, thanks @Sylvus. :smile:","createdAt":"2016-11-30T00:17:02Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/318#issuecomment-263742996","viewerDidAuthor":false}],"createdAt":"2015-06-04T19:53:41Z","number":318,"state":"CLOSED","title":"Repository object seems to be missing 'subscribers_count'","url":"https://github.com/PyGithub/PyGithub/issues/318"},{"author":{"id":"MDQ6VXNlcjM1MzY5ODI=","is_bot":false,"login":"ekmartin","name":"Martin Ek"},"body":"When trying to access the content of a file retrieved with `get_dir_contents` the resulting URL looks something like this:\nhttps://api.github.com/repos/owner/repo/contents/requirements.txt?ref=master?client_id=clientid&client_secret=secret - i.e. with a ? instead of an & after `ref=master`, causing GitHub to think the ref includes the client id, resulting in a `No commit found for the ref master?client_id=clientid` error.\n\nSeems like the ref is already set here: https://github.com/PyGithub/PyGithub/blob/master/github%2FRequester.py#L243\n\nI'm using version 1.25.2.\n","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDEwODU4NzMxNw==","author":{"login":"ekmartin"},"authorAssociation":"NONE","body":"Example:\n\n``` python\nclient = github.Github(login_or_token=access_token,\n                                   client_id=settings.SOCIAL_AUTH_GITHUB_KEY,\n                                   client_secret=settings.SOCIAL_AUTH_GITHUB_SECRET)\nrepo = client.get_repo(identifier)\nfiles = repo.get_dir_contents('some_folder_name')\nfor github_file in files:\n  print(github_file.decoded_content)\n```\n","createdAt":"2015-06-03T19:23:49Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/317#issuecomment-108587317","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDEzODMxNzUyMg==","author":{"login":"era"},"authorAssociation":"NONE","body":"I think this could fix the problem https://github.com/era/PyGithub/commit/edcaffe1c6e2f9bfdbd44601846b4a1581c17ef2. But I'm not sure if it's safe to just search for the '?' in the URL. \n","createdAt":"2015-09-07T14:51:31Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/317#issuecomment-138317522","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDUzMTA4NzQ2MQ==","author":{"login":"stale"},"authorAssociation":"NONE","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","createdAt":"2019-09-13T03:48:36Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/317#issuecomment-531087461","viewerDidAuthor":false}],"createdAt":"2015-06-03T17:59:13Z","number":317,"state":"CLOSED","title":"get_dir_contents seem to build wrong file URLs","url":"https://github.com/PyGithub/PyGithub/issues/317"},{"author":{"id":"MDQ6VXNlcjEwMjczNTc=","is_bot":false,"login":"robbyki","name":"Robby"},"body":"Getting below error after installing GitHub and trying to run `from github import GitHub` on Python3.4\n\n```\nIn [1]: from github import Github\n---------------------------------------------------------------------------\nImportError                               Traceback (most recent call last)\n<ipython-input-1-04bd0daea4a5> in <module>()\n----> 1 from github import Github\n\n/ebs/PyGithub/github/__init__.py in <module>()\n     34 import logging\n     35\n---> 36 from MainClass import Github\n     37 from GithubException import GithubException, BadCredentialsException, UnknownObjectException, BadUserAgentException, RateLimitExceededException, BadAttributeException\n     38 from InputFileContent import InputFileContent\n\nImportError: No module named 'MainClass'\n\nIn [2]: from GitHub import *\n---------------------------------------------------------------------------\nImportError                               Traceback (most recent call last)\n<ipython-input-2-c0ff318d59b4> in <module>()\n----> 1 from GitHub import *\n\nImportError: No module named 'GitHub'\n\nIn [3]: from github import *\n---------------------------------------------------------------------------\nImportError                               Traceback (most recent call last)\n<ipython-input-3-51000bb5e3c9> in <module>()\n----> 1 from github import *\n\n/ebs/PyGithub/github/__init__.py in <module>()\n     34 import logging\n     35\n---> 36 from MainClass import Github\n     37 from GithubException import GithubException, BadCredentialsException, UnknownObjectException, BadUserAgentException, RateLimitExceededException, BadAttributeException\n     38 from InputFileContent import InputFileContent\n\nImportError: No module named 'MainClass'\n```\n","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDEwNzM5MTkzMg==","author":{"login":"mikecroucher"},"authorAssociation":"NONE","body":"I think that this is because your current working directory is `/ebs/PyGithub/github/` and so when you do the import, it is picking up the `__init__.py` for the package from there. Since this was written for Python 2, it doesn't work! In particular, the problem here is that the Python 2 code is a sibling import and Python 3 needs a relative import.\n\nWhen you install to your environment using\n\n`python setup.py install`\n\nall of the .py files, **init**.py included, gets passed through the `2to3` script which makes them work for Python 3. Thus, Python 3 compatible versions of the module will get installed.\n\nAs such, I think your fix is to install as per the command above and make sure you are not in the source directory for the module when you do the import. I can reproduce all of this in my own Python 3.4 environment.\n\nHope this helps,\nMike\n","createdAt":"2015-06-01T10:32:00Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":3}}],"url":"https://github.com/PyGithub/PyGithub/issues/314#issuecomment-107391932","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDEwNzY1MTU1Mg==","author":{"login":"TimoKramer"},"authorAssociation":"NONE","body":"Hi,\nI've got the same problem with Python3.4 on Ubuntu 14.04. Is there a possibility to use this module with Python 3.4?\nThanks and regards\n","createdAt":"2015-06-01T17:44:27Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/314#issuecomment-107651552","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDExMTA2MTgzOA==","author":{"login":"CMB"},"authorAssociation":"NONE","body":"I just had this problem and fixed it.\nFor me, the basic issue was that the build/ directory is used regardless\nof which version of python you are building for.\nMy build/ directory had files for Python 2 in it.\nYou really need to flush it every time you do an install.\nSo nuke build/ and try a reinstall.\nHopefully this will fix things for you as well.\n","createdAt":"2015-06-11T09:29:32Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/314#issuecomment-111061838","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDE3MDEyNjcxOA==","author":{"login":""},"authorAssociation":"NONE","body":"So, you can just run the directory through the 2to3 script, right?\n","createdAt":"2016-01-08T21:21:05Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/314#issuecomment-170126718","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDIxNDczMzQ1NQ==","author":{"login":"abersh"},"authorAssociation":"NONE","body":"Hi gays I'm using django 1.6.11 python 2.7 and when python manage.py runserver i get \nthis error but i install django-registration how to fix ??????\n\nNot enabling BingMaps base layer as a BING_API_KEY is not defined in local_settings.py file.\nTraceback (most recent call last):\n  File \"manage.py\", line 29, in <module>\n    execute_from_command_line(sys.argv)\n  File \"/home/geonode/venv/local/lib/python2.7/site-packages/django/core/management/**init**.py\", line 399, in execute_from_command_line\n    utility.execute()\n  File \"/home/geonode/venv/local/lib/python2.7/site-packages/django/core/management/**init**.py\", line 392, in execute\n    self.fetch_command(subcommand).run_from_argv(self.argv)\n  File \"/home/geonode/venv/local/lib/python2.7/site-packages/django/core/management/base.py\", line 242, in run_from_argv\n    self.execute(_args, *_options.**dict**)\n  File \"/home/geonode/venv/local/lib/python2.7/site-packages/django/core/management/base.py\", line 280, in execute\n    translation.activate('en-us')\n  File \"/home/geonode/venv/local/lib/python2.7/site-packages/django/utils/translation/**init**.py\", line 130, in activate\n    return _trans.activate(language)\n  File \"/home/geonode/venv/local/lib/python2.7/site-packages/django/utils/translation/trans_real.py\", line 188, in activate\n    _active.value = translation(language)\n  File \"/home/geonode/venv/local/lib/python2.7/site-packages/django/utils/translation/trans_real.py\", line 177, in translation\n    default_translation = _fetch(settings.LANGUAGE_CODE)\n  File \"/home/geonode/venv/local/lib/python2.7/site-packages/django/utils/translation/trans_real.py\", line 159, in _fetch\n    app = import_module(appname)\n  File \"/home/geonode/venv/local/lib/python2.7/site-packages/django/utils/importlib.py\", line 40, in import_module\n    __import__(name)\n  File \"/home/geonode/venv/local/lib/python2.7/site-packages/guardian/**init**.py\", line 5, in <module>\n    from . import checks\n  File \"/home/geonode/venv/local/lib/python2.7/site-packages/guardian/checks.py\", line 2, in <module>\n    from django.core.checks import register, Tags, Warning\nImportError: cannot import name register\n","createdAt":"2016-04-26T13:01:25Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/314#issuecomment-214733455","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDI1MDc5NDEwNQ==","author":{"login":"arpit1997"},"authorAssociation":"NONE","body":"I had the same issue while contributing to this repo. Possible reason is that you are in the source directory of the the module where your both the files are conflicting with each other. So maybe you can try importing outside the repository's directory.\nHope it helps\n","createdAt":"2016-09-30T16:45:58Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/314#issuecomment-250794105","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQwMjY1NDI4NA==","author":{"login":"stale"},"authorAssociation":"NONE","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","createdAt":"2018-07-05T08:59:02Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/314#issuecomment-402654284","viewerDidAuthor":false}],"createdAt":"2015-04-27T18:45:55Z","number":314,"state":"CLOSED","title":"ImportError: No module named 'MainClass'","url":"https://github.com/PyGithub/PyGithub/issues/314"},{"author":{"id":"MDQ6VXNlcjQ2MDI4MzA=","is_bot":false,"login":"oskar-j","name":"Oskar Jarczyk"},"body":"Hey,\n\nafter getting UnknownObjectException with PyGithub, is there a way check whether repository simply changed owner / was renamed, without writing a sophisticated custom webscrapper? \n\nI noticed that if accesing github.com/oldowner/oldname, github simply redirects to new page github.com/newowner/propername, but I want to recognize this in a KISS way in my python programs.\n\nBest Regards,\nOskar\n","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDk1NTIwNzEz","author":{"login":"oskar-j"},"authorAssociation":"NONE","body":"I wrote a script which checks for that\n\nhttps://gist.github.com/oskar-j/28673f37c1e2cb0e2acd\n\nAnd as far as I know, this check is not implemented in PyGithub.\n\nI believe we can close this issue or leave it as a feature request.\n\nThanks!.\n","createdAt":"2015-04-23T10:00:29Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/311#issuecomment-95520713","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM3OTY3MTg2Nw==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"This is now implemented.\r\n\r\n","createdAt":"2018-04-09T08:17:10Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":1}}],"url":"https://github.com/PyGithub/PyGithub/issues/311#issuecomment-379671867","viewerDidAuthor":false}],"createdAt":"2015-04-21T15:22:52Z","number":311,"state":"CLOSED","title":"Moved repositories, get new full_name instead of \"not found\"","url":"https://github.com/PyGithub/PyGithub/issues/311"},{"author":{"id":"MDQ6VXNlcjc0NzU1","is_bot":false,"login":"bgreeley","name":"Brandon Greeley"},"body":"Add support for the filter and role parameters.\n\nhttps://developer.github.com/v3/orgs/members/#members-list\n","comments":[],"createdAt":"2015-04-17T18:42:46Z","number":310,"state":"CLOSED","title":"Support for updated members list endpoint","url":"https://github.com/PyGithub/PyGithub/issues/310"},{"author":{"id":"MDQ6VXNlcjExMjQyNjM=","is_bot":false,"login":"korfuri","name":"Uriel Corfa"},"body":"Today I tried to add some unit tests and the --record option would fail as Github requires an OTP, which can't be provided via GithubCredentials.py.\n\nI solved the issue by hacking support to tests using the token by default instead of the username/password. I'll create a pull request with my hack, but it's likely that it doesn't cover all cases cleanly, since there are some tests that explicitly test token authentication, etc.\n","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDM3NzE5MDgzNg==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"Closed in #307","createdAt":"2018-03-29T10:17:42Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/306#issuecomment-377190836","viewerDidAuthor":false}],"createdAt":"2015-03-27T04:11:32Z","number":306,"state":"CLOSED","title":"Recording new unit tests fails for accounts with 2-factor","url":"https://github.com/PyGithub/PyGithub/issues/306"},{"author":{"id":"MDQ6VXNlcjg5MjY1MzU=","is_bot":false,"login":"eduOS","name":"Lerner Zhang"},"body":"Hello, everyone,\n\nSorry to disturb you asking such a simple question.\n\nI'm a non computer science major, but may need employ PyGithub(according to [this](http://stackoverflow.com/questions/10625190/most-suitable-python-library-for-github-api-v3)) to conduct my experiment without knowing that if PyGithub would help me capture data I need from GitHub. \nMore background: I know Python, and am familiar with basic command line skills of GitHub.\n\nI've found little tutorial or documentation straightforward and useful to me, including [this one](http://jacquev6.net/PyGithub/v1/). \n\nAll relevant info about the aforementioned experiment is detailed [here](https://github.com/opencollaborativeclass/OpenResearch/issues/3). Anyone who would help to provide any suggestions or tips is highly appreciated. And more, should anyone show any interest in our attempt, please just let me know, I would send you a member invitation of our organization. \n\nThanks for your time and attention. Millions of thanks in advance. \n","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDg2NTgxOTk4","author":{"login":"Rahul91"},"authorAssociation":"NONE","body":"Do you mean noob and not nood ?\n\nAlso i am interested in this endeavour of yours. My skill set matches yours, except I have Computer Science as my majors.\n\nAll the very best :)\nCheers :+1:  \n","createdAt":"2015-03-26T15:45:01Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/304#issuecomment-86581998","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDg2ODA4Nzc5","author":{"login":"eduOS"},"authorAssociation":"NONE","body":"@Rahul91 \nThanks. Please keep in touch on this. \n","createdAt":"2015-03-27T03:51:40Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/304#issuecomment-86808779","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDIyNjk5NDE3Mw==","author":{"login":"mandeeps708"},"authorAssociation":"NONE","body":"I have recently started working on PyGithub. Using ipython autocompletion helps very much.\n\nMy personal reference: https://mandeep7.wordpress.com/tag/pygithub/\n","createdAt":"2016-06-19T12:14:23Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/304#issuecomment-226994173","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDIyNzA5NzE3Mw==","author":{"login":"eduOS"},"authorAssociation":"NONE","body":"Oh, that's great. Thanks for your warmhearted recommendation. \n","createdAt":"2016-06-20T09:46:14Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/304#issuecomment-227097173","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDIyNzA5Nzc1NA==","author":{"login":"mandeeps708"},"authorAssociation":"NONE","body":"Hi @eduOS \nDidn't see the date of issue. Have you used it somewhere till now? Or still it's somewhere in your subconscious todo-list.\n\nHope you are doing well now.\n","createdAt":"2016-06-20T09:48:49Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"HEART","users":{"totalCount":1}}],"url":"https://github.com/PyGithub/PyGithub/issues/304#issuecomment-227097754","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDIyNzA5OTUwNQ==","author":{"login":"eduOS"},"authorAssociation":"NONE","body":"Sorry. I have already kind of given up and don't know when I will resume this task. Had I closed this issue in time it would not waste your time. I'll come back to this issue later when it becomes necessary again. \n\nThanks again. \n","createdAt":"2016-06-20T09:56:34Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/304#issuecomment-227099505","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDIyNzEwMTY0NQ==","author":{"login":"mandeeps708"},"authorAssociation":"NONE","body":"@eduOS \nNo problem at all. I like to help. There is nothing to waste. If I thought of it as a waste of time, then I would not have replied here.\n\nThank you.\n","createdAt":"2016-06-20T10:06:45Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"HEART","users":{"totalCount":1}}],"url":"https://github.com/PyGithub/PyGithub/issues/304#issuecomment-227101645","viewerDidAuthor":false}],"createdAt":"2015-03-24T13:33:08Z","number":304,"state":"CLOSED","title":"How could a noob start learning PyGithub?","url":"https://github.com/PyGithub/PyGithub/issues/304"},{"author":{"id":"MDQ6VXNlcjM0MzUzOQ==","is_bot":false,"login":"jzelinskie","name":"Jimmy Zelinskie"},"body":"","comments":[],"createdAt":"2015-03-18T19:13:24Z","number":303,"state":"CLOSED","title":"Team add_membership method needs a test","url":"https://github.com/PyGithub/PyGithub/issues/303"},{"author":{"id":"MDQ6VXNlcjY5MjI3MDk=","is_bot":false,"login":"ahmad88me","name":"Ahmad Alobaid"},"body":"I couldn't find how to fork a repo, according to github APIs page <POST /repos/:owner/:repo/forks> can be used to do a fork,\n\nthanks,\n","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDExMzM3MTQ1Nw==","author":{"login":"skyl"},"authorAssociation":"NONE","body":"There is a method of user, `create_fork`,\n\n```\ng = Github(\n    os.environ[\"GITHUB_USER\"],\n    os.environ[\"GITHUB_PASSWORD\"]\n)\ngithub_user = g.get_user()\nmyfork = github_user.create_fork(repo)\n```\n","createdAt":"2015-06-19T05:10:28Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":3}}],"url":"https://github.com/PyGithub/PyGithub/issues/302#issuecomment-113371457","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDMxODgxMjE3NA==","author":{"login":""},"authorAssociation":"NONE","body":"```\r\nTraceback (most recent call last):\r\n  File \"test.py\", line 3, in <module>\r\n    g = Github(os.environ[\"username\"] ,os.environ[\"pw\"])\r\n  File \"/usr/lib/python3.6/os.py\", line 669, in __getitem__\r\n    raise KeyError(key) from None\r\nKeyError: 'username\r\n```\r\nand when i try to just basic login:\r\n```\r\nTraceback (most recent call last):\r\n  File \"test.py\", line 5, in <module>\r\n    myfork = github_user.create_fork(\"https://github.com/lyk2017-django/YilanTerbiyecisi\")\r\n  File \"/usr/lib/python3.6/site-packages/github/AuthenticatedUser.py\", line 452, in create_fork\r\n    assert isinstance(repo, github.Repository.Repository), repo\r\nAssertionError: https://github.com/lyk2017-django/YilanTerbiyecisi\r\n```","createdAt":"2017-07-29T07:56:33Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/302#issuecomment-318812174","viewerDidAuthor":false}],"createdAt":"2015-03-18T00:33:03Z","number":302,"state":"CLOSED","title":"Fork a repo","url":"https://github.com/PyGithub/PyGithub/issues/302"},{"author":{"id":"MDQ6VXNlcjYzNDYwMDU=","is_bot":false,"login":"gauthamk89","name":"Gautham Karkala"},"body":"Traceback (most recent call last):\n  File \"try-git.py\", line 132, in <module>\n    main()\n  File \"try-git.py\", line 23, in create_repositories\n    org = g.get_organization(\"My-organization\")\n  File \"/usr/lib/python2.6/site-packages/github/MainClass.py\", line 187, in get_organization\n    \"/orgs/\" + login\n  File \"/usr/lib/python2.6/site-packages/github/Requester.py\", line 169, in requestJsonAndCheck\n    return self.__check(*self.requestJson(verb, url, parameters, headers, input, cnx))\n  File \"/usr/lib/python2.6/site-packages/github/Requester.py\", line 210, in requestJson\n    return self.__requestEncode(cnx, verb, url, parameters, headers, input, encode)\n  File \"/usr/lib/python2.6/site-packages/github/Requester.py\", line 247, in __requestEncode\n    status, responseHeaders, output = self.__requestRaw(cnx, verb, url, requestHeaders, encoded_input)\n  File \"/usr/lib/python2.6/site-packages/github/Requester.py\", line 271, in __requestRaw\n    requestHeaders\n  File \"/usr/lib64/python2.6/httplib.py\", line 914, in request\n    self._send_request(method, url, body, headers)\n  File \"/usr/lib64/python2.6/httplib.py\", line 951, in _send_request\n    self.endheaders()\n  File \"/usr/lib64/python2.6/httplib.py\", line 908, in endheaders\n    self._send_output()\n  File \"/usr/lib64/python2.6/httplib.py\", line 780, in _send_output\n    self.send(msg)\n  File \"/usr/lib64/python2.6/httplib.py\", line 739, in send\n    self.connect()\n  File \"/usr/lib64/python2.6/httplib.py\", line 1112, in connect\n    sock = socket.create_connection((self.host, self.port), self.timeout)\n  File \"/usr/lib64/python2.6/socket.py\", line 567, in create_connection\n    raise error, msg\nsocket.error: [Errno 111] Connection refused\n","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDI1MDQ2NDQzMw==","author":{"login":"arpit1997"},"authorAssociation":"NONE","body":"This error is related to your individual machine although there are some reason possible for that\n- most possible reason is that the port that this application is using is already in use by some other application. Maybe you can try a fresh reboot and try to run it again. Or check which port this appplicaton wants to use and free that port on your computer.\n- another possible reason could be be that your are not connected to internet or you are using a proxy setting which pygithub can not resolve. \n\nhope that helps :+1: \n","createdAt":"2016-09-29T13:23:22Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/300#issuecomment-250464433","viewerDidAuthor":false}],"createdAt":"2015-03-02T15:11:57Z","number":300,"state":"CLOSED","title":"Connection to Git repo failed","url":"https://github.com/PyGithub/PyGithub/issues/300"},{"author":{"id":"MDQ6VXNlcjI1ODQ3NDU=","is_bot":false,"login":"NQNStudios","name":"Nat Quayle Nelson"},"body":"I'm trying to access the full content of my gists' files from a Python program. I can retrieve the Gist and GistFile objects alright, but the GistFile objects are missing the `content` attribute.\n\nEverything else seems to be working fine. Here's what I'm doing.\n\n```\ng = Github(username, password)\ngists = g.get_gists()\ngist = gists[0]\nfile = gist.files[filename]\n```\n\nAnd that all seems to work fine. file.type outputs at \"text/plain\" as expected, but there's simply no file.content attribute.\n\nSo is there something I'm doing wrong here? How do I access the content of gist files?\n","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDc2OTA0MzI3","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"No `content` attribute? Weird. Is it `None` or do you get an exception?\n\nFor reference, this works:\n\n```\n>>> import github\n>>> g = github.Github()\n>>> gist = g.get_gist(\"5339374\")\n>>> gist.files\n{u'baz.txt': <github.GistFile.GistFile object at 0xffccfcac>}\n>>> gist.files[\"baz.txt\"].content\nu'Bar -> baz'\n```\n","createdAt":"2015-03-03T08:19:40Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/299#issuecomment-76904327","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDc3NDM4NDY5","author":{"login":"NQNStudios"},"authorAssociation":"NONE","body":"Welp, this one seemed to fix itself. The weird thing is I went to open the terminal and test your sample code myself, and found `import github` failing. (Though this is the same computer I was working on before!) After a reinstall with `easy_install` your code works fine, and my old code also works as expected. I really don't have any explanation.\n","createdAt":"2015-03-05T19:53:11Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/299#issuecomment-77438469","viewerDidAuthor":false}],"createdAt":"2015-03-01T20:38:11Z","number":299,"state":"CLOSED","title":"Can't access the contents of gist files","url":"https://github.com/PyGithub/PyGithub/issues/299"},{"author":{"is_bot":true,"login":"app/"},"body":"I am creating a repository the following way:\n\n```\ng = Github(token)\nuser = g.get_user()\nr = user.create_repo(name)\n\nt1 = r.create_git_tree([InputGitTreeElement(\"test.txt\",\"100644\",\"blob\",content=\"File created by PyGithub\")])\nc1 = r.create_git_commit(tree=t1, message=\"first commit\", parents=[])\nref = r.create_git_ref(ref=\"refs/heads/feature\", sha=c1.sha)\n```\n\nI am missing to initialise the repository. I don't want to use the `auto_init=True` flag since this creates a unwanted readme.md. Is there another way to initialise the repository?\n","comments":[],"createdAt":"2015-02-24T13:15:17Z","number":298,"state":"CLOSED","title":"How to init a repository","url":"https://github.com/PyGithub/PyGithub/issues/298"},{"author":{"id":"MDQ6VXNlcjMyNzE0Ng==","is_bot":false,"login":"jacquev6","name":"Vincent Jacques"},"body":"Hello everyone,\n\nI've obviously neglected PyGithub in the last few months and my current priorities are hardly compatible with doing a good job on PyGithub.\n\nI'm looking for volunteer(s) to take over PyGithub. I would transfer ownership of the main PyGithub repository to a GitHub organization, and give admin permissions on the PyPI package as well.\n\nPlease comment on this issue if you're interested.\n","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDc1NDY2Nzk0","author":{"login":"nhomar"},"authorAssociation":"CONTRIBUTOR","body":"You can count on us.\nWe use a lot your library and I was facing some little issues which can help to move forward faster this cool and well done library.\n\nOur organization is @vauxoo you can look for our opensource work here in github.\n\nRegards.\n","createdAt":"2015-02-22T22:22:04Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/297#issuecomment-75466794","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDc1NjkwNDIz","author":{"login":"jzelinskie"},"authorAssociation":"CONTRIBUTOR","body":"I wouldn't mind helping out, but I wouldn't want to be the sole maintainer. We're dependent on this library at CoreOS (specifically for Quay.io).\n","createdAt":"2015-02-24T03:06:14Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/297#issuecomment-75690423","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDc1NzYxMDg5","author":{"login":"Olivia5k"},"authorAssociation":"NONE","body":"I don't think I can actually help out because of the same reasons, but big kudos for taking this step and making sure that your project lives on! :+1: \n","createdAt":"2015-02-24T14:04:48Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/297#issuecomment-75761089","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDc2OTAxOTA1","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"Thanks for your replies!\n\n@nhomar @jzelinskie I've transferred the repository to @PyGithub and I've invited you to @PyGithub/members team. If you give me your PyPI user names, I'll give you permissions to upload new versions of https://pypi.python.org/pypi/PyGithub.\n\nLet me know if you have any question or if something doesn't work as expected.\n\n@thiderman Thanks for the kudos.\n","createdAt":"2015-03-03T07:56:04Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/297#issuecomment-76901905","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDc2OTAyNzE2","author":{"login":"nhomar"},"authorAssociation":"CONTRIBUTOR","body":"Hello @jacquev6 \n\nMy PyPi user is nhomar as well.\n\nThanks, let's put in our roadmap improve and finish all what we can... \n\nJust FYI. We are integrating odoo with git-flow and we planned use your lib, now let's put hand in work...\n\nregards.\n","createdAt":"2015-03-03T08:04:21Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/297#issuecomment-76902716","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDc2OTcxNjAw","author":{"login":"jzelinskie"},"authorAssociation":"CONTRIBUTOR","body":"I'm jzelinskie @ pypi. Thanks again for the effort!\nI merged a few things today, and some straight into master. This shouldn't be a big deal because I'm looking to merge develop into master and make a new release soon ASAP.\n","createdAt":"2015-03-03T15:51:41Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/297#issuecomment-76971600","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDc3MTEwNDI2","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"You now both have the \"Maintainer\" role on PyPI; this should allow you to publish new versions of the package.\n\nThank _you_ for taking over ! I'll try to be responsive if you have questions during this transition phase.\n","createdAt":"2015-03-04T07:47:19Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/297#issuecomment-77110426","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDc3MTgzNjkw","author":{"login":"nhomar"},"authorAssociation":"CONTRIBUTOR","body":"@jzelinskie @jacquev6 \n\nHello all.\n\nI really appreciate if you extend a little the sources of the methodology and some minimal rules to avoid misunderstandings in the way we develop.\n\nFor example:\n\nI see you use git-flow to manage names of repositories, but I can not see the plans of things already achieve in develop branch, which is tthe difference between one and another (master and develop).\n\nI prefer personally have a branch per version that can be backported but I see we are marking versions using deploy version method using pypi strategy, can we change that? can you tell us an strategy/methodology which you are using in order to follow your lead.\n\nThe objective is follow an unique strategy in order to manage correctly everything and be sure we can follow the work of @jzelinskie and they can follow our work also.\n\nThe example before was only an example but there are many areas where we can document the \"how to push the work\".\n\nRegards.\n","createdAt":"2015-03-04T15:53:35Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/297#issuecomment-77183690","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDc3MjU4NjQ2","author":{"login":"jzelinskie"},"authorAssociation":"CONTRIBUTOR","body":"This sounds really good. I think we got ahead of ourselves by merging things right away. It would be nice if we had an established practice. I'm also always available on as jzelinskie on freenode IRC. Maybe we should make a channel?\n","createdAt":"2015-03-04T21:57:45Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/297#issuecomment-77258646","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDc3MjkzNzkw","author":{"login":"nhomar"},"authorAssociation":"CONTRIBUTOR","body":"I don't use IRC too much :-) I prefer normal lists/issues and for chat maybe some hangouts and google-hangout for chats (always I compromise go to IRC I fail in a huge way).\n\nnhomar at gmail is a valid gmail account for that.\n","createdAt":"2015-03-05T02:18:10Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/297#issuecomment-77293790","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDc3Njc1MzU2","author":{"login":"jzelinskie"},"authorAssociation":"CONTRIBUTOR","body":"What are the differences between the 2.x and 1.x releases?\n","createdAt":"2015-03-07T05:55:52Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/297#issuecomment-77675356","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDc3Nzc3MTI3","author":{"login":"syndbg"},"authorAssociation":"NONE","body":"I would like to help out! We can have a chat or something to see if our goals/expectations align.\n\nAlso, writing a contribution guide and trying to pipeline the development process of PyGithub, is imo the first thing to do during the transition.\n","createdAt":"2015-03-08T21:59:08Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/297#issuecomment-77777127","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDc4NDM1MDIy","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"@jzelinskie  2.x was an attempt to rewrite PyGithub from scratch based on my experience with 1.x.\n\nI think this is not worth maintaining. It's never been published on PyPI, only a few tags in a separate branch in the repository, so people using it were really only experimenting.\n","createdAt":"2015-03-12T07:30:15Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/297#issuecomment-78435022","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDg5MTk4NTUw","author":{"login":"jhermann"},"authorAssociation":"CONTRIBUTOR","body":"I might contribute a few PRs while working on https://github.com/jhermann/gh-commander\n","createdAt":"2015-04-03T07:08:07Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/297#issuecomment-89198550","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDEwOTAwOTQyOA==","author":{"login":"justinclift"},"authorAssociation":"NONE","body":"Has new maintainer-ship for this been sorted out?\n\nIf so, the README should probably be updated + this issue closed. :wink:\n","createdAt":"2015-06-04T18:56:17Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/297#issuecomment-109009428","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDExMzM3MjA2MQ==","author":{"login":"skyl"},"authorAssociation":"NONE","body":"I wouldn't mind having the rights to close issues or whatnot. Like https://github.com/PyGithub/PyGithub/issues/302 .. and maybe this one.\n","createdAt":"2015-06-19T05:17:06Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/297#issuecomment-113372061","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDExNTMyNDI1OA==","author":{"login":"jzelinskie"},"authorAssociation":"CONTRIBUTOR","body":"I think we still need people to have access to readthedocs. I've never used it before so, yeah...\n","createdAt":"2015-06-25T17:01:41Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/297#issuecomment-115324258","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDExNTQwMTc5Mg==","author":{"login":"justinclift"},"authorAssociation":"NONE","body":"Asking if maintainer-ship for this has been sorted out, because it's been requested back in February and there's no clear answer.  We skipped using PyGitHub due to this, and went with githubpy instead (which has worked well enough so far).\n\nJust pointing it out. :wink:\n","createdAt":"2015-06-25T21:20:46Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/297#issuecomment-115401792","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDE0MDE1NTQyOQ==","author":{"login":"hintjens"},"authorAssociation":"NONE","body":"@jacquev6 I'm a happy user of PyGithub, and for what it's worth we solved the maintainer crisis in our ZeroMQ projects by using a better process (C4, http://rfc.zeromq.org/spec:22). \n","createdAt":"2015-09-14T17:39:15Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/297#issuecomment-140155429","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDE0MDE1ODQ5OQ==","author":{"login":"jzelinskie"},"authorAssociation":"CONTRIBUTOR","body":"@hintjens C4 already looks extremely similar to how the project is being currently ran.\n","createdAt":"2015-09-14T17:51:07Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/297#issuecomment-140158499","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDE0MDE1OTYwNw==","author":{"login":"hintjens"},"authorAssociation":"NONE","body":"@jzelinskie perhaps, I don't see the process for the project documented anywhere. The key things about C4 are that we merge pull requests rapidly, and do core review asynchronously afterwards, ideally via more patches rather than discussion. We assume every patch is good unless the contributor is known to be a bad actor in which case we ban them. Pull requests do not stay open for more than a few minutes or hours (once maintainers are awake).\n\nBacking this, we do a lot of CI to ensure patches don't break existing apps.\n","createdAt":"2015-09-14T17:55:31Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/297#issuecomment-140159607","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDIwNDE2ODIwOA==","author":{"login":"jayfk"},"authorAssociation":"CONTRIBUTOR","body":"I'd be happy to help out here. My username on pypi is the same as on GitHub.\n","createdAt":"2016-03-31T23:17:17Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/297#issuecomment-204168208","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDIwNDMzOTc2Ng==","author":{"login":"ahmad88me"},"authorAssociation":"NONE","body":"I might be able to help out as well, I have a project depending heavily on this awesome lib.\n","createdAt":"2016-04-01T10:16:20Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/297#issuecomment-204339766","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDIzMTk3NDUzMQ==","author":{"login":"jayfk"},"authorAssociation":"CONTRIBUTOR","body":"🔔  @jacquev6 @jzelinskie I'm still here to help :)\n","createdAt":"2016-07-12T08:37:25Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/297#issuecomment-231974531","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM3MDE4MzU0NQ==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"@jacquev6 @jzelinskie I am too. Taking over rtd and it’s working now just need to be invited to the PyGithub members team so I can manage the repo webhooks.","createdAt":"2018-03-03T22:05:04Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/297#issuecomment-370183545","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM3MTczODc0Ng==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"Thanks @jzelinskie for the invitation. I've taking over readthedocs for now and have set up webhooks to build each master commits. ","createdAt":"2018-03-09T07:49:28Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/297#issuecomment-371738746","viewerDidAuthor":false}],"createdAt":"2015-02-22T09:36:30Z","number":297,"state":"CLOSED","title":"Maintain PyGithub - looking for volunteers","url":"https://github.com/PyGithub/PyGithub/issues/297"},{"author":{"id":"MDQ6VXNlcjQ3MjMzMDM=","is_bot":false,"login":"pwnetrationguru","name":"Rob Fletcher"},"body":"I started looking into using PyGithub for somethings. While digging around in documentation, I found a dead link (that seems pretty important from a reference stand point).\n\nhttps://github.com/jacquev6/PyGithub/blob/master/doc/introduction.rst#what-next has a `reference of classes` link that goes to:\nhttps://github.com/jacquev6/PyGithub/blob/master/doc/github_objects.html\n\nThe above link returns a 404 for me. It seems like the following issue previously reported it:\nhttps://github.com/jacquev6/PyGithub/issues/248\n","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDc1NDI3NjEx","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"Please see #297.\n","createdAt":"2015-02-22T09:44:39Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/291#issuecomment-75427611","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDIwODI4MjQ5OA==","author":{"login":"adamtheturtle"},"authorAssociation":"MEMBER","body":"Thank you @pwnetrationguru for the report. I am closing this in favour of the more recent https://github.com/PyGithub/PyGithub/issues/373 which now has more information on it.\n","createdAt":"2016-04-11T10:51:35Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/291#issuecomment-208282498","viewerDidAuthor":false}],"createdAt":"2015-01-06T19:42:19Z","number":291,"state":"CLOSED","title":"documentation link DNE","url":"https://github.com/PyGithub/PyGithub/issues/291"},{"author":{"id":"MDQ6VXNlcjM0MzUzOQ==","is_bot":false,"login":"jzelinskie","name":"Jimmy Zelinskie"},"body":"We have a customer using an instance of GitHub Enterprise with a SSL-terminating proxy in front of it. This means that URLs to the server need to be HTTPS, but URLs received from the API responses are HTTP. I contacted GitHub and they do not support GHE behind an SSL-terminating proxy, but were considering supporting.\n\nThus we hit this assertion:\n\n``` python\nFile \"/endpoints/trigger.py\", line 222, in list_build_sources\n  for repo in org.get_repos(type='member'):\nFile \"/venv/local/lib/python2.7/site-packages/github/PaginatedList.py\", line 48, in __iter__\n  newElements = self._grow()\nFile \"/venv/local/lib/python2.7/site-packages/github/PaginatedList.py\", line 60, in _grow\n  newElements = self._fetchNextPage()\nFile \"/venv/local/lib/python2.7/site-packages/github/PaginatedList.py\", line 158, in _fetchNextPage\n  parameters=self.__nextParams\nFile \"/venv/local/lib/python2.7/site-packages/github/Requester.py\", line 169, in requestJsonAndCheck\n  return self.__check(*self.requestJson(verb, url, parameters, headers, input, cnx))\nFile \"/venv/local/lib/python2.7/site-packages/github/Requester.py\", line 210, in requestJson\n  return self.__requestEncode(cnx, verb, url, parameters, headers, input, encode)\nFile \"/venv/local/lib/python2.7/site-packages/github/Requester.py\", line 238, in __requestEncode\n  url = self.__makeAbsoluteUrl(url)\nFile \"/venv/local/lib/python2.7/site-packages/github/Requester.py\", line 299, in __makeAbsoluteUrl\n  assert o.scheme == self.__scheme or o.scheme == \"https\" and self.__scheme == \"http\"  # Issue #80\nAssertionError\n```\n\nMy initial response is simply to delete this assertion. Correct me if I am wrong, but I believe that you are appending path+queryparams to the base URL, and thus the scheme shouldn't really matter anyway.\n","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDc1NDI3NjEz","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"Please see #297.\n","createdAt":"2015-02-22T09:44:47Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/287#issuecomment-75427613","viewerDidAuthor":false}],"createdAt":"2014-12-15T17:50:22Z","number":287,"state":"CLOSED","title":"Another assertion error (reverse of #80)","url":"https://github.com/PyGithub/PyGithub/issues/287"},{"author":{"id":"MDQ6VXNlcjU1ODcx","is_bot":false,"login":"slide","name":"Alex Earl"},"body":"I ran into this when trying to retrieve an organization. It might be good to either provide a parameter to allow setting the User-Agent header, or just send PyGithub as default.\n\nhttps://developer.github.com/v3/#user-agent-required\n","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDY2NDk3ODYy","author":{"login":"krmaxwell"},"authorAssociation":"NONE","body":"It looks like `Requester.py` already does that, see https://github.com/jacquev6/PyGithub/blob/abca7a026ec781dde6c02cfafd0e297e3d3cb555/github/Requester.py#L164. It might be worth defaulting to `PyGithub` or something, though.\n","createdAt":"2014-12-10T18:23:08Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/286#issuecomment-66497862","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDY2NDk5MDc1","author":{"login":"slide"},"authorAssociation":"NONE","body":"You're right, my library was an older version, I should have checked first.\n","createdAt":"2014-12-10T18:30:51Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/286#issuecomment-66499075","viewerDidAuthor":false}],"createdAt":"2014-12-09T16:42:51Z","number":286,"state":"CLOSED","title":"User-Agent header is required for some calls?","url":"https://github.com/PyGithub/PyGithub/issues/286"},{"author":{"id":"MDQ6VXNlcjI5NTkwNzE=","is_bot":false,"login":"asm123","name":"Asmita"},"body":"I am trying to get the list of collaborators for a repository using the following code:\n\nb = PyGithub.BlockingBuilder()\nb.OAuth (OAUTH_TOKEN)\nb.UserAgent (\"MyWonderfulApplication-1.0.0\")\ng = b.Build()  \nuser = g.get_authenticated_user()\nrepositories = user.get_repos (per_page = 10)\nfor repo in repositories:\n    print repo.get_collaborators()\n\nOn running this snippet, the following error is thrown:\n\nprint repo.get_collaborators()\n  File \"build\\bdist.win32\\egg\\PyGithub\\Blocking\\Repository.py\", line 1853, in get_collaborators\nTypeError: expand() takes exactly 2 arguments (1 given)\n\nAdding per_page argument to get_collaborators() gives the following error:\nTypeError: get_collaborators() got multiple values for keyword argument 'per_page'\n\nPlease let me know how I can get the list of collaborators for a repository.\n","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDYzNzc1MDQz","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"I think you've not installed the right \"uritemplate\" library. There are [two different libraries out there](https://pypi.python.org/pypi?%3Aaction=search&term=uritemplate&submit=search). Please make sure you install [sigmavirus24's one: uritemplate.py](https://pypi.python.org/pypi/uritemplate.py) as listed in [requirements.txt](https://github.com/jacquev6/PyGithub/blob/develop_v2/requirements.txt).\n\nClosing now, do not hesitate to re-open if this doesn't solve your problem.\n","createdAt":"2014-11-20T08:26:22Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/285#issuecomment-63775043","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDYzNzc1NDIx","author":{"login":"asm123"},"authorAssociation":"NONE","body":"Worked! Thanks! :)\n","createdAt":"2014-11-20T08:30:13Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/285#issuecomment-63775421","viewerDidAuthor":false}],"createdAt":"2014-11-20T06:57:10Z","number":285,"state":"CLOSED","title":"Unable to get the list of collaborators for a repository","url":"https://github.com/PyGithub/PyGithub/issues/285"},{"author":{"id":"MDQ6VXNlcjcyNjQ4Mg==","is_bot":false,"login":"za3k","name":"Zachary Vance"},"body":"I'm using stock debian, python 2.7, pygithub v0.5, requests v0.14.0, OpenSSL 1.0.1e, libssl1.0.0.\n\nI run this program:\n\n```\nimport pygithub3\ngh = pygithub3.Github(user='vanceza')\ngh.repos.list().all()\n```\n\nAnd get the following output:\n\n```\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\n  File \"/usr/local/lib/python2.7/dist-packages/pygithub3/core/result/base.py\", line 109, in all\n    return list(self.iterator())\n  File \"/usr/local/lib/python2.7/dist-packages/pygithub3/core/result/base.py\", line 104, in iterator\n    for page in self:\n  File \"/usr/local/lib/python2.7/dist-packages/pygithub3/core/result/base.py\", line 100, in next\n    return self.__next__()\n  File \"/usr/local/lib/python2.7/dist-packages/pygithub3/core/result/smart.py\", line 91, in __next__\n    if self.page <= self.pages:\n  File \"/usr/local/lib/python2.7/dist-packages/pygithub3/core/result/smart.py\", line 101, in pages\n    return self.getter.last\n  File \"/usr/local/lib/python2.7/dist-packages/pygithub3/core/result/smart.py\", line 47, in last\n    self()\n  File \"/usr/local/lib/python2.7/dist-packages/pygithub3/core/result/smart.py\", line 16, in wrapper\n    return func(self, page)\n  File \"/usr/local/lib/python2.7/dist-packages/pygithub3/core/result/smart.py\", line 39, in __call__\n    response = self.method(page=page)\n  File \"/usr/local/lib/python2.7/dist-packages/pygithub3/core/client.py\", line 83, in get\n    response = self.request('get', request, **kwargs)\n  File \"/usr/local/lib/python2.7/dist-packages/pygithub3/core/client.py\", line 70, in wrapper\n    return func(self, verb, request, **kwargs)\n  File \"/usr/local/lib/python2.7/dist-packages/pygithub3/core/client.py\", line 76, in request\n    response = self.requester.request(verb, request, **kwargs)\n  File \"/usr/local/lib/python2.7/dist-packages/requests/sessions.py\", line 252, in request\n    r.send(prefetch=prefetch)\n  File \"/usr/local/lib/python2.7/dist-packages/requests/models.py\", line 632, in send\n    raise SSLError(e)\nrequests.exceptions.SSLError: [Errno 8] _ssl.c:504: EOF occurred in violation of protocol\n```\n\nCan someone reproduce? If it's not a pygithub problem, a simplified case to pass upstream to 'requests' would be great--I really don't understand what's going on enough to find the fault myself.\n","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDYyMTgyNjIz","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"This is not PyGithub at all. In PyGithub you \"import Github\", not \"pygithub3\".\n","createdAt":"2014-11-07T17:36:47Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/283#issuecomment-62182623","viewerDidAuthor":false}],"createdAt":"2014-11-06T22:10:56Z","number":283,"state":"CLOSED","title":"SSLError","url":"https://github.com/PyGithub/PyGithub/issues/283"},{"author":{"id":"MDQ6VXNlcjE5NzAx","is_bot":false,"login":"bhyde","name":"Ben Hyde"},"body":"I don't think I'm asking for more than a discussion about how to approach the problem I'm working on ... but here goes.\n\nI copy my issues for reporting and housekeeping purposes into a local database.   PyGithub made this easy and fun.  But then I ran up against the rate limit.  I can slow things down and spread copy work over some hours; so there's that.\n\nI don't think it matters to what follows but I'm adding fields for things like priority, and adding a more complex set of states an issue can move thru.  Those are derived from labels on the issues.  From time to time I fetch recent events and if is issue related I regenerate it's entry in my db; so I don't need to do a full copy that often.   My db is designed so i can discard it at any time and regenerate it - at the cost of a few hours.  Imperfections mean that happens: a) I'm imperfect, and b) at least one change to an issue doesn't generate an event.\n\nAll my report generation runs without contacting github.  I have one script that contacts github which can bootstrap my db, update it, and make misc. updates that arise out of the housekeeping.\n\nReading #26 was interesting.\n\nI noticed update,save and load methods, and thinking of ways to make the full copy less rate limited.\n\nI figured the scan that does the copy could check a cache of pickles (key'd by URL), and use 'em + update to reduce the load.   So I cheerfully went off and built my cache of pickled issues.\n\nThe scan is roughly:\n\n``` python\nfor github_issue in repo.get_issues(state=u'all'):\n    digest(github_issue)\n```\n\nNaively I now yearn to write `repo.get_urls_of_issues(state_u'all')`\n\nThe wonder of pygithub is that I really didn't need to read the github doc at all; but I feel there may well be more to this.  For example how deep is the save/load?  Do I have to cache users, milestones, label objects too?  If so patching the restored objects looks tedious.\n\nIn more grandiose thinking ... it might be possible ... to plumb a mode into pygit that always has a cache of pickled objects and which try those+update whenever possible.  Looking at the fetching code made it clear that I shouldn't try to do that and I really ought to get back to the real work.\n","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDYxMDAxOTI5","author":{"login":"bilderbuchi"},"authorAssociation":"NONE","body":"The way I worked around this was to pickle the Pygithub issue objects themselves, and on every run I unpickle, find the last update time, and fetch from github all issues updated since then. Then I replace any updated issues which already exist in my pickled object. See [here](https://github.com/bilderbuchi/OF_repo_utilities/blob/master/plot_issue_stats.py#L85-L95).\nThis brought the time for fetching updates instead of all issues for a repo of several thousand issues from several minutes down to a couple of seconds (iirc, haven't used it in a while).\n","createdAt":"2014-10-29T20:47:08Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/282#issuecomment-61001929","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDY1MjcyMzQ5","author":{"login":"gjedeer"},"authorAssociation":"NONE","body":"Nice solution, @bilderbuchi, I'm going to use it.\n\nIt would be awesome if PaginatedList supported save() and etags, though.\n","createdAt":"2014-12-02T17:47:16Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":1}}],"url":"https://github.com/PyGithub/PyGithub/issues/282#issuecomment-65272349","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDc1NDI3NjMx","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"Please see #297.\n","createdAt":"2015-02-22T09:45:28Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/282#issuecomment-75427631","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQwMjYzMDE0MQ==","author":{"login":"stale"},"authorAssociation":"NONE","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","createdAt":"2018-07-05T07:26:24Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/282#issuecomment-402630141","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQxOTg2ODUxMA==","author":{"login":"stale"},"authorAssociation":"NONE","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","createdAt":"2018-09-10T10:38:19Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/282#issuecomment-419868510","viewerDidAuthor":false}],"createdAt":"2014-10-29T18:08:48Z","number":282,"state":"CLOSED","title":"Cache, load/save, rate limit, oh my.","url":"https://github.com/PyGithub/PyGithub/issues/282"},{"author":{"id":"MDQ6VXNlcjc1MTQ3MDc=","is_bot":false,"login":"kyle-eshares","name":""},"body":"```\nIn [11]: g = Github(settings.GITHUB_USERNAME, settings.GITHUB_PASSWORD)\n\nIn [12]: repo = g.get_repo('...')\n\nIn [13]: issue = repo.get_issue(2973)\n\nIn [14]: issue.set_labels('exception')\n---------------------------------------------------------------------------\nUnknownObjectException                    Traceback (most recent call last)\n<ipython-input-14-5171ec2f3edf> in <module>()\n----> 1 issue.set_labels('exception')\n\n/Users/.../.virtualenv/lib/python2.7/site-packages/github/Issue.py in set_labels(self, *labels)\n    372             \"PUT\",\n    373             self.url + \"/labels\",\n--> 374             input=post_parameters\n    375         )\n    376 \n\n/Users/.../.virtualenv/lib/python2.7/site-packages/github/Requester.pyc in requestJsonAndCheck(self, verb, url, parameters, headers, input, cnx)\n    167 \n    168     def requestJsonAndCheck(self, verb, url, parameters=None, headers=None, input=None, cnx=None):\n--> 169         return self.__check(*self.requestJson(verb, url, parameters, headers, input, cnx))\n    170 \n    171     def requestMultipartAndCheck(self, verb, url, parameters=None, headers=None, input=None):\n\n/Users/.../.virtualenv/lib/python2.7/site-packages/github/Requester.pyc in __check(self, status, responseHeaders, output)\n    175         output = self.__structuredFromJson(output)\n    176         if status >= 400:\n--> 177             raise self.__createException(status, responseHeaders, output)\n    178         return responseHeaders, output\n    179 \n\nUnknownObjectException: 404 {u'documentation_url': u'https://developer.github.com/v3/issues/labels/#replace-all-labels-for-an-issue', u'message': u'Not Found'}\n\nIn [17]: repo.get_label('exception')\nOut[17]: <github.Label.Label at 0x10d4ba490>\n```\n\nSame exception happens whatever method I use to set labels.\n\n```\nIn [19]: label = repo.get_label('exception')\n\nIn [20]: issue.add_to_labels(label)\n\nUnknownObjectException: 404 {u'documentation_url': u'https://developer.github.com/v3/issues/labels/#replace-all-labels-for-an-issue', u'message': u'Not Found'}\n```\n","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDc1NDI3NjQw","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"Please see #297.\n","createdAt":"2015-02-22T09:45:42Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/281#issuecomment-75427640","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQwMjY1NDMyMQ==","author":{"login":"stale"},"authorAssociation":"NONE","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","createdAt":"2018-07-05T08:59:08Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/281#issuecomment-402654321","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQxODA1NTYwMw==","author":{"login":"stale"},"authorAssociation":"NONE","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","createdAt":"2018-09-03T09:23:21Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/281#issuecomment-418055603","viewerDidAuthor":false}],"createdAt":"2014-10-22T16:05:18Z","number":281,"state":"CLOSED","title":"set_label add_to_labels no longer works","url":"https://github.com/PyGithub/PyGithub/issues/281"},{"author":{"id":"MDQ6VXNlcjEwNTQyOQ==","is_bot":false,"login":"kenpower","name":"Ken Power"},"body":"https://developer.github.com/changes/2014-08-05-team-memberships-api/\n","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDc1NDI3NjQ5","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"Please see #297.\n","createdAt":"2015-02-22T09:45:52Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/280#issuecomment-75427649","viewerDidAuthor":false}],"createdAt":"2014-10-16T15:42:42Z","number":280,"state":"CLOSED","title":"Adding unaffiliated members in now broken (API changes)","url":"https://github.com/PyGithub/PyGithub/issues/280"},{"author":{"id":"MDQ6VXNlcjU2NjI4NzU=","is_bot":false,"login":"tomibgt","name":"Tomi \"bgt\" Suovuo"},"body":"The only way to find the date of the commit is to get the author or commiter and get the date from either one. For https://api.github.com/repos/jacquev6/PyGithub/git/commits/e6520adb487e49188913905af6f028ef8b7e9582 the commit.author appears to return 'NoneType' object, as Adrian Petrescu seems to be an inactive user in GitHub. \n\nhttps://github.com/jacquev6/PyGithub/commit/e6520adb487e49188913905af6f028ef8b7e9582\n\nWith an active author NamedUser like, for example, akfish, this problem doesn't occur\n\nhttps://github.com/jacquev6/PyGithub/commit/ea4bd8c9ad94a2e38bc272c9f9ff8cfdccea4c03\n\nAn error in my own project (that uses PyGithub as a library), where I discovered this:\n\nAttribute Error for sha(e6520adb487e49188913905af6f028ef8b7e9582) 'NoneType' object has no attribute 'created_at'\nTraceback (most recent call last):\n  File \"/Users/bgt/git/GitHubResearchDataMiner/src/GitHubResearchDataMiner.py\", line 19, in <module>\n    connection.getCsv()\n  File \"/Users/bgt/git/GitHubResearchDataMiner/src/GitHubConnection.py\", line 41, in getCsv\n    fileh.write(self.getCsvLineFromCommit(commit)+'\\n')\n  File \"/Users/bgt/git/GitHubResearchDataMiner/src/GitHubConnection.py\", line 65, in getCsvLineFromCommit\n    reva = commit.sha+\";\"+str(commitauthor.created_at)+\";\"+commitfiles+\";\"+commitadds+\";\"+commitdels+\";\"+commitchanges+\";\"+commitcommit.message\nAttributeError: 'NoneType' object has no attribute 'created_at'\n","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDU4OTgyODIx","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"Thanks for reporting that, I'll have a look in the coming days!\n","createdAt":"2014-10-14T02:38:44Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/279#issuecomment-58982821","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDY3ODgzNTYz","author":{"login":"tomibgt"},"authorAssociation":"NONE","body":"The problem seems to be something else. For some reason for commit e6520adb487e49188913905af6f028ef8b7e9582 there are two committers and authors: None and Adrian Petrescu.\n\nI was debugging the Class Commit, method _useAttributes as follows:\n\n[...]\n    def _useAttributes(self, attributes):\n        print \"\\n\\n{{\"+str(attributes)+\"}}\" #bgt debug\n        if \"author\" in attributes:  # pragma no branch\n[...]\n\nFor this commit I got:\n\n{{{u'files': [{u'status': u'modified', u'deletions': 1, u'raw_url': u'https://github.com/jacquev6/PyGithub/raw/e6520adb487e49188913905af6f028ef8b7e9582/github/Repository.py', u'blob_url': u'https://github.com/jacquev6/PyGithub/blob/e6520adb487e49188913905af6f028ef8b7e9582/github/Repository.py', u'contents_url': u'https://api.github.com/repos/jacquev6/PyGithub/contents/github/Repository.py?ref=e6520adb487e49188913905af6f028ef8b7e9582', u'filename': u'github/Repository.py', u'sha': u'2e22bb2669b176f265a0d695e527122b9c985cd9', u'additions': 9, u'patch': u'@@ -828,20 +828,28 @@ def get_commit(self, sha):\\n         )\\n         return github.Commit.Commit(self._requester, data, completed=True)\\n \\n-    def get_commits(self, sha=github.GithubObject.NotSet, path=github.GithubObject.NotSet):\\n+    def get_commits(self, sha=github.GithubObject.NotSet, path=github.GithubObject.NotSet, since=github.GithubObject.NotSet, until=github.GithubObject.NotSet):\\n         \"\"\"\\n         :calls: `GET /repos/:user/:repo/commits <http://developer.github.com/v3/todo>`_\\n         :param sha: string\\n         :param path: string\\n+        :param since: datetime.datetime\\n+        :param until: datetime.datetime\\n         :rtype: :class:`github.PaginatedList.PaginatedList` of :class:`github.Commit.Commit`\\n         \"\"\"\\n         assert sha is github.GithubObject.NotSet or isinstance(sha, (str, unicode)), sha\\n         assert path is github.GithubObject.NotSet or isinstance(path, (str, unicode)), path\\n+        assert since is github.GithubObject.NotSet or isinstance(since, datetime.datetime), since\\n+        assert until is github.GithubObject.NotSet or isinstance(until, datetime.datetime), until\\n         url_parameters = dict()\\n         if sha is not github.GithubObject.NotSet:\\n             url_parameters[\"sha\"] = sha\\n         if path is not github.GithubObject.NotSet:\\n             url_parameters[\"path\"] = path\\n+        if since is not github.GithubObject.NotSet:\\n+            url_parameters[\"since\"] = since.strftime(\"%Y-%m-%dT%H:%M:%SZ\")\\n+        if until is not github.GithubObject.NotSet:\\n+            url_parameters[\"until\"] = until.strftime(\"%Y-%m-%dT%H:%M:%SZ\")\\n         return github.PaginatedList.PaginatedList(\\n             github.Commit.Commit,\\n             self._requester,', u'changes': 10}], u'committer': None, u'stats': {u'deletions': 1, u'additions': 9, u'total': 10}, u'author': None, u'url': u'https://api.github.com/repos/jacquev6/PyGithub/commits/e6520adb487e49188913905af6f028ef8b7e9582', u'comments_url': u'https://api.github.com/repos/jacquev6/PyGithub/commits/e6520adb487e49188913905af6f028ef8b7e9582/comments', u'html_url': u'https://github.com/jacquev6/PyGithub/commit/e6520adb487e49188913905af6f028ef8b7e9582', u'sha': u'e6520adb487e49188913905af6f028ef8b7e9582', u'parents': [{u'url': u'https://api.github.com/repos/jacquev6/PyGithub/commits/72f8876112ba029111c739871e3e4d7bce66b95d', u'sha': u'72f8876112ba029111c739871e3e4d7bce66b95d', u'html_url': u'https://github.com/jacquev6/PyGithub/commit/72f8876112ba029111c739871e3e4d7bce66b95d'}], u'commit': {u'committer': {u'date': u'2013-08-07T01:14:39Z', u'name': u'Adrian Petrescu', u'email': u'adrian.petrescu@maluuba.com'}, u'author': {u'date': u'2013-08-07T01:14:39Z', u'name': u'Adrian Petrescu', u'email': u'adrian.petrescu@maluuba.com'}, u'url': u'https://api.github.com/repos/jacquev6/PyGithub/git/commits/e6520adb487e49188913905af6f028ef8b7e9582', u'tree': {u'url': u'https://api.github.com/repos/jacquev6/PyGithub/git/trees/7cabef11d80790d6dd9c31a2cc3110aa7d0729f8', u'sha': u'7cabef11d80790d6dd9c31a2cc3110aa7d0729f8'}, u'comment_count': 0, u'message': u'Adding since, until parameters to Repository.getCommits()'}}}}\n\nWhy does it show two committers and authors here, when it doesn't when looking at https://api.github.com/repos/jacquev6/PyGithub/git/commits/e6520adb487e49188913905af6f028ef8b7e9582\n","createdAt":"2014-12-22T20:11:04Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/279#issuecomment-67883563","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDc1NDI3NjUz","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"Please see #297.\n","createdAt":"2015-02-22T09:45:56Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/279#issuecomment-75427653","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM1MDc0MTk0Nw==","author":{"login":"Nukesor"},"authorAssociation":"NONE","body":"I'll probably take a look at this, as I use this project for my BA thesis and stumble upon this issue all the time.","createdAt":"2017-12-11T14:37:09Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/279#issuecomment-350741947","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQwMjY1NDIwOQ==","author":{"login":"stale"},"authorAssociation":"NONE","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","createdAt":"2018-07-05T08:58:51Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/279#issuecomment-402654209","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQxODA1NTY0Mg==","author":{"login":"stale"},"authorAssociation":"NONE","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","createdAt":"2018-09-03T09:23:28Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/279#issuecomment-418055642","viewerDidAuthor":false}],"createdAt":"2014-10-12T14:02:57Z","number":279,"state":"CLOSED","title":"commit.author returns NoneType, if author is not an active GitHub username","url":"https://github.com/PyGithub/PyGithub/issues/279"},{"author":{"id":"MDQ6VXNlcjg4OTUwOA==","is_bot":false,"login":"erichaase","name":"Eric Haase"},"body":"For repositories with lots of tags (git, linux, etc.), iterating through _repo.get_tags()_ throws a NoneType _TypeError_. Please see the following for the steps to recreate:\n\n```\neric@white:~/autoport> pip freeze|ack pygithub\nPyGithub==1.25.0\n\neric@white:~/autoport> python\nPython 2.7.3 (default, Feb 27 2014, 20:00:17) \n[GCC 4.6.3] on linux2\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>> from github import Github\n>>> tags = Github(\"...\").get_repo(2325298).get_tags()\n>>> for tag in tags:\n...     print tag\n... \n<github.Tag.Tag object at 0xb6e1848c>\n<github.Tag.Tag object at 0xb6e18e8c>\n...\n<github.Tag.Tag object at 0xb6d14b0c>\n<github.Tag.Tag object at 0xb6d14c0c>\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\n  File \"/usr/local/lib/python2.7/dist-packages/github/PaginatedList.py\", line 48, in __iter__\n    newElements = self._grow()\n  File \"/usr/local/lib/python2.7/dist-packages/github/PaginatedList.py\", line 60, in _grow\n    newElements = self._fetchNextPage()\n  File \"/usr/local/lib/python2.7/dist-packages/github/PaginatedList.py\", line 177, in _fetchNextPage\n    for element in data\n  File \"/usr/local/lib/python2.7/dist-packages/github/GithubObject.py\", line 74, in __init__\n    self._storeAndUseAttributes(headers, attributes)\n  File \"/usr/local/lib/python2.7/dist-packages/github/GithubObject.py\", line 86, in _storeAndUseAttributes\n    self._useAttributes(attributes)\n  File \"/usr/local/lib/python2.7/dist-packages/github/Tag.py\", line 73, in _useAttributes\n    if \"commit\" in attributes:  # pragma no branch\nTypeError: argument of type 'NoneType' is not iterable\n```\n","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDU4MTA0Nzcw","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"Wow thanks for reporting that! I'll have a look in the coming days.\n","createdAt":"2014-10-06T21:43:52Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/278#issuecomment-58104770","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDU4MjkyMzM4","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"The issue comes from the GitHub API (see the `null`s at the end):\n\n```\ncurl https://api.github.com/repositories/2325298/tags?page=13\n\n[\n  {\n    \"name\": \"v2.6.15-rc7\",\n    \"zipball_url\": \"https://api.github.com/repos/torvalds/linux/zipball/v2.6.15-rc7\",\n    \"tarball_url\": \"https://api.github.com/repos/torvalds/linux/tarball/v2.6.15-rc7\",\n    \"commit\": {\n      \"sha\": \"f89f5948fc10bb973cd452d2e334da207828e228\",\n      \"url\": \"https://api.github.com/repos/torvalds/linux/commits/f89f5948fc10bb973cd452d2e334da207828e228\"\n    }\n  },\n  {...........},\n  {\n    \"name\": \"v2.6.12\",\n    \"zipball_url\": \"https://api.github.com/repos/torvalds/linux/zipball/v2.6.12\",\n    \"tarball_url\": \"https://api.github.com/repos/torvalds/linux/tarball/v2.6.12\",\n    \"commit\": {\n      \"sha\": \"9ee1c939d1cb936b1f98e8d81aeffab57bae46ab\",\n      \"url\": \"https://api.github.com/repos/torvalds/linux/commits/9ee1c939d1cb936b1f98e8d81aeffab57bae46ab\"\n    }\n  },\n  null,\n  null\n]\n```\n\nI'll contact GitHub to see if they can fix it on their side. I'll also make a workaround in PyGithub.\n","createdAt":"2014-10-08T01:33:42Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/278#issuecomment-58292338","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDU4Mjk0NjUw","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"Work-around in aadc28683 and https://pypi.python.org/pypi/PyGithub/1.25.2\n\nThanks for reporting!\n","createdAt":"2014-10-08T01:58:49Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/278#issuecomment-58294650","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDU4MzcyOTAz","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"Response from Ivan Žužak (GitHub Support):\n\n> The team deployed some changes which should have resolved this issue. Let us know if you're still seeing null items in some responses, though.\n> Thanks again!\n","createdAt":"2014-10-08T15:09:12Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/278#issuecomment-58372903","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDU4Mzc4NzYy","author":{"login":"erichaase"},"authorAssociation":"NONE","body":"Great, thanks for the quick turnaround on this!\n","createdAt":"2014-10-08T15:44:22Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/278#issuecomment-58378762","viewerDidAuthor":false}],"createdAt":"2014-10-06T20:42:59Z","number":278,"state":"CLOSED","title":"Iterating through repo.get_tags() throws NoneType TypeError for repositories with lots of tags","url":"https://github.com/PyGithub/PyGithub/issues/278"},{"author":{"id":"MDQ6VXNlcjEzMTA4NzI=","is_bot":false,"login":"ddevault","name":"Drew DeVault"},"body":"```\n$ sudo pip install pygithub3\n  Downloading/unpacking pygithub3 (from -r packages.txt (line 4))\n  Downloading pygithub3-0.5.tar.gz\n  Running setup.py (path:/tmp/pip_build_root/pygithub3/setup.py) egg_info for package pygithub3\n    Traceback (most recent call last):\n      File \"<string>\", line 17, in <module>\n      File \"/tmp/pip_build_root/pygithub3/setup.py\", line 7, in <module>\n        import pygithub3\n      File \"/tmp/pip_build_root/pygithub3/pygithub3/__init__.py\", line 10, in <module>\n        from github import Github\n    ImportError: No module named 'github'\n    Complete output from command python setup.py egg_info:\n    Traceback (most recent call last):\n\n  File \"<string>\", line 17, in <module>\n\n  File \"/tmp/pip_build_root/pygithub3/setup.py\", line 7, in <module>\n\n    import pygithub3\n\n  File \"/tmp/pip_build_root/pygithub3/pygithub3/__init__.py\", line 10, in <module>\n\n    from github import Github\n\nImportError: No module named 'github'\n\n----------------------------------------\nCleaning up...\nCommand python setup.py egg_info failed with error code 1 in /tmp/pip_build_root/pygithub3\nStoring debug log for failure in /root/.pip/pip.log\n```\n","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDU3MDMzMjI1","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"Not my library. Mine is https://pypi.python.org/pypi/PyGithub as pointed by... all my doc. Including http://jacquev6.github.io/PyGithub/v1/introduction.html#download-and-install\n","createdAt":"2014-09-26T23:32:47Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/276#issuecomment-57033225","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDYyMDU1ODE4","author":{"login":"za3k"},"authorAssociation":"NONE","body":"This is a python3/pip3 reproducible issue (nothing to do with Arch)\n","createdAt":"2014-11-06T21:37:48Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/276#issuecomment-62055818","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDYyMTgyOTk1","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"And this has nothing to do with PyGithub, as noted earlier and in #283.\n","createdAt":"2014-11-07T17:39:15Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/276#issuecomment-62182995","viewerDidAuthor":false}],"createdAt":"2014-09-26T21:58:02Z","number":276,"state":"CLOSED","title":"Error installing via pip on Arch Linux","url":"https://github.com/PyGithub/PyGithub/issues/276"},{"author":{"id":"MDQ6VXNlcjQzODI5Mw==","is_bot":false,"login":"nyov","name":""},"body":"The uritemplate syntax used, doesn't seem to work with the uritemplate.py library in requirements (unless it's not the one at https://github.com/uri-templates/uritemplate-py/ ?)\n\n``` py\nTraceback (most recent call last):\n  File \"./testit.py\", line 26, in <module>\n    r = g.get_repo('jacquev6/PyGithub')\n  File \"./PyGithub.git/PyGithub/Blocking/Github.py\", line 443, in get_repo\n    url = uritemplate.expand(\"https://api.github.com/repos/{owner}/{repo}\", owner=repo[0], repo=repo[1])\nTypeError: expand() got an unexpected keyword argument 'owner'\n```\n\nThe required syntax seems to be:\n\n``` py\nuritemplate.expand(\"https://api.github.com/repos/{owner}/{repo}\", {'owner':repo[0], 'repo':repo[1]})\n```\n\nTested with uritemplate 0.5 and 0.6\n","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDU2NTYzOTMx","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"Yeah this is confusing, and I got caught a few times myself :)\n\nFrom [`requirements.txt`](https://github.com/jacquev6/PyGithub/blob/develop_v2/requirements.txt), the PyPi package is [`uritemplate.py`](https://pypi.python.org/pypi/uritemplate.py), which is the [uritemplate library](https://github.com/sigmavirus24/uritemplate) by @sigmavirus24.\n","createdAt":"2014-09-23T18:09:53Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/274#issuecomment-56563931","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDU2NTY4MzY4","author":{"login":"nyov"},"authorAssociation":"NONE","body":"Ah, I thought it might be that. So that was the wrong one I found on the debian repos...\nSo this isn't a valid issue then. Feel free to close.\n(Unless the other syntax might provide support with both libraries? But maybe that'd be more headache than usefulness.)\n","createdAt":"2014-09-23T18:38:19Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/274#issuecomment-56568368","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDU2NTcyNzg2","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"I don't plan to support both libraries, at least for now. Closing :)\n","createdAt":"2014-09-23T19:06:45Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/274#issuecomment-56572786","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDY1NTU2NDM3","author":{"login":"CTLocalGovTeam"},"authorAssociation":"NONE","body":"I'm still seeing this issue. Can you please post a link to the correct uritemplate library to use?\n","createdAt":"2014-12-04T09:20:16Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/274#issuecomment-65556437","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDY1NjE3NDIz","author":{"login":"nyov"},"authorAssociation":"NONE","body":"As was already linked, it's this one: https://github.com/sigmavirus24/uritemplate\n","createdAt":"2014-12-04T11:13:12Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/274#issuecomment-65617423","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDY1NjMzMzcz","author":{"login":"CTLocalGovTeam"},"authorAssociation":"NONE","body":"Dont know how i missed that! Facepalm. Thank you so much. I am able to get it to work now.\n","createdAt":"2014-12-04T13:46:44Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/274#issuecomment-65633373","viewerDidAuthor":false}],"createdAt":"2014-09-23T17:17:00Z","number":274,"state":"CLOSED","title":"v2 don't seem to work with uritemplate.py","url":"https://github.com/PyGithub/PyGithub/issues/274"},{"author":{"id":"MDQ6VXNlcjE5NzY=","is_bot":false,"login":"sqs","name":"Quinn Slack"},"body":"I want to use [Sourcegraph code search and code review](https://sourcegraph.com) with PyGithub. A project maintainer needs to enable it to set up a webhook so the code is up-to-date there.\n\nCould you please enable PyGithub on @Sourcegraph by going to https://sourcegraph.com/github.com/jacquev6/PyGithub and clicking on Settings? (It should only take 15 seconds.)\n\nThank you!\n","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDU2MTk3MjI5","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"This should now be done, let me know if it works for you.\n","createdAt":"2014-09-19T16:01:25Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/273#issuecomment-56197229","viewerDidAuthor":false}],"createdAt":"2014-09-19T05:31:42Z","number":273,"state":"CLOSED","title":"Enable Sourcegraph","url":"https://github.com/PyGithub/PyGithub/issues/273"},{"author":{"id":"MDQ6VXNlcjE5NjYzNzc=","is_bot":false,"login":"collinalexbell","name":"collinalexbell"},"body":"","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDU2MTk3MDg3","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"I can't help you with so little information. Can you provide a [minimal example](http://sscce.org/)?\n","createdAt":"2014-09-19T16:00:21Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/272#issuecomment-56197087","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDU4Mjk0ODY0","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"Closing. Don't hesitate to re-open if your issue is still present and you have more information.\n","createdAt":"2014-10-08T02:01:05Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/272#issuecomment-58294864","viewerDidAuthor":false}],"createdAt":"2014-09-18T16:06:41Z","number":272,"state":"CLOSED","title":"g.get_user() returns a Named user without a URL","url":"https://github.com/PyGithub/PyGithub/issues/272"},{"author":{"id":"MDQ6VXNlcjMzODYzNA==","is_bot":false,"login":"nhomar","name":"Nhomar [Vauxoo]"},"body":"Hello.\n\nCan you please point me to an example of oauth new feature on v2, I really want start to test it in our internal enviroment (making public the code) to allow us propose improvements and allow create v2 ASAP, but I could not understand the logic behind what is already done, user:password authentication is not enought for us already and we think we can help a lot in finish your amazing pythonistic implementation.\n\nThanks in advance.\n","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDU0MTY0NTM2","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"I have an example here: https://github.com/jacquev6/PyGithubOAuthDemo This is a [Django](https://www.djangoproject.com/) application that implements [the OAuth workflow](https://developer.github.com/v3/oauth/#web-application-flow) with PyGithub v2. If you're not familiar with Django, the interesting things are in [the views](https://github.com/jacquev6/PyGithubOAuthDemo/blob/master/PyGithubOAuthDemoProj/PyGithubOAuthDemoApp/views.py).\n\nIt's hosted here: http://pygithub-oauth-demo.vincent-jacques.net\n\nPlease be aware that this is really a draft, and I plan to add helpers (#225) in PyGithub itself. But it should get you started.\n","createdAt":"2014-09-02T14:59:51Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/271#issuecomment-54164536","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDYzMjcyOTQz","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"Closing now. Do not hesitate to re-open if you need more.\n","createdAt":"2014-11-17T08:27:55Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/271#issuecomment-63272943","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDMyOTIyOTc4Mg==","author":{"login":"thegrims"},"authorAssociation":"NONE","body":"@jacquev6 Links to the example are now broken","createdAt":"2017-09-13T16:52:44Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/271#issuecomment-329229782","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM1MjAzNDU1MQ==","author":{"login":"kbessas"},"authorAssociation":"NONE","body":"+1","createdAt":"2017-12-15T15:32:22Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/271#issuecomment-352034551","viewerDidAuthor":false}],"createdAt":"2014-08-31T20:54:27Z","number":271,"state":"CLOSED","title":"Point to an example of the oAuth feature.","url":"https://github.com/PyGithub/PyGithub/issues/271"},{"author":{"id":"MDQ6VXNlcjMyNzE0Ng==","is_bot":false,"login":"jacquev6","name":"Vincent Jacques"},"body":"Helpers would be useful to build input for all methods accepting something structured:\n- search queries\n- git author, committer or tagger\n- create_git_tree\n- ...\n","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDExNTMwNTQ3Mw==","author":{"login":"jzelinskie"},"authorAssociation":"CONTRIBUTOR","body":"v2 is dead, a new issue should be made if this isn't in master\n","createdAt":"2015-06-25T16:06:43Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/270#issuecomment-115305473","viewerDidAuthor":false}],"createdAt":"2014-08-23T19:06:50Z","number":270,"state":"CLOSED","title":"Add helpers for structured input","url":"https://github.com/PyGithub/PyGithub/issues/270"},{"author":{"id":"MDQ6VXNlcjIyMTgzMzE=","is_bot":false,"login":"tom-spalding","name":"Tom Spalding"},"body":"I want to assign a label to my issues, but had to make a fake milestone to successfully run for the moment. `issue = repo.create_issue(title,comment)` works fine per https://github.com/jacquev6/PyGithub/issues/132 but right now am doing the following. How do I pass `None`?\n\n```\nfrom github import Github\n#--------\nowner = '<me>'\npassword = '<pass>'\nproject = '<project name>'\n#--------\ng = Github(owner,password)\nrepo = g.get_user(owner).get_repo(project)\n#--------\ntitle = 'test title'\nassignee = owner\ncomment = 'some comment goes here.'\n#--------\ntry:\n    milestone = repo.create_milestone('fake milestone')\nexcept:\n    milestone = repo.get_milestone(1)\n#--------\ntry:\n    repo.create_label('comment','fbca04')\n    print('debug: created comment label')\nexcept:\n    print('debug: comment label already made')\nfinally:\n    label = repo.get_label('comment')\n#issue = repo.create_issue(title,comment)\nissue = repo.create_issue(title,comment,assignee,milestone,[label])\n```\n","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDUyODAyNDMw","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"In PyGithub v1, the default value is a special object, [`github.NotSet`](http://jacquev6.github.io/PyGithub/v1/utilities.html#default-argument). In v2, I'm changing that to accept the much more pythonic `None`.\n\nFor your case, you can simply avoid passing milestone by using a named argument:\n\n```\nissue = repo.create_issue(title, comment, labels=[label])\n```\n","createdAt":"2014-08-20T16:19:49Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/269#issuecomment-52802430","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDUyODczMjc0","author":{"login":"tom-spalding"},"authorAssociation":"NONE","body":"Awesome, thanks for the quick response. Solved.\n","createdAt":"2014-08-21T03:04:44Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/269#issuecomment-52873274","viewerDidAuthor":false}],"createdAt":"2014-08-20T05:24:07Z","number":269,"state":"CLOSED","title":"Passing Milestone=None to create_issue?","url":"https://github.com/PyGithub/PyGithub/issues/269"},{"author":{"id":"MDQ6VXNlcjE3NjAyMDk=","is_bot":false,"login":"ivankravets","name":"Ivan Kravets"},"body":"Let's go to API: https://developer.github.com/v3/git/refs/\n\n> The ref in the URL must be formatted as `heads/branch`, not just `branch`. For example, the call to get the data for a branch named skunkworkz/featureA ...\n\nYour Doc:\n\n> `Repository.get_git_ref(ref)`\n> Calls the GET /repos/:owner/:repo/git/refs/`:ref` end point.\n> This is the only method calling this end point.\n> Parameters:   `ref` – mandatory string\n> Return type:  GitRef\n\nLet's implement GitHub's examples:\n\n``` python\nrepo = instance.get_repo((\"octocat\", \"Hello-World\")\nref = repo.get_git_ref(\"heads/skunkworkz/featureA\")\n```\n\n**Expected**: `GitRef` Instance\n**Received**: AssertionError - `assert ref.startswith(\"refs/\")`\n\n**Proposition**: Refactor behaviour of [get_git_ref](https://github.com/jacquev6/PyGithub/blob/develop_v2/PyGithub/Blocking/Repository.py#L1597) accordingly to GitHub API Docs (remove \"requirements\" of `ref/` in `:ref`).\n","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDUyNTM5ODE1","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"Thanks for reporting this!\n\nI'll make sure the behavior is consistent, probably as you suggest.\n","createdAt":"2014-08-18T19:09:53Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/268#issuecomment-52539815","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDUyNTg4MTYx","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"This should be ok now. Don't hesitate to re-open this issue if you need to discuss further.\n","createdAt":"2014-08-19T04:07:08Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/268#issuecomment-52588161","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDUyNjAyMzY5","author":{"login":"ivankravets"},"authorAssociation":"NONE","body":"Thanks a lot. It works fine now.\n","createdAt":"2014-08-19T08:08:15Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/268#issuecomment-52602369","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDMwNDQyMDA4Mg==","author":{"login":"passionatedevops"},"authorAssociation":"NONE","body":"Thanks .it is working fine  ..\r\n\r\ngitref=i.get_git_ref('heads/'+str(branch.name));","createdAt":"2017-05-27T02:13:12Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/268#issuecomment-304420082","viewerDidAuthor":false}],"createdAt":"2014-08-18T18:50:42Z","number":268,"state":"CLOSED","title":"Git Refs and :ref","url":"https://github.com/PyGithub/PyGithub/issues/268"},{"author":{"id":"MDQ6VXNlcjMyNzE0Ng==","is_bot":false,"login":"jacquev6","name":"Vincent Jacques"},"body":"Github.try_get_user(login) will return None if GET https://api.github.com/users/{login} return 404\n\nGeneraly, try_xxx will raise only on 5XX, not on 4XX.\n\nGood applications include PullRequest.try_merge(), Repository.try_merge(), etc.\n","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDUyMzk4ODcw","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"Do we also want user.get_or_create_repo(name, *args)? If try_get_repo fails, then we create the repo with args.\n","createdAt":"2014-08-16T16:51:14Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/267#issuecomment-52398870","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDUyNDA2MzAz","author":{"login":"bilderbuchi"},"authorAssociation":"NONE","body":"Personally, I don't see the use of that, and probably wouldn't use it even if it existed - way too easy to make mistakes, simple typos generating repos for you, etc.\n","createdAt":"2014-08-16T21:22:36Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/267#issuecomment-52406303","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDUyNDA4MTk3","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"Yep get_or_create_xxx is probably not a good idea. And it would make two API calls in one method, which does not match the usual (low) level of abstraction of PyGithub.\n\nThe use case I had in mind was a tool needing a repo with a specific name on the user's account. get_or_create_repo may have simplified the initialization of the tool on first use. But again this doesn't match the level of PyGithub, and is easily implemented by the tool using try_get_repo.\n","createdAt":"2014-08-16T22:57:03Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/267#issuecomment-52408197","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDExNTMwNTMyMQ==","author":{"login":"jzelinskie"},"authorAssociation":"CONTRIBUTOR","body":"v2 is dead, a new issue should be made if this isn't in master\n","createdAt":"2015-06-25T16:06:08Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/267#issuecomment-115305321","viewerDidAuthor":false}],"createdAt":"2014-08-15T01:21:51Z","number":267,"state":"CLOSED","title":"Implement try_xxx methods","url":"https://github.com/PyGithub/PyGithub/issues/267"},{"author":{"id":"MDQ6VXNlcjQ2MDI4MzA=","is_bot":false,"login":"oskar-j","name":"Oskar Jarczyk"},"body":"Hi.,\n\nis it possible to improve method Repository.get_stats_contributors(self) and other similar methods on stats to distinct between no result on empty, new repos and no results due generation time on the server side? Because PyGithub in both will return None. Or maybe there is some method to directly read HTTP response code, so I will use this, but couldn't find such..\n\nExample:\n\n``` shell\n(supra-repos)oskar@yoshimune:~/data/supra-repos$ curl -i https://api.github.com/repos/wiki-worker1/testowy/stats/contributors\nHTTP/1.1 204 No Content\nServer: GitHub.com\nDate: Sun, 03 Aug 2014 10:25:46 GMT\nStatus: 204 No Content\nX-RateLimit-Limit: 60\nX-RateLimit-Remaining: 53\nX-RateLimit-Reset: 1407065078\nX-XSS-Protection: 1; mode=block\nX-Frame-Options: deny\nContent-Security-Policy: default-src 'none'\nAccess-Control-Allow-Credentials: true\nAccess-Control-Expose-Headers: ETag, Link, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Reset, X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Poll-Interval\nAccess-Control-Allow-Origin: *\nX-GitHub-Request-Id: 5BE6DE53:2B9A:5E561BE:53DE0E29\nStrict-Transport-Security: max-age=31536000; includeSubdomains\nX-Content-Type-Options: nosniff\nVary: Accept-Encoding\nX-Served-By: 62a1303ae95931e56e387e87d354bb24\n\n(supra-repos)oskar@yoshimune:~/data/supra-repos$ curl -i https://api.github.com/repos/wikiteams/linda-nlp/stats/contributors\nHTTP/1.1 202 Accepted\nServer: GitHub.com\nDate: Sun, 03 Aug 2014 10:26:20 GMT\nContent-Type: application/json; charset=utf-8\nStatus: 202 Accepted\nX-RateLimit-Limit: 60\nX-RateLimit-Remaining: 52\nX-RateLimit-Reset: 1407065078\nX-GitHub-Media-Type: github.v3\nX-XSS-Protection: 1; mode=block\nX-Frame-Options: deny\nContent-Security-Policy: default-src 'none'\nContent-Length: 5\nAccess-Control-Allow-Credentials: true\nAccess-Control-Expose-Headers: ETag, Link, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Reset, X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Poll-Interval\nAccess-Control-Allow-Origin: *\nX-GitHub-Request-Id: 5BE6DE53:0441:258191F:53DE0E4C\nStrict-Transport-Security: max-age=31536000; includeSubdomains\nX-Content-Type-Options: nosniff\n\n{\n\n}\n```\n","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDUxMDAwMTA0","author":{"login":"bilderbuchi"},"authorAssociation":"NONE","body":":+1: see also #256.\n","createdAt":"2014-08-03T19:23:33Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/266#issuecomment-51000104","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDUxMTQ2Nzkw","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"That's a very good point. In v1 unfortunately, there is no way to differentiate between those cases... And I see no way to differentiate without breaking the existing API contract.\n\nAs a workaround, I would suggest you call something like `repo.get_branch(repo.default_branch)` when `.get_stats_contributors` returns `None`. This will throw a [UnknownObjectException]() if the repo has not been initialized yet.\n\nIn v2, I'll make sure this works better.\n","createdAt":"2014-08-05T03:46:46Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/266#issuecomment-51146790","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDUzMTYyMjM1","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"This should be better in v2: 2e6a5b7d20 http://jacquev6.github.io/PyGithub/v2/reference/classes/Repository.html#PyGithub.Blocking.Repository.Repository.get_stats_commit_activity\n","createdAt":"2014-08-23T19:02:37Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/266#issuecomment-53162235","viewerDidAuthor":false}],"createdAt":"2014-08-03T10:32:33Z","number":266,"state":"CLOSED","title":"Differentiate between \"no stats to generate\" (204) and \"not ready\" (202)","url":"https://github.com/PyGithub/PyGithub/issues/266"},{"author":{"id":"MDQ6VXNlcjIxNjMwNDA=","is_bot":false,"login":"mfalesni","name":"Milan Falešník"},"body":"Does not matter if I pass Label instance or string, it always complains with this:\n\n```\nIn [18]: pull.add_to_labels(needs_rebase)\n---------------------------------------------------------------------------\nTypeError                                 Traceback (most recent call last)\n<ipython-input-18-8bcf0296eaae> in <module>()\n----> 1 pull.add_to_labels(needs_rebase)\n\n/lib/python2.7/site-packages/PyGithub-2.0.0_alpha.3-py2.7.egg/PyGithub/Blocking/Issue.py in add_to_labels(self, *label)\n    262         label = _snd.normalizeList(_snd.normalizeLabelName, label)\n    263 \n--> 264         url = uritemplate.expand(self.labels_url)\n    265         postArguments = label\n    266         r = self.Session._request(\"POST\", url, postArguments=postArguments)\n\n/lib/python2.7/site-packages/uritemplate/api.py in expand(uri, var_dict, **kwargs)\n     31 \n     32     \"\"\"\n---> 33     return URITemplate(uri).expand(var_dict, **kwargs)\n     34 \n     35 \n\n/lib/python2.7/site-packages/uritemplate/template.py in __init__(self, uri)\n     61         #: :class:`URIVariable`\\ s\n     62         self.variables = [\n---> 63             URIVariable(m.groups()[0]) for m in template_re.finditer(self.uri)\n     64         ]\n     65         #: A set of variable names in the URI.\n\nTypeError: expected string or buffer\n\nIn [19]: pull.labels_url\n\n\n```\n","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDUwNzc5MDY2","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"Thank you for reporting this!\n\nIt looks like I have to reconsider the inheritance relation between `PullRequest` and `Issue` for v2.\n\nIn the meantime, I think you can work around by getting the `Issue` corresponding to the `PullRequest`. Something like:\n\n```\nrepo.get_issue(pull.number).add_to_labels(needs_rebase)\n```\n\nAnd you're using something I committed [2 days ago](https://github.com/jacquev6/PyGithub/blame/develop_v2/PyGithub/Blocking/Issue.py#L252) and I've not even generated the doc for this! Amazing, thanks!\n","createdAt":"2014-07-31T15:57:18Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/265#issuecomment-50779066","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDUxMTQ1NTIx","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"So now you should do:\n\n```\npull.get_issue().add_to_labels(needs_rebase)\n```\n\nClosing this issue; don't hesitate to re-open if you need to discuss it further. Thanks again for reporting.\n","createdAt":"2014-08-05T03:20:52Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/265#issuecomment-51145521","viewerDidAuthor":false}],"createdAt":"2014-07-31T07:49:28Z","number":265,"state":"CLOSED","title":"labels_url in Pull request class is None","url":"https://github.com/PyGithub/PyGithub/issues/265"},{"author":{"id":"MDQ6VXNlcjQzODkyMg==","is_bot":false,"login":"mattben","name":"Matthew Harris"},"body":"Thank you this is the library I've been looking for!\n\nI am able to get and print all my repos\n\n```\nrepo_list = g.get_user().get_repos();\nprint \"%s has %d repos\" % (user, repo_count(repo_list))\n```\n\nthis takes a user and a password. Is there a way to search by organizations? We work with many orgs I'm looking to do something like\n\n```\nfor orgs in orgs_list:\n    repo_list = g.get_org().get_repos()\n```\n\nThank you for any help and feed back, I'm using the stable 1.25 version\n","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDUwNjg2OTgz","author":{"login":"mattben"},"authorAssociation":"NONE","body":"```\nrepo_list = g.get_organization(\"webshootertk\").get_repos();\n```\n","createdAt":"2014-07-30T22:06:02Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/264#issuecomment-50686983","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDUwNjk0MTA2","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"I like users like you very much!\n","createdAt":"2014-07-30T23:23:51Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/264#issuecomment-50694106","viewerDidAuthor":false}],"createdAt":"2014-07-30T20:50:24Z","number":264,"state":"CLOSED","title":"orgs not users","url":"https://github.com/PyGithub/PyGithub/issues/264"},{"author":{"id":"MDQ6VXNlcjE5OTgxMw==","is_bot":false,"login":"tacaswell","name":"Thomas A Caswell"},"body":"`get_label` will return a single label, I would like to be able to get a list of all labels that exist.\n","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDUwMDgzNzE2","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"Hum is there anything wrong with [`Repository.get_labels`](http://jacquev6.github.io/PyGithub/v1/github_objects/Repository.html#github.Repository.Repository.get_labels)?\n","createdAt":"2014-07-24T21:55:23Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/263#issuecomment-50083716","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDUwMDg0MjM5","author":{"login":"tacaswell"},"authorAssociation":"NONE","body":"```\nIn [9]: repo.get_labels()\n---------------------------------------------------------------------------\nAttributeError                            Traceback (most recent call last)\n<ipython-input-9-234e27056c84> in <module>()\n----> 1 repo.get_labels()\n\nAttributeError: 'Repository' object has no attribute 'get_labels'\n\nIn [10]: print repo\n<PyGithub.Blocking.Repository.Repository object at 0x7f4bc8155210>\n```\n\nSome what confused as to which branch I should be working off of.\n","createdAt":"2014-07-24T22:00:17Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":1}}],"url":"https://github.com/PyGithub/PyGithub/issues/263#issuecomment-50084239","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDUwMDg1MDc1","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"Oh you're using v2! It's still in a very early stage of development and I've not yet implemented [GET /repos/:owner/:repo/labels](http://jacquev6.github.io/PyGithub/v2/reference/apis.html#get-repos-owner-repo-labels)\n\nYou'll have to wait a bit (most likely a few days, because I'm quite active on v2 those days), or switch back to v1. Please see http://jacquev6.github.io/PyGithub/v2/index.html#migration-strategy-and-maintenance-schedule if you need insight on how to make this decision.\n\nIf you want to use v1, just install PyGithub from [pypi](https://pypi.python.org/pypi/PyGithub) or work from develop and master branches.\n","createdAt":"2014-07-24T22:08:35Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/263#issuecomment-50085075","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDUwMTY0NDcx","author":{"login":"tacaswell"},"authorAssociation":"NONE","body":"Sorry about that.  I got everything sorted and working for my purposes.  \n","createdAt":"2014-07-25T15:24:18Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/263#issuecomment-50164471","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDUwMTY4NjY0","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"No worries, I'm glad everything is ok.\n","createdAt":"2014-07-25T15:56:51Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/263#issuecomment-50168664","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDUwNTc4ODIy","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"For the record, I've just implemented Repository.get_labels in v2: https://github.com/jacquev6/PyGithub/blob/ebbd423ba749623b4175526be7a9385de877e0cc/PyGithub/Blocking/Repository.py#L1664\n","createdAt":"2014-07-30T06:35:34Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/263#issuecomment-50578822","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDUwNjA2MzU2","author":{"login":"tacaswell"},"authorAssociation":"NONE","body":"I am just starting to play with the API, is v2 more-or-less feature complete enough to use for work, or should I stick with v1?\n\nSeems like I picked an awkward time to start using this package...\n","createdAt":"2014-07-30T12:12:49Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/263#issuecomment-50606356","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDUwNjM1ODc5","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"It really depends on your project. If it's a small personal project and you can cope with some changes in PyGithub, you can use v2. If it's a large project that needs to be delivered to your boss in 1 week, then v1 is the best choice. If it's in between, well...\n\nIn all cases, the interface is not that different, so migrating an existing project should be relatively easy. The main changes are:\n- the quality of the documentation\n- the names of the modules\n- the creation of the Github object (builder in v2, constructor in v1)\n- maintainability: v2 should be much easier for me to keep it up-to-date with the changes in GitHub API v3\n\nFor reference, you can see what's not yet implemented in v2 in [the `unimplemented.*.yml` files](https://github.com/jacquev6/PyGithub/tree/develop_v2/ApiDefinition). It is also in [the doc](http://jacquev6.github.io/PyGithub/v2/reference/apis.html) when I generate it (not up-to-date right now).\n","createdAt":"2014-07-30T15:59:47Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/263#issuecomment-50635879","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDUwNjM3ODMy","author":{"login":"tacaswell"},"authorAssociation":"NONE","body":"It is indeed something in between (small side project to make make some work-related stuff go smoother).  \n","createdAt":"2014-07-30T16:13:44Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/263#issuecomment-50637832","viewerDidAuthor":false}],"createdAt":"2014-07-24T21:53:13Z","number":263,"state":"CLOSED","title":"get list of labels on a repository","url":"https://github.com/PyGithub/PyGithub/issues/263"},{"author":{"id":"MDQ6VXNlcjMyNzE0Ng==","is_bot":false,"login":"jacquev6","name":"Vincent Jacques"},"body":"Do we really want to do that? Or maybe Github.get_entity?\n\n/users/:org_login works and returns the org:\n\nGET https://api.github.com/users/github\n{\n  \"login\": \"github\",\n  \"type\": \"Organization\",\n  \"name\": \"GitHub\",\n  ...\n}\n","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDUzMTYyNDUw","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"http://jacquev6.github.io/PyGithub/v2/reference/classes/Github.html#PyGithub.Blocking.Github.Github.get_users\n","createdAt":"2014-08-23T19:10:34Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/262#issuecomment-53162450","viewerDidAuthor":false}],"createdAt":"2014-07-16T01:47:01Z","number":262,"state":"CLOSED","title":"Make Github.get_user return an Organization if needed","url":"https://github.com/PyGithub/PyGithub/issues/262"},{"author":{"id":"MDQ6VXNlcjMyNzE0Ng==","is_bot":false,"login":"jacquev6","name":"Vincent Jacques"},"body":"Coveralls\nTravis\nWaffle?\nBountysource? GitTip?\n\nBrag a bit with https://pypip.in  [![Downloads](https://pypip.in/d/PyGithub/badge.svg)](https://pypi.python.org/pypi/PyGithub)\n\nReview everything available at http://shields.io\n\nhttps://caniusepython3.com/project/PyGithub\n","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDExNTMwMjkyNw==","author":{"login":"jzelinskie"},"authorAssociation":"CONTRIBUTOR","body":"pretty sure we have this for the important things\n","createdAt":"2015-06-25T15:55:35Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/261#issuecomment-115302927","viewerDidAuthor":false}],"createdAt":"2014-07-13T18:41:04Z","number":261,"state":"CLOSED","title":"Integrate and display external tools","url":"https://github.com/PyGithub/PyGithub/issues/261"},{"author":{"id":"MDQ6VXNlcjMyNzE0Ng==","is_bot":false,"login":"jacquev6","name":"Vincent Jacques"},"body":"/api/...\n/setup/...\n","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDExNTMwNDMwOQ==","author":{"login":"jzelinskie"},"authorAssociation":"CONTRIBUTOR","body":"v2 is dead, a new issue should be made if this isn't in master\n","createdAt":"2015-06-25T16:01:23Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/260#issuecomment-115304309","viewerDidAuthor":false}],"createdAt":"2014-07-13T18:38:04Z","number":260,"state":"CLOSED","title":"Implement the Enterprise-specific end-points","url":"https://github.com/PyGithub/PyGithub/issues/260"},{"author":{"id":"MDQ6VXNlcjMyNzE0Ng==","is_bot":false,"login":"jacquev6","name":"Vincent Jacques"},"body":"Gist comments, commit comments, issue and pull comments.\n","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDUzMTYyMTgy","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"Was merged in 335f719bc\n","createdAt":"2014-08-23T19:00:56Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/259#issuecomment-53162182","viewerDidAuthor":false}],"createdAt":"2014-07-13T18:36:28Z","number":259,"state":"CLOSED","title":"Implement all comments end-points","url":"https://github.com/PyGithub/PyGithub/issues/259"},{"author":{"id":"MDQ6VXNlcjMyNzE0Ng==","is_bot":false,"login":"jacquev6","name":"Vincent Jacques"},"body":"","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDQ4ODUwNzUz","author":{"login":"bilderbuchi"},"authorAssociation":"NONE","body":":+1:, this sounds like a very useful feature, especially with the `update()` function, it could be very easy/convenient to cache a large number of issues/prs/commits locally, and update easily.\n","createdAt":"2014-07-13T20:09:43Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/258#issuecomment-48850753","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDUyNDA4NzQ0","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"Related: implement **str** and **repr**.\n","createdAt":"2014-08-16T23:23:00Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/258#issuecomment-52408744","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDUyNDE3MzIz","author":{"login":"bilderbuchi"},"authorAssociation":"NONE","body":"btw, I'm [currently](https://github.com/bilderbuchi/OF_repo_utilities/blob/13489ffb7d45a1860b4273674b851f8df9adcf67/plot_issue_stats.py#L212-L214) serializing PyGithub objects with a simple pickle command, if that's a useful data point for you.\n","createdAt":"2014-08-17T09:19:23Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/258#issuecomment-52417323","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDExNTMwNDIwMQ==","author":{"login":"jzelinskie"},"authorAssociation":"CONTRIBUTOR","body":"v2 is dead\n","createdAt":"2015-06-25T16:00:57Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/258#issuecomment-115304201","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDExNTUzODI3Ng==","author":{"login":"bilderbuchi"},"authorAssociation":"NONE","body":"@jzelinskie are you saying this feature is in master already? because, this being milestoned for a 2.0 which will come or not is orthogonal/unconnected to the subject of the issue...\n","createdAt":"2015-06-26T06:21:20Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/258#issuecomment-115538276","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDExNTcwMDk0Mg==","author":{"login":"jzelinskie"},"authorAssociation":"CONTRIBUTOR","body":"@bilderbuchi unless I am also confused, \"v2\" was a branch that contained a complete rewrite that was abandoned recently. It already had some releases, but has been discontinued. I don't know if these issues are for the master branch or for that removed branch.\n","createdAt":"2015-06-26T14:05:29Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/258#issuecomment-115700942","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDExNTcwOTA2OA==","author":{"login":"bilderbuchi"},"authorAssociation":"NONE","body":"The way I understood it, this was a feature intended to land in the v2 branch for development of 2.0 (the version). The issues, in general, are for the master/release branch. That's where the v2 branch would have ended up, eventually, too. The v2 branch being dead does not mean this issue is irrelevant (Afaik).\n","createdAt":"2015-06-26T14:30:23Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/258#issuecomment-115709068","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDExNTczMzY4OQ==","author":{"login":"jzelinskie"},"authorAssociation":"CONTRIBUTOR","body":"I'll leave this open for master than. Thanks for easing some confusion.\n","createdAt":"2015-06-26T15:35:34Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/258#issuecomment-115733689","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQwMjY1NDE2Mg==","author":{"login":"stale"},"authorAssociation":"NONE","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","createdAt":"2018-07-05T08:58:43Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/258#issuecomment-402654162","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQxOTUwMzA5Nw==","author":{"login":"stale"},"authorAssociation":"NONE","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","createdAt":"2018-09-07T17:00:45Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/258#issuecomment-419503097","viewerDidAuthor":false}],"createdAt":"2014-07-13T18:29:43Z","number":258,"state":"CLOSED","title":"Implement (de)serialization save/load","url":"https://github.com/PyGithub/PyGithub/issues/258"},{"author":{"id":"MDQ6VXNlcjMyNzE0Ng==","is_bot":false,"login":"jacquev6","name":"Vincent Jacques"},"body":"Are a Contributor and and User or AuthenticatedUser representing the same user equal?\n\nSome classes and structures compare on all attributes, some only on a subset (Entity.login, Repository.full_name, Plan.name)\n","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDExNTMwMzk1MQ==","author":{"login":"jzelinskie"},"authorAssociation":"CONTRIBUTOR","body":"v2 is dead\n","createdAt":"2015-06-25T15:59:55Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/257#issuecomment-115303951","viewerDidAuthor":false}],"createdAt":"2014-07-13T18:29:08Z","number":257,"state":"CLOSED","title":"Implement equality comparison for two objects","url":"https://github.com/PyGithub/PyGithub/issues/257"},{"author":{"id":"MDQ6VXNlcjMyNzQ0Mg==","is_bot":false,"login":"bilderbuchi","name":"Christoph Buchner"},"body":"I have a script which fetches pull requests, iterates through them and prints the value of `p.mergeable`. \nCuriously, when I run this script for the first time, the value is often `None`:\n\n```\nnr 3078, mergeable:True\nnr 3076, mergeable:True\nnr 3058, mergeable:True\nnr 3046, mergeable:None\nnr 3045, mergeable:None\nnr 3042, mergeable:None\nnr 3004, mergeable:None\nnr 3001, mergeable:None\nnr 2990, mergeable:True\nnr 2974, mergeable:None\n```\n\nbut if I run this script a second time, the correct values appear:\n\n```\nnr 3078, mergeable:True\nnr 3076, mergeable:True\nnr 3058, mergeable:True\nnr 3046, mergeable:True\nnr 3045, mergeable:True\nnr 3042, mergeable:False\nnr 3004, mergeable:False\nnr 3001, mergeable:False\nnr 2990, mergeable:True\nnr 2974, mergeable:True\n```\n\nWhat could be the reason behind this, and how can I work around it in the meantime?\n\nThis is using PyGithub 1.25.0 under Python 3 (but I have also previously observed this under Python2)\n","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDQ4NjgwNTMx","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"Preliminary notes, not my final answer.\n\nIn the [test about creating a PullRequest](https://github.com/jacquev6/PyGithub/blob/b64b0d6942bb27095bd035b8c0db10ca35448be3/github/tests/Repository.py#L344), the [replay data](https://github.com/jacquev6/PyGithub/blame/b64b0d6942bb27095bd035b8c0db10ca35448be3/github/tests/ReplayData/Repository.testCreatePull.txt#L10)  (recorded in 2012) shows that GitHub was returning `null` for `mergeable`. I assume this is the behavior you're observing.\n\nIn the [test about PullRequest attributes](https://github.com/jacquev6/PyGithub/blob/b64b0d6942bb27095bd035b8c0db10ca35448be3/github/tests/PullRequest.py#L57), `mergeable` is not `null` though.\n\nI guess that maybe GitHub populates this attribute asynchronously after it has been requested a first time by a user, like they do for [statistics](https://developer.github.com/v3/repos/statistics/#a-word-about-caching). You may want to reach them for confirmation. If this is the case, I can't see any reliable workaround. You would need repeatedly get the PR until `mergeable` is not `null` anymore... You may want to do this with [`p.update`](https://github.com/jacquev6/PyGithub/blob/b64b0d6942bb27095bd035b8c0db10ca35448be3/github/GithubObject.py#L242) (which seems to be absent from PyGithub's reference doc... I'll fix that...) to [avoid consuming your rate limit](https://developer.github.com/v3/#conditional-requests).\n\nI'll do more testing in the coming days.\n","createdAt":"2014-07-11T00:08:33Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/256#issuecomment-48680531","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQ4Njk4Nzc1","author":{"login":"bilderbuchi"},"authorAssociation":"NONE","body":"Thank you for the nice analysis, I think it's correct. I have implement a workaround with `p.update` for now (didn't know that this existed, it might be useful for other things, too!).\nUnfortunately, I can't really test my workaround as, hah, the results have been cached now! :D \n\nIs it possible that, when querying for an uncached PR merge state, you also get a `202` status back, as with statistics? If so, would it be reasonable to check for that, warn, and (optionally) retry after a delay, directly within PyGithub?\n","createdAt":"2014-07-11T06:36:47Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/256#issuecomment-48698775","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQ4ODQ3ODA0","author":{"login":"bilderbuchi"},"authorAssociation":"NONE","body":"I checked the docs, and the [section about mergeability](https://developer.github.com/v3/pulls/#mergability) does not mention time delays or status mechanisms similar to statistics.\n","createdAt":"2014-07-13T18:11:34Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/256#issuecomment-48847804","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDUwMTc1ODc2","author":{"login":"bilderbuchi"},"authorAssociation":"NONE","body":"Reporting my experience: In the overwhelming majority of a set of PRs I tested in a repo, 1 second sleep before re-requesting the mergeability status is enough to get a valid result.\n","createdAt":"2014-07-25T16:57:17Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/256#issuecomment-50175876","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDUxMTQ3NDc5","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"Thinking about it, there is not much I can do in PyGithub: it's rather correct for GitHub to return `None` for `mergeable` while it's not usable.\n\nI don't see how I could implement the retry internally without penalizing all the other clients who don't care about mergeability. That's also not something that belongs to the level of PyGithub; it's a thin wrapper designed to provide an object-oriented, typed interface to the underlying API and not to cope with its limitations. (I would be glad to see someone designing a layer above PyGithub that adds abstraction!) So I guess implementing the retry in the client is the Right Thing (:tm:).\n\nThoughts, @bilderbuchi?\n","createdAt":"2014-08-05T04:01:33Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/256#issuecomment-51147479","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDUxMTc2OTQ3","author":{"login":"bilderbuchi"},"authorAssociation":"NONE","body":"I agree. Options going forward, as I see it:\n- This kind of pitfall should be documented in PyGithub (even if it's only a wrapper), possibly with the workaround suggestion, so that users are not suprised by it (like me) or can at least quickly find a workaround.\n- We should probably approach Github and ask if they would consider changing the API (or at least what their stance is) so that this also returns `202` if mergeable isn't generated yet (then, PyGithub could intercept this, and warn/log about it). If you are unable to, I can take over this task if you want. Assign me if you can, otherwise I'll try not to forget about it. :D\n","createdAt":"2014-08-05T10:01:09Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/256#issuecomment-51176947","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDUxMjEzNzcx","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"Agreed for the doc, I'll do it in v2, for this and other peculiarities.\n\nWe have a way to tell if `mergeable` is still being computed (it's `None` in two cases: when `merged` is true and when `merged` is false and the mergeability has not yet been computed), so there is no absolute need to change the API. Returning 202 would make things more explicit though, so I'll let you contact GitHub if you decide to. Obviously, `POST /repos/:owner/:repo/pulls` deserves the same treatment.\n","createdAt":"2014-08-05T15:28:05Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/256#issuecomment-51213771","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDUxNTAwNTU1","author":{"login":"bilderbuchi"},"authorAssociation":"NONE","body":"So I got an answer from Github support about this:\n\nThanks for getting in touch and providing this feedback -- that's very helpful, and I'll make sure the API team sees it.\n\n> - One of the problems is that this behaviour is not documented at https://developer.github.com/v3/pulls/#mergability.\n\nThat's true, and I'm sorry if this is causing confusion. This behavior for computing the mergeability of pull requests might change in the near future, and we try not to document behavior which might change. If you still have any questions about this -- please free to ask and we'll try to help.\n\n> - Another problem that API behaviour is inconsistent a bit: For statistics, `202` is returned when something is being computed in the background, to inform the user about the computation, see https://developer.github.com/v3/repos/statistics/#a-word-about-caching. As far as I can see, this is not the case for the mergeable attribute, and I think it would make sense to do this here, too, to be consistent.\n\nI think I understand why you see this as inconsistent. Still, some API clients might already be depending on how this endpoint is implemented. If we changed the behavior now (to return a new status) -- these clients and applications might break, so we're probably not going to be doing that. However, I'll pass your suggestion to the team to consider doing this in the next version of the API (v4).\n\n> - Problematic is that for mergeable, null is also returned for an already merged PR (https://github.com/jacquev6/PyGithub/issues/256#issuecomment-51213771), so you have to check several attributes to determine if you should retry/update. A `202` response would make it easier for users and downstream wrapper libraries to deal with the asychronicity of the mergeable attribute.\n\nI agree with you that the way the mergeable attribute is computed causes problems in some situations. We're already aware of that, but I can't make any promises about if/when this behavior might be changed.\n\nThanks again for the great feedback! <3\n","createdAt":"2014-08-07T17:01:22Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/256#issuecomment-51500555","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDUzMTYwNjM2","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"This behavior is now documented here: http://jacquev6.github.io/PyGithub/v2/reference/classes/PullRequest.html#PyGithub.Blocking.PullRequest.PullRequest.mergeable\n\nI'm closing this issue. Don't hesitate to re-open if you need to discuss further.\n","createdAt":"2014-08-23T18:04:34Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/256#issuecomment-53160636","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDUzMzAwNjM4","author":{"login":"bilderbuchi"},"authorAssociation":"NONE","body":"thanks, looks good!\n","createdAt":"2014-08-25T17:55:23Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/256#issuecomment-53300638","viewerDidAuthor":false}],"createdAt":"2014-07-10T21:27:16Z","number":256,"state":"CLOSED","title":"PullRequest.mergeable spuriously returns None on first run","url":"https://github.com/PyGithub/PyGithub/issues/256"},{"author":{"id":"MDQ6VXNlcjQ2MDI4MzA=","is_bot":false,"login":"oskar-j","name":"Oskar Jarczyk"},"body":"Hi,\n\nI checked with newest 1.25 version. I have some questions:\n\n1) Whats the difference between watchers and watchers_count in Repository.py?\n2) Why both return number of stars while number of watchers is much different in reality for a repo ? (checked on resume/resume.github.com/)\n\nregards,\nOs.J.\n","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDQ4NTU1MDEz","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"Hello, sorry for the unusually long response time!\n\n1) They are the same. Note that this is not really related to PyGithub but simply exposes GitHub's attributes. I kind of remember that at first, there was a `watchers` attribute. Then GitHub introduced the xxx_count naming convention and doubled a few `xxx` attributes with a `xxx_count` attribute.\n2) This is also an historical reason on GitHub: https://developer.github.com/v3/activity/watching/#watching-vs-starring\n\nI don't know any repository attribute giving the number of watchers.\n","createdAt":"2014-07-10T01:15:37Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/253#issuecomment-48555013","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDUxMDEyMDQ5","author":{"login":"oskar-j"},"authorAssociation":"NONE","body":"Ok, thanks.\n\nI think it is possible to get a proper `watchers count` through iterating the Repository.get_subscribers() and counting the number of elements.\n\nB.R.\n","createdAt":"2014-08-04T02:24:09Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/253#issuecomment-51012049","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDUxMTQ2ODE0","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"You can totally do that. Just be aware that it will call GitHub many times until reaches the [last page](http://jacquev6.github.io/PyGithub/v1/utilities.html#pagination). You might want to set the per_page parameter of the [Github constructor](http://jacquev6.github.io/PyGithub/v1/github.html#github.MainClass.Github).\n","createdAt":"2014-08-05T03:47:10Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/253#issuecomment-51146814","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM1Njk3OTAwNg==","author":{"login":"X-ration"},"authorAssociation":"NONE","body":"Hello, I just use pygithub to get repositories' statistics, but I found that result of repo.stargazers_count and repo.watchers_count are totally same, so weird... And I wanna know how to solve it.\r\n![default](https://user-images.githubusercontent.com/18644614/34834796-ec827562-f72d-11e7-84da-468855b3c7fa.png)\r\n![2](https://user-images.githubusercontent.com/18644614/34834890-39f2ba46-f72e-11e7-81fb-7615f996ae99.png)\r\n","createdAt":"2018-01-11T16:19:21Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/253#issuecomment-356979006","viewerDidAuthor":false}],"createdAt":"2014-06-17T14:22:05Z","number":253,"state":"CLOSED","title":"Problems with watchers_count property","url":"https://github.com/PyGithub/PyGithub/issues/253"},{"author":{"id":"MDQ6VXNlcjQ2MDI4MzA=","is_bot":false,"login":"oskar-j","name":"Oskar Jarczyk"},"body":"Hi,\n\nis it possible to change GitHub API connection options (e.g. login/pass, token, client_id etc) for instance objects of PyGithub classes, like Repository, User? Let's say I have a an instance of Repository as a result of get_repo(key), but because of quota depletion I want to modify connection to GitHub API ad-hoc and call from that same Repository object get_contributors() or make some other action..\nWould such feature be accepted in future versions if me or sb implement it? (yet didnt made enough research on code, maybe its impossible with current architecture).\n\nBest Regards,\nOs.J.\n","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDQ2MjY4MjAx","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"Hi,\n\nI see two ways to do this (`r1` is the repo retrieved with exhausted credentials, `g2` is a new instance of `github.Github` with new credentials):\n- guaranteed: you can retrieve the repository again with another instance of the Github class: `r2 = g2.get_repo(r1.full_name)`\n- not tried but should work: you can \"clone\" the repo from its raw data: `r2 = g2.create_from_raw_data(github.Repository.Repository, r1.raw_data, r1.raw_headers)`\n\nPlease keep me informed of your progress!\n","createdAt":"2014-06-17T05:17:58Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/252#issuecomment-46268201","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQ4NTU0MTE5","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"Closing this issue has it has been inactive for a while. Do not hesitate to re-open if needed.\n","createdAt":"2014-07-10T00:58:58Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/252#issuecomment-48554119","viewerDidAuthor":false}],"createdAt":"2014-06-15T00:16:25Z","number":252,"state":"CLOSED","title":"change api-connectivity options for PyGithub objects","url":"https://github.com/PyGithub/PyGithub/issues/252"},{"author":{"id":"MDQ6VXNlcjEzNTU1MjI=","is_bot":false,"login":"guptayuvraj","name":""},"body":"I wanted to know what will be the python script to get details of githhub users(such as id, location, etc....) between two dates using PyGitHub api. \n","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDQ1MjQwOTg5","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"I would try to use [`Github.search_users`](http://jacquev6.github.io/PyGithub/v1/github.html#github.MainClass.Github.search_users) with the filter `created` as described [here](https://help.github.com/articles/searching-users#created).\n\nI've never done that, and I don't have time to test right now. Please keep me informed of your results. I'll have more time in a few days.\n","createdAt":"2014-06-05T16:19:46Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/251#issuecomment-45240989","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQ1MzAwNjAx","author":{"login":"akki12"},"authorAssociation":"NONE","body":"Hey Vincent,\n\nI'm working with Yuvraj. We are actually implementing the PyGithub v2 API. It has not yet implemented the search for users. Also we want to use updated_at field instead of created_at.\n","createdAt":"2014-06-06T03:52:00Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/251#issuecomment-45300601","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQ1NTcxNDkz","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"Yes, v2 is still in a very early stage.\n\nI actually don't know how to achieve what you are trying to do. If you find in the [doc of the API](https://developer.github.com/v3/) a way to do what you want, I'll be glad to help you with PyGithub itself.\n","createdAt":"2014-06-10T03:58:34Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/251#issuecomment-45571493","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQ4NTU0MDM4","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"Closing this issue as it has been inactive for a while. Do not hesitate to re-open if needed.\n","createdAt":"2014-07-10T00:57:32Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/251#issuecomment-48554038","viewerDidAuthor":false}],"createdAt":"2014-06-05T03:02:56Z","number":251,"state":"CLOSED","title":"Get githhub users between 2 dates","url":"https://github.com/PyGithub/PyGithub/issues/251"},{"author":{"id":"MDQ6VXNlcjY2Mjg2NzU=","is_bot":false,"login":"mkohli","name":""},"body":"I am not able to retrieve download_count for download object.\nI have tried all possible ways to use Repository.get_download(id) method but it is not clear which id this method takes and how to get that id.\nIf i call the repository.get_downloads() method as shown below then I get a  traceback error and I am not able to find out where I am going wrong:\n    for repo in Github().search_repositories(\"test\"):\n        repo_has_download=repo.has_downloads\n        if repo_has_download==True:\n            for download in repo.get_downloads():\n                download_count= download.download_count()\n                print download_count\n\n```\n    else:\n        repo_download_count=0\n        print repo_download_count\n```\n\nthe error is as shown below:\nTraceback (most recent call last):\n      File \"D:\\2014-Jason Beach\\python\\Final Python script\\getting_downloads.py\", line 12, in <module>\n        for download in repo.get_downloads():\n      File \"C:\\Python27\\lib\\site-packages\\github\\PaginatedList.py\", line 48, in **iter**\n        newElements = self._grow()\n      File \"C:\\Python27\\lib\\site-packages\\github\\PaginatedList.py\", line 60, in _grow\n        newElements = self._fetchNextPage()\n      File \"C:\\Python27\\lib\\site-packages\\github\\PaginatedList.py\", line 158, in _fetchNextPage\n        parameters=self.__nextParams\n      File \"C:\\Python27\\lib\\site-packages\\github\\Requester.py\", line 169, in requestJsonAndCheck\n        return self.__check(*self.requestJson(verb, url, parameters, headers, input, cnx))\n      File \"C:\\Python27\\lib\\site-packages\\github\\Requester.py\", line 177, in __check\n        raise self.__createException(status, responseHeaders, output)\n    GithubException: 403 {u'documentation_url': u'https://developer.github.com/v3/#rate-limiting', u'message': u\"API rate limit exceeded for 197.226.157.45. (But here's the good news: Authenticated requests get a higher rate limit. Check out the documentation for more details.)\"}\n    >>> \n","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDQ0OTExMjU4","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"Hello,\n\nthere are a few things wrong here.\n- The [downloads API is deprecated](https://developer.github.com/v3/repos/downloads/#downloads-api-is-deprecated) but I assume you really want to use it anyway.\n- The exception you see is about [rate limiting](https://developer.github.com/v3/#rate-limiting). You'll have to use a [Github constructor](http://jacquev6.github.io/PyGithub/v1/github.html) with authentication, the simplest being passing your login and password.\n- [Download.download_count](http://jacquev6.github.io/PyGithub/v1/github_objects/Download.html#github.Download.Download.download_count) is not a method and shall not be called.\n\nHere is what I would do. I don't have time to actually test it now.\n\n```\ng = Github(\"jacquev6\", \"my password\")\nfor r in g.search_repositories(\"test\"):\n    if r.has_downloads:\n        for d in r.get_downloads():\n            print d.download_count\n```\n\nI hope it helps.\n","createdAt":"2014-06-03T01:38:09Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/250#issuecomment-44911258","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQ0OTIwNTk4","author":{"login":"mkohli"},"authorAssociation":"NONE","body":"yes, yes, yes it helped thank you. One more small doubt regarding repository.get_download(id) method. What is id? is it the id of the download or repo?\nthank you\n","createdAt":"2014-06-03T05:10:34Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/250#issuecomment-44920598","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQ0OTI0NDE2","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"It's the id of the download. In my previous code, you would access it by [`d.id`](http://jacquev6.github.io/PyGithub/v1/github_objects/Download.html#github.Download.Download.id).\n\nThis is true globally in PyGithub if a function is named get_something(id), the id is the thing's id.\n","createdAt":"2014-06-03T06:26:45Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/250#issuecomment-44924416","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQ1NTcxNTI0","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"I'm closing this issue now, but do not hesitate to re-open it if needed.\n","createdAt":"2014-06-10T03:59:26Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/250#issuecomment-45571524","viewerDidAuthor":false}],"createdAt":"2014-06-01T18:57:52Z","number":250,"state":"CLOSED","title":"unable to retrieve download_count","url":"https://github.com/PyGithub/PyGithub/issues/250"},{"author":{"id":"MDQ6VXNlcjQ3NjE4Ng==","is_bot":false,"login":"lurch","name":"Andrew Scheller"},"body":"http://jacquev6.github.io/PyGithub/v1/introduction.html contains a couple of links to http://jacquev6.github.io/PyGithub/v1/todointernallink in the \"What next?\" section which don't work, which isn't very newcomer-friendly!\n","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDQ0Mjk0MDI5","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"Indeed! Thanks for reporting.\n\nThat's strange, I think those links used to be correct. I must have broken something in the automatic generation of the doc. FYI, the links are supposed to point to http://jacquev6.github.io/PyGithub/v1/apis.html and http://jacquev6.github.io/PyGithub/v1/github_objects.html\n\nAnyway, I'll try to fix this soon.\n","createdAt":"2014-05-27T15:44:32Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/248#issuecomment-44294029","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQ0NDA2OTI2","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"Fixed. Thanks!\n","createdAt":"2014-05-28T13:36:59Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/248#issuecomment-44406926","viewerDidAuthor":false}],"createdAt":"2014-05-27T08:21:33Z","number":248,"state":"CLOSED","title":"Broken links in documentation","url":"https://github.com/PyGithub/PyGithub/issues/248"},{"author":{"id":"MDQ6VXNlcjU1MjgxNw==","is_bot":false,"login":"tylertreat","name":"Tyler Treat"},"body":"I had an exchange with James Dennes from GitHub regarding this. My original question was something to the effect of \"is there a way to get a repo by its id rather than its name?\" The motivation for this is, while a repo's name can change, its id cannot.\n\nTo summarize what James said:\n\n> We haven't documented this yet, however you've welcome to use repository endpoints like this:\n> \n> /repositories/:id\n> \n> For example, these two curls produce identical results:\n> \n> curl https://api.github.com/repos/github/linguist\n> curl https://api.github.com/repositories/1725199\n> \n> These should eventually be documented, however I can't promise exactly when that will be. However, you can definitely rely on these endpoints.\n\nThis also works with private repos, provided an access token is included in the request and the user has sufficient permissions.\n\nAs far as I can tell, this functionality is not provided in PyGithub. James indicated that this will eventually be documented and is a stable endpoint, so I think it should be included in the library.\n\nExamples of how I think this should work:\n\n``` python\ngh = github.Github('my_access_token')\nrepo = gh.get_user().get_repo(1234567)\nrepo = gh.get_repo(1234567)\n```\n\nThe only issue I see with this is that `get_repo` would be delegating to one of two endpoints, `/repos/:owner/:repo` or `/repositories/:id`, depending on whether a name or an id is passed in. The other option would be to have an explicit `get_repo_by_id` which seems less ideal.\n\nI'm hoping to work on a PR when I get a chance this week.\n\nThoughts, @jacquev6?\n","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDQxMDY3MDcx","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"This sounds nice! Thank you for investigating this.\n\nAdding a switch in [`Github.get_repo`](https://github.com/jacquev6/PyGithub/blob/master/github/MainClass.py#L191) seems the way to go. `get_repo_by_id` would be ~~ugly~~ less ideal indeed.\n\nI wouldn't modify [`NamedUser.get_repo`](https://github.com/jacquev6/PyGithub/blob/master/github/NamedUser.py#L440) or [`AuthenticatedUser.get_repo`](https://github.com/jacquev6/PyGithub/blob/master/github/AuthenticatedUser.py#L836), because when getting a repo by id, you don't need the user's login, and you can't verify he actually owns it. In other words, I think getting a repo by id is a global operation and belongs to the main class.\n","createdAt":"2014-04-22T17:12:02Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/245#issuecomment-41067071","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQxMTMyNjU3","author":{"login":"bilderbuchi"},"authorAssociation":"NONE","body":"btw, where do you typically get the repository id from? I couldn't see anything in the web interface.\n","createdAt":"2014-04-23T07:35:39Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/245#issuecomment-41132657","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQxMTQwMzY3","author":{"login":""},"authorAssociation":"NONE","body":"@bilderbuchi I was able to find the repository id by using the api. From the curl command below it looks like this repo's id is `3544490`.\n\n``` sh\n$ curl https://api.github.com/repos/jacquev6/PyGithub\n```\n\n``` json\n{\n  \"id\": 3544490,\n  \"name\": \"PyGithub\",\n  \"full_name\": \"jacquev6/PyGithub\",\n  \"owner\": {\n    \"login\": \"jacquev6\",\n    \"id\": 327146,\n    ...\n}\n```\n","createdAt":"2014-04-23T09:14:58Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/245#issuecomment-41140367","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQxMTQxMDAy","author":{"login":"bilderbuchi"},"authorAssociation":"NONE","body":"Ah I see, thanks. I also just realized that you can already get the id with PyGithub, too.\n","createdAt":"2014-04-23T09:22:36Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/245#issuecomment-41141002","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQxMTcyOTQ0","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"Yes, it's available in PyGithub through [`Repository.id`](http://jacquev6.github.io/PyGithub/v1/github_objects/Repository.html#github.Repository.Repository.id)\n","createdAt":"2014-04-23T15:11:44Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/245#issuecomment-41172944","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQyMTQxOTQ1","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"Just merged #246.\n","createdAt":"2014-05-04T19:19:13Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/245#issuecomment-42141945","viewerDidAuthor":false}],"createdAt":"2014-04-22T05:55:28Z","number":245,"state":"CLOSED","title":"Implement getting repo by id","url":"https://github.com/PyGithub/PyGithub/issues/245"},{"author":{"id":"MDQ6VXNlcjEzNDczNzE=","is_bot":false,"login":"michie1","name":""},"body":"```\nimport PyGithub\ng = PyGithub.BlockingBuilder().Login('login', 'password').Build()\nu = g.get_authenticated_user()\n```\n\n```\nTraceback (most recent call last):\n  File \"follow.py\", line 3, in <module>\n    u = g.get_authenticated_user()\n  File \"/usr/local/lib/python2.7/dist-packages/PyGithub-2.0.0_alpha.1-py2.7.egg/PyGithub/Blocking/Github.py\", line 186, in get_authenticated_user\n    r = self.Session._request(\"GET\", url)\n  File \"/usr/local/lib/python2.7/dist-packages/PyGithub-2.0.0_alpha.1-py2.7.egg/PyGithub/Blocking/Session.py\", line 88, in _request\n    request = requests.Request(verb, url, params=urlArguments, data=data, headers=headers)\nTypeError: __init__() got multiple values for keyword argument 'headers'\n```\n","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDQwOTAzNjAy","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"Thank you for reporting this! Obviously \"it works on my machine\", so I'll need more details about your configuration.\n\nCan you please tell me which version of \"[requests](https://pypi.python.org/pypi/requests)\" is on your system? `python  -c \"import requests; print requests.__version__\"`\n\nI've tried your example with \"requests\" v2.0.0 and v2.2.1; it works. With versions 1.x, it fails differently because there was no `Session.prepare_request` method, so this is a weird issue.\n\nI would also be interested in the declaration of `requests.Request.__init__` on your system (only the parameters). You should find it in /usr/local/lib/python2.7/dist-packages/requests-something/models.py\" (file path not exact). It should look like https://github.com/kennethreitz/requests/blob/master/requests/models.py#L204, but that's the next thing to verify.\n","createdAt":"2014-04-20T20:07:20Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/244#issuecomment-40903602","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQwOTE3ODI0","author":{"login":"michie1"},"authorAssociation":"NONE","body":"I imagined this was not enough information, but didn't know what to post. \n\n```\npython -c \"import requests; print requests.__version__\"\n0.12.1\n```\n\nI thought I tried to update requests yesterday, but of course after making an issue and updating again it works.  (0.12.1 was the previous version.)\n\nThanks!\n","createdAt":"2014-04-21T05:53:12Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/244#issuecomment-40917824","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQwOTE4NzIy","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"Great! I'm glad your problem is solved. I'll keep this issue open until I add version specifications to requirements.txt and `install_requires` in setup.py.\n","createdAt":"2014-04-21T06:22:54Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/244#issuecomment-40918722","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDExNTMwMzI2OA==","author":{"login":"jzelinskie"},"authorAssociation":"CONTRIBUTOR","body":"v2 is dead, i'll reopen if you can reproduce on master\n","createdAt":"2015-06-25T15:57:05Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/244#issuecomment-115303268","viewerDidAuthor":false}],"createdAt":"2014-04-20T19:22:50Z","number":244,"state":"CLOSED","title":"got multiple values for keyword argument 'headers'","url":"https://github.com/PyGithub/PyGithub/issues/244"},{"author":{"is_bot":true,"login":"app/"},"body":"how do i install this program on Linux?\n","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDQwNzI3MzE0","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"PyGithub includes a standard setup.py file and is on [PyPi](https://pypi.python.org/pypi/PyGithub) so you can [install it](http://jacquev6.github.io/PyGithub/v1/introduction.html#download-and-install) as any other Python package, using [`pip install PyGithub`](http://pip.readthedocs.org/en/latest/index.html), `easy_install PyGithub` or downloading/cloning its source code and running `./setup.py install`, depending on your preferred method and what's available on your system. Note that this is not specific to Linux. What's specific to Linux is that you might need to `sudo`, depending on your system settings.\n","createdAt":"2014-04-17T15:31:28Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/243#issuecomment-40727314","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQwNzM0MTk0","author":{"login":""},"authorAssociation":"NONE","body":"by the way can one use juju to push commits to github?\n","createdAt":"2014-04-17T16:32:42Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/243#issuecomment-40734194","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQwNzM1MTI1","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"I have absolutely no idea what you are talking about. What is \"juju\", how is it related to PyGithub? Can you provide more context?\n","createdAt":"2014-04-17T16:41:25Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/243#issuecomment-40735125","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQwODIyOTM5","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"Closing this issue as it seems the initial question is solved, and the second question is not related to PyGithub. Do not hesitate to re-open this one or open a new one if needed.\n","createdAt":"2014-04-18T16:39:08Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/243#issuecomment-40822939","viewerDidAuthor":false}],"createdAt":"2014-04-17T14:26:35Z","number":243,"state":"CLOSED","title":"Linux compatability","url":"https://github.com/PyGithub/PyGithub/issues/243"},{"author":{"id":"MDQ6VXNlcjQ5Njc0ODE=","is_bot":false,"login":"cwarren-mw","name":"Chris Warren"},"body":"These lines cause errors in Python 3:\n\nhttps://github.com/jacquev6/PyGithub/blob/develop_v2/PyGithub/Blocking/_receive.py#L68\n\n```\n            except _ConversionException, e:\n```\n\nhttps://github.com/jacquev6/PyGithub/blob/develop_v2/PyGithub/Blocking/_receive.py#L120\n\n```\n            except (ValueError, TypeError), e:\n```\n\nIf I'm reading http://python3porting.com/noconv.html correctly, they could be written like this, which would work for Python 2.6 and later:\n\n```\n            except _ConversionException as e:\n            except (ValueError, TypeError) as e:\n```\n","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDQwNjI0MTEy","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"So you're trying to use PyGithub with Python 3 directly from the source code without using 2to3 first. \n\nUntil now, the \"correct\" (understand \"simple\" and \"supported\") way to use PyGithub with Python 3 is to run \"python3 setup.py install\" and then use the installed version, because the [use2to3](https://github.com/jacquev6/PyGithub/blob/develop_v2/setup.py#L51) setuptools option will fix the code for you. If you really want to work in the source tree, you can run [./manage/2to3.sh](https://github.com/jacquev6/PyGithub/blob/develop_v2/manage/2to3.sh) first.\n\nI'm not sure writing code compatible with both python 2 and 3 is worth it; I will keep this issue open until I've more time to think about it, but things like \"iteritems\" on dictionaries becoming \"items\", or name changes for imports may make it cumbersome, while the use2to3=True has proved to be reliable and easy to manage in v1 of PyGithub.\n\nAnd by the way, Travis verifies PyGithub works with Python 3: https://travis-ci.org/jacquev6/PyGithub/builds/21856204\n","createdAt":"2014-04-16T16:59:09Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/242#issuecomment-40624112","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQ1MjQ0NDc4","author":{"login":"nilp0inter"},"authorAssociation":"NONE","body":"I faced the same problems with python3 following the installation guide http://jacquev6.github.io/PyGithub/v2/introduction.html#installation .\n\nThe problem is that at the end of the installation process we are inside the source tree and the execution of  `python -c \"import PyGithub\"` use the source tree version instead of the installed one.\n\nAdding `cd ..` before `python -c \"import PyGithub\"` in the guide would be helpful for beginners.\n\nThank you.\n","createdAt":"2014-06-05T16:48:04Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/242#issuecomment-45244478","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQ1NTcxNTcx","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"That's very true, thank you! I will make this change soon.\n","createdAt":"2014-06-10T04:00:37Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/242#issuecomment-45571571","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQ4ODQ4NDI4","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"Closing this issue now: I'll continue to use the use2to3 option and not try to write code that can be used as-is with the two major versions of Python.\n","createdAt":"2014-07-13T18:34:32Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/242#issuecomment-48848428","viewerDidAuthor":false}],"createdAt":"2014-04-16T12:16:08Z","number":242,"state":"CLOSED","title":"Python 3 compatibility","url":"https://github.com/PyGithub/PyGithub/issues/242"},{"author":{"id":"MDQ6VXNlcjEzMjM1NQ==","is_bot":false,"login":"singingwolfboy","name":"David Baumgold"},"body":"I noticed that the module names in version 2 do not conform to [PEP8](http://legacy.python.org/dev/peps/pep-0008/#package-and-module-names): \"Modules should have short, _all-lowercase_ names.\" The files in the `develop_v2` branch are camel-cased. Can the filenames be changed to lowercase?\n","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDM4NjQyNjcx","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"That's a good point. I was relying on [the pep8 tool](https://pypi.python.org/pypi/pep8), but obviously it's not enough. Thanks!\n\nI'll have to make sure it will coexist with [the naming conventions rationale](http://jacquev6.github.io/PyGithub/v2/rationale.html#naming-conventions) but I don't think it will be an issue. It may even be better to name classes representing GitHub objects in lower case... But it would fail pep8... Well I have to thing about it! :-D\n","createdAt":"2014-03-26T01:56:23Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/241#issuecomment-38642671","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDExNTMwMzkzMA==","author":{"login":"jzelinskie"},"authorAssociation":"CONTRIBUTOR","body":"v2 is dead\n","createdAt":"2015-06-25T15:59:46Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/241#issuecomment-115303930","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs5glHkr","author":{"login":"Borda"},"authorAssociation":"CONTRIBUTOR","body":"@jacquev6 @s-t-e-v-e-n-k Can we please still not use camel cases for module names? It is very confusing, especially when the module name is identical to the class inside, so while you import it, you never know if it is class or module :(","createdAt":"2023-07-04T14:24:11Z","includesCreatedEdit":true,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/241#issuecomment-1620343083","viewerDidAuthor":false}],"createdAt":"2014-03-25T19:56:59Z","number":241,"state":"CLOSED","title":"v2 module names do not conform to PEP8","url":"https://github.com/PyGithub/PyGithub/issues/241"},{"author":{"id":"MDQ6VXNlcjEyNzkwNA==","is_bot":false,"login":"krusynth","name":"Bill Hunt"},"body":"Since this [isn't a required parameter](http://developer.github.com/v3/repos/commits/), it shouldn't be specified with a default value.  Currently, this is limiting the commits returned to just the logged-in user.  \n\nI believe that removing these lines resolves the issue:\n\nhttps://github.com/jacquev6/PyGithub/blob/master/github/Repository.py#L1154-L1155 \n","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDM4MTczMjU5","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"I'm not sure I understand. On line 1151, we first check if author is 'NotSet' (its default value) and in that case we don't add it to the parameters sent to GitHub. The branch you suggest to remove allows author to be a simple string and not a XxxUser.\n\nCould you please give me an example of how you call Repository.get_commits and a commit you believe should be returned?\n","createdAt":"2014-03-20T14:30:25Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/240#issuecomment-38173259","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM4MTc0Njgz","author":{"login":"krusynth"},"authorAssociation":"NONE","body":"Perhaps it's another issue and I've mischaracterized it?  \n\nGiven this sample:\n\n```\nfrom github import Github\nfrom datetime import datetime\n\ng = Github(\"user\", \"pass\")\n\nsince = datetime(2014, 1, 1)\n\nfor org in g.get_user().get_orgs():\n    print org.name\n\n    for repo in org.get_repos():\n\n        commit = ''\n        commits = repo.get_commits(since=since).get_page(0)\n        if commits:\n            commit = commits[0].sha\n        print u'|-  {0} ({1})'.format(repo.name, commit)\n```\n\nMy expected output would be a sha for every repo, since each should have at least one commit.  But for many, I'm not receiving a sha.  Perhaps I've missed something obvious?\n","createdAt":"2014-03-20T14:41:43Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/240#issuecomment-38174683","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM4MTc1OTQ3","author":{"login":"krusynth"},"authorAssociation":"NONE","body":"Disregard, think I was doing something incredibly dumb.  Sorry for wasting your time!\n","createdAt":"2014-03-20T14:51:11Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/240#issuecomment-38175947","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM4MTgzNTg5","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"Well, I'm glad you solved your problem, because I see nothing wrong in the code sample you provided... I assume your \"incredibly dumb\" thing is somewhere else.\n\nHave a nice day!\n","createdAt":"2014-03-20T15:47:30Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/240#issuecomment-38183589","viewerDidAuthor":false}],"createdAt":"2014-03-20T13:57:52Z","number":240,"state":"CLOSED","title":"Repository.get_commits should not default to filter the author","url":"https://github.com/PyGithub/PyGithub/issues/240"},{"author":{"id":"MDQ6VXNlcjgzMzIz","is_bot":false,"login":"cro","name":"C. R. Oldham"},"body":"Greetings,\n\nWhat's the correct way to create an Event object via Github webhook?  Using a very simple bottle.py-based server you would think you could do\n\n```\nfrom bottle import route, run, template, request, response\nimport github\nimport json\n\n@route(\"/\", method='POST')\ndef index():\n    e = github.Event.Event(request.json)\n\nrun(host='xxx.xxx.xxx.xxx', port=8080, debug=True)\n```\n\nbut in looking at the code that obviously won't work.  Is there a parsing method somewhere that I could use?\n","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDM3OTc4NzA4","author":{"login":"cro"},"authorAssociation":"CONTRIBUTOR","body":"_read the source, Luke!_\n\n```\n    g = github.Github()\n    i = g.create_from_raw_data(github.IssueEvent.IssueEvent, request.json[0])\n```\n","createdAt":"2014-03-18T19:44:00Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/239#issuecomment-37978708","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM4MDIwODM3","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"Well, I'm glad you figured it out! Actually your solution looks pretty good given I absolutely never considered that use-case.\n","createdAt":"2014-03-19T06:11:34Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/239#issuecomment-38020837","viewerDidAuthor":false}],"createdAt":"2014-03-18T15:27:09Z","number":239,"state":"CLOSED","title":"Creating Event object via GitHub web hook","url":"https://github.com/PyGithub/PyGithub/issues/239"},{"author":{"id":"MDQ6VXNlcjQxMjA2MQ==","is_bot":false,"login":"LeonardoGentile","name":""},"body":"I've followed the [instructions](http://jacquev6.github.io/PyGithub/v2/introduction.html) for installing the version 2 alpha. According to the introduction guide the module should be imported with `import PyGithub` but this cause an `No module named PyGithub` error.\n\nThis works following the [introduction guide of the version 1](http://jacquev6.github.io/PyGithub/v1/introduction.html): `from github import Github` in this case the import seems to work\n","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDM3NDEzMDE2","author":{"login":""},"authorAssociation":"NONE","body":"- v1: https://github.com/jacquev6/PyGithub/blob/master/doc/introduction.rst.\n- v2: https://github.com/jacquev6/PyGithub/blob/develop_v2/doc/introduction.rst\n","createdAt":"2014-03-12T14:18:22Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/238#issuecomment-37413016","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM3NDE3NDU0","author":{"login":"LeonardoGentile"},"authorAssociation":"NONE","body":"Ok, for installing the Version 2 from github it's necessary to switch to the `develop_v2` branch, then run the setup script. I think you should make this point more clear.\n\nAt the end of this process I could install the V2 version but I guess there is some dependencies missing: \n\n```\n File \"PyGithub/Blocking/Github.py\", line 12, in <module>\n    import uritemplate\nImportError: No module named uritemplate\n```\n","createdAt":"2014-03-12T14:53:28Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/238#issuecomment-37417454","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM3NDE4NDMz","author":{"login":"LeonardoGentile"},"authorAssociation":"NONE","body":"OK, solved installing the [requirements](https://github.com/jacquev6/PyGithub/blob/develop_v2/requirements.txt), I tough they were automatically solved by the installation script\n","createdAt":"2014-03-12T15:01:21Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/238#issuecomment-37418433","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM3NDI3MDA2","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"Thank you @LeonardoGentile for your perseverance and @cameronbwhite for your help! I'll modify the doc to make it more clear.\n","createdAt":"2014-03-12T16:05:51Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/238#issuecomment-37427006","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM4MzU0Njgz","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"http://jacquev6.github.io/PyGithub/v2/introduction.html#installation\n","createdAt":"2014-03-22T15:38:58Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/238#issuecomment-38354683","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDk3MzUxOTQ5","author":{"login":"CTLocalGovTeam"},"authorAssociation":"NONE","body":"I just did a pip install PyGithub and get a message \"Unable to import PyGithub\". I am using Python 2.7.8.\nWhen i do a pip list, i see PyGithub (1.25.2) is installed.\nThe link to https://github.com/PyGithub/PyGithub/tree/develop_v2 returns a 404.\n\n**Update:**\nWas able to successfully run by following these steps:\n1. Switched to tag and downloaded PyGithub-2.0.0-alpha.4.zip\n2. Extracted the archive and did a \"pip install -r requirements.txt\"\n3. Then ran \"setup.py install\"\n4. Now everything works fine and i am able to import PyGithub!\n","createdAt":"2015-04-29T08:32:43Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/238#issuecomment-97351949","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDk3NDY1Nzkz","author":{"login":"jzelinskie"},"authorAssociation":"CONTRIBUTOR","body":"Just as a heads up, I'm pretty sure the 2.0 branch isn't going to be maintained any longer.\n","createdAt":"2015-04-29T15:19:57Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/238#issuecomment-97465793","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDk3NDY4OTQz","author":{"login":"nhomar"},"authorAssociation":"CONTRIBUTOR","body":"@jzelinskie To abvoid missunderstanding, shouldn't be better simply delete the unused branches?\n","createdAt":"2015-04-29T15:23:51Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/238#issuecomment-97468943","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDk3NDczNTcx","author":{"login":"jzelinskie"},"authorAssociation":"CONTRIBUTOR","body":"@nhomar I kinda don't want to see all the work just disappear. I think @jacquev6 should put it into a repository under his namespace, so he could maybe continue to work on it at some point in the future. However, I do think we need to merge everything else into one master branch and work from there to make a stable release.\n","createdAt":"2015-04-29T15:36:50Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/238#issuecomment-97473571","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDk3NDc1MjM4","author":{"login":"nhomar"},"authorAssociation":"CONTRIBUTOR","body":"AFAICU in that develop branch was a simply PoC which will not be mantained anymore but I do not know if I understand well, let's wait for @jacquev6 feedback around this.\n\nIf we will go to evolve I think the correct approach should be start from the stable ones (which honestly I think can be higly improved, but it do not need to be totally rewritten which was the objective of the actual develpment branch) that's my point, what we can do also is create an organization called PyGithub-dev or somthing and move it there to avoid confusion that's another option to save work to @jacquev6 and not lose anything which is what @jzelinskie everybody wins.\n","createdAt":"2015-04-29T15:44:05Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/238#issuecomment-97475238","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDk3NDkxODk1","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"@nhomar You're right. At some point I said it would be more than a POC, but it didn't go far. @jzelinskie Don't worry I still have it somewhere safe. Not public though because I don't think it's worth it in its current state.\n\nThat's why I deleted the branch from the main repo before transferring it to the PyGithub org.\n","createdAt":"2015-04-29T16:31:51Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/238#issuecomment-97491895","viewerDidAuthor":false}],"createdAt":"2014-03-12T13:46:29Z","number":238,"state":"CLOSED","title":"import PyGithub does not work","url":"https://github.com/PyGithub/PyGithub/issues/238"},{"author":{"id":"MDQ6VXNlcjgzMzIz","is_bot":false,"login":"cro","name":"C. R. Oldham"},"body":"I was very excited to see issue search become a part of PyGithub.  Unfortunately I can't seem to make it work.  If I call the following via curl:\n\n```\ncurl -i --user '***:***' 'https://api.github.com/search/issues?l=&q=updated:>2014-03-04T18:28:11Z+repo:saltstack/salt+type=Issues'\n```\n\nI get 5 issues back.  If I try the same query via PyGithub:\n\n```\nfrom github import Github\nfrom github import enable_console_debug_logging\n\ng = Github('***','***')\nenable_console_debug_logging()\n\nfor i in g.search_issues('type:Issues+updated:>2014-03-04T18:28:11Z+repo:saltstack/salt'):\n    print i.title\n```\n\nor any of a number of other permutations of the search criteria like `g.search_issues('',  repo='saltstack/salt-api', type='Issues', updated='>2014-03-04T18:28:11Z')` I never get anything back.  I did notice in the debug log\n\n```\nGET https://api.github.com/search/issues?q=type%253AIssues%252Bupdated%253A%253E2014-03-04T18%25\n3A28%253A11Z%252Brepo%253Asaltstack%2Fsalt {'Authorization': 'Basic (login and password removed)\n', 'User-Agent': 'PyGithub/Python'} null ==> 200 {'status': '200 OK', 'x-ratelimit-remaining': '\n29', 'x-github-media-type': 'github.beta; format=json', 'x-content-type-options': 'nosniff', 'ac\ncess-control-expose-headers': 'ETag, Link, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remainin\ng, X-RateLimit-Reset, X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Poll-Interval', 'x-github-reque\nst-id': 'CCE495D9:1E89:2337E0D:5317D580', 'cache-control': 'no-cache', 'vary': 'Accept-Encoding'\n, 'content-length': '28', 'server': 'GitHub.com', 'x-ratelimit-limit': '30', 'access-control-all\now-credentials': 'true', 'date': 'Thu, 06 Mar 2014 01:55:12 GMT', 'access-control-allow-origin':\n '*', 'content-type': 'application/json; charset=utf-8', 'x-ratelimit-reset': '1394070972'} {\"to\ntal_count\":0,\"items\":[]}\n```\n\nthe URL escaping seems weird, and if I pass that URL via curl, I get nothing back.  Is the library escaping too much?\n","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDM3NDI3NDQ0","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"Thank you for reporting this! I'll merge #237 next week-end.\n","createdAt":"2014-03-12T16:09:20Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/236#issuecomment-37427444","viewerDidAuthor":false}],"createdAt":"2014-03-06T02:00:59Z","number":236,"state":"CLOSED","title":"Issue search not working","url":"https://github.com/PyGithub/PyGithub/issues/236"},{"author":{"id":"MDQ6VXNlcjMyNzE0Ng==","is_bot":false,"login":"jacquev6","name":"Vincent Jacques"},"body":"","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDUzMTYyNDc2","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"http://jacquev6.github.io/PyGithub/v2/reference/bases.html#PyGithub.Blocking._builder.Builder.Enterprise\n","createdAt":"2014-08-23T19:11:20Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/235#issuecomment-53162476","viewerDidAuthor":false}],"createdAt":"2014-03-03T06:58:17Z","number":235,"state":"CLOSED","title":"Implement connection to Github Enterprise","url":"https://github.com/PyGithub/PyGithub/issues/235"},{"author":{"id":"MDQ6VXNlcjMyNzE0Ng==","is_bot":false,"login":"jacquev6","name":"Vincent Jacques"},"body":"http://developer.github.com/v3/repos/keys/ and http://developer.github.com/v3/users/keys/\n","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDExNTMwMzg5OA==","author":{"login":"jzelinskie"},"authorAssociation":"CONTRIBUTOR","body":"v2 is dead\n","createdAt":"2015-06-25T15:59:37Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/234#issuecomment-115303898","viewerDidAuthor":false}],"createdAt":"2014-03-03T06:40:17Z","number":234,"state":"CLOSED","title":"Implement the 'Public Keys' end-points","url":"https://github.com/PyGithub/PyGithub/issues/234"},{"author":{"id":"MDQ6VXNlcjMyNzE0Ng==","is_bot":false,"login":"jacquev6","name":"Vincent Jacques"},"body":"http://developer.github.com/v3/repos/contents/\n","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDM4NDA3NzI4","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"This is almost done, methods .edit and .delete need to accept a structured parameter for author and committer. Using GitCommit.Author could be nice.\n","createdAt":"2014-03-24T02:25:06Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/233#issuecomment-38407728","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDUzMTYyMzUx","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"Structured input will be handled in #270\n","createdAt":"2014-08-23T19:07:13Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/233#issuecomment-53162351","viewerDidAuthor":false}],"createdAt":"2014-03-03T05:28:20Z","number":233,"state":"CLOSED","title":"Implement the 'Repository Content' end-points","url":"https://github.com/PyGithub/PyGithub/issues/233"},{"author":{"id":"MDQ6VXNlcjMyNzE0Ng==","is_bot":false,"login":"jacquev6","name":"Vincent Jacques"},"body":"http://developer.github.com/v3/misc/\n","comments":[],"createdAt":"2014-03-03T05:24:52Z","number":232,"state":"CLOSED","title":"Implement the 'Misc' end-points (Emojis, Gitignore, etc.)","url":"https://github.com/PyGithub/PyGithub/issues/232"},{"author":{"id":"MDQ6VXNlcjMyNzE0Ng==","is_bot":false,"login":"jacquev6","name":"Vincent Jacques"},"body":"http://developer.github.com/v3/activity/ and sub-pages\n","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDExNTMwMzgxMw==","author":{"login":"jzelinskie"},"authorAssociation":"CONTRIBUTOR","body":"v2 is dead. most of this is done in v1, iirc\n","createdAt":"2015-06-25T15:59:25Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/231#issuecomment-115303813","viewerDidAuthor":false}],"createdAt":"2014-03-03T05:24:12Z","number":231,"state":"CLOSED","title":"Implement the 'Activity' and 'Events' end-points","url":"https://github.com/PyGithub/PyGithub/issues/231"},{"author":{"id":"MDQ6VXNlcjMyNzE0Ng==","is_bot":false,"login":"jacquev6","name":"Vincent Jacques"},"body":"http://developer.github.com/v3/search/\n","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDUzMTYyMzU2","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"Structured input will be handled in #270\n","createdAt":"2014-08-23T19:07:24Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/230#issuecomment-53162356","viewerDidAuthor":false}],"createdAt":"2014-03-03T05:22:57Z","number":230,"state":"CLOSED","title":"Implement the 'Search' end-points","url":"https://github.com/PyGithub/PyGithub/issues/230"},{"author":{"id":"MDQ6VXNlcjMyNzE0Ng==","is_bot":false,"login":"jacquev6","name":"Vincent Jacques"},"body":"http://developer.github.com/v3/git/\nhttps://developer.github.com/v3/repos/commits/\nhttps://developer.github.com/v3/repos/#list-tags\n","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDUzMTYyMzY0","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"Structured input will be handled in #270\n","createdAt":"2014-08-23T19:07:35Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/229#issuecomment-53162364","viewerDidAuthor":false}],"createdAt":"2014-03-03T05:22:06Z","number":229,"state":"CLOSED","title":"Implement the 'Git data' end-points","url":"https://github.com/PyGithub/PyGithub/issues/229"},{"author":{"id":"MDQ6VXNlcjMyNzE0Ng==","is_bot":false,"login":"jacquev6","name":"Vincent Jacques"},"body":"http://developer.github.com/v3/issues/ and http://developer.github.com/v3/pulls/ and sub-pages.\n","comments":[],"createdAt":"2014-03-03T05:19:53Z","number":228,"state":"CLOSED","title":"Implement the 'Issues' and 'Pull requests' end-points","url":"https://github.com/PyGithub/PyGithub/issues/228"},{"author":{"id":"MDQ6VXNlcjMyNzE0Ng==","is_bot":false,"login":"jacquev6","name":"Vincent Jacques"},"body":"http://developer.github.com/v3/gists/ and http://developer.github.com/v3/gists/comments/\n","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDQ4ODQ4NDc5","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"http://developer.github.com/v3/gists/ is implemented.\nhttp://developer.github.com/v3/gists/comments/ will be done in #259.\n","createdAt":"2014-07-13T18:36:42Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/227#issuecomment-48848479","viewerDidAuthor":false}],"createdAt":"2014-03-03T05:16:42Z","number":227,"state":"CLOSED","title":"Implement the 'Gists' end-points","url":"https://github.com/PyGithub/PyGithub/issues/227"},{"author":{"id":"MDQ6VXNlcjMyNzE0Ng==","is_bot":false,"login":"jacquev6","name":"Vincent Jacques"},"body":"","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDExNTMwMjYyOQ==","author":{"login":"jzelinskie"},"authorAssociation":"CONTRIBUTOR","body":"v2 is dead\n","createdAt":"2015-06-25T15:54:55Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/226#issuecomment-115302629","viewerDidAuthor":false}],"createdAt":"2014-03-03T01:28:36Z","number":226,"state":"CLOSED","title":"Support older Python 2.x versions","url":"https://github.com/PyGithub/PyGithub/issues/226"},{"author":{"id":"MDQ6VXNlcjMyNzE0Ng==","is_bot":false,"login":"jacquev6","name":"Vincent Jacques"},"body":"See https://github.com/jacquev6/PyGithubOAuthDemo/blob/master/PyGithubOAuthDemoProj/PyGithubOAuthDemoApp/views.py\n\nIt would be nice if PyGithub provided helpers to generate the URLs used in the OAuth flow.\n","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDExNTMwMjQwNQ==","author":{"login":"jzelinskie"},"authorAssociation":"CONTRIBUTOR","body":"v2 is dead\n","createdAt":"2015-06-25T15:54:25Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/225#issuecomment-115302405","viewerDidAuthor":false}],"createdAt":"2014-03-03T01:23:00Z","number":225,"state":"CLOSED","title":"Add OAuth helpers","url":"https://github.com/PyGithub/PyGithub/issues/225"},{"author":{"id":"MDQ6VXNlcjEzODc4MzQ=","is_bot":false,"login":"dfarr","name":"David Farr"},"body":"I noticed that when you create an issue you must pass a list of Label objects, however when you edit an issue you simply pass a list of strings.\n\nI would propose that both methods accept either a list of strings or a list of label objects. I can make a pull request to fix this issue, are there any other similar inconsistencies that can be cleaned up as well?\n","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDMyNzE4NTk0","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"Hello,\n\nI will be glad to  integrate your pull request. Ideally, both methods should accept Issues and strings and a mix of both. (This will be the case in PyGithub 2.0)\n\nBecause of the large number of operations in the API, it's difficult to list all those inconsistencies. (For version 2.0, I'm writing a formal description of the API and generating most of the code, so it will be easier)\n\nThanks!\n","createdAt":"2014-01-19T20:16:19Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/222#issuecomment-32718594","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM2NDYxOTc0","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"Cleaning-up issues\n","createdAt":"2014-03-02T18:35:47Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/222#issuecomment-36461974","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM2NDYyMjA1","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"Re-closing after accidental re-open by waffle.io\n","createdAt":"2014-03-02T18:43:01Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/222#issuecomment-36462205","viewerDidAuthor":false}],"createdAt":"2014-01-18T20:25:53Z","number":222,"state":"CLOSED","title":"Labels inconsistency in API","url":"https://github.com/PyGithub/PyGithub/issues/222"},{"author":{"is_bot":true,"login":"app/"},"body":"Below is my hacked together version to deal with two-factor authentication. Is there is a better way to use PyGithub to handle this or is this feature needed?\n\nBasically, you run this twice, The first time without code_2fa. If you get the Require2FAError then you run it again with code_2fa. the code_2fa is put into the header of the next authentication request.\n\n``` python\ndef request_token(\n        username, password, scopes, user_agent, code_2fa=None,\n        base_url=MainClass.DEFAULT_BASE_URL,\n        timeout=MainClass.DEFAULT_TIMEOUT,\n        client_id=None, client_secret=None,\n        per_page=MainClass.DEFAULT_PER_PAGE):\n\n    requester = Requester(username, password, base_url, timeout,\n            client_id, client_secret, user_agent, per_page)\n\n    if code_2fa:\n        request_header = {'x-github-otp': code_2fa}\n    else:\n        request_header = None\n\n    status, headers, data = requester.requestJson(\n            \"POST\", \"/authorizations\",\n            input={\"scopes\": scopes, \"note\": str(user_agent)},\n            headers=request_header)\n\n    try:\n        if status == 401 and re.match(r'.*required.*', headers['x-github-otp']):\n            raise Require2FAError()\n        else:\n            data = json.loads(data)\n            return Authorization(requester, headers, data, True)\n    except KeyError:\n        raise AuthenticationError()\n```\n","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDMwODgyODEw","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"Hello,\n\nI'm not familiar with two-factor authentication, but what you've written seems legit. I would love to give you a way to use [`AuthenticatedUser.create_authorization`](http://jacquev6.github.io/PyGithub/github_objects/AuthenticatedUser.html#github.AuthenticatedUser.AuthenticatedUser.create_authorization) to replace the `POST /authorizations` call, but you need to send this additional `x-github-otp` header so this won't be easy.\n\nI'll make sure to study two-factor authentication and include support for it in the version 2 of PyGithub.\n","createdAt":"2013-12-18T21:31:47Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/219#issuecomment-30882810","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDMwOTI0NTkw","author":{"login":""},"authorAssociation":"NONE","body":"I got something to work in https://github.com/jacquev6/PyGithub/pull/220\n","createdAt":"2013-12-19T12:22:29Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/219#issuecomment-30924590","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDMxMTU3NTI2","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"Re-opening the issue to handle that in version 2.\n","createdAt":"2013-12-24T04:05:05Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/219#issuecomment-31157526","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDMzNzIyNzE5","author":{"login":"cwarren-mw"},"authorAssociation":"NONE","body":"In somewhat-related news, they've added the ability to list organization members who have enabled two-factor authentication: http://developer.github.com/v3/orgs/members/#audit-two-factor-auth\n\n(This will be handy letting me know who needs to be gently reminded to set up their 2FA.)\n","createdAt":"2014-01-30T19:20:08Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/219#issuecomment-33722719","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM2MjU5MDEz","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"This is going to be in v2 (expect the first alpha this week-end), including the 2fa_disabled filter.\n","createdAt":"2014-02-27T16:16:50Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/219#issuecomment-36259013","viewerDidAuthor":false}],"createdAt":"2013-12-17T14:44:39Z","number":219,"state":"CLOSED","title":"Two-factor authentication","url":"https://github.com/PyGithub/PyGithub/issues/219"},{"author":{"id":"MDQ6VXNlcjMyNzE0Ng==","is_bot":false,"login":"jacquev6","name":"Vincent Jacques"},"body":"This issue is just a forum for discussions about v2\n","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDM2MjU4ODcx","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"Clean-up issues: I'll publish the first alpha of v2 this week-end.\n","createdAt":"2014-02-27T16:15:36Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/217#issuecomment-36258871","viewerDidAuthor":false}],"createdAt":"2013-12-16T01:59:32Z","number":217,"state":"CLOSED","title":"General discussion about v2","url":"https://github.com/PyGithub/PyGithub/issues/217"},{"author":{"id":"MDQ6VXNlcjQ5Njc0ODE=","is_bot":false,"login":"cwarren-mw","name":"Chris Warren"},"body":"Going by the documentation, I thought this would print out a list of all my repositories:\n\n```\ncnt = 0\nfor repo in g.get_user(\"manifoldsquid\").get_repos():\n    cnt += 1\n    print(str(cnt) + \" :\" + repo.name)\n```\n\nBut it only prints the names of the first 30 repos. (I created 33 for this account.) I can set g.per_page to 100 and get all the repos printed, but I was wondering what the right way to do this was -- if i had more than 100 repos, I'd be back in the same situation.\n\nThanks, and apologies if this is a dumb question; I'm new to this.\n","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDMwNDc4MTM0","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"No you're right, this should do the pagination. Something is wrong. Can you please re-run that with logging: http://jacquev6.github.io/PyGithub/utilities.html#logging\n","createdAt":"2013-12-13T01:02:34Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/216#issuecomment-30478134","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDMwNTAzMDQ0","author":{"login":"cwarren-mw"},"authorAssociation":"NONE","body":"Here are the extra lines I get with debugging turned on: https://gist.github.com/cwarren-mw/7942990\n\n(I would have included them in this comment, but they went over the character limit.)\n","createdAt":"2013-12-13T11:28:13Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/216#issuecomment-30503044","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDMwNTU3NDQw","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"Understood: in the logs you provided, the \"link\" header is spelled with a capital \"L\", but PyGithub expects a small \"l\".\n\nTwo hypothesis:\n- Github deployed a change and roll-backed it: just retry your code and it will work\n- you are behind some proxy that changes headers: in that case you'll need a fix from me\n\nPyGithub should not expect a specific case because HTTP headers are case-insensitive, my bad. Version 2 of PyGithub will use [python-requests](http://python-requests.org) so this won't possibly happen.\n","createdAt":"2013-12-14T02:06:51Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/216#issuecomment-30557440","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDMwNzUzMDI1","author":{"login":"cwarren-mw"},"authorAssociation":"NONE","body":"I've retried the code (sorry it took me so long to get back to this), and still no luck. But I am behind a corporate firewall, so it's possible that could be involved. I will try this again once I'm back home.\n\nThanks for the quick and informative response. :)\n","createdAt":"2013-12-17T14:06:21Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/216#issuecomment-30753025","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDMxMTE4OTM0","author":{"login":"cwarren-mw"},"authorAssociation":"NONE","body":"No, it doesn't look like the firewall is the source of the problem, as I get the same results trying it from home.\n","createdAt":"2013-12-23T13:27:27Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/216#issuecomment-31118934","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDMxMTQyNjA0","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"OK this is now officially the weirdest bug I've seen on PyGithub.\n\nI think I know how to fix it (by explicitly converting the name of all headers received from GitHub to lowercase), I'll publish a new version tonight (UTC-8 timezone) for you to try.\n\nBUT I'd really like to understand the root cause... So a few questions:\n- what version(s) of Python are you using? On which platform(s)?\n- what parameters do you give to github.Github? (in particular, do you change the user_agent?)\n\nThank you for your help!\n","createdAt":"2013-12-23T20:40:19Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/216#issuecomment-31142604","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDMxMTU1Nzgz","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"At last I've been able to reproduce the bug... The behavior of the httplib (hhtp.client) has changed in Python 3: it returns the headers with capitals where in Python 2 they were all lower-case:\n\n```\nimport sys\n\nif sys.hexversion >= 0x03000000:\n    import http.client as httplib\nelse:\n    import httplib\n\ncnx = httplib.HTTPConnection(\"google.com\")\ncnx.request(\"GET\", \"/\")\nres = cnx.getresponse()\nheaders = [k for k, v in res.getheaders()]\n\nprint(sys.version)\nprint(headers)\n```\n\nprints\n\n```\n$ python2 test.py \n2.7.5+ (default, Sep 19 2013, 13:48:49) \n[GCC 4.8.1]\n['alternate-protocol', 'content-length', 'x-xss-protection', 'expires', 'server', 'location', 'cache-control', 'date', 'x-frame-options', 'content-type']\n```\n\nand\n\n```\n$ python3 test.py \n3.3.2+ (default, Oct  9 2013, 14:50:09) \n[GCC 4.8.1]\n['Location', 'Content-Type', 'Date', 'Expires', 'Cache-Control', 'Server', 'Content-Length', 'X-XSS-Protection', 'X-Frame-Options', 'Alternate-Protocol']\n```\n\nThank you so much for pointing this out!\n\nI'm publishing a fix tonight.\n","createdAt":"2013-12-24T02:47:26Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"HOORAY","users":{"totalCount":1}}],"url":"https://github.com/PyGithub/PyGithub/issues/216#issuecomment-31155783","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDMxMTU3NDQy","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"I confirm this was a very important bug for PyGithub in Python 3, thank you again to have pointed it out!\n\nI'd be glad to have feedback from you when you have time to update to version 1.23.0.\n\n:-)\n","createdAt":"2013-12-24T04:01:09Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/216#issuecomment-31157442","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDMxMTcxMDUy","author":{"login":"cwarren-mw"},"authorAssociation":"NONE","body":"I have just tried the new version and it works perfectly. Thanks so much for the quick fix. :)\n","createdAt":"2013-12-24T13:09:52Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/216#issuecomment-31171052","viewerDidAuthor":false}],"createdAt":"2013-12-12T22:26:35Z","number":216,"state":"CLOSED","title":"Unsure how to use PaginatedList","url":"https://github.com/PyGithub/PyGithub/issues/216"},{"author":{"id":"MDQ6VXNlcjcyMjc5NA==","is_bot":false,"login":"chaoranxie","name":"Chao"},"body":"I been able to get the content of a file by getting a repo first and then use the get_file_contents method to get the content, is there sample on how to update the content of the file? i tried to set the content attribute but got the \"can't set attribute\" error. Thanks\n","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDMwNTU3NTgx","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"Hello,\n\nsorry, but the `PUT /repos/:owner/:repo/contents/:path` is not yet implemented in PyGithub (see the Readme). I'm not sure if I'm going implement it in version 1.x. I'm going to work on version 2.x this week-end and I'll update this issue when I make this decision.\n\nHowever, you can obtain the same result with the [Repository.create_git_blob](http://jacquev6.github.io/PyGithub/github_objects/Repository.html#github.Repository.Repository.create_git_blob), create_git_tree, and create_git_commit API. Clearly it's more complicated and requires some knowledge or Git internals.\n","createdAt":"2013-12-14T02:13:03Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/215#issuecomment-30557581","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDMxMTU3NDU4","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"I'm closing this issue, but do not hesitate to re-open it if you want to further discuss the topic.\n","createdAt":"2013-12-24T04:02:01Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/215#issuecomment-31157458","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDEwNTY5MTcyNQ==","author":{"login":"ahmad88me"},"authorAssociation":"NONE","body":"@chaoranxie I added it and created a pull request https://github.com/PyGithub/PyGithub/pull/316\n","createdAt":"2015-05-26T22:56:52Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/215#issuecomment-105691725","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDE5NTk0NDA3MA==","author":{"login":"ChannyAzar"},"authorAssociation":"NONE","body":"Any news?\nWhen will it be available?\n","createdAt":"2016-03-13T11:57:01Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":1}}],"url":"https://github.com/PyGithub/PyGithub/issues/215#issuecomment-195944070","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDI0NDkxNzU5Nw==","author":{"login":"nottrobin"},"authorAssociation":"NONE","body":"There's now an \"update_file\" method - added in #379.\n","createdAt":"2016-09-06T11:00:45Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/215#issuecomment-244917597","viewerDidAuthor":false}],"createdAt":"2013-12-12T19:56:43Z","number":215,"state":"CLOSED","title":"Is there an example of editing a file?","url":"https://github.com/PyGithub/PyGithub/issues/215"},{"author":{"id":"MDQ6VXNlcjEzODc4MzQ=","is_bot":false,"login":"dfarr","name":"David Farr"},"body":"In the github API you can simply pass the login string to set an assignee, it would be nice to simply pass this string (in place of github.NamedUser.NamedUser).\n","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDMwNDc4Mjcw","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"Yeah I agree. This is a more general issue, though: it should be done for all methods. I'll do that in version 2.\n\nIf you want to submit a pull request for this specific case, I'll take it. Else, you just have to wait until version 2 :)\n","createdAt":"2013-12-13T01:05:36Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/214#issuecomment-30478270","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDMwNDc4NTcw","author":{"login":"dfarr"},"authorAssociation":"CONTRIBUTOR","body":"Agreed! I have started work on this, hopefully will make a request soon.\n","createdAt":"2013-12-13T01:12:06Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/214#issuecomment-30478570","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM2MjU3NDg1","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"Clean-up: this issue is solved\n","createdAt":"2014-02-27T16:03:45Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/214#issuecomment-36257485","viewerDidAuthor":false}],"createdAt":"2013-12-10T19:38:49Z","number":214,"state":"CLOSED","title":"accept strings for assignee","url":"https://github.com/PyGithub/PyGithub/issues/214"},{"author":{"is_bot":true,"login":"app/"},"body":"There should be a stargazers_count property in the Repository class\n","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDI5ODM2MjI5","author":{"login":""},"authorAssociation":"NONE","body":"I did it https://github.com/jacquev6/PyGithub/pull/211 https://github.com/jacquev6/PyGithub/pull/212\n","createdAt":"2013-12-04T19:23:54Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/210#issuecomment-29836229","viewerDidAuthor":false}],"createdAt":"2013-12-03T04:07:57Z","number":210,"state":"CLOSED","title":"No stargazers_count in Repository","url":"https://github.com/PyGithub/PyGithub/issues/210"},{"author":{"id":"MDQ6VXNlcjUzNTc5NTQ=","is_bot":false,"login":"naorrosenberg","name":"Naor Rosenberg"},"body":"Hi :)\n\nIn case you plan to implement another API call, I'm voting for [Releases](http://developer.github.com/v3/repos/releases/#list-releases-for-a-repository) :+1: \n\nAnd thanks again for this great module, I'm using it as a data mining tool for my Master's Thesis.\n\nBest regards,\nNaor.\n","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDMwNjI4NDY5","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"Hello again :)\n\nI'm going to work on version 2 of PyGithub, which will include this functionality. In the meantime, I'm going to only accept pull requests on version 1.x (as opposed to \"actively develop missing functionalities\")\n","createdAt":"2013-12-16T01:51:47Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/208#issuecomment-30628469","viewerDidAuthor":false}],"createdAt":"2013-11-27T20:43:42Z","number":208,"state":"CLOSED","title":"Implement the 'Releases' end-points","url":"https://github.com/PyGithub/PyGithub/issues/208"},{"author":{"id":"MDQ6VXNlcjUzNTc5NTQ=","is_bot":false,"login":"naorrosenberg","name":"Naor Rosenberg"},"body":"Hi again :)\n\nI'm using [Repository.get_tags](http://jacquev6.github.io/PyGithub/github_objects/Repository.html#github.Repository.Repository.get_tags), and I have a question about the `last_modified` attribute.\n\nHere's a code example:\n\n``` python\nfrom github import Github\ng = Github(username, password)\nrepository_obj = g.get_repo('textmate/textmate')\ntags = repository_obj.get_tags()\nt5 = tags[5]\nprint(t5.name) ## v2.0-alpha.9485\nprint(t5.last_modified) ## Sun, 24 Nov 2013 03:06:39 GMT\nprint(t5.commit.stats.last_modified) ## Sat, 05 Oct 2013 12:23:50 GMT\n```\n\nPlease notice the difference between the 2 `last_modified` results.\nChecking this tag on [github.com/textmate](https://github.com/textmate/textmate/releases/tag/v2.0-alpha.9485) shows that `t5.commit.stats.last_modified` is the correct date.\n\nMy question:\nWhat date is stored in `t5.last_modified`?\n\nThanks again for a great module!\nNaor.\n\nps. `t5.last_modified` is not documented in [PyGitHub's reference](http://jacquev6.github.io/PyGithub/github_objects/Tag.html#github.Tag.Tag), nor in [GitHub's API reference](http://developer.github.com/v3/repos/#list-tags).\n","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDI5MTU0OTE5","author":{"login":"bilderbuchi"},"authorAssociation":"NONE","body":"I would assume `t5.commit.stats.last_modified` is the time of the commit, and `t5.last_modified` is the time of tag creation (or last modification). I think neither is more \"correct\", both just show different things.\n","createdAt":"2013-11-24T13:04:35Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/207#issuecomment-29154919","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDMwNjI4NDI5","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"Hey! Sorry, but this is really a question for Github themselves. I don't have detailed knowledge of what they return in each attribute.\n","createdAt":"2013-12-16T01:50:08Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/207#issuecomment-30628429","viewerDidAuthor":false}],"createdAt":"2013-11-24T09:40:40Z","number":207,"state":"CLOSED","title":"Tag creation date","url":"https://github.com/PyGithub/PyGithub/issues/207"},{"author":{"id":"MDQ6VXNlcjUzNTc5NTQ=","is_bot":false,"login":"naorrosenberg","name":"Naor Rosenberg"},"body":"Hi,\n\nThanks again for a great module!\n\nIs there a way to fetch the list of stargazers/watchers for a specific repository, by date?\ni.e. when every stargazer/watcher was added.\n\nI couldn't find it in the reference, so maybe I missed it?\n\nThanks :)\n","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDI4ODk5NTUz","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"Hi again :)\n\nIt doesn't seem so: http://developer.github.com/v3/activity/starring/#list-stargazers doesn't list any sort/direction parameter.\n","createdAt":"2013-11-20T15:42:29Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/206#issuecomment-28899553","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDI4OTA4NDkz","author":{"login":"oskar-j"},"authorAssociation":"NONE","body":"Hi naorrosenberg,\n\nyou can use Google BigQuery or GitHub Archive to get WatchEvents,\nCheck below link for a snappy mention that WatchEvent=Starring\n\nhttp://developer.github.com/v3/activity/events/types/#watchevent\n\nHere is a sample Google BG Query for a start:\n\n```\nselect url, type, created_at, actor_attributes_login\nfrom [githubarchive:github.timeline]\nwhere type='WatchEvent'\nand PARSE_UTC_USEC(created_at) >= PARSE_UTC_USEC('2012-11-01 00:00:00')\nand PARSE_UTC_USEC(created_at) < PARSE_UTC_USEC('2013-11-01 00:00:00')\nlimit 100\n```\n\nOr as a prove a sample WatchEvent from GitHubArchive\n\n```\n{\"created_at\":\"2013-11-19T15:01:40-08:00\",\"payload\":\n{\"action\":\"started\"},\"public\":true,\"type\":\"WatchEvent\",\"url\":\"https://github.com/deploylinux\n/gentooZabbixTemplates\",\"actor\":\"ac0ra\",\"actor_attributes\":\n{\"login\":\"ac0ra\",\"type\":\"User\",\"gravatar_id\":\"98d1f5cb9e87e5650275395e9a88196c\",\"name\":\"Adam \nGrigolato\",\"location\":\"Australia\"},\"repository\":\n{\"id\":4401981,\"name\":\"gentooZabbixTemplates\",\"url\":\"https://github.com/deploylinux\n/gentooZabbixTemplates\",\"description\":\"Gentoo Zabbix 2.0.x Monitoring Templates used by \nProfessionalSysadmin.com and supported by Gentoo Developer \\\"MattM\n\\\"\",\"watchers\":5,\"stargazers\":5,\"forks\":0,\"fork\":false,\"size\":128,\"owner\":\"deploylinux\",\"private\":false,\"open_issues\"\n:0,\"has_issues\":true,\"has_downloads\":true,\"has_wiki\":true,\"created_at\":\"2012-05-21T20:50:19-07:00\",\"pushed_at\"\n:\"2012-05-21T20:50:19-07:00\",\"master_branch\":\"master\"}}\n```\n\nJust sort your data manually by \"created_at\"\n","createdAt":"2013-11-20T17:14:04Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/206#issuecomment-28908493","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDI4OTI1ODg2","author":{"login":"naorrosenberg"},"authorAssociation":"NONE","body":"Thank you oskar-j !\n\nThis is indeed a valuable information for me!\nHowever, it looks like the data in GitHubArchive and Google BigQuery goes back only until February 2011.\n\nI wish they could make it earlier :)\n","createdAt":"2013-11-20T20:09:10Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/206#issuecomment-28925886","viewerDidAuthor":false}],"createdAt":"2013-11-20T12:37:33Z","number":206,"state":"CLOSED","title":"Repository's stargazers/watchers by date","url":"https://github.com/PyGithub/PyGithub/issues/206"},{"author":{"id":"MDQ6VXNlcjMwMjk4","is_bot":false,"login":"leto","name":"Duke Leto"},"body":"Unless I am missing something, there does not seem to be a way to delete a file via the Github API with PyGithub currently : \n\nhttp://developer.github.com/v3/repos/contents/#delete-a-file\n","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDI4NjU5MjQy","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"That's right. Not-yet-implemented APIs are listed in the ReadMe: https://github.com/jacquev6/PyGithub/#github-api-v3-urls-not-yet-covered-by-pygithub.\n\nI'm going to implement file deletion and publish a new version today.\n","createdAt":"2013-11-17T18:27:40Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/205#issuecomment-28659242","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDI4NjY0ODQx","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"Hum, implementing this correctly is actually going to be longer than I first expected. I really want a new version out today, so I'll implement file deletion in next version, together with file creation and modification.\n","createdAt":"2013-11-17T21:41:53Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/205#issuecomment-28664841","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDI4NzQ0Mzc1","author":{"login":"leto"},"authorAssociation":"NONE","body":"Great to hear! Just for reference, I was able to implement file create/modification with the existing API methods (using Trees and Blobs) here:\n\nhttps://github.com/OpenTreeOfLife/api.opentreeoflife.org/blob/master/modules/githubwriter.py#L101\n\nOne thing to be aware of: When I attempted to create a file with the above code starting with a forward slash (/), it created a corrupt tree on Github. Not starting the filename with a / works as expected.\n","createdAt":"2013-11-18T22:24:06Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/205#issuecomment-28744375","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDMwNjI4NDk5","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"In fact, I'm going to work on version 2 of PyGithub, which will include this functionality, and only accept pull requests on version 1 (as opposed to \"actively develop missing features\")\n","createdAt":"2013-12-16T01:53:08Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/205#issuecomment-30628499","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM2MjU4Nzky","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"Clean-up issues: I'm closing this issue. I'll publish the alpha of PyGithub v2 this week-end or so. It will contain code to interact with users, orgs and repos, and I'll open specific issues for you to vote on other domains of the API to decide in which order I should implement them.\n","createdAt":"2014-02-27T16:14:48Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/205#issuecomment-36258792","viewerDidAuthor":false}],"createdAt":"2013-11-15T22:04:18Z","number":205,"state":"CLOSED","title":"Implement file deletion","url":"https://github.com/PyGithub/PyGithub/issues/205"},{"author":{"id":"MDQ6VXNlcjUzNTc5NTQ=","is_bot":false,"login":"naorrosenberg","name":"Naor Rosenberg"},"body":"Hi,\n\nThanks again for a great module!\n\nI wanted to use the [GET /repos/:owner/:repo/commits](http://developer.github.com/v3/repos/commits/#list-commits-on-a-repository) API to fetch all commits by a certain user to a specific repository.\n\nWhile the API supports filtering by author, it looks like [Repository.get_commits](http://jacquev6.github.io/PyGithub/github_objects/Repository.html#github.Repository.Repository.get_commits) doesn't.\n\nAm I missing something?\n\nRegards,\nNaor.\n","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDI4MTU5MjIx","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"Hey you're right!\n\nI'll fix that for next version.\n","createdAt":"2013-11-10T20:09:15Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/204#issuecomment-28159221","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDI4MTY2MTQ1","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"Pushed to `develop`. Will be in next release (soon).\n","createdAt":"2013-11-11T00:55:23Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/204#issuecomment-28166145","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDI4MjMzNzY1","author":{"login":"naorrosenberg"},"authorAssociation":"NONE","body":"Thank you so much!\n","createdAt":"2013-11-11T20:04:59Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/204#issuecomment-28233765","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDMxMTU3NzE4","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"Why did I reopen this??\n","createdAt":"2013-12-24T04:14:03Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/204#issuecomment-31157718","viewerDidAuthor":false}],"createdAt":"2013-11-10T19:48:38Z","number":204,"state":"CLOSED","title":"Repository.get_commits - author parameter","url":"https://github.com/PyGithub/PyGithub/issues/204"},{"author":{"id":"MDQ6VXNlcjUzNTc5NTQ=","is_bot":false,"login":"naorrosenberg","name":"Naor Rosenberg"},"body":"Thank for a a great module!\n\nIn case you're considering to implement the missing APIs, I'm voting for implementing the \"stats\" APIs:\nhttp://developer.github.com/v3/repos/statistics/\n\nCheers,\nNaor.\n","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDI3OTg5NzIy","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"That's exactly why I list those not yet implemented APIs!\n\nI'll put stats in the next release.\n","createdAt":"2013-11-07T17:55:43Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/203#issuecomment-27989722","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDMxMTU3NzMw","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"Why did I reopen this?\n","createdAt":"2013-12-24T04:14:32Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/203#issuecomment-31157730","viewerDidAuthor":false}],"createdAt":"2013-11-07T14:50:27Z","number":203,"state":"CLOSED","title":"Feature request: stats API","url":"https://github.com/PyGithub/PyGithub/issues/203"},{"author":{"id":"MDQ6VXNlcjMyNzE0Ng==","is_bot":false,"login":"jacquev6","name":"Vincent Jacques"},"body":"As noted in #200.\n\nThis will be in next release: user will be able to pass strings in methods currently expecting Labels.\n","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDI4MTY0NjU2","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"Pushed to `develop`. Will be in next release (soon).\n","createdAt":"2013-11-10T23:47:20Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/202#issuecomment-28164656","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDMxMTU3NzM1","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"Why did I reopen this?\n","createdAt":"2013-12-24T04:14:39Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/202#issuecomment-31157735","viewerDidAuthor":false}],"createdAt":"2013-10-29T01:32:38Z","number":202,"state":"CLOSED","title":"Accept strings as labels of issues","url":"https://github.com/PyGithub/PyGithub/issues/202"},{"author":{"id":"MDQ6VXNlcjYyNzM2","is_bot":false,"login":"OddBloke","name":"Daniel Watkins"},"body":"The NamedUser class should probably implement a **eq** method which checks that login  is the same.\n","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDI3MjcxOTk4","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"You're perfectly right, I will implement equality in next release.\n","createdAt":"2013-10-29T01:26:06Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/201#issuecomment-27271998","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDI3Mjg2NjIw","author":{"login":"OddBloke"},"authorAssociation":"NONE","body":"Brilliant, thanks!\n","createdAt":"2013-10-29T08:56:59Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/201#issuecomment-27286620","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDI4MTY2MTMw","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"Pushed to `develop`. Will be in next release (soon).\n","createdAt":"2013-11-11T00:54:59Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/201#issuecomment-28166130","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDMxMTU3NzM4","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"Why did I reopen this?\n","createdAt":"2013-12-24T04:14:46Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/201#issuecomment-31157738","viewerDidAuthor":false}],"createdAt":"2013-10-25T15:36:03Z","number":201,"state":"CLOSED","title":"Objects for the same User retrieved in different ways are not equal","url":"https://github.com/PyGithub/PyGithub/issues/201"},{"author":{"id":"MDQ6VXNlcjQ2NTY1","is_bot":false,"login":"acdha","name":"Chris Adams"},"body":"A common pattern is used throughout the code where optional values are required to either be `github.GithubObject.NotSet` or an instance of one of the API response types.\nIt would be very convenient if this were more Pythonic and treated `None` as the same as `NotSet`.\n","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDI2ODE1MjYz","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"`None` is sometime a valid value for parameters; for example in [`Issue.edit`](https://github.com/jacquev6/PyGithub/blob/master/github/Issue.py#L260), the `assignee` parameter should be None if and only if the assignee must be reset. That's why I created `NotSet` to distinguish it from `None`. Then I chose to treat all methods in an homogeneous way and not accept `None` where it's not a valid value.\n\nWith this explanation, does your remark still apply? If yes, can you give me a concrete example of what would be simpler (more pythonic) in your use case?\n","createdAt":"2013-10-22T15:48:01Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/200#issuecomment-26815263","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDI2ODE4Nzg2","author":{"login":"acdha"},"authorAssociation":"NONE","body":"I'm working on a script to migrate Trac tickets into Github. One of the common patterns is an optional field like a milestone where I have an extra two lines of code per field to set values which aren't present to `NotSet`.\n\n(As an aside, there's a similar question regarding issue labels which http://developer.github.com/v3/issues/#create-an-issue defines as a list of string values but which must be passed in to `create_issue` / `Issue.edit` as object instances)\n","createdAt":"2013-10-22T16:28:45Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/200#issuecomment-26818786","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDI3MjcyMTc1","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"I understand your point, but I can't find a way to:\n- accept None as the default value meaning \"don't send to Github\"\n- accept None as a valid value meaning \"send null to Github\"\n- keep the interface homogenous\n- not break the interface\n\nI may well change everything for version 2 (allowing interface changes):\n- use a special 'Reset' value to \"send null to Github\"\n- use None for \"don't send to Github\"\n\nI assign this issue to the \"Version 2.0\" milestone, which is absolutely not due soon.\n","createdAt":"2013-10-29T01:30:50Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/200#issuecomment-27272175","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDI3MjcyMzEx","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"And I will implement your side remark in next version.\n","createdAt":"2013-10-29T01:34:47Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/200#issuecomment-27272311","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDI3Mjk4NjU0","author":{"login":"acdha"},"authorAssociation":"NONE","body":"I think that's probably the best answer – there really doesn't seem to be a simple way to do this. I've seen a few apps which tried to use None / False and that fell in to the “way too much magic” category.\n\nBesides, who knows what the Github API will look like by then…\n","createdAt":"2013-10-29T12:31:19Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/200#issuecomment-27298654","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM2MjU4NTA4","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"v2 (alpha to be released this week-end or so) uses None as default value and a special `Reset` constant to send null to GitHub\n","createdAt":"2014-02-27T16:12:35Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/200#issuecomment-36258508","viewerDidAuthor":false}],"createdAt":"2013-10-22T15:19:19Z","number":200,"state":"CLOSED","title":"Reconsider use of None values for optional parameters","url":"https://github.com/PyGithub/PyGithub/issues/200"},{"author":{"id":"MDQ6VXNlcjg3ODI4OQ==","is_bot":false,"login":"daireobroin449","name":""},"body":"Thanks for the great library!\nMay have found a small bug with repo.edit\nCan use it to change the repo name, but doesn't change repo from public to private like this:\n\n``` python\nrepo.edit(repo.name,public=False)\n```\n\n(but when I do the same change using curl it works fine)\n","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDI2NjIwNjg5","author":{"login":"krmaxwell"},"authorAssociation":"NONE","body":"Does that happen in all cases?\n","createdAt":"2013-10-18T18:54:56Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/199#issuecomment-26620689","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDI2NjQ0OTQw","author":{"login":"daireobroin449"},"authorAssociation":"NONE","body":"Well, I tested it with two different repositories, neither of which worked changed from public to private with the above PyGithub call.  I tried two other methods of calling the github api (curl and the requests library), and both successfully changed the repos from public to private.\n","createdAt":"2013-10-19T07:04:25Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/199#issuecomment-26644940","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDI2Njg4OTQ0","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"That's totally true, thank you for your help!\n\nThe bug originated in the Github API v3 documentation more than two years ago. It has always been present in PyGithub, from the first draft, a long time before I published the library.\n\nI'm going to fix that right now.\n\nFor you information, I opened a PR https://github.com/github/developer.github.com/pull/331 to fix the last trace of this bug in the official doc.\n","createdAt":"2013-10-21T01:56:51Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/199#issuecomment-26688944","viewerDidAuthor":false}],"createdAt":"2013-10-17T20:13:15Z","number":199,"state":"CLOSED","title":"Possible bug with repo.edit","url":"https://github.com/PyGithub/PyGithub/issues/199"},{"author":{"id":"MDQ6VXNlcjMwMjk4","is_bot":false,"login":"leto","name":"Duke Leto"},"body":"http://oddshocks.com/blog/2012/08/02/developing-charsheet/ is a 404\n\nThanks for PyGithub! It is really useful.\n","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDI2Njg5NDYz","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"Thanks!\n","createdAt":"2013-10-21T02:20:37Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/198#issuecomment-26689463","viewerDidAuthor":false}],"createdAt":"2013-10-14T23:15:18Z","number":198,"state":"CLOSED","title":"Broken link in docs","url":"https://github.com/PyGithub/PyGithub/issues/198"},{"author":{"id":"MDQ6VXNlcjEwNTAwNjE=","is_bot":false,"login":"bkabrda","name":"Slavek Kabrda"},"body":"Hi, I'm one of the developers of DevAssistant (https://github.com/bkabrda/devassistant, http://devassistant.org). We're using PyGithub for creating repositories for users etc. It'd be great you could list us in Projects using PyGithub :)\n","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDI2Njg5NDkx","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"And there you are! If you want to add a short description of DevAssistant in the doc, do not hesitate to submit a pull request.\n","createdAt":"2013-10-21T02:22:08Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/197#issuecomment-26689491","viewerDidAuthor":false}],"createdAt":"2013-10-11T11:12:41Z","number":197,"state":"CLOSED","title":"Add DevAssistant to \"Projects using PyGithub\"","url":"https://github.com/PyGithub/PyGithub/issues/197"},{"author":{"id":"MDQ6VXNlcjY4NjM5OA==","is_bot":false,"login":"klmitch","name":"Kevin L. Mitchell"},"body":"The current Github api supports /hooks/<name> to get the data regarding a single hook, instead of having to get the entire list of them.  It would be convenient if there was a get_hook() method to retrieve the descriptor for a single hook, instead of having to filter it from the list retrieved via get_hooks().  It would probably also be faster, for that matter.\n","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDI0Mjc0Mzg4","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"This seems perfectly legit.\n\nI've not been able to find the documentation of `/hooks` telling how to get the description of a single hook. This API is not even documented on its own, it's just mentioned in the introduction of http://developer.github.com/v3/repos/hooks/ and in http://developer.github.com/v3/repos/hooks/#create-a-hook.\n\nCan you please point me to the doc and/or tell me how you discovered this functionality of Github API v3?\n\nThanks,\n","createdAt":"2013-09-11T20:40:28Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/196#issuecomment-24274388","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDI0Mjc0OTI4","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"Just found out it's https://api.github.com/hooks/activecollab but I still have no idea where it's documented. Maybe it's not :)\n","createdAt":"2013-09-11T20:47:16Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/196#issuecomment-24274928","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDI0Mjc0OTc1","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"I will implement `Github.get_hook(name)` for next version.\n","createdAt":"2013-09-11T20:47:52Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/196#issuecomment-24274975","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDI0Mjc1NDM1","author":{"login":"klmitch"},"authorAssociation":"NONE","body":"Actually, I started off by looking at https://api.github.com/hooks, then asked myself, \"Can I ask for just one?\" and tried https://api.github.com/hooks/web.  I have not found a document describing it, so _shrug_.  Might be worth raising as a documentation bug with Github :)\n","createdAt":"2013-09-11T20:53:52Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/196#issuecomment-24275435","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDI0Mjc3OTE5","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"Done in [`develop`](https://github.com/jacquev6/PyGithub/tree/develop), will be in [version 1.20.0](https://github.com/jacquev6/PyGithub/issues?milestone=32).\n","createdAt":"2013-09-11T21:28:54Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/196#issuecomment-24277919","viewerDidAuthor":false}],"createdAt":"2013-09-11T17:05:04Z","number":196,"state":"CLOSED","title":"Feature request: Add Github.get_hook()","url":"https://github.com/PyGithub/PyGithub/issues/196"},{"author":{"id":"MDQ6VXNlcjY4NjM5OA==","is_bot":false,"login":"klmitch","name":"Kevin L. Mitchell"},"body":"It's bad form to use assert to check the results from Github; the general advice is, \"Be liberal in what you accept,\" and the violation of this principle has tripped me up.  A minor bug in our local Github instance resulted in an assertion error popping up.  This is a general complaint, but the specific case has to do with the Github.get_hooks() call; in our local Github instance, the \"events\" key of the \"circleci\" hook ends up being:\n\n```\n[[u'commit_comment', u'create', u'delete', u'download', u'follow', u'fork', u'fork_apply', u'gist', u'gollum', u'issue_comment', u'issues', u'member', u'public', u'pull_request', u'pull_request_review_comment', u'push', u'status', u'team_add', u'watch']]\n```\n\nThis makes it impossible to use get_hooks() to get the list of defined hooks.\n","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDI0MjczOTAw","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"[What follows is obviously more general than `HookDescription.events`, which is just an example]\n\nI took this decision based on the following:\n- to use the data returned by PyGithub, the user must know its type\n- so [`HookDescription.events`](http://jacquev6.github.io/PyGithub/github_objects/HookDescription.html#github.HookDescription.HookDescription.events) is documented as being a list of strings\n- according to the \"fail fast\" principle, PyGithub checks that it will be able to provide a list of string\n\nThe consequence is \"if `/hooks` is broken, then `Github.get_hooks` is broken\".\n\nOf course I could raise a more significant exception... raising an AssertionError is just laziness, but it wouldn't change anything for you; `Github.get_hooks` would still be broken even if you could catch a specific exception.\n\nCan you please develop the \"Be liberal in what you accept\" part? What behavior would you propose for PyGithub in that case? I really don't want `HookDescription.events` to silently return an empty list, or `None`, because it would lead to bugs in user code later, that would be more difficult to detect.\n\nThank you for your ideas,\n","createdAt":"2013-09-11T20:34:12Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/195#issuecomment-24273900","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDI0Mjc1MjEw","author":{"login":"klmitch"},"authorAssociation":"NONE","body":"So, \"Be liberal in what you accept\" is a general protocol design principle, most famous from the IETF.  (The full quote is, \"Be conservative in what you send and liberal in what you accept.\")  The idea is that, when you set up a protocol data unit that you'll be sending, you want to be very strict in how you formulate it, to improve the chance that everyone will be able to understand it.  On the other hand, when you're receiving a PDU, you want to be sensitive to the possibility that other people may have implemented ambiguous parts of the protocol differently from the way you're expecting, so you want to try hard to decode the PDU, even if it's not strictly what you're expecting.\n\nIn this specific case, there is a _single_ hook in the list returned by the local github instance that has a badly formatted \"events\" field.  There are a range of options I could suggest for handling that; the first that occurs to me is to simply drop the single bad element.  A second is to incorporate a workaround: if the list has one element which is also a list, unwrap the inner list.  A third would be to use some sort of sentinel return value (None isn't the only option; you could make up your own, such as github.BadValue) to indicate that we couldn't parse the field; you could either return that or raise an exception if an attempt is made to access the element.\n\nAs an example of the third possibility, you could do something like the following:\n\n```\nclass BadValue(Exception):\n    def __init__(self, raw):\n        super(BadValue, self).__init__(\"Invalid value received from server\")\n        self.raw = raw\n```\n\nThen, if a value is an instance of BadValue, you raise it when an access attempt is made; the caller can catch it and look at the raw data, if they are so inclined.\n","createdAt":"2013-09-11T20:50:43Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/195#issuecomment-24275210","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDI0Mjc1OTM0","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"Not bad :)\n\nI will raise the exception when the user **accesses** the faulty attribute instead of when I create the object containing it.\n\nI will be happy because PyGithub will still not be silent about bad data returned by the API, and you will be happy because you will be able to use all the correct data.\n\nWait for it in next version, I a week or two.\n\nThanks,\n","createdAt":"2013-09-11T21:00:18Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/195#issuecomment-24275934","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDI0MzA2ODgw","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"Done in [`develop`](https://github.com/jacquev6/PyGithub/tree/develop), will be in [version 1.20.0](https://github.com/jacquev6/PyGithub/issues?milestone=32).\n\n@klmitch You may want to check [github.test.BadAttributes.testIssue195](https://github.com/jacquev6/PyGithub/blob/develop/github/tests/BadAttributes.py#L131) to see if this behavior is ok for you. I hope so, but if not, do not hesitate to reopen this issue.\n","createdAt":"2013-09-12T09:56:13Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/195#issuecomment-24306880","viewerDidAuthor":false}],"createdAt":"2013-09-11T17:02:20Z","number":195,"state":"CLOSED","title":"AssertionError triggered for bug in Github","url":"https://github.com/PyGithub/PyGithub/issues/195"},{"author":{"id":"MDQ6VXNlcjE2MjQzODc=","is_bot":false,"login":"krmaxwell","name":"Kyle Maxwell"},"body":"I'm working from the `develop` branch and consistently get an `HTTP 400: Problems parsing JSON` when trying to create an issue.\n\nThe traceback, including the actual API call, is:\n\n```\nTraceback (most recent call last):\n  File \"import.py\", line 68, in <module>\n    issue=repo.create_issue(title=i['description'],body=comment,labels=ilabels)\n  File \"/home/kmaxwell/PyGithub/github/Repository.py\", line 557, in create_issue\n    post_parameters\n  File \"/home/kmaxwell/PyGithub/github/Requester.py\", line 171, in requestJsonAndCheck\n    return self.__check(*self.requestJson(verb, url, parameters, input))\n  File \"/home/kmaxwell/PyGithub/github/Requester.py\", line 182, in __check\n    raise self.__createException(status, output)\ngithub.GithubException.GithubException: 400 {u'message': u'Problems parsing JSON'}\n```\n\nAdditionally, I enabled console logging while debugging (per the contribution guidelines) and have the following logs:\n\n```\nPOST https://api.github.com/repos/vz-risk/VCDB/issues {'Content-Type': 'application/json', 'Authorization': 'token (oauth token removed)', 'User-Agent': 'PyGithub/Python'} {\"body\": \"http://www.heraldonline.com/2013/08/27/5152564/advanced-data-processing-inc-notification.html\\n\\nAnother of the ADP Partner breaches  There are several more on the pinboard--search term is ADP.\\n\\nhttp://posttrib.suntimes.com/news/porter/22190511-418/valpo-ambulance-users-could-have-had-personal-information-stolen.html\\n\\nhttp://www.healthdatamanagement.com/news/breach-notification-hipaa-privacy-security-46520-1.html\\n\\n\\n2013 DataBreach NC\", \"labels\": [\"Breach\"], \"title\": \"VALPARAISO, Ind., Aug. 27, 2013: Advanced Data Processing, Inc.: Notification of Possible Unauthorized Access of Patient Information | PRNewswire | Rock Hill Herald Online\"} ==> 400 {'status': '400 Bad Request', 'x-ratelimit-remaining': '4993', 'x-github-media-type': 'github.beta; format=json', 'x-content-type-options': 'nosniff', 'access-control-expose-headers': 'ETag, Link, X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Reset, X-OAuth-Scopes, X-Accepted-OAuth-Scopes', 'x-github-request-id': '54c3445d-e229-4b45-b3f1-ef528f1325be', 'x-accepted-oauth-scopes': 'repo, public_repo', 'content-length': '35', 'server': 'GitHub.com', 'x-ratelimit-limit': '5000', 'access-control-allow-credentials': 'true', 'date': 'Wed, 04 Sep 2013 03:27:33 GMT', 'access-control-allow-origin': '*', 'content-type': 'application/json; charset=utf-8', 'x-oauth-scopes': 'user, public_repo, repo, gist', 'x-ratelimit-reset': '1378268851'} {\"message\":\"Problems parsing JSON\"}\n```\n","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDIzNzg5NzQy","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"Hello! Thank you for the issue report, I have all the info I need to investigate that.\n\nThere seems to be something wrong with the json-encoding of the request, in PyGithub. I'll keep you informed this afternoon.\n","createdAt":"2013-09-04T13:42:51Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/194#issuecomment-23789742","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDIzNzk0MDIz","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"Hum in fact I'm going to need your help to solve this... \n\nCan you please run the script here: https://gist.github.com/jacquev6/6437766 (modify it to use your credentials first) and tell me what you obtain?\n\nWhen I run it, it works, and the request sent (before the \"==>\" in the log) it **very** similar to the request failing in your case:\n\n```\nPOST https://api.github.com/repos/jacquev6/TestPyGithub/issues {'Content-Type': 'application/json', 'Authorization': 'Basic (login and password removed)', 'User-Agent': 'PyGithub/Python'} {\"body\": \"http://www.heraldonline.com/2013/08/27/5152564/advanced-data-processing-inc-notification.html\\n\\nAnother of the ADP Partner breaches  There are several more on the pinboard--search term is ADP.\\n\\nhttp://posttrib.suntimes.com/news/porter/22190511-418/valpo-ambulance-users-could-have-had-personal-information-stolen.html\\n\\nhttp://www.healthdatamanagement.com/news/breach-notification-hipaa-privacy-security-46520-1.html\\n\\n\\n2013 DataBreach NC\", \"labels\": [\"Breach\"], \"title\": \"VALPARAISO, Ind., Aug. 27, 2013: Advanced Data Processing, Inc.: Notification of Possible Unauthorized Access of Patient Information | PRNewswire | Rock Hill Herald Online\"} ==> 201 {'status': '201 Created', 'x-ratelimit-remaining': '4972', 'x-github-media-type': 'github.beta; format=json', 'x-content-type-options': 'nosniff', 'access-control-expose-headers': 'ETag, Link, X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Reset, X-OAuth-Scopes, X-Accepted-OAuth-Scopes', 'x-github-request-id': '2be0b759-6752-4210-8ec9-243932b431a4', 'cache-control': 'private, max-age=60, s-maxage=60', 'content-length': '2382', 'server': 'GitHub.com', 'x-ratelimit-limit': '5000', 'location': 'https://api.github.com/repos/jacquev6/TestPyGithub/issues/4', 'access-control-allow-credentials': 'true', 'date': 'Wed, 04 Sep 2013 14:27:51 GMT', 'etag': '\"c95c9d428a9cb16001205311010e4f98\"', 'content-type': 'application/json; charset=utf-8', 'access-control-allow-origin': '*', 'x-ratelimit-reset': '1378305746'} {\"url\":\"https://api.github.com/repos/jacquev6/TestPyGithub/issues/4\",\"labels_url\":\"https://api.github.com/repos/jacquev6/TestPyGithub/issues/4/labels{/name}\",\"comments_url\":\"https://api.github.com/repos/jacquev6/TestPyGithub/issues/4/comments\",\"events_url\":\"https://api.github.com/repos/jacquev6/TestPyGithub/issues/4/events\",\"html_url\":\"https://github.com/jacquev6/TestPyGithub/issues/4\",\"id\":18974584,\"number\":4,\"title\":\"VALPARAISO, Ind., Aug. 27, 2013: Advanced Data Processing, Inc.: Notification of Possible Unauthorized Access of Patient Information | PRNewswire | Rock Hill Herald Online\",\"user\":{\"login\":\"jacquev6\",\"id\":327146,\"avatar_url\":\"https://1.gravatar.com/avatar/b68de5ae38616c296fa345d2b9df2225?d=https%3A%2F%2Fidenticons.github.com%2Ffadfb5f7088ef66579d198a3c9a4935e.png\",\"gravatar_id\":\"b68de5ae38616c296fa345d2b9df2225\",\"url\":\"https://api.github.com/users/jacquev6\",\"html_url\":\"https://github.com/jacquev6\",\"followers_url\":\"https://api.github.com/users/jacquev6/followers\",\"following_url\":\"https://api.github.com/users/jacquev6/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/jacquev6/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/jacquev6/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/jacquev6/subscriptions\",\"organizations_url\":\"https://api.github.com/users/jacquev6/orgs\",\"repos_url\":\"https://api.github.com/users/jacquev6/repos\",\"events_url\":\"https://api.github.com/users/jacquev6/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/jacquev6/received_events\",\"type\":\"User\"},\"labels\":[{\"url\":\"https://api.github.com/repos/jacquev6/TestPyGithub/labels/Breach\",\"name\":\"Breach\",\"color\":\"fbca04\"}],\"state\":\"open\",\"assignee\":null,\"milestone\":null,\"comments\":0,\"created_at\":\"2013-09-04T14:27:51Z\",\"updated_at\":\"2013-09-04T14:27:51Z\",\"closed_at\":null,\"pull_request\":{\"html_url\":null,\"diff_url\":null,\"patch_url\":null},\"body\":\"http://www.heraldonline.com/2013/08/27/5152564/advanced-data-processing-inc-notification.html\\n\\nAnother of the ADP Partner breaches  There are several more on the pinboard--search term is ADP.\\n\\nhttp://posttrib.suntimes.com/news/porter/22190511-418/valpo-ambulance-users-could-have-had-personal-information-stolen.html\\n\\nhttp://www.healthdatamanagement.com/news/breach-notification-hipaa-privacy-security-46520-1.html\\n\\n\\n2013 DataBreach NC\",\"closed_by\":null}\n```\n","createdAt":"2013-09-04T14:35:22Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/194#issuecomment-23794023","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDI0NjUwMDQz","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"I'm sorry, I'm closing this issue without solving it because I'm unable to reproduce.\n\nDo not hesitate to re-open it if you want to discuss further.\n","createdAt":"2013-09-18T08:55:27Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/194#issuecomment-24650043","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDIwNzYwNDIxMg==","author":{"login":"matthewsimons-wf"},"authorAssociation":"NONE","body":"The body just had unescaped newline characters, a no-no for json.\n\n`body.replace('\\n', '\\\\n')`\n\nI've also gotten 400s back from Github when a path wasn't urlquoted.\n","createdAt":"2016-04-08T20:57:56Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":1}}],"url":"https://github.com/PyGithub/PyGithub/issues/194#issuecomment-207604212","viewerDidAuthor":false}],"createdAt":"2013-09-04T03:34:22Z","number":194,"state":"CLOSED","title":"GitHub 400 \"Problems parsing JSON\" when creating an issue","url":"https://github.com/PyGithub/PyGithub/issues/194"},{"author":{"id":"MDQ6VXNlcjMyNzE0Ng==","is_bot":false,"login":"jacquev6","name":"Vincent Jacques"},"body":"Generalize #181\n","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDM2NDYxOTk3","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"Cleaning-up old issues.\n","createdAt":"2014-03-02T18:36:42Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/191#issuecomment-36461997","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM2NDYyMTY0","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"Re-closing after accidental re-open by waffle.io\n","createdAt":"2014-03-02T18:42:02Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/191#issuecomment-36462164","viewerDidAuthor":false}],"createdAt":"2013-08-21T13:42:23Z","number":191,"state":"CLOSED","title":"Know your parent","url":"https://github.com/PyGithub/PyGithub/issues/191"},{"author":{"id":"MDQ6VXNlcjMyNzE0Ng==","is_bot":false,"login":"jacquev6","name":"Vincent Jacques"},"body":"- constructor's parameters\n- access to values retrieved from headers (rate limiting, etc.)\n- check that all methods are really top-level\n","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDM2MjU4Mzgx","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"Constructing the Github instance in PyGithub v2 will be different\n","createdAt":"2014-02-27T16:11:20Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/190#issuecomment-36258381","viewerDidAuthor":false}],"createdAt":"2013-08-20T05:44:53Z","number":190,"state":"CLOSED","title":"Rationalize main class","url":"https://github.com/PyGithub/PyGithub/issues/190"},{"author":{"id":"MDQ6VXNlcjc5NzkyMg==","is_bot":false,"login":"ruxandraburtica","name":"Ruxandra Burtica"},"body":"Maybe I haven't found it, but it would be very useful to have methods for checking the status of the GitHub API (https://status.github.com/api)\n","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDIyNjg2NTM2","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"This seems to be a good idea! I will try to do it in the version after the next one.\n","createdAt":"2013-08-15T05:53:37Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/188#issuecomment-22686536","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDIzOTI3OTc1","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"Done, will be in next release!\n","createdAt":"2013-09-06T09:11:57Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/188#issuecomment-23927975","viewerDidAuthor":false}],"createdAt":"2013-08-07T08:57:49Z","number":188,"state":"CLOSED","title":"Getting the status of GitHub","url":"https://github.com/PyGithub/PyGithub/issues/188"},{"author":{"id":"MDQ6VXNlcjk4NjY4","is_bot":false,"login":"ptwobrussell","name":"Matthew A. Russell"},"body":"Is PyGitHub thread safe? For example, if I were to use a thread pool to repeatedly make calls a function like get_followers() which is calling http://developer.github.com/v3/users/followers/ under the hood, is there any danger that you know of within 1) PyGitHub itself and 2) with the way that GitHub's API would respond?\n","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDIxODMwNDgw","author":{"login":"ptwobrussell"},"authorAssociation":"NONE","body":"In particular, do you see a problem with Example 9 from this IPython Notebook in the way that your library is being used? Just trying to double check that this approach to threading requests is a reasonable thing to do \n\nhttp://nbviewer.ipython.org/urls/raw.github.com/ptwobrussell/Mining-the-Social-Web-2nd-Edition/master/ipynb/Chapter%207%20-%20Mining%20GitHub.ipynb\n","createdAt":"2013-07-30T23:26:12Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/183#issuecomment-21830480","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDIyMDg0MjAy","author":{"login":"ptwobrussell"},"authorAssociation":"NONE","body":"I've done a little digging, and it appears that PyGithub isn't designed to be thread safe, and given that none of its docs say that it is, it was probably a big assumption on my part to even think that it was. From what I see, PaginatedList._fetchNextPage does some bookkeeping that generally would wreak havoc on the example in my comment above and other code trying to use a worker pool to make a bunch of parallel requests that depend on pagination. That said, it would probably be possible to fetch specific pages in a threaded manner using PyGithub, though, if someone wanted to use PaginatedList.get_page in an intelligent way.\n","createdAt":"2013-08-05T02:28:10Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/183#issuecomment-22084202","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQ3NDM4OTUwOA==","author":{"login":"dzieciou"},"authorAssociation":"NONE","body":"An alternative would be two create multiple instances of `GitHub` class. I guess instances would be isolated enough from each other. ","createdAt":"2019-03-19T14:15:36Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/183#issuecomment-474389508","viewerDidAuthor":false}],"createdAt":"2013-07-30T23:12:18Z","number":183,"state":"CLOSED","title":"Question: Is PyGitHub Thread Safe?","url":"https://github.com/PyGithub/PyGithub/issues/183"},{"author":{"id":"MDQ6VXNlcjM1MTAyNg==","is_bot":false,"login":"davidbrai","name":"David Brailovsky"},"body":"I want to add a feature of fetching comments from repos in descending order.\nAFAIK the github API doesn't support that for the comments endpoint.\nI implemented it by using the \"last\" url in the links header and going to the \"prev\" page from there.\n\nDo you think this is something you would like to add to PyGithub?\nIf it is, I could submit a pull request for that.\n","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDIwMTgwODQ5","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"This seems very interesting! If you can implement that at the level of the `PaginatedList`, it would be generic and even more interesting. The public interface may be something like:\n\n```\nfor r in user.get_repos().reversed:\n   print r.name\n```\n","createdAt":"2013-06-28T10:23:59Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/180#issuecomment-20180849","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDIwMTg1MzEz","author":{"login":"davidbrai"},"authorAssociation":"CONTRIBUTOR","body":"That's great to hear.\nMy current implementation is already at the level of `PaginatedList`.\nI'll change the interface to the one you suggested and make sure it's properly tested.\nI think I'll submit the pull request within a few days.\n","createdAt":"2013-06-28T12:31:31Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/180#issuecomment-20185313","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDIyOTc5MjQy","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"Closing the issue because this will be implemented by PR #184. Great!\n","createdAt":"2013-08-20T21:28:09Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/180#issuecomment-22979242","viewerDidAuthor":false}],"createdAt":"2013-06-27T22:09:07Z","number":180,"state":"CLOSED","title":"fetching comments in reverse order","url":"https://github.com/PyGithub/PyGithub/issues/180"},{"author":{"id":"MDQ6VXNlcjc2NjExNA==","is_bot":false,"login":"rakeshcusat","name":"Rakesh Kumar"},"body":"Thanks for providing your library, I really appreciate your good work.\nCurrently I am using your library to fetch user's details. code snippet is as follow.\n    `gh = Github(login_or_token=\"rakeshcusat\", password=pswd, per_page=100)\n    user_pages = gh.get_users().get_page(0)\n    print_page(user_pages)   #This method prints all user details.`\nThis works. it prints 135 user details. But I want to print all user details. I am facing two problems. \n1. I don't know how to get the total number of pages, so I can iteratively pass the page number in get_page() method.\n2. As we know there is rate limit on the API call, I want to know the current remaining limit for API call. API call returns \"X-RateLimit-Remaining\" value in header but I don't know how to access this value. Is there any interface available to access this value?\n","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDE5Njc0NTE2","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"There is no way to know the length of a PaginatedList, because the Github API v3 doesn't provide a way.\n\nYou don't have to use `get_page` on the `PaginatedList`. Just iterate on it. If you **really** want to list all the logins of all users, for example, just say:\n\n```\nfor u in github.Github().get_users():\n    print u.login\n```\n\nBut this will be **very** long and result in a huge number of API calls. I advice you to store what you retrieve and be prepared to resume the iteration from a specific user. For this, I suspect `get_page` won't even work on `Github.get_users` because pagination of this API is specific. You should use the `since` parameter of `Github.get_users`\n\nBeware, some attributes of `NamedUser` are returned by the calls to `Github.get_users` (see http://developer.github.com/v3/users/#get-all-users) but if you want other attributes (full name, etc.), PyGithub will make one call to Github API v3 for each user, resulting in a **huge** number of API calls, again.\n\nI hope this helps.\n","createdAt":"2013-06-19T10:21:21Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/178#issuecomment-19674516","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDE5Njk0ODEw","author":{"login":"rakeshcusat"},"authorAssociation":"NONE","body":"Thanks Vincent for your reply.\n\nI had tried this earlier but it didn't work. It gave me error \"iterator is not present for this object.\n\n``` python\nfor u in github.Github().get_users():\n    print u.login\n```\n\nBut when I tried it now, it worked. May be I used `get_user()` instead of `get_users()`, never mind. It is working now.\n\nYou didn't answer my second question.\n _2. As we know there is rate limit on the API call, I want to know the current remaining limit for API call. API call returns \"X-RateLimit-Remaining\" value in header but I don't know how to access this value. Is there any interface/method available to access this value? Or  is `GET /rate_limit` implemented?_\n","createdAt":"2013-06-19T16:17:04Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/178#issuecomment-19694810","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDE5Njk1NDAw","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"Oups, didn't see your second question! Just use Github.rate_limiting which\nis updated with the X-RateLimit-... headers when we receive them.\nLe 19 juin 2013 18:17, \"Rakesh Kumar\" notifications@github.com a écrit :\n\n> Thanks Vincent for your reply.\n> \n> I had tried this earlier but it didn't work. It gave me error \"iterator is\n> not present for this object.\n> \n> for u in github.Github().get_users():\n>     print u.login\n> \n> But when I tried it now, it worked. May be I used get_user() instead of\n> get_users(), never mind. It is working now.\n> \n> You didn't answer my second question.\n> _2. As we know there is rate limit on the API call, I want to know the\n> current remaining limit for API call. API call returns\n> \"X-RateLimit-Remaining\" value in header but I don't know how to access this\n> value. Is there any interface/method available to access this value? Or is GET\n> /rate_limit implemented?_\n> \n> —\n> Reply to this email directly or view it on GitHubhttps://github.com/jacquev6/PyGithub/issues/178#issuecomment-19694810\n> .\n","createdAt":"2013-06-19T16:25:36Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/178#issuecomment-19695400","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDE5Njk2NzIz","author":{"login":"rakeshcusat"},"authorAssociation":"NONE","body":"Thanks for your quick response :+1: \n","createdAt":"2013-06-19T16:45:29Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/178#issuecomment-19696723","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDE5OTE4MDk5","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"Closing the issue because nothing new happened in the last 5 days. Feel free to re-open if you need to discuss the topic a bit more.\n","createdAt":"2013-06-24T16:24:47Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/178#issuecomment-19918099","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM2NzY3NTQ1MQ==","author":{"login":"goutham9032"},"authorAssociation":"NONE","body":"dic={}\r\nfor i in g.get_user().get_orgs()\r\n     dic=i\r\n\r\ni need all the data with out mentioning the keys,like i.name or i.created_at,it needs to store all information with out explicitily naming them\r\nexpected o/p\r\n{\r\n    \"login\":\"name\"\r\n     \"created_at\":\"date\"\r\n     \"updated_at\":\"date\"\r\n     and so on\r\n}","createdAt":"2018-02-22T13:09:06Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/178#issuecomment-367675451","viewerDidAuthor":false}],"createdAt":"2013-06-19T07:30:29Z","number":178,"state":"CLOSED","title":"How to get all user's details(login, name, location etc)","url":"https://github.com/PyGithub/PyGithub/issues/178"},{"author":{"id":"MDQ6VXNlcjM0NTM3MjQ=","is_bot":false,"login":"munum","name":"Michael"},"body":"The URLs of new issues seem to give a 404. The URLs I get are of the following shape:\n\nhttps://api.github.com/repos/[owner]/[repo-name]/issues/[issue-number]\n\nwhen the correct URL should be\n\nhttps://github.com/[owner]/[repo-name]/issues/[issue-number]\n","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDE5NjczNjk5","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"I'm not sure to understand. The following code works as expected:\n\n```\nimport github\nr = github.Github().get_repo(\"jacquev6/PyGithub\")\ngithub.enable_console_debug_logging()\nprint r.get_issue(177).title\n```\n\nIt prints:\n\n```\nGET https://api.github.com/repos/jacquev6/PyGithub/issues/177 [remaining of debug trace removed]\nNew issue URLs: 404\n```\n\nCan you please provide a short example of something not working? Or a link to the documentation of the Github API v3. It seems very unlikely that API urls don't start with `api.github.com`.\n\nI try a wild guess: are you attempting to use `Issue.url` as an url to point your browser to? You may want to use `Issue.html_url`.\n","createdAt":"2013-06-19T10:03:56Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/177#issuecomment-19673699","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDIwNzk1MzAx","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"I close the issue, because I don't understand the problem and @munum has not replied. Feel free to re-open it if there is something new.\n","createdAt":"2013-07-11T07:38:17Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/177#issuecomment-20795301","viewerDidAuthor":false}],"createdAt":"2013-06-19T03:50:08Z","number":177,"state":"CLOSED","title":"New issue URLs: 404","url":"https://github.com/PyGithub/PyGithub/issues/177"},{"author":{"id":"MDQ6VXNlcjMyNzE0Ng==","is_bot":false,"login":"jacquev6","name":"Vincent Jacques"},"body":"","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDIwNTcyOTAw","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"Done, finally...\n","createdAt":"2013-07-07T16:08:46Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/175#issuecomment-20572900","viewerDidAuthor":false}],"createdAt":"2013-06-18T20:47:28Z","number":175,"state":"CLOSED","title":"Publish version 1.17.0","url":"https://github.com/PyGithub/PyGithub/issues/175"},{"author":{"id":"MDQ6VXNlcjc2NjExNA==","is_bot":false,"login":"rakeshcusat","name":"Rakesh Kumar"},"body":"I have seen GitHub API (GET /users) but I haven't seen any corresponding method/function in your library. Can you please tell me whether it is implemented or not? If it is not implemented then how to get all github users?\n","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDE5NTQzMjMw","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"You're right, this API is missing in PyGithub. It should be a method of the\nmain Github class. It must have been added to Github API v3 quite recently.\n\nI will add it in PyGithub at the end of the week (unless I receive a merge\nrequest before :-) )\nLe 16 juin 2013 00:41, \"Rakesh Kumar\" notifications@github.com a écrit :\n\n> I have seen GitHub API (GET /users) but I haven't seen any corresponding\n> method/function in your library. Can you please tell me whether it is\n> implemented or not? If it is not implemented then how to get all github\n> users?\n> \n> —\n> Reply to this email directly or view it on GitHubhttps://github.com/jacquev6/PyGithub/issues/173\n> .\n","createdAt":"2013-06-17T13:04:57Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/173#issuecomment-19543230","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDE5NjQwOTU2","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"This is now in branch `develop` and will be published in next version. Thank you for reporting!\n","createdAt":"2013-06-18T20:48:59Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/173#issuecomment-19640956","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDE5NjUyMjAx","author":{"login":"rakeshcusat"},"authorAssociation":"NONE","body":"Thanks for addressing this issue soon.\n\nCan you please provide me some sample code for fetching the User\ninformation e.g his location, email-id, userid, etc?\n\nOn Tue, Jun 18, 2013 at 1:49 PM, Vincent Jacques\nnotifications@github.comwrote:\n\n> This is now in branch develop and will be published in next version.\n> Thank you for reporting!\n> \n> —\n> Reply to this email directly or view it on GitHubhttps://github.com/jacquev6/PyGithub/issues/173#issuecomment-19640956\n> .\n\n## \n\nBest Regards\n_Rakesh kumar_,\nLinkedin http://www.linkedin.com/pub/rakesh-kumar/17/1b1/632 |\nBloghttp://code4reference.com\n","createdAt":"2013-06-19T00:16:05Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/173#issuecomment-19652201","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDE5NjczOTQ1","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"Thank you for opening #178 for this question.\n","createdAt":"2013-06-19T10:09:24Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/173#issuecomment-19673945","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDIwNTQ3NjU4","author":{"login":"rakeshcusat"},"authorAssociation":"NONE","body":"Some how get_users method is missing from the source. is it accidental? or intentionally removed from the source?\n","createdAt":"2013-07-06T02:35:04Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/173#issuecomment-20547658","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDIwNTcyMTc5","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"Actually, it's still only in branch [develop](https://github.com/jacquev6/PyGithub/blob/develop/github/MainClass.py#L118) because I neglected to publish version 1.17.0.\n\nI'm publishing right now.\n","createdAt":"2013-07-07T15:15:36Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/173#issuecomment-20572179","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDIwNTcyNTk3","author":{"login":"rakeshcusat"},"authorAssociation":"NONE","body":"Thanks,\nI somehow missed the develop branched and was trying to find this api on\nmaster branch. my bad.... Once again thanks for publishing it.\n\nOn Sun, Jul 7, 2013 at 8:15 AM, Vincent Jacques notifications@github.comwrote:\n\n> Actually, it's still only in branch develophttps://github.com/jacquev6/PyGithub/blob/develop/github/MainClass.py#L118because I neglected to publish version 1.17.0.\n> \n> I'm publishing right now.\n> \n> —\n> Reply to this email directly or view it on GitHubhttps://github.com/jacquev6/PyGithub/issues/173#issuecomment-20572179\n> .\n\n## \n\nBest Regards\n_Rakesh kumar_,\nLinkedin http://www.linkedin.com/pub/rakesh-kumar/17/1b1/632 |\nBloghttp://code4reference.com\n","createdAt":"2013-07-07T15:45:12Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/173#issuecomment-20572597","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDIwNTcyOTEx","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"Done :)\n","createdAt":"2013-07-07T16:09:30Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/173#issuecomment-20572911","viewerDidAuthor":false}],"createdAt":"2013-06-15T22:41:12Z","number":173,"state":"CLOSED","title":"Get all github users.","url":"https://github.com/PyGithub/PyGithub/issues/173"},{"author":{"id":"MDQ6VXNlcjIyMzI3MjA=","is_bot":false,"login":"linvictor88","name":"Bo Lin"},"body":"My environment is within in a local network with a http proxy, I wonder whether there is a simple method to get access the github API. Thank you very much for your help in advance\n","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDE5MzkzMTI3","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"Hello! Sorry for the delay, I was traveling. I have absolutely no experience with http proxies, but let's try to figure it out.\n\nWhat kind of errors do you get when you try to use PyGithub as it is today?\n\nPyGithub uses [httplib](http://docs.python.org/2.7/library/httplib.html) as lower level layer for HTTP(S) traffic. The only mention of proxy in the doc of httplib is in method [`set_tunnel`](http://docs.python.org/2.7/library/httplib.html#httplib.HTTPConnection.set_tunnel). So, my first try would be to add a call to `set_tunnel` in method [`github.Requester.__createConnection`](https://github.com/jacquev6/PyGithub/blob/master/github/Requester.py#L224)\n\nSo, please give me the current error messages, and if you're able to add this call to `set_tunnel` in your local installation of PyGithub, tell me if it helps.\n","createdAt":"2013-06-13T13:55:22Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/172#issuecomment-19393127","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDE5NDQxMjk4","author":{"login":"linvictor88"},"authorAssociation":"NONE","body":"my source codes:\n#!/usr/bin/python                                                                   \n\nimport sys\nsys.path.append(\"./PyGithub\");\nfrom github import Github\nfrom github import GithubException\nimport argparse\nimport getpass\n\nusername = raw_input(\"Github Username:\")\npw = getpass.getpass()\ng = Github(username, pw)\nfor repo in g.get_user().get_repos():\n     print (repo.name)\n\n---\n\nThank you very much for your response. Since my network is within a http proxy, when I call Github(), it will response a timeout error just as in the below:\n\nGithub Username:linvictor88\nPassword: \nTraceback (most recent call last):\n  File \"./test1.py\", line 20, in <module>\n    for repo in g.get_user().get_repos():\n  File \"./PyGithub/github/PaginatedList.py\", line 37, in **iter**\n    newElements = self.__grow()\n  File \"./PyGithub/github/PaginatedList.py\", line 49, in __grow\n    newElements = self._fetchNextPage()\n  File \"./PyGithub/github/PaginatedList.py\", line 108, in _fetchNextPage\n    headers, data = self.__requester.requestJsonAndCheck(\"GET\", self.__nextUrl, self.__nextParams, None)\n  File \"./PyGithub/github/Requester.py\", line 96, in requestJsonAndCheck\n    return self.__check(*self.requestJson(verb, url, parameters, input))\n  File \"./PyGithub/github/Requester.py\", line 132, in requestJson\n    return self.__requestEncode(verb, url, parameters, input, encode)\n  File \"./PyGithub/github/Requester.py\", line 166, in __requestEncode\n    status, responseHeaders, output = self.__requestRaw(verb, url, requestHeaders, encoded_input)\n  File \"./PyGithub/github/Requester.py\", line 183, in __requestRaw\n    requestHeaders\n  File \"/usr/lib/python2.7/httplib.py\", line 958, in request\n    self._send_request(method, url, body, headers)\n  File \"/usr/lib/python2.7/httplib.py\", line 992, in _send_request\n    self.endheaders(body)\n  File \"/usr/lib/python2.7/httplib.py\", line 954, in endheaders\n    self._send_output(message_body)\n  File \"/usr/lib/python2.7/httplib.py\", line 814, in _send_output\n    self.send(msg)\n  File \"/usr/lib/python2.7/httplib.py\", line 776, in send\n    self.connect()\n  File \"/usr/lib/python2.7/httplib.py\", line 1157, in connect\n    self.timeout, self.source_address)\n  File \"/usr/lib/python2.7/socket.py\", line 571, in create_connection\n    raise err\nsocket.timeout: timed out\n\n---\n\nThen I use the set_tunnel method just as below:\n   Edit github.Requester.__createConnection:\n        #return self.__connectionClass(host=self.__hostname, port=self.__port, **kwds)\n        conn = self.__connectionClass(host=\"proxy.company.com\", port=**_, *_kwds)\n        conn.set_tunnel(host=self.__hostname, port=self.__port)\n        return conn \n\nIt seems that the tunnel has been set up successfully, however, when I call g.get_user().get_repos(), It response these following Error:\nresponseHeaders\n {'status': '404 Not Found', 'content-length': '226682', 'x-runtime': '6', 'server': 'GitHub.com', 'connection': 'keep-alive', 'cache-control': 'no-cache', 'date': 'Fri, 14 Jun 2013 04:38:23 GMT', 'content-type': 'text/html; charset=utf-8'}\nTraceback (most recent call last):\n  File \"./test1.py\", line 22, in <module>\n    for repo in g.get_user().get_repos():\n  File \"./PyGithub/github/PaginatedList.py\", line 38, in **iter**\n    newElements = self.**grow()\n  File \"./PyGithub/github/PaginatedList.py\", line 50, in __grow\n    newElements = self._fetchNextPage()\n  File \"./PyGithub/github/PaginatedList.py\", line 110, in _fetchNextPage\n    headers, data = self.__requester.requestJsonAndCheck(\"GET\", self.__nextUrl, self.__nextParams, None)\n  File \"./PyGithub/github/Requester.py\", line 96, in requestJsonAndCheck\n    return self.__check(*self.requestJson(verb, url, parameters, input))\n  File \"./PyGithub/github/Requester.py\", line 104, in __check\n    output = self.__structuredFromJson(output)\n  File \"./PyGithub/github/Requester.py\", line 128, in __structuredFromJson\n    return json.loads(data)\n  File \"/usr/lib/python2.7/json/__init**.py\", line 326, in loads\n    return _default_decoder.decode(s)\n  File \"/usr/lib/python2.7/json/decoder.py\", line 366, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n  File \"/usr/lib/python2.7/json/decoder.py\", line 384, in raw_decode\n    raise ValueError(\"No JSON object could be decoded\")\nValueError: No JSON object could be decoded\n","createdAt":"2013-06-14T06:28:08Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/172#issuecomment-19441298","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDE5NTQzMzM2","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"Hum I don't understand why it fails... I will have to investigate and\nexperiment with proxies, but I won't have time to do that before next week.\nLe 14 juin 2013 08:28, \"berlin\" notifications@github.com a écrit :\n\n> my source codes:\n> #!/usr/bin/python\n> \n> import sys\n> sys.path.append(\"./PyGithub\");\n> from github import Github\n> from github import GithubException\n> import argparse\n> import getpass\n> \n> username = raw_input(\"Github Username:\")\n> pw = getpass.getpass()\n> g = Github(username, pw)\n> Use the PyGithub Github object g to do whatever you want, for example,\n> listing all your own repos (user is whichever user authenticated)\n> \n> for repo in g.get_user().get_repos():\n> \n> ## print (repo.name)\n> \n> Thank you very much for your response. Since my network is within a http\n> proxy, when I call Github(), it will response a timeout error just as in\n> the below:\n> \n> Github Username:linvictor88\n> Password:\n> Traceback (most recent call last):\n> File \"./test1.py\", line 20, in\n> for repo in g.get_user().get_repos():\n> File \"./PyGithub/github/PaginatedList.py\", line 37, in _iter_\n> newElements = self.__grow()\n> File \"./PyGithub/github/PaginatedList.py\", line 49, in _grow\n> newElements = self._fetchNextPage()\n> File \"./PyGithub/github/PaginatedList.py\", line 108, in _fetchNextPage\n> headers, data = self._requester.requestJsonAndCheck(\"GET\",\n> self.__nextUrl, self.__nextParams, None)\n> File \"./PyGithub/github/Requester.py\", line 96, in requestJsonAndCheck\n> return self.__check(_self.requestJson(verb, url, parameters, input))\n> File \"./PyGithub/github/Requester.py\", line 132, in requestJson\n> return self.__requestEncode(verb, url, parameters, input, encode)\n> File \"./PyGithub/github/Requester.py\", line 166, in *requestEncode\n> status, responseHeaders, output = self._requestRaw(verb, url,\n> requestHeaders, encoded_input)\n> File \"./PyGithub/github/Requester.py\", line 183, in __requestRaw\n> requestHeaders\n> File \"/usr/lib/python2.7/httplib.py\", line 958, in request\n> self._send_request(method, url, body, headers)\n> File \"/usr/lib/python2.7/httplib.py\", line 992, in _send_request\n> self.endheaders(body)\n> File \"/usr/lib/python2.7/httplib.py\", line 954, in endheaders\n> self._send_output(message_body)\n> File \"/usr/lib/python2.7/httplib.py\", line 814, in _send_output\n> self.send(msg)\n> File \"/usr/lib/python2.7/httplib.py\", line 776, in send\n> self.connect()\n> File \"/usr/lib/python2.7/httplib.py\", line 1157, in connect\n> self.timeout, self.source_address)\n> File \"/usr/lib/python2.7/socket.py\", line 571, in create_connection\n> raise err\n> \n> ## socket.timeout: timed out\n> \n> Then I use the set_tunnel method just as below:\n> Edit github.Requester.__createConnection:\n> #return self.__connectionClass(host=self.__hostname, port=self.__port, *\n> kwds)\n> conn = self.__connectionClass(host=\"proxy.company.com\", port=*_, *_kwds)\n> conn.set_tunnel(host=self.__hostname, port=self.__port)\n> return conn\n> \n> It seems that the tunnel has been set up successfully, however, when I\n> call g.get_user().get_repos(), It response these following Error:\n> responseHeaders\n> {'status': '404 Not Found', 'content-length': '226682', 'x-runtime': '6',\n> 'server': 'GitHub.com', 'connection': 'keep-alive', 'cache-control':\n> 'no-cache', 'date': 'Fri, 14 Jun 2013 04:38:23 GMT', 'content-type':\n> 'text/html; charset=utf-8'}\n> Traceback (most recent call last):\n> File \"./test1.py\", line 22, in\n> for repo in g.get_user().get_repos():\n> File \"./PyGithub/github/PaginatedList.py\", line 38, in _iter_\n> newElements = self.**grow()\n> File \"./PyGithub/github/PaginatedList.py\", line 50, in _grow\n> newElements = self._fetchNextPage()\n> File \"./PyGithub/github/PaginatedList.py\", line 110, in _fetchNextPage\n> headers, data = self._requester.requestJsonAndCheck(\"GET\",\n> self.__nextUrl, self.__nextParams, None)\n> File \"./PyGithub/github/Requester.py\", line 96, in requestJsonAndCheck\n> return self.__check(_self.requestJson(verb, url, parameters, input))\n> File \"./PyGithub/github/Requester.py\", line 104, in *check\n> output = self._structuredFromJson(output)\n> File \"./PyGithub/github/Requester.py\", line 128, in _structuredFromJson\n> return json.loads(data)\n> File \"/usr/lib/python2.7/json/_init**.py\", line 326, in loads\n> return _default_decoder.decode(s)\n> File \"/usr/lib/python2.7/json/decoder.py\", line 366, in decode\n> obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n> File \"/usr/lib/python2.7/json/decoder.py\", line 384, in raw_decode\n> raise ValueError(\"No JSON object could be decoded\")\n> ValueError: No JSON object could be decoded\n> \n> —\n> Reply to this email directly or view it on GitHubhttps://github.com/jacquev6/PyGithub/issues/172#issuecomment-19441298\n> .\n","createdAt":"2013-06-17T13:07:03Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/172#issuecomment-19543336","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDIwNzk1MzU5","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"I forgot to investigate that when I had some time. Now I'm traveling, so I put this issue in the \"Long term wish list\" milestone, sorry...\n","createdAt":"2013-07-11T07:40:25Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/172#issuecomment-20795359","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDIwNzk3OTg0","author":{"login":"linvictor88"},"authorAssociation":"NONE","body":"Okay, enjoy yourself. \nRegards! \n---berlin \n\n----- Original Message -----\n\nFrom: \"Vincent Jacques\" notifications@github.com \nTo: \"jacquev6/PyGithub\" PyGithub@noreply.github.com \nCc: \"berlin\" linb@vmware.com \nSent: Thursday, July 11, 2013 3:40:27 PM \nSubject: Re: [PyGithub] can not get access to github API through proxy (#172) \n\nI forgot to investigate that when I had some time. Now I'm traveling, so I put this issue in the \"Long term wish list\" milestone, sorry... \n\n— \nReply to this email directly or view it on GitHub . \n","createdAt":"2013-07-11T08:44:34Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/172#issuecomment-20797984","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM2MjU4MzAw","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"I neglected this issue a long time. Closing it slighlty ashamed. I'm sure the v2 of PyGithub, based on the requests library will solve the issue.\n","createdAt":"2014-02-27T16:10:41Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/172#issuecomment-36258300","viewerDidAuthor":false}],"createdAt":"2013-06-08T07:20:05Z","number":172,"state":"CLOSED","title":"can not get access to github API through proxy","url":"https://github.com/PyGithub/PyGithub/issues/172"},{"author":{"id":"MDQ6VXNlcjc0NjQ0","is_bot":false,"login":"geofft","name":"Geoffrey Thomas"},"body":"PyGithub does not default to validating SSL certificates, as evidenced by a simple proxy I created (with an invalid certificate):\n\n```\n>>> import github\n>>> g = github.Github(base_url=\"https://api.github.com.geofft.scripts.mit.edu\")\n>>> g.get_user(\"geofft\").name\nu'Geoffrey Thomas'\n```\n\nPyGithub currently uses httplib (http.client in Python 3), which doesn't support certificate validation on either Python 2 or 3. There are a couple of options:\n- Incorporate one of the snippets running around the web (e.g. [http://code.activestate.com/recipes/577548-https-httplib-client-connection-with-certificate-v/](this one from ActiveState); see also [http://stackoverflow.com/questions/3280603/adding-server-certificate-validation-to-httplib-httpsconnection](this StackOverflow discussion).\n- Switch to [http://docs.python-requests.org/en/latest/](Requests), and add a dependency on it and urllib3.\n- Switch to [https://pypi.python.org/pypi/urllib3](urllib3), on which Requests is based, and add a dependency upon it.\n- Switch to [http://code.google.com/p/httplib2/](httplib2), and add a dependency on it.\n- Switch to [http://pycurl.sourceforge.net/](PyCurl), and add a dependency on it.\n\nSome of these (especially Requests) are significantly higher-level than the current httplib approach, so they'd be a fair amount of change. I think httplib2 would probably be the smallest change of them all, and lots of people are likely to have it due to having Requests installed.\n\nThe first approach would avoid an external dependency when on Python 2.6 and up, but there's no `ssl` module in older versions of Python, so it'd bring in a dependency on M2Crypto, if those versions are still worth supporting.\n\nDo you have opinions on which route you prefer? I'm happy to implement any of them and send in a pull request.\n","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDE4NjM5Mjgw","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"It would indeed be a good thing to validate ssl certificates. Thank you for your analysis of the possible solutions!\n\nI'm currently in holidays, so I won't have time to analyze the pros and cons of all your proposals before 2 weeks, but I have the feeling it might be a good idea to switch to a higher-level library such as Requests. Adding external dependencies is not a problem as long as `pip install PyGithub` installs them. And by the way, dropping support of Python 2.5 seems acceptable now if we have a good reason :-)\n\nI think @thouis has already tried to switch to Requests: https://github.com/thouis/PyGithub/commit/aab96401054c551aebf1abd2649a6a5aef65e931 I have really not checked his work, and this is based on a quite old version of PyGithub, so it may or may not be a good idea to base your work on it.\n\nOne difficult aspect of this migration will be the record-replay test framework, which is really hard-coded with httplib. Be sure you're able to run the tests before you start (`python -m github.tests`).\n","createdAt":"2013-05-29T19:12:55Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/169#issuecomment-18639280","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDIyOTc5OTUz","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"Just to avoid duplicated work, @Aaron1011 seems to also be working on porting PyGithub to Requests: https://github.com/Aaron1011/PyGithub/tree/use_requests.\n","createdAt":"2013-08-20T21:39:31Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/169#issuecomment-22979953","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDIyOTgwMjc3","author":{"login":"geofft"},"authorAssociation":"NONE","body":"Oh, fantastic! I've totally not had time to look at this recently, but I'll look at @Aaron1011's branch next time I do, if it hasn't landed.\n","createdAt":"2013-08-20T21:44:35Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/169#issuecomment-22980277","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDMwNjI4NjEz","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"And again to avoid duplicated work: I'm going to work on version 2 of PyGithub, which will be based on python-requests, so it will include ssl validation out of the box.\n","createdAt":"2013-12-16T01:57:00Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/169#issuecomment-30628613","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM2MjU4MDU1","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"v2 is on its way, and I'm using the requests library, so SSL validation comes for free\n","createdAt":"2014-02-27T16:08:42Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/169#issuecomment-36258055","viewerDidAuthor":false}],"createdAt":"2013-05-26T23:18:42Z","number":169,"state":"CLOSED","title":"No SSL certificate validation","url":"https://github.com/PyGithub/PyGithub/issues/169"},{"author":{"id":"MDQ6VXNlcjM0MTY2NzI=","is_bot":false,"login":"phracek","name":"Petr Hracek"},"body":"PyGithub version is 1.14.2\nIn our python module we are using this:\n\ngh = github.Github(cls._token)\ntry:\n      result = ClHelper.run_command(\"git remote show origin\")\n      has_remote = True\nexcept exceptions.ClException as e:\n       pass\n\nuser = gh.get_user()\nif not has_push:\n            # create ssh keys here\n            rsa_key = \"{0}/.ssh/dev_assistant_rsa\".format(os.path.expanduser('~'))\n            if os.path.isfile(\"{0}.pub\".format(rsa_key)) == False:\n                ClHelper.run_command(\"ssh-keygen -t rsa -f {0} -N \\\"\\\" -C \\\"Developer Assistant\\\"\".format(rsa_key), True, True)\n            public_content = ClHelper.run_command(\"cat {0}.pub\".format(rsa_key))\n        if not has_remote:\n            try:\n                ClHelper.run_command(\"git remote add origin https://github.com/{0}/{1}\".format(username, reponame), True, True)\n            except exceptions.ClException as e:\n                pass # TODO: what exactly happens here?\n        try:\n            user.create_key(\"DeveloperAssistant\",public_content)\n            ClHelper.run_command(\"git push -u origin master\", True, True)\nBut it failed with this:\n File \"/home/phracek/work/devassistant/devassistant/assistants/commands.py\", line 194, in _github_push\n    user.create_key(\"DeveloperAssistant\",public_content)\n  File \"/usr/lib/python2.7/site-packages/github/AuthenticatedUser.py\", line 399, in create_key\n    post_parameters\n  File \"/usr/lib/python2.7/site-packages/github/Requester.py\", line 95, in requestJsonAndCheck\n    return self.__check(*self.requestJson(verb, url, parameters, input))\n  File \"/usr/lib/python2.7/site-packages/github/Requester.py\", line 103, in __check\n    raise self.__createException(status, output)\ngithub.GithubException.UnknownObjectException: 404 {u'message': u'Not Found'}\n\nOr is there something wrong in our code?\n","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDE4MjU4ODMy","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"First, some remarks (solution to your problem follows):\n- it would have been easier for me if your code was [minimized](http://sscce.org/) (and indented):\n  \n  ```\n  token = <removed for privacy reasons>\n  gh = github.Github(token)\n  user = gh.get_user()\n  user.create_key(user.create_key(\"DeveloperAssistant\", \"ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCq718KvfWx0qc2z2KJuvG880pVD89DQsHzsF48w9dF5aqHa39f6JBkSo07DU6vTR/BsyO0rzHnjZ/Qm1oXwzyYEdMyi/43vPUYSTox91zQHpnU1hZ+FCoi6xrLzcjIA4H9PYq2ma4zB5kCNx6y6SYL3nnFX5jXzmd60XrAg7DBLkdBakyPc2ZK23f7+ajEUNrJDRUjTNrkcf93qoF6nl67VLN9nZEeJPayGsEv7o+7YlHeW8ERlb8Om+QpjZpBWx6jf8g+svo+dhBbWKWofUx59xuS1dLzyOpyVn2djjRu3p+FBDqLR7LeJd+4V8FnuUpz4yjOnMTHbgGZf+Q+F9ch\"))\n  ```\n- there is no need to send me a private mail, I get notifications from Github\n\nSo, what's wrong here? You're missing the 'user' [scope](http://developer.github.com/v3/oauth/#scopes) on your token. The previous code works if you use login-password identification or a token with the 'user' scope.\n\nPlease note that there is no way for PyGithub to be more explicit, because Github replies with a generic 404 HTML error for security reasons.\n","createdAt":"2013-05-22T05:55:00Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/168#issuecomment-18258832","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDE4MjU5MDQ3","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"Side note: I've been wanting to document the minimal authentication level needed for each method PyGithub for a long time. It's a huge work. #82\n","createdAt":"2013-05-22T06:03:45Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/168#issuecomment-18259047","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDE4MjYwNTkx","author":{"login":"phracek"},"authorAssociation":"NONE","body":"Well I have implemented your suggestions but the code does not work.\n\nWhen I am in local GIT repository:\ngh = github.Github(token)\nuser = gh.get_user()\nrsa_key = \"content of cat <path_to_key>.pub\"\nuser.create_key(user.create_key(\"Developer Assistant\", rsa_key)\n\n  File \"/home/phracek/work/devassistant/devassistant/assistants/commands.py\", line 190, in _github_push\n    user.create_key(user.create_key(\"DeveloperAssistant\", \"{0}\".format(public_content)))\n  File \"/usr/lib/python2.7/site-packages/github/AuthenticatedUser.py\", line 399, in create_key\n    post_parameters\n  File \"/usr/lib/python2.7/site-packages/github/Requester.py\", line 95, in requestJsonAndCheck\n    return self.__check(*self.requestJson(verb, url, parameters, input))\n  File \"/usr/lib/python2.7/site-packages/github/Requester.py\", line 103, in __check\n    raise self.__createException(status, output)\ngithub.GithubException.UnknownObjectException: 404 {u'message': u'Not Found'}\n","createdAt":"2013-05-22T06:57:18Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/168#issuecomment-18260591","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDE4MjYwNjM5","author":{"login":"phracek"},"authorAssociation":"NONE","body":"By the way example public key is ssh-rsa KEY_STRING DeveloperAssistant\n","createdAt":"2013-05-22T06:58:22Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/168#issuecomment-18260639","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDE4MzMzNTcw","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"It looks like you didn't read my first answer carefully.\n\nIt has two parts:\n1) how you should have reported your problem (only to make my life easier)\n2) the solution to your problem\n\nHave you read the link about scopes (http://developer.github.com/v3/oauth/#scopes)? Your problem is that the token you try to use is missing the 'user' scope.\n\nIt has absolutely nothing to do with PyGithub, it's purely about the behavior of Github API v3.\n\nI hope you will manage to achieve what you're trying to do.\n","createdAt":"2013-05-23T09:51:43Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/168#issuecomment-18333570","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDE5NjQwNDEx","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"I close this issue as nothing new has been said in the past month. Do not hesitate to re-open it if you need to discuss further.\n","createdAt":"2013-06-18T20:40:12Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/168#issuecomment-19640411","viewerDidAuthor":false}],"createdAt":"2013-05-21T12:19:50Z","number":168,"state":"CLOSED","title":"Bug in user.create_key function 404 message Not FOUND","url":"https://github.com/PyGithub/PyGithub/issues/168"},{"author":{"id":"MDQ6VXNlcjMyNzE0Ng==","is_bot":false,"login":"jacquev6","name":"Vincent Jacques"},"body":"The three APIs described in http://developer.github.com/v3/issues/#list-issues are not fully covered in PyGithub.\n\nThis was reported by mail by Daehyok Shin\n","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDE4MDU4NjMx","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"Done\n","createdAt":"2013-05-17T12:30:20Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/166#issuecomment-18058631","viewerDidAuthor":false}],"createdAt":"2013-05-17T11:20:54Z","number":166,"state":"CLOSED","title":"Complete listing of issues","url":"https://github.com/PyGithub/PyGithub/issues/166"},{"author":{"id":"MDQ6VXNlcjcwMjEwOA==","is_bot":false,"login":"ciembor","name":"Maciej Ciemborowicz"},"body":"```\n# easy_install-3.3 -U PyGithub\nSearching for PyGithub\nReading http://pypi.python.org/simple/PyGithub/\nReading http://vincent-jacques.net/PyGithub\nDownload error on http://vincent-jacques.net/PyGithub: timed out -- Some packages may not be found!\n```\n","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDE3OTIxNzg0","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"It looks like a temporary error. How many times did you try? How low did you wait between your first and last try?\n","createdAt":"2013-05-15T06:13:31Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/165#issuecomment-17921784","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDE3OTMyNDA5","author":{"login":"ciembor"},"authorAssociation":"NONE","body":"It works now. Sorry for bothering.\n","createdAt":"2013-05-15T11:09:03Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/165#issuecomment-17932409","viewerDidAuthor":false}],"createdAt":"2013-05-13T18:38:17Z","number":165,"state":"CLOSED","title":"Download error","url":"https://github.com/PyGithub/PyGithub/issues/165"},{"author":{"id":"MDQ6VXNlcjEzMjk2MQ==","is_bot":false,"login":"wdawson","name":"Wils Dawson"},"body":"Not sure if I'm missing something, but it might be nice to get the length of a Paginated List. Sorry if I'm not seeing how this is already implemented.\n","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDE3NzA5NDI4","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"Github API v3 provides no constant-time way to know the length of a PaginatedList in general. So, to compute this length, one must iterate on the full list, possibly sending many requests. This is very long, so I think it's better if the user does that explicitly, for example with `len(list(user.get_followers()))`.\n\nNote that most of the time, Github API v3 provides an attribute containing this length: `NamedUser.followers` is the length of the PaginatedList returned by `NamedUser.get_followers`.\n\nI close the issue, but do not hesitate to reopen it if you want to further discuss the topic.\n","createdAt":"2013-05-10T08:23:34Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/164#issuecomment-17709428","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDI1MjAwODE1OQ==","author":{"login":"MichaelPereira"},"authorAssociation":"CONTRIBUTOR","body":"@jacquev6 Is it still the recommended way of getting the size of list if not provided by another object? Or can it be replaced by the `total_count` property introduced in 9a51a61e3fe6eebf68307305991ea89039d956e1 as part of #224?\n","createdAt":"2016-10-06T16:01:45Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/164#issuecomment-252008159","viewerDidAuthor":false}],"createdAt":"2013-05-10T06:04:56Z","number":164,"state":"CLOSED","title":"Implement __len__ for PaginatedListBase","url":"https://github.com/PyGithub/PyGithub/issues/164"},{"author":{"id":"MDQ6VXNlcjE2ODEwNjY=","is_bot":false,"login":"shercoder","name":"Pardeep Singh Sanghera"},"body":"Hey my friend introduced me to your project and we have already started to use it in our small projects.I am looking to help out. Is there anything that i can do to help out in your project. If there is anything that I can help you with, please let me know. Thank you\n","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDE3NDI5NTM3","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"Hello! Thank you for your offer to help! I will be happy to accept your pull requests.\n\nClearly the worst part of PyGithub is its documentation... If you are motivated to improve it, feel absolutely free! You could structure and update the [wiki](https://github.com/jacquev6/PyGithub/wiki). Just write what would have been useful for you when you discovered PyGithub. Also, you could improve the [reference documentation](http://jacquev6.github.com/PyGithub) (generated from the [doc strings](https://github.com/jacquev6/PyGithub/blob/master/github/MainClass.py#L39))\n\nIf you're not into documentation, there has been some recent [API changes](http://developer.github.com/changes/). I will not have time to analyze them soon, because I'm in vacations, so you can check their impact on PyGithub. There are also missing functionalities around [notifications](http://developer.github.com/changes/2012-10-26-notifications-api/) and [specific exceptions](https://github.com/jacquev6/PyGithub/issues/152)\n\nJust choose what you like and tell me you're working on it, so we don't do twice the same thing.\n\nAnd if you need help, do not hesitate to ask.\n\nCheers!\n","createdAt":"2013-05-04T08:00:03Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/163#issuecomment-17429537","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDE3NTIyODU4","author":{"login":"shercoder"},"authorAssociation":"NONE","body":"Hello! Thanks for replying. I am sorry about not being able to reply soon.\nI picked up a back injury over the weekend, so I was just resting.\n\nI will work on adding the missing notifications functionality. Then from\nthere I'll see what else I can contribute to.\n\nThanks again for letting me help!\n\nEnjoy your vacation!!\n\nOn Sat, May 4, 2013 at 1:00 AM, Vincent Jacques notifications@github.comwrote:\n\n> Hello! Thank you for your offer to help! I will be happy to accept your\n> pull requests.\n> \n> Clearly the worst part of PyGithub is its documentation... If you are\n> motivated to improve it, feel absolutely free! You could structure and\n> update the wiki https://github.com/jacquev6/PyGithub/wiki. Just write\n> what would have been useful for you when you discovered PyGithub. Also, you\n> could improve the reference documentationhttp://jacquev6.github.com/PyGithub(generated from the doc\n> stringshttps://github.com/jacquev6/PyGithub/blob/master/github/MainClass.py#L39\n> )\n> \n> If you're not into documentation, there has been some recent API changeshttp://developer.github.com/changes/.\n> I will not have time to analyze them soon, because I'm in vacations, so you\n> can check their impact on PyGithub. There are also missing functionalities\n> around notificationshttp://developer.github.com/changes/2012-10-26-notifications-api/and specific\n> exceptions https://github.com/jacquev6/PyGithub/issues/152\n> \n> Just choose what you like and tell me you're working on it, so we don't do\n> twice the same thing.\n> \n> And if you need help, do not hesitate to ask.\n> \n> Cheers!\n> \n> —\n> Reply to this email directly or view it on GitHubhttps://github.com/jacquev6/PyGithub/issues/163#issuecomment-17429537\n> .\n\n## \n\nPardeep Singh\n","createdAt":"2013-05-07T04:32:12Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/163#issuecomment-17522858","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDIzOTMwMzA5","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"Update: some missing functionalities are now listed in [README.rst](https://github.com/jacquev6/PyGithub/blob/master/README.rst)\n","createdAt":"2013-09-06T10:04:19Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/163#issuecomment-23930309","viewerDidAuthor":false}],"createdAt":"2013-05-03T07:39:10Z","number":163,"state":"CLOSED","title":"Looking to help out","url":"https://github.com/PyGithub/PyGithub/issues/163"},{"author":{"id":"MDQ6VXNlcjMyNzE0Ng==","is_bot":false,"login":"jacquev6","name":"Vincent Jacques"},"body":"","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDE3MDMyMDky","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"Done.\n","createdAt":"2013-04-25T18:27:52Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/162#issuecomment-17032092","viewerDidAuthor":false}],"createdAt":"2013-04-25T07:55:09Z","number":162,"state":"CLOSED","title":"Publish version 1.14.2","url":"https://github.com/PyGithub/PyGithub/issues/162"},{"author":{"id":"MDQ6VXNlcjI2NjAyNzY=","is_bot":false,"login":"jasenmh","name":"Jasen Hall"},"body":"Several of my PyGithub scripts that were working flawlessly before are now throwing this exception.     Is there a new authentication requirement that the Github API is newly imposing that PyGithub isn't supplying?\n\nThe error message suggests checking this page: http://developer.github.com/v3/#user-agent-required\n\nThe \"g\" object in the traceback below was obtained by supplying a valid username and password---and that username/password has full admin access to the organization in question.   (The script was working flawlessly until today.)\n\n  File \"./updateForLab.py\", line 65, in <module>\n    org= g.get_organization(\"UCSB-CS56-S13\")\n  File \"./PyGithub/github/Github.py\", line 111, in get_organization\n    None\n  File \"./PyGithub/github/Requester.py\", line 84, in requestJsonAndCheck\n    return self.__check(*self.requestJson(verb, url, parameters, input))\n  File \"./PyGithub/github/Requester.py\", line 92, in __check\n    raise GithubException.GithubException(status, output)\ngithub.GithubException.GithubException: 403 {u'message': u'Missing or invalid User Agent string. See http://developer.github.com/v3/#user-agent-required'}\n","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDE2OTUwNjg3","author":{"login":"pconrad"},"authorAssociation":"NONE","body":"This is happening to me too.\n","createdAt":"2013-04-24T17:32:08Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/160#issuecomment-16950687","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDE2OTUyMTE3","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"Use the user_agent param of the Github constructor. I will add a non-None default value ASAP.\n","createdAt":"2013-04-24T17:44:21Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/160#issuecomment-16952117","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDE2OTUyMjAy","author":{"login":"pconrad"},"authorAssociation":"NONE","body":"Outstanding, we'll give this a try.   By the way, it looks like this is change as of today in the API: http://developer.github.com/changes/2013-04-24-user-agent-required/\n","createdAt":"2013-04-24T17:45:03Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/160#issuecomment-16952202","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDE2OTk3MjE3","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"Fixed by #161.\n","createdAt":"2013-04-25T09:39:28Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/160#issuecomment-16997217","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDE3MDA2MDc0","author":{"login":"jasenmh"},"authorAssociation":"NONE","body":"Thanks, Jacque!\n","createdAt":"2013-04-25T13:19:24Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/160#issuecomment-17006074","viewerDidAuthor":false}],"createdAt":"2013-04-24T17:31:13Z","number":160,"state":"CLOSED","title":"Error message: Missing or invalid User Agent string. See http://developer.github.com/v3/#user-agent-required'","url":"https://github.com/PyGithub/PyGithub/issues/160"},{"author":{"id":"MDQ6VXNlcjMyNzE0Ng==","is_bot":false,"login":"jacquev6","name":"Vincent Jacques"},"body":"","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDE2OTk3MjM0","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"Published on pipy https://pypi.python.org/pypi/PyGithub/1.14.1\n","createdAt":"2013-04-25T09:40:06Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/159#issuecomment-16997234","viewerDidAuthor":false}],"createdAt":"2013-04-24T15:25:18Z","number":159,"state":"CLOSED","title":"Publish version 1.14.1","url":"https://github.com/PyGithub/PyGithub/issues/159"},{"author":{"id":"MDQ6VXNlcjQxODI3NTc=","is_bot":false,"login":"scipy-gitbot","name":""},"body":"I must confess I don't understand the internals all that well, but I seem to be getting malformed requests when using oauth authentication. There is already client_secret and client_id in the URL that is passed into this function and it is passed as part of parameters dictionary too. The add parameters method adds them again. Surely this isn't correct? I'm not able to isolate this but it seems to come from the while loop in PaginatedList, but my debugger doesn't go further than this.\n\nhttps://github.com/jacquev6/PyGithub/blob/master/github/Requester.py#L149\n","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDE2OTM3NjYy","author":{"login":"scipy-gitbot"},"authorAssociation":"NONE","body":"I added these lines before those two and now my code seems to be running again\n\n```\n        if \"client_secret\" in url and \"client_secret\" in parameters:\n            del parameters[\"client_secret\"]\n        if \"client_id\" in url and \"client_id\" in parameters:\n            del parameters[\"client_id\"]\n```\n","createdAt":"2013-04-24T15:17:46Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/158#issuecomment-16937662","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDE2OTM4MzU3","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"You seem to be right, I'll give it a look in the coming days.\n","createdAt":"2013-04-24T15:22:51Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/158#issuecomment-16938357","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDE2OTM5MzUx","author":{"login":"jseabold"},"authorAssociation":"NONE","body":"Thanks. Commenting from my non-bot account to keep up to date with this.\n","createdAt":"2013-04-24T15:29:48Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/158#issuecomment-16939351","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDE2OTkzMjAy","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"I'm going to publish 1.14.1 without the fix for this issue because #160 is more critical. This issue will be treated soon, in 1.14.2.\n","createdAt":"2013-04-25T07:56:54Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/158#issuecomment-16993202","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDE3MDMyMDc4","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"Published. Can you please confirm your problem is solved?\n","createdAt":"2013-04-25T18:27:39Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/158#issuecomment-17032078","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDE3MDM3MDU1","author":{"login":"jseabold"},"authorAssociation":"NONE","body":"Looks good here. Thanks.\n","createdAt":"2013-04-25T20:06:16Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/158#issuecomment-17037055","viewerDidAuthor":false}],"createdAt":"2013-04-24T15:13:48Z","number":158,"state":"CLOSED","title":"Duplicate parameters in URL","url":"https://github.com/PyGithub/PyGithub/issues/158"},{"author":{"id":"MDQ6VXNlcjMyNzE0Ng==","is_bot":false,"login":"jacquev6","name":"Vincent Jacques"},"body":"","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDE3MTUyMTkz","author":{"login":"mishu-"},"authorAssociation":"NONE","body":"eta?:) your latest fix for the 403 user agent missing issue is not in pip yet \n","createdAt":"2013-04-29T06:50:06Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/157#issuecomment-17152193","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDE3MTU0OTMw","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"Unless I've done some big mistake, fix for #160 is in version 1.14.1,\npublished last Thursday.\n\nNo ETA for 1.15.0 (not a bugfix version) because I'm in vacations.\nLe 29 avr. 2013 08:50, \"Mihai Oprea\" notifications@github.com a écrit :\n\n> eta?:) your latest fix for the 403 user agent missing issue is not in pip\n> yet\n> \n> —\n> Reply to this email directly or view it on GitHubhttps://github.com/jacquev6/PyGithub/issues/157#issuecomment-17152193\n> .\n","createdAt":"2013-04-29T08:28:48Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/157#issuecomment-17154930","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDE3MTU1NTk5","author":{"login":"mishu-"},"authorAssociation":"NONE","body":"Nope, no mistake. Apparently I had an issue with my local `pip` which failed to upgrade the package. All is good. 10x for the quick response.\n","createdAt":"2013-04-29T08:46:39Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/157#issuecomment-17155599","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDE4MDU5MDY4","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"https://pypi.python.org/pypi/PyGithub/1.15.0\n","createdAt":"2013-05-17T12:41:14Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/157#issuecomment-18059068","viewerDidAuthor":false}],"createdAt":"2013-04-22T20:32:35Z","number":157,"state":"CLOSED","title":"Publish version 1.15.0","url":"https://github.com/PyGithub/PyGithub/issues/157"},{"author":{"id":"MDQ6VXNlcjIwNDA4Mw==","is_bot":false,"login":"jasonwiener","name":"Jason Wiener"},"body":"looking at the InputFileContent class, it doesn't appear to support renaming a file in a gist. am i mistaken?\n","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDE1OTk1MjM0","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"Oh you're right! Sorry about that. I'll fix that in next version, probably next week.\n","createdAt":"2013-04-06T12:17:43Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/156#issuecomment-15995234","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDE1OTk1MjU1","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"Notes to myself:\n- http://developer.github.com/v3/gists/#edit-a-gist\n- implement file renaming\n- check if file deletion works\n","createdAt":"2013-04-06T12:18:53Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/156#issuecomment-15995255","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDE2MDcyMDQ4","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"Fixed in branch `develop`, will be in next version, before end of this week.\n","createdAt":"2013-04-08T19:15:23Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/156#issuecomment-16072048","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQ4MDYwNzIy","author":{"login":"valtih1978"},"authorAssociation":"NONE","body":"It seems that feature is there. How can I use it? I see no way to rename a file.\n","createdAt":"2014-07-04T16:54:03Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/156#issuecomment-48060722","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQ4NTU0Mjkx","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"Hey @valtih1978,\n\nPlease have a look to this test: [`github.tests.Gist.testRenameFile`](https://github.com/jacquev6/PyGithub/blob/master/github/tests/Gist.py#L87) and tell me if it answers your questions.\n","createdAt":"2014-07-10T01:02:12Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/156#issuecomment-48554291","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDMzNjczNjgwOQ==","author":{"login":"owy1"},"authorAssociation":"NONE","body":"I'm sorry but how do you rename a gist file on \"editing gist\" mode?","createdAt":"2017-10-15T19:52:44Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/156#issuecomment-336736809","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDMzODEwNjMyOA==","author":{"login":"kpsychas"},"authorAssociation":"NONE","body":"There is a box above the source code where you can edit the name. Just a note for anyone that considers this obvious: the filename that appears on top of the page is not editable and that is what probably creates confusion. ","createdAt":"2017-10-20T04:58:55Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/156#issuecomment-338106328","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDMzODEwNjUyMQ==","author":{"login":"owy1"},"authorAssociation":"NONE","body":"Thx so much!\nOphelia\n\nOn Oct 19, 2017 9:58 PM, \"Konstantinos Psychas\" <notifications@github.com>\nwrote:\n\n> There is a box above the source code where you can edit the name. Just a\n> note for anyone that considers this obvious: the filename that appears on\n> top of the page is not editable and that is what probably creates confusion.\n>\n> —\n> You are receiving this because you commented.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/PyGithub/PyGithub/issues/156#issuecomment-338106328>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AQhDIZdzfaKAnNmTS7e7_XWlFO67Y5EMks5suCiSgaJpZM4Ajmcf>\n> .\n>\n","createdAt":"2017-10-20T05:00:28Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/156#issuecomment-338106521","viewerDidAuthor":false}],"createdAt":"2013-04-05T22:37:41Z","number":156,"state":"CLOSED","title":"renaming files in a gist","url":"https://github.com/PyGithub/PyGithub/issues/156"},{"author":{"id":"MDQ6VXNlcjMyNzE0Ng==","is_bot":false,"login":"jacquev6","name":"Vincent Jacques"},"body":"","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDE2ODIzNzM4","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"Finally done.\n","createdAt":"2013-04-22T21:03:59Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/155#issuecomment-16823738","viewerDidAuthor":false}],"createdAt":"2013-03-28T19:16:06Z","number":155,"state":"CLOSED","title":"Publish version 1.14.0","url":"https://github.com/PyGithub/PyGithub/issues/155"},{"author":{"id":"MDQ6VXNlcjMyNzE0Ng==","is_bot":false,"login":"jacquev6","name":"Vincent Jacques"},"body":"Following #153, let's check that the \"100% test coverage\" feeling is appropriate.\n","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDE1NjExMTI1","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"And `# pragma no branch`...\n","createdAt":"2013-03-28T20:01:31Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/154#issuecomment-15611125","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDE1NjEyODE4","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"`git grep -n -e \"no cover\" -e \"no branch\" | grep -v \"in attributes\"` should return something readable.\n","createdAt":"2013-03-28T20:34:34Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/154#issuecomment-15612818","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDE1NjEzOTI1","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"See https://github.com/jacquev6/PyGithub/compare/dc96fef...4df3a7e\n\nSome commits improve coverage, others document why we have no test coverage of a specific part.\n\nThe only remaining undocumented `pragma no branch`s are in the `_useAttributes` functions.\n","createdAt":"2013-03-28T20:54:54Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/154#issuecomment-15613925","viewerDidAuthor":false}],"createdAt":"2013-03-28T19:15:01Z","number":154,"state":"CLOSED","title":"Check that all `# pragma no cover` are legitimate","url":"https://github.com/PyGithub/PyGithub/issues/154"},{"author":{"id":"MDQ6VXNlcjc3MjE5Nw==","is_bot":false,"login":"sebastianstigler","name":"Sebastian Stigler"},"body":"Hi, \nIm using PyGithub (1.13.0, installed with pip and pip-3.2) on Ubuntu 12.04 with python version 2.7.3 (there it works just fine) an version  3.2.3 where i get some issues\n\nI posted the testcase and the testouput for the run with python3 here:  https://gist.github.com/8efb393ddaefc614f225\n\nFYI: I ran the testsuite too(`python3 -m github.tests`). The result was  \n\n```\nRan 319 tests in 1.630s\n\nOK\n```\n\nCheers,\nSebastian\n","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDE1NjA3MjA5","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"Thank you for reporting this! Supporting Python 3 is definitely more difficult than what I expected...\n\nSo, I reproduce your issue on Cygwin with something as simple as:\n\n```\nprint(github.Github(\"my_login\", \"my_password\").get_user(\"jacquev6\").name)\n```\n\nIt is linked to authentication, because the following works:\n\n```\nprint(github.Github().get_user(\"jacquev6\").name)\n```\n\nIt is linked to Python 3 because both work with Python 2.7.\n\nI'm investigating.\n","createdAt":"2013-03-28T18:50:48Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/153#issuecomment-15607209","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDE1NjA3NDcy","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"... I put a `# pragma no cover` here: https://github.com/jacquev6/PyGithub/blob/master/github/Requester.py#L52\n\nBad idea...\n","createdAt":"2013-03-28T18:55:04Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/153#issuecomment-15607472","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDE1NjA4NDQ1","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"This was silly.\n\n@sebastianstigler , I've just published version 1.13.1, can you please `pip-3.2 install -U PyGithub` and tell me if it's fixed for you?\n\nThanks.\n","createdAt":"2013-03-28T19:12:42Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/153#issuecomment-15608445","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDE1NjA4NzM3","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"I still have no idea about how to test authentication automatically, because however I do it, I would have to write my password somewhere in the repository.\n\nI open #151 to check all the `# pragma no cover`.\n","createdAt":"2013-03-28T19:18:02Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/153#issuecomment-15608737","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDE1NjA4OTcz","author":{"login":"sebastianstigler"},"authorAssociation":"NONE","body":"I've just tried your fix and it work just fine. Thanks for the fast fix.\n","createdAt":"2013-03-28T19:22:28Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/153#issuecomment-15608973","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDE1NjA5NTk1","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"Thanks for your feedback.\n","createdAt":"2013-03-28T19:33:19Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/153#issuecomment-15609595","viewerDidAuthor":false}],"createdAt":"2013-03-28T14:17:05Z","number":153,"state":"CLOSED","title":"Error \"500 None\" in python3","url":"https://github.com/PyGithub/PyGithub/issues/153"},{"author":{"id":"MDQ6VXNlcjExMTkwMTc=","is_bot":false,"login":"pconrad","name":"Phill Conrad"},"body":"I have a question about how to work with the GithubException object\n\nSample Code:\n     try:\n        team = org.create_team(teamName,\n                         [],\n                         \"push\");\n     except GithubException as e:\n         print (e)\n\nWhen I print (e) I get:\n\n```\n 422 {u'message': u'Validation Failed', u'errors': [{u'field': u'name', u'code': u'already_exists', u'resource': u'Team'}]}\n```\n\nWhat I'd like to be able to do is see the list of attributes and member functions of  the GithubException object so that I can pull out various stuff to check for particular events... but I can'f find this in the documentation for the PyGithub API.    Maybe I just need to understand better the relationship between the PyGithub API and the underlying github RESTful API.\n\nFrom the source, it appears that there are two properties of the GithubException object:\n\nhttps://github.com/jacquev6/PyGithub/blob/master/github/GithubException.py\n\n```\nstatus\ndata\n```\n\nand putting that together with the output, it appears the 422 is the status (perhaps returned by the API?), and the data is a dictionary object (perhaps an encoding of the JSON that got returned?)  but these are only guesses.    \n\nIt appears that the only place GithubException occurs in the source is in Requester.py---and this tends to confirm my guesses.\n\nIs there somewhere in the documentation for the github API itself where one can find the keys that one would expect to find in the JSON object, i.e. in this case \"message\", \"errors\", and then within \"errors\", \"field\", \"code\", \"and \"resource\"?   \n\nFrom trial and error guesswork, I settled on code like this, but this feels \"hacky---I'd be more comfortable if I knew whether I was doing this right...\n\n```\nteam = False   # Sentinel to see if it succeeded or failed\ntry:\n   team = org.create_team(teamName,\n                     [],\n                     \"push\");\n   print(\" team {0} created...\".format(teamName),end='')\nexcept GithubException as e:\n   if (e.data['errors'][0]['code']=='already_exists'):\n      print(\" team {0} already exists...\".format(teamName),end='') \n   else:\n      print (e)\n\nif (team != False):\n   # do something with team...\n```\n\nAm I on the right track?\n","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDE1NTYxMTgw","author":{"login":"pconrad"},"authorAssociation":"NONE","body":"Note that User @jacquev6  partially addressed this in a comment on issue #82 .  \n","createdAt":"2013-03-28T00:08:55Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/152#issuecomment-15561180","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDE1NjA5NTMw","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"This is the right track indeed. Here are a few remarks.\n\nYou're right about `status` and `data`: they are the HTTP status and the decoded json payload. I've done that this way because I had no idea of the types of errors that could occur, so I wasn't able to create specific properties as in all other classes in PyGithub. (I know that a `NamedUser` always has a `name`, but there is no such knowledge about exceptions/errors)\n\nSo, whenever the Github API v3 returns a HTTP status above 400, I raise a `GithubException` with this status and the payload.\n\nChecking the Github API v3 documentation today, I see a few words about errors: http://developer.github.com/v3/#client-errors but in fact there are more possible errors. For example, 404 errors for non-existing objects, 401 for bad authentication, etc.\n\nSo, what I can do now that I know the errors a bit more is to create sub-classes of `GithubException`, and raise them when I see a specific type of error. This would allow the client to `except` specific classes of error, and let the other classes go up the stack.\n\nI will do that in version 1.14.0 and take this as an opportunity to document it in http://jacquev6.github.com/PyGithub/.\n","createdAt":"2013-03-28T19:32:36Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":1}}],"url":"https://github.com/PyGithub/PyGithub/issues/152#issuecomment-15609530","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDE1NjExMDI2","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"I will do that in branch [`topic/SpecificExceptions`](https://github.com/jacquev6/PyGithub/tree/topic/SpecificExceptions)\n","createdAt":"2013-03-28T19:59:55Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/152#issuecomment-15611026","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDE1NjExMjM3","author":{"login":"pconrad"},"authorAssociation":"NONE","body":"This sounds terrific.     Again, thanks for all of your hard work, and\nexcellent software design skills.     The product has been extraordinarily\nuseful and easy to figure out---and addressing this will make it even\nbetter.\n\nOn Thu, Mar 28, 2013 at 12:59 PM, Vincent Jacques\nnotifications@github.comwrote:\n\n> I will do that in branch topic/SpecificExceptionshttps://github.com/jacquev6/PyGithub/tree/topic/SpecificExceptions\n> \n> —\n> Reply to this email directly or view it on GitHubhttps://github.com/jacquev6/PyGithub/issues/152#issuecomment-15611026\n> .\n\n## \n\n## \n\nPhill Conrad, Lecturer (SOE)*, Dept. of Computer Science\nUniversity of California, Santa Barbara\nJoint Appointment: College of Creative Studies (www.ccs.ucsb.edu)\n\n## pconrad@cs.ucsb.edu, www.cs.ucsb.edu/~pconrad\n\n*SOE: a UC teaching faculty appointment, corresponding in rank and job\nsecurity to a tenured associate professor\n","createdAt":"2013-03-28T20:03:51Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/152#issuecomment-15611237","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDE1NjEyNzYx","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"Thanks \\o/ It's always very nice to ear a satisfied client!\n","createdAt":"2013-03-28T20:33:23Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/152#issuecomment-15612761","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDE1NjI0Nzc1","author":{"login":"pconrad"},"authorAssociation":"NONE","body":"Yes, I think I shall give you a raise---double the salary I'm paying you\nnow. :-)\n\nOn Thu, Mar 28, 2013 at 1:33 PM, Vincent Jacques\nnotifications@github.comwrote:\n\n> Thanks \\o/ It's always very nice to ear a satisfied client!\n> \n> —\n> Reply to this email directly or view it on GitHubhttps://github.com/jacquev6/PyGithub/issues/152#issuecomment-15612761\n> .\n\n## \n\n## \n\nPhill Conrad, Lecturer (SOE)*, Dept. of Computer Science\nUniversity of California, Santa Barbara\nJoint Appointment: College of Creative Studies (www.ccs.ucsb.edu)\n\n## pconrad@cs.ucsb.edu, www.cs.ucsb.edu/~pconrad\n\n*SOE: a UC teaching faculty appointment, corresponding in rank and job\nsecurity to a tenured associate professor\n","createdAt":"2013-03-29T01:28:24Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/152#issuecomment-15624775","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDE1NjM0NDEw","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"Huhu, that would be both my biggest and smallest raise ever!\n","createdAt":"2013-03-29T09:49:21Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/152#issuecomment-15634410","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDE1NjUyMjUx","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"Note to myself:\n- Check test github.tests.Organization.testMembers: there is a 403 status\n- Add test case for specific exn when bad auth with token\n","createdAt":"2013-03-29T17:52:23Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/152#issuecomment-15652251","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDE2ODIzNzEz","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"Part of this issue was deliver in 1.14.0, but I keep it for version 1.15.0 to add a few other specific exception types.\n","createdAt":"2013-04-22T21:03:28Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/152#issuecomment-16823713","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDE3MDU5MDIx","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"New specific exception to create: HTTP 403 \"bad user agent\" (see #160)\n","createdAt":"2013-04-26T07:26:48Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/152#issuecomment-17059021","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDE4MDU4NTYw","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"I'm closing this issue now, but I will continue to add specific types of exception when I encounter them.\n","createdAt":"2013-05-17T12:28:12Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/152#issuecomment-18058560","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDMwMTI0OTkyNw==","author":{"login":"NicoHood"},"authorAssociation":"NONE","body":"Hi,\r\nI try to catch an exception:\r\n\r\n```python\r\ngithub.GithubException.BadCredentialsException: 401 {'message': 'Bad credentials', 'documentation_url': 'https://developer.github.com/v3'}\r\n```\r\n\r\nNow I i try to access it directly I get the following error:\r\n```\r\nAttributeError: type object 'GithubException' has no attribute 'BadCredentialsException'\r\n```\r\n\r\nHow can I catch this specific exception and not only a general githubexception?\r\n","createdAt":"2017-05-13T13:55:07Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":9}}],"url":"https://github.com/PyGithub/PyGithub/issues/152#issuecomment-301249927","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDY2NDAyNjg0OA==","author":{"login":"izgzhen"},"authorAssociation":"NONE","body":"> Hi,\r\n> I try to catch an exception:\r\n> \r\n> ```python\r\n> github.GithubException.BadCredentialsException: 401 {'message': 'Bad credentials', 'documentation_url': 'https://developer.github.com/v3'}\r\n> ```\r\n> \r\n> Now I i try to access it directly I get the following error:\r\n> \r\n> ```\r\n> AttributeError: type object 'GithubException' has no attribute 'BadCredentialsException'\r\n> ```\r\n> \r\n> How can I catch this specific exception and not only a general githubexception?\r\n\r\n@NicoHood use `github.BadCredentialsException` -- which is more clear from source code.","createdAt":"2020-07-26T18:56:38Z","includesCreatedEdit":true,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/152#issuecomment-664026848","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDY2NDA1OTA5OQ==","author":{"login":"s-t-e-v-e-n-k"},"authorAssociation":"COLLABORATOR","body":"GithubException is a class as well as a module, the full module path to the class is github.GithubException.GithubException, which you can't import BadCredentialsException from. All of the exceptions are exported via github, so ``from github import BadCredentialsException`` will work fine.","createdAt":"2020-07-27T00:08:43Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":1}}],"url":"https://github.com/PyGithub/PyGithub/issues/152#issuecomment-664059099","viewerDidAuthor":false}],"createdAt":"2013-03-27T23:17:29Z","number":152,"state":"CLOSED","title":"How to work with the GithubException object","url":"https://github.com/PyGithub/PyGithub/issues/152"},{"author":{"id":"MDQ6VXNlcjI5NzE3MzU=","is_bot":false,"login":"danielniccoli","name":"Daniel Niccoli"},"body":"Hi,\n\nPyGithub is a part of https://github.com/Borkason/google-code-issues-migrator, which is a fork by itself from an abandoned project, and recently I get random 401 Bad Credentials exceptions with that script. This exception did not show up in the past, that's why I think it might have to do with how PyGithub handles the Credentials. Maybe Github changed something in the past 1 or 2 months?\n\nI could not find any pattern in the appearance of the exceptions, yet. I think it's random.\n\n**This is what I do**\nI authenticate once in `__main__`: https://github.com/Borkason/google-code-issues-migrator/blob/master/migrateissues.py#L493.\nThen I start migrating all the issues. The script fetches all issues, does some things with the google code api and then creates new issues in github, including comments. Mostly during the issue creation I recieve the exceptions. Always at a random point (sometimes after adding 2 issues, sometimes after adding 100 issues ...\n\n_I hope you can help in any way._\n\n**This is the exception**\n\n```\nTraceback (most recent call last):\n  File \"migrateissues.py\", line 529, in <module>\n    process_gcode_issues(existing_issues)\n  File \"migrateissues.py\", line 332, in process_gcode_issues\n    add_comments_to_issue(github_issue, gid)\n  File \"migrateissues.py\", line 236, in add_comments_to_issue\n    existing_comments = [ comment.body for comment in github_issue.get_comments() ]\n  File \"/usr/local/lib/python2.7/dist-packages/PyGithub-1.12.2-py2.7.egg/github/PaginatedList.py\", line 35, in __iter__\n    newElements = self.__grow()\n  File \"/usr/local/lib/python2.7/dist-packages/PyGithub-1.12.2-py2.7.egg/github/PaginatedList.py\", line 47, in __grow\n    newElements = self._fetchNextPage()\n  File \"/usr/local/lib/python2.7/dist-packages/PyGithub-1.12.2-py2.7.egg/github/PaginatedList.py\", line 104, in _fetchNextPage\n    headers, data = self.__requester.requestJsonAndCheck(\"GET\", self.__nextUrl, self.__nextParams, None)\n  File \"/usr/local/lib/python2.7/dist-packages/PyGithub-1.12.2-py2.7.egg/github/Requester.py\", line 84, in requestJsonAndCheck\n    return self.__check(*self.requestJson(verb, url, parameters, input))\n  File \"/usr/local/lib/python2.7/dist-packages/PyGithub-1.12.2-py2.7.egg/github/Requester.py\", line 92, in __check\n    raise GithubException.GithubException(status, output)\ngithub.GithubException.GithubException: 401 {u'message': u'Bad credentials'}\n```\n","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDE1MjYxMDY0","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"Hello!\n\nI've also experienced this issue in the past few days. It must be a bug on GIthub's side, it's not related to PyGithub. It can be reproduced with the following shell script (call it with your login and password as arguments):\n\n```\n#!/bin/sh\n\nUSER=$1\nPASSWORD=$2\n\nCONTINUE=1\n\nwhile [ $CONTINUE == \"1\" ]\ndo\n    OUTPUT=$(curl --include https://$USER:$PASSWORD@api.github.com/user 2>&1)\n\n    if echo \"$OUTPUT\" | grep \"200 OK\" >/dev/null\n    then\n        echo OK\n    else\n        date\n        echo \"$OUTPUT\"\n        CONTINUE=0\n    fi\ndone\n```\n\nIt outputs a certain number of \"OK\"s and ends with the error message leading to the exception thrown by PyGithub:\n\n```\n[...]\nOK\nOK\nOK\nOK\nThu Mar 21 20:35:50 RST 2013\n  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n                                 Dload  Upload   Total   Spent    Left  Speed\n100    35  100    35    0     0     57      0 --:--:-- --:--:-- --:--:--    70HTTP/1.1 401 Unauthorized\nServer: GitHub.com\nDate: Thu, 21 Mar 2013 19:35:53 GMT\nContent-Type: application/json; charset=utf-8\nConnection: keep-alive\nStatus: 401 Unauthorized\nX-GitHub-Media-Type: github.beta\nContent-Length: 35\n\n{\n  \"message\": \"Bad credentials\"\n}\n```\n\nYou might want to submit a bug to Github directly.\n","createdAt":"2013-03-21T19:45:53Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/151#issuecomment-15261064","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDE1MzY1OTIw","author":{"login":"danielniccoli"},"authorAssociation":"NONE","body":"Yesterday I had no problems, today it's fully bugged again.\n\nI did a quick and dirty hack to work around the Github issue in PaginatedList.py\n\n``` Python\ndef _fetchNextPage(self):\n        myWorkaround = True\n        while myWorkaround:\n                try:\n                        headers, data = self.__requester.requestJsonAndCheck(\"GET\", self.__nextUrl, self.__nextParams, None)\n                        myWorkaround = False\n                except:\n                        pass\n\n        […]\n```\n","createdAt":"2013-03-24T18:54:42Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/151#issuecomment-15365920","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDE1MzY2Nzgz","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"Today I also experienced the issue on a simple script doing only a few (non-paginated) requests to the API. It is absolutely not critical for me, so I will not take the time to contact GitHub myself.\n\nThe issue is more general than pagination, so if you really need a workaround, you may prefer to do it in [Requester.py](https://github.com/jacquev6/PyGithub/blob/master/github/Requester.py#L143):\n\nReplace line 143\n\n```\nstatus, responseHeaders, output = self.__requestRaw(verb, url, requestHeaders, encoded_input)\n```\n\nby something like\n\n```\nstatus = 401\nretries = 5\nwhile retries > 0 and status == 401:\n    status, responseHeaders, output = self.__requestRaw(verb, url, requestHeaders, encoded_input)\n    retries -= 1\n```\n\n(I have not tested at all)\n","createdAt":"2013-03-24T19:35:36Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":1}}],"url":"https://github.com/PyGithub/PyGithub/issues/151#issuecomment-15366783","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDE1MzY3NTEx","author":{"login":"danielniccoli"},"authorAssociation":"NONE","body":"Thanks for providing that snippet :+1: \nI contacted Github, but they did not seem to be able to replicate that issue. But since I got a workaround, I won't invest any more time either :)\n\nCheers.\n","createdAt":"2013-03-24T19:59:03Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":1}}],"url":"https://github.com/PyGithub/PyGithub/issues/151#issuecomment-15367511","viewerDidAuthor":false}],"createdAt":"2013-03-21T11:37:00Z","number":151,"state":"CLOSED","title":"Recently random 401 Bad Credentials exceptions","url":"https://github.com/PyGithub/PyGithub/issues/151"},{"author":{"id":"MDQ6VXNlcjI4NTk5MzU=","is_bot":false,"login":"ironbuggy","name":""},"body":"Hello,\n\nI have written a python script to get the entire history of events/issues/commits from a repository.\n\nIn this instance its this repository hadley/ggplot2\nBut when I try to get the event after this specific event \n\n\"1660615977 2013-01-23 21:15:50 Aaron Wolen ForkEvent\" \n\nI get all gibberish like this \n\n\"1660498980 2013-01-23 18:29:13 1660498980 2013-01-23 18:29:13 1660498980 2013-01-23 18:29:13 1660498980 2013-01-23 18:29:13 1660498980 2013-01-23 18:29:13 1660498980 2013-01-23 18:29:13 1660498980 2013-01-23 18:29:13 1660498980 2013-01-23 18:29:13 1660498980 2013-01-23 18:29:13 1660498980 2013-01-23 18:29:13 1660498980 2013-01-23 18:29:13 1660498980 2013-01-23 18:29:13 1660498980 2013-01-23 18:29:13 1660498980 2013-01-23 18:29:13 1660498980 2013-01-23 18:29:13 1660498980 2013-01-23 18:29:13 1660498980 2013-01-23 18:29:13 16604989\"\n\nI'm accessing the event like this:\n\nusing an i counter to increment\nprintEvents(events[i:i+1])      \n\nprintEvents does this:  \ndef printEvents(pageOfEvents):\n\n```\ni=0\n\nfor e in pageOfEvents:\n    print e.id, e.created_at, e.actor.name, e.type\n    i=i+1\n\nif (i == 0):\n    raise IndexError(\"Index out of range\")\nreturn\n```\n\nAny idea why this is happening? It works fine before and after that one event.... Thanks.\n","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDE1MTc2NjM0","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"Hello,\n\nI don't understand everything in your code.\n\nHere is an example of how to iterate through all events of a repository:\n\n```\nimport github\ng = github.Github(\"your_login\",\"your_password\")\nrepo = g.get_user(\"hadley\").get_repo(\"ggplot2\")\nfor event in repo.get_events():\n    print event.id, event.actor.login, \"<--------------------\" if event.id==\"1660615977\" else \"\"\n```\n\nAnd here is an extract of the printed output:\n\n```\n1695556030 djbutler\n[...]\n1660872822 wch\n1660615977 aaronwolen <--------------------\n1660498980 spencerboucher\n[...]\n1638561000 wch\n```\n\nI hope this will help you. If it doesn't, please show me a minimal full script demonstrating your problem. (A script I can copy-paste and execute by only changing the GitHub credentials)\n","createdAt":"2013-03-20T13:51:41Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/150#issuecomment-15176634","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDE1MTc3ODE4","author":{"login":"ironbuggy"},"authorAssociation":"NONE","body":"Thank you for the quick response! I found out what was wrong with my code, thanks heaps!\n\nSince you're here, a few more questions:\n1) Does get_events get all the events available? (because it seems like its only retrieving the x events) e.g. for twitter/bootstrap, the last event is 1695540782 2013-03-19 00:35:08 ThomasWaldmann\n2) Is there a way to filter the events? e.g. filter by date period?\n\nThanks again!\n","createdAt":"2013-03-20T14:13:31Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/150#issuecomment-15177818","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDE1MjIxMTgx","author":{"login":"ironbuggy"},"authorAssociation":"NONE","body":"Also, I'm getting a 502 error when I try to print out the commits?\n\nfor repository: hadley/ggplot2\n\nI always hit it at commit 840\n\n839 commit: ba514e184bc3554b5fbaedf0f9c5cab843b1401d,hadley\nTraceback (most recent call last):\n  File \"<string>\", line 1, in <module>\n  File \"test.py\", line 125, in getCommits\n    for c in commits:\n  File \"/Library/Python/2.7/site-packages/github/PaginatedList.py\", line 35, in **iter**\n    newElements = self.__grow()\n  File \"/Library/Python/2.7/site-packages/github/PaginatedList.py\", line 47, in __grow\n    newElements = self._fetchNextPage()\n  File \"/Library/Python/2.7/site-packages/github/PaginatedList.py\", line 104, in _fetchNextPage\n    headers, data = self.__requester.requestJsonAndCheck(\"GET\", self.__nextUrl, self.__nextParams, None)\n  File \"/Library/Python/2.7/site-packages/github/Requester.py\", line 84, in requestJsonAndCheck\n    return self.__check(*self.requestJson(verb, url, parameters, input))\n  File \"/Library/Python/2.7/site-packages/github/Requester.py\", line 92, in __check\n    raise GithubException.GithubException(status, output)\ngithub.GithubException.GithubException: 502 {u'message': u'Server Error'}\n\ncode:\n    gh = getGitHub() \n    repo = gh.get_user(username).get_repo(reponame)\n\n```\n# get all the commits   \ncommits = repo.get_commits()\n\n    i=0\nfor commit in commits:\n    if commit.author is None:\n        values = [str(commit.sha)]\n    else:\n        values = [str(commit.sha), str(commit.author.login)]\n    print i, \"commit:\", ','.join(values)    \n    i = i + 1\n```\n\nThanks\n","createdAt":"2013-03-21T06:12:13Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/150#issuecomment-15221181","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDE1MjYyMTQ0","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"So many questions :D\n\n1) `Repository.get_events` calls API described on http://developer.github.com/v3/activity/events, which says:\n\n> Events support pagination, however the per_page option is unsupported. The fixed page size is 30 items. Fetching up to ten pages is supported, for a total of 300 events.\n\n2) I don't know a way to filter events\n\n3) Here is a script listing the commits:\n\n```\nimport github\ng = github.Github(\"your_login\", \"your_password\")\nrepo = g.get_user(\"hadley\").get_repo(\"ggplot2\")\n\nfor i, commit in enumerate(repo.get_commits()):\n    print i, commit.sha\n```\n\nIt successfully prints 2061 commits:\n\n```\n0 c9800332380bb4fda62e8a17a030838d923b493f\n1 ece6dcb6563dbd533386a18d4d65c52e19673118\n2 4fbd4f7fd97ed1e7c685c34bcaad01e316853d45\n[...]\n838 4b57335ef484ba9c1d2a43e5e1659bf2ba0a2781\n839 ba514e184bc3554b5fbaedf0f9c5cab843b1401d\n840 b4c112e3de8ca4f46630df54b6b5c8c088e0fdaa\n[...]\n2058 a6a88026a8d8e797924e6b0092988b2b2c3b1c13\n2059 c7174e0afefc0e46639ffa1bb230779fc0899ef1\n2060 6198457400c66d0774006c75353a1e7f1dd2806a\n```\n\nAnyway, the \"502 Server Error\" means that something went wrong on Github's side, not in PyGithub.\nIf you still have the same issue, you might want to enable debug logging (http://jacquev6.github.com/PyGithub/utilities.html#logging) and contact Github with the relevant API calls.\n","createdAt":"2013-03-21T20:05:35Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/150#issuecomment-15262144","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDE1MjYyMjM3","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"I close the issue, but do not hesitate to re-open it if you need to discuss more.\n","createdAt":"2013-03-21T20:07:15Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/150#issuecomment-15262237","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDUzNjMzODY4","author":{"login":"harrywang"},"authorAssociation":"NONE","body":"Hi, I wonder whether .get_events() can be used to get all events assuming that the total number of events is greater that 300? Thanks!\n","createdAt":"2014-08-27T20:16:02Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/150#issuecomment-53633868","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDU0MTY0ODQy","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"@harrywang No this is a limitation of the GitHub API v3 itself: https://developer.github.com/v3/activity/events/#events \"Fetching up to ten pages is supported, for a total of 300 events.\"\n","createdAt":"2014-09-02T15:01:38Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/150#issuecomment-54164842","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDU0MzMxMDQw","author":{"login":"harrywang"},"authorAssociation":"NONE","body":"Thanks a lot for your reply!\n","createdAt":"2014-09-03T17:10:43Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/150#issuecomment-54331040","viewerDidAuthor":false}],"createdAt":"2013-03-20T12:33:32Z","number":150,"state":"CLOSED","title":"Error when trying to iterate past a certain event","url":"https://github.com/PyGithub/PyGithub/issues/150"},{"author":{"id":"MDQ6VXNlcjEwNTAwNjE=","is_bot":false,"login":"bkabrda","name":"Slavek Kabrda"},"body":"Hi,\nI'm experiencing dozens of failures with Python 3. Is this expected or is something wrong on my side? It seems that some of the failures are connected with random order of dict items in str(headers) in ReplayingConnection.request, but there are also other.\n","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDE1MTQ2MTIw","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"Hello,\n\nAccording to [Travis](https://travis-ci.org/jacquev6/PyGithub/builds/5639660), PyGithub's tests pass with Python 3, so this is strange. But after #142 and #143, nothing surprises me :-D\n\nCan you please give me:\n- which version of Python you use (output of `python3 --version`)\n- on what platform (Version of Windows, or output of `uname -a` on Unix-like systems)\n- which version of PyGithub you use\n\nIf you can also create a Gist with the output of `python3 setup.py test`, that would be great!\n\nThanks,\n","createdAt":"2013-03-19T21:59:48Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/149#issuecomment-15146120","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDE1MTYxNjMz","author":{"login":"bkabrda"},"authorAssociation":"NONE","body":"Here you go:\n- Python 3.3.0\n- Fedora 18 x86_64, \n- Linux zizalka 3.8.2-206.fc18.x86_64 #1 SMP Fri Mar 8 15:03:34 UTC 2013 x86_64 x86_64 x86_64 GNU/Linux\n- PyGitHub 1.11.1\n- Gist: https://gist.github.com/bkabrda/5202929 (but note that the failures seem to be somehow random, depending on how the dict are ordered in each run)\n","createdAt":"2013-03-20T07:31:28Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/149#issuecomment-15161633","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDE1MTY1Mjc5","author":{"login":"bilderbuchi"},"authorAssociation":"NONE","body":"here's what I immediately notice: you're using Pygithub 1.11.1 - the current version is 1.12.2, do you also get the errors with the current version?\n","createdAt":"2013-03-20T09:28:29Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/149#issuecomment-15165279","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDE1MTY2MDMz","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"I can reproduce the issue with all versions of PyGithub using Python 3.3 on Windows. It looks like Python 3.3 does not output `dict`s in the same order as Python 2.5 to 3.2 :-(\n\nMy design is bad, I will fix the test framework soon to cope with that.\n","createdAt":"2013-03-20T09:48:00Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/149#issuecomment-15166033","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDE1MTY2MTU4","author":{"login":"bkabrda"},"authorAssociation":"NONE","body":"@jacquev6 thank you!\n","createdAt":"2013-03-20T09:51:36Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/149#issuecomment-15166158","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDE1MTY4NjY0","author":{"login":"bilderbuchi"},"authorAssociation":"NONE","body":"I thought that dict order is something you shouldn't rely on, anyway?\n","createdAt":"2013-03-20T10:59:42Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/149#issuecomment-15168664","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDE1MTY4OTE4","author":{"login":"bkabrda"},"authorAssociation":"NONE","body":"@bilderbuchi that is true, however the dicts used to be \"ordered\". I remember the same thing happening to Ruby hashes, that were recently (half a year?) changed to get random seed on every interpreter execution as a defence before hash collision attacks. (Therefore you get the same order during one execution of an interpreter.) This was causing tons of random failures of tests that expected the hashes to be in a certain order...\nI believe that this is the same with Python 3.3, but I can't find any reference that would confirm this.\n","createdAt":"2013-03-20T11:06:13Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/149#issuecomment-15168918","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDE1MTcyMjgy","author":{"login":"bilderbuchi"},"authorAssociation":"NONE","body":"What I found [here](http://docs.python.org/3/library/stdtypes.html#dict):\n\n> Keys and values are iterated over in an arbitrary order which is non-random, varies across Python implementations, and depends on the dictionary’s history of insertions and deletions. If keys, values and items views are iterated over with no intervening modifications to the dictionary, the order of items will directly correspond. \n","createdAt":"2013-03-20T12:19:39Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/149#issuecomment-15172282","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDE1MTc0ODgy","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"@bilderbuchi Yes that's why I say that \"my design is bad\". But it _used_ to work. Well, fixing will not be that difficult.\n","createdAt":"2013-03-20T13:15:56Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/149#issuecomment-15174882","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDE1MjcwMzY5","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"Fixed. This was _a bit_ painful, in fact :-D And I've added Python 3.3 to the Travis setup.\n\nAnd now Python 2.5 tests are broken on [Travis](https://travis-ci.org/jacquev6/PyGithub/jobs/5700747)... Well, I'll fix that later.\n","createdAt":"2013-03-21T22:31:03Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/149#issuecomment-15270369","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDE1MjczMDg2","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"Fixed: [Travis](https://travis-ci.org/jacquev6/PyGithub/builds/5702158)\n","createdAt":"2013-03-21T23:34:58Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/149#issuecomment-15273086","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDE1MjgzNzg3","author":{"login":"bkabrda"},"authorAssociation":"NONE","body":"Thanks, I think I have a pretty good idea about how to test the non-determinstic dicts in Python 3.3. I'll try to find some time to put together a pull request and make all the tests run on py33.\n","createdAt":"2013-03-22T07:04:32Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/149#issuecomment-15283787","viewerDidAuthor":false}],"createdAt":"2013-03-19T13:25:29Z","number":149,"state":"CLOSED","title":"Test failures with python3","url":"https://github.com/PyGithub/PyGithub/issues/149"},{"author":{"id":"MDQ6VXNlcjMyNzE0Ng==","is_bot":false,"login":"jacquev6","name":"Vincent Jacques"},"body":"","comments":[],"createdAt":"2013-03-11T10:25:53Z","number":146,"state":"CLOSED","title":"Publish version 1.13.0","url":"https://github.com/PyGithub/PyGithub/issues/146"},{"author":{"id":"MDQ6VXNlcjk4NjY4","is_bot":false,"login":"ptwobrussell","name":"Matthew A. Russell"},"body":"Per http://developer.github.com/v3/#pagination, the max items that can possibly be requested is 100 as opposed to the default of 30. From what I can tell, the default is used in all requests and there's no way to override it without modifying the source. Hence, about 1/3 of the available data is being returned on lots of requests\n\nIs there a reason not to go ahead and add a default per_page=100 to all API requests? Best case, it results in faster access to data, and worst case, it has no effect. For my particular uses, I'm making lots of requests, and a speedup of ~3.3x would be a big help.\n\nThoughts?\n","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDE0Njc2NjUz","author":{"login":"ptwobrussell"},"authorAssociation":"NONE","body":"After some more digging around, a quick hack for this to anyone who is interested is to update firstParams in PaginatedList.**init** with a value of `{\"per_page\" : '100'}` in order to get the higher data throughput. Unfortunately, it looks like a lot of code will have to be touched to add this in as a general purpose configuration option because all of the objects that I've peeked at appear to return a PaginatedList with no current way to pass through.\n","createdAt":"2013-03-10T05:26:22Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/145#issuecomment-14676653","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDE0NzA0NjY5","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"It will be relatively easy to add this as an option on the `Github` object and pass it to all `PaginatedList`s through the `Requester` object.\nIt means that _all_ requests returning a `PaginatedList` will have the same `per_page` argument. It seams acceptable, but I want to check with you first.\n","createdAt":"2013-03-11T10:00:10Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/145#issuecomment-14704669","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDE0NzA3MzU2","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"I can't change the default value, because it may break some programs using `PaginatedList.get_page` and assuming 30 items per page.\n","createdAt":"2013-03-11T11:06:03Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/145#issuecomment-14707356","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDE0NzExNDg3","author":{"login":"bilderbuchi"},"authorAssociation":"NONE","body":"add some function to change the value globally (so that interested parties can change it easily), and milestone the default value change for 2.0? ^.^\n","createdAt":"2013-03-11T12:52:07Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/145#issuecomment-14711487","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDE0NzE0OTMw","author":{"login":"ptwobrussell"},"authorAssociation":"NONE","body":"@jacquev6 - Makes perfect sense. I think the ability to pass in a parameter to `Github` would be a great way to make this happen, especially if it's relatively easy to implement.\n","createdAt":"2013-03-11T14:10:06Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/145#issuecomment-14714930","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDE0NzQ0MTMw","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"I'll do that soon, adding a parameter to the constructor of `Github`, and a property to change it afterwards.\n","createdAt":"2013-03-11T21:33:02Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/145#issuecomment-14744130","viewerDidAuthor":false}],"createdAt":"2013-03-09T21:47:07Z","number":145,"state":"CLOSED","title":"Configure default requests with per_page=100","url":"https://github.com/PyGithub/PyGithub/issues/145"},{"author":{"id":"MDQ6VXNlcjk4NjY4","is_bot":false,"login":"ptwobrussell","name":"Matthew A. Russell"},"body":"I'd like to be able to serialize a GithubObject and get back the original JSON that was used to initially construct it for purposes of serializing out to a document oriented store like MongoDB where this representation would be a natural (and highly portable) fit for storage. From looking at how objects are constructed, it seems as though it would be pretty trivial to keep around the JSON and expose it as necessary as opposed to just discarding it.\n\nPerhaps `__str__` could return the readable JSON representation and `__repr__` could contain what currently happens from `__str__` (the unambiguous object with its address)?\n\nIf there are concerns over memory, perhaps this could be a configurable option?\n\nAt any rate, I could help put together the patch but would first like to get your thoughts and whether or not you're open to merging in such a pull request\n","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDE0NTQ4NTcy","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"This seems a good idea. Using all the data returned by Github will preserve attributes that may have been added by Github, but not yet exposed by PyGithub.\n\nHere are some things that must be taken care of:\n- I would rather not expose the json string, but the structured (deserialized) data:\n  - This would be usable in more cases (serialization in other formats for example).\n  - For objects constructed from a json list, the json representation of the object itself is a substring of the returned string, and it will not be easy to extract it.\n- lazy completion (described here: https://github.com/jacquev6/PyGithub/issues/139#issuecomment-13280121) : the data is not the same before and after completion. So accessing this data should trigger the completion, as done for all other attributes.\n- we also need a way to construct a GithubObject from the exposed data, for deserialization.\n","createdAt":"2013-03-07T08:42:25Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/144#issuecomment-14548572","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQzNTU5NjQ0Ng==","author":{"login":"enricorotundo"},"authorAssociation":"NONE","body":"Took me a while to find out that `raw_data` property returns a dict. I see in other libraries they call it something like `as_dict` which makes it easier to find via the search bar... shall I PR a few doc lines?","createdAt":"2018-11-03T15:29:09Z","includesCreatedEdit":true,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":1}}],"url":"https://github.com/PyGithub/PyGithub/issues/144#issuecomment-435596446","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQzNTczNjY4Ng==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"Yes please","createdAt":"2018-11-05T02:27:09Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/144#issuecomment-435736686","viewerDidAuthor":false}],"createdAt":"2013-03-07T04:54:23Z","number":144,"state":"CLOSED","title":"Store original JSON response for objects and expose it for document-oriented storage","url":"https://github.com/PyGithub/PyGithub/issues/144"},{"author":{"id":"MDQ6VXNlcjk4NjY4","is_bot":false,"login":"ptwobrussell","name":"Matthew A. Russell"},"body":"In trying to pip install PyGithub with Python 3.3 just now, I see the following in the console:\n\nDownloading/unpacking PyGithub\n  Downloading PyGithub-1.12.2.tar.gz (1.6MB): 1.6MB downloaded\n  Running setup.py egg_info for package PyGithub\n\nInstalling collected packages: PyGithub\n  Running setup.py install for PyGithub\n    Fixing build/lib/github/**init**.py build/lib/github/AuthenticatedUser.py \n\n...\n\n```\n  File \"/Users/matthew/virtual-environments/mtsw2e/lib/python3.3/site-packages/github/AuthenticatedUser.py\", line 16\n    from . import github.GithubObject\n                        ^\nSyntaxError: invalid syntax\n\n.... more of the same errors ...\n```\n\nIn looking at the source on GitHub for this version (such as https://github.com/jacquev6/PyGithub/blob/v1.12.2/github/UserKey.py), it appears that you are just doing straight imports as \"import github.X\" which is causing 2to3 to produce invalid imports when it rewrites.\n","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDE0NTI3NzQ2","author":{"login":"bilderbuchi"},"authorAssociation":"NONE","body":"I installed it a couple of days ago, for python 3.2, worked without problems (ubuntu 12.10 64bit, using `pip-3.2`)\nI believe the import syntax change is made automatically by python `2to3` - maybe this is malfunctioning on your end somehow?\nI just checked, and in that file, I have `import github.something`-type import statements in both 3.2 and 2.7 versions.\n\nedit: I just realized that I'm on the machine where I only have 1.12.1 installed, so my info will not be as relevant. I can check on the other machine tomorrow.\n","createdAt":"2013-03-06T21:38:20Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/143#issuecomment-14527746","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDE0NTM2NzYz","author":{"login":"ptwobrussell"},"authorAssociation":"NONE","body":"I've done a little more digging, and discovered a couple of things that may be helpful. First, running 2to3 on a file such as UserKey.py produces a file that is simply not Python 3 compatible, so that confirms the source of what was happening above once I figured out that you were using 2to3 in setup.py. \n\nI tried fiddling around with some of the 2to3 options such as \"-x import\" to see if this would result in fixes, but I couldn't see any silver bullets because of the way you use references throughout your file(s) to the github package in fairly liberal ways. There may be some other kind of fix, but all I could come up with was to make a few fundamental changes to the way you import and reference modules in packages so that it works with Python 2 and doesn't cause 2to3 to try to \"help\". Referencing the UserKey.py file as an example, there are just a few changes that would make be required to work with Python 2 as-is and still work with Python 3.3 after running 2to3. Basically, just stop referencing \"github\" in your imports and references:\n\n```\n$ diff UserKey.py.original UserKey.py.modified\n16c16\n< import github.GithubObject\n---\n> import GithubObject\n19c19\n< class UserKey(github.GithubObject.GithubObject):\n---\n> class UserKey(GithubObject.GithubObject):\n76c76\n<     def edit(self, title=github.GithubObject.NotSet, key=github.GithubObject.NotSet):\n---\n>     def edit(self, title=GithubObject.NotSet, key=GithubObject.NotSet):\n```\n\nI've omitted the few other changes that would have followed that 2to3 made for brevity and tested that the resulting changes work with Python 2 and 3.\n\nI'm no expert on best practices for managing Python package references, so there might be better ways, but I thought I'd pass this on since it might be helpful and save you some time in diagnostics. If this is indeed the \"best\" approach, the good news is that it looks like it's a fairly mechanical set of changes. The bad news is that it is systemic and you'll have to touch a lot of files.\n","createdAt":"2013-03-07T00:58:35Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/143#issuecomment-14536763","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDE0NTQ5MjA4","author":{"login":"bilderbuchi"},"authorAssociation":"NONE","body":"just to clarify, I'm not the dev of this package - @jacquev6 is. ;-)\n2to3 is a hunch of mine from what I saw on installing it - and afaik using 2to3 is one kind of standard practice to maintain python packages which are compatible with Py2 and Py3 from one codebase.\n","createdAt":"2013-03-07T09:01:18Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/143#issuecomment-14549208","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDE0NTUwOTYz","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"This is _very_ strange, because I had to refactor the imports so that 2to3 works... See commits 9a03610f7b, which was exactly the opposite of what you propose...\n\nAnd it works on Travis: https://travis-ci.org/jacquev6/PyGithub/jobs/5206619, and on Ubuntu as stated by @bilderbuchi...\n\nBut I acknowledge your issue and I will try to understand it. I have just tried Cygwin's 2to3 and python3, and I have the same error. I don't have access to Linux right now, but I will check soon.\n","createdAt":"2013-03-07T09:48:59Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/143#issuecomment-14550963","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDE0NTUyMzM0","author":{"login":"bilderbuchi"},"authorAssociation":"NONE","body":"note that my working Ubuntu version is on Py3.2.3, and the OP is on 3.3 - maybe that makes a difference?\n","createdAt":"2013-03-07T10:24:41Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/143#issuecomment-14552334","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDE0NTU0NzQw","author":{"login":"ptwobrussell"},"authorAssociation":"NONE","body":"I would be glad to help in any way that I can and really appreciate your consideration on this matter. I will also be trying to better understand what 2to3 is doing differently son my setup as well.\n\nOn Mar 7, 2013, at 3:49 AM, Vincent Jacques notifications@github.com wrote:\n\n> This is very strange, because I had to refactor the imports so that 2to3 works... See commits 9a03610, which was exactly the opposite of what you propose...\n> \n> And it works on Travis: https://travis-ci.org/jacquev6/PyGithub/jobs/5206619, and on Ubuntu as stated by @bilderbuchi...\n> \n> But I acknowledge your issue and I will try to understand it. I have just tried Cygwin's 2to3 and python3, and I have the same error. I don't have access to Linux right now, but I will check soon.\n> \n> —\n> Reply to this email directly or view it on GitHub.\n","createdAt":"2013-03-07T11:23:46Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/143#issuecomment-14554740","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDE0NTU1NDMz","author":{"login":"bilderbuchi"},"authorAssociation":"NONE","body":"Could it possibly be [this bug](http://bugs.python.org/issue12864)? Although I don't see why this should only be exposed in 3.3...\n","createdAt":"2013-03-07T11:43:33Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/143#issuecomment-14555433","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDE0NTY3NDU5","author":{"login":"ptwobrussell"},"authorAssociation":"NONE","body":"It certainly looks like the same issue, though, like you said, the 3.2 vs 3.3 difference doesn't make sense. Then again, I haven't tested it with 3.2, so the same issue could be the case on OS X perhaps. If it's helpful to know, I installed Python 3 with homebrew if that makes any difference.\n","createdAt":"2013-03-07T15:39:40Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/143#issuecomment-14567459","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDE0NzQ0MDIz","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"Wow... I think I've understood! 2to3 does not behave the same on case-insensitive filesystems, because I have a package named 'github' and a module 'Github.py'. That's why 2to3 generates bad imports on my Cygwin install, but works on Linux.\n\n@ptwobrussell Do you confirm your Mac OS filesystem is case-insensitive?\n","createdAt":"2013-03-11T21:31:14Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/143#issuecomment-14744023","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDE0NzQ2Njc2","author":{"login":"ptwobrussell"},"authorAssociation":"NONE","body":"Wow. Good catch. I've never really thought about it but it does appear that the file system on Mac is case insenstive:\n\n```\nGoblin:tmp matthew$ touch foo\nGoblin:tmp matthew$ ls -la foo\n-rw-r--r--  1 matthew  wheel  0 Mar 11 17:18 foo\nGoblin:tmp matthew$ ls -la Foo\n-rw-r--r--  1 matthew  wheel  0 Mar 11 17:18 Foo\nGoblin:tmp matthew$ \n```\n\nHowever, there is no file `Foo` in that directory -- only a `foo` file exists.\n","createdAt":"2013-03-11T22:19:50Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/143#issuecomment-14746676","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDE0NzYyODQ5","author":{"login":"bilderbuchi"},"authorAssociation":"NONE","body":"wow, that's really surprising - I was not aware of that. I wonder though, how does 2to3 conversion work on Windows? Or does it not?\n\nedit: [apparently](http://apple.stackexchange.com/a/22304) the macOS file system can be case-sensitive or not, depending on user choice. there's also a way to find out which your file system is mentioned.\n","createdAt":"2013-03-12T08:00:52Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/143#issuecomment-14762849","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDE0NzY1NDc1","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"@bilderbuchi I don't have a native Python3 on the Windows PC I'm using right now, but I'll check soon.\n","createdAt":"2013-03-12T09:23:37Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/143#issuecomment-14765475","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDE1MjY1MTE0","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"I've just checked, 2to3 on Windows has the same issue. That's coherent.\n","createdAt":"2013-03-21T21:00:47Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/143#issuecomment-15265114","viewerDidAuthor":false}],"createdAt":"2013-03-06T20:48:02Z","number":143,"state":"CLOSED","title":"Version 1.12.2 does not work with Python 3(.3) because of 2to3 issues","url":"https://github.com/PyGithub/PyGithub/issues/143"},{"author":{"id":"MDQ6VXNlcjMyNzQ0Mg==","is_bot":false,"login":"bilderbuchi","name":"Christoph Buchner"},"body":"Hi! \nI'm currently in the process of switching a program to python 3.2. I encounter the following problem: `TypeError: can't use a string pattern on a bytes-like object`\n\n```\nimport github\ngh_instance = github.Github('<my-token>')\nuser = gh_instance.get_user()\nuser.name\n---------------------------------------------------------------------------\nTypeError                                 Traceback (most recent call last)\n<ipython-input-4-ec5376e00d61> in <module>()\n----> 1 user.name\n\n/usr/local/lib/python3.2/dist-packages/github/AuthenticatedUser.py in name(self)\n    166         :type: string\n    167         \"\"\"\n--> 168         self._completeIfNotSet(self._name)\n    169         return self._NoneIfNotSet(self._name)\n    170 \n\n/usr/local/lib/python3.2/dist-packages/github/GithubObject.py in _completeIfNotSet(self, value)\n     61     def _completeIfNotSet(self, value):\n     62         if not self.__completed and value is NotSet:\n---> 63             self.__complete()\n     64 \n     65     def __complete(self):\n\n/usr/local/lib/python3.2/dist-packages/github/GithubObject.py in __complete(self)\n     68             self._url,\n     69             None,\n---> 70             None\n     71         )\n     72         self._useAttributes(data)\n\n/usr/local/lib/python3.2/dist-packages/github/Requester.py in requestJsonAndCheck(self, verb, url, parameters, input)\n     77 \n     78     def requestJsonAndCheck(self, verb, url, parameters, input):\n---> 79         return self.__check(*self.requestJson(verb, url, parameters, input))\n     80 \n     81     def requestMultipartAndCheck(self, verb, url, parameters, input):\n\n/usr/local/lib/python3.2/dist-packages/github/Requester.py in __check(self, status, responseHeaders, output)\n     83 \n     84     def __check(self, status, responseHeaders, output):\n---> 85         output = self.__structuredFromJson(output)\n     86         if status >= 400:\n     87             raise GithubException.GithubException(status, output)\n\n/usr/local/lib/python3.2/dist-packages/github/Requester.py in __structuredFromJson(self, data)\n     92             return None\n     93         else:\n---> 94             return json.loads(data)\n     95 \n     96     def requestJson(self, verb, url, parameters, input):\n\n/usr/lib/python3.2/json/__init__.py in loads(s, encoding, cls, object_hook, parse_float, parse_int, parse_constant, object_pairs_hook, **kw)\n    307             parse_int is None and parse_float is None and\n    308             parse_constant is None and object_pairs_hook is None and not kw):\n--> 309         return _default_decoder.decode(s)\n    310     if cls is None:\n    311         cls = JSONDecoder\n\n/usr/lib/python3.2/json/decoder.py in decode(self, s, _w)\n    351 \n    352         \"\"\"\n--> 353         obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n    354         end = _w(s, end).end()\n    355         if end != len(s):\n\nTypeError: can't use a string pattern on a bytes-like object\n```\n\nIt's `PyGithub-1.12.1` installed via `pip-3.2` and python `'3.2.3 (default, Oct 19 2012, 19:53:57) \\n[GCC 4.7.2]'`\n","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDE0MjQwMTU4","author":{"login":"bilderbuchi"},"authorAssociation":"NONE","body":"I don't know how to run the tests, but after some digging I tried `python3 -m github.tests.__main__` and it said `Ran 309 tests in 1.849s` `OK`. Don't know if that's the correct way, though.\n","createdAt":"2013-02-28T15:55:36Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/142#issuecomment-14240158","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDE0MzUwMDA2","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"Thank you for reporting that, and sorry for this stupid bug...\n\nFirst, `python3 -m github.tests` is a correct way to run tests. These are the same tests as run here: https://travis-ci.org/jacquev6/PyGithub, which are also OK for Python 3.2.\n\nI've just reproduced the issue with `github.Github().get_user(\"jacquev6\").name`, so I should be able to debug that soon.\n","createdAt":"2013-03-03T16:52:12Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/142#issuecomment-14350006","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDE0MzUwNDY3","author":{"login":"bilderbuchi"},"authorAssociation":"NONE","body":"no problem. glad that you can reproduce! thanks :-)\n","createdAt":"2013-03-03T17:18:25Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/142#issuecomment-14350467","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDE0MzUxMTg1","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"I've just published version 1.12.2, it's fixed!\n","createdAt":"2013-03-03T17:54:48Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/142#issuecomment-14351185","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDE0MzUyNjIx","author":{"login":"bilderbuchi"},"authorAssociation":"NONE","body":"that was quick, thanks. i left some comments inline in the commit. also, that's an insanely short test :D \n","createdAt":"2013-03-03T19:08:21Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/142#issuecomment-14352621","viewerDidAuthor":false}],"createdAt":"2013-02-28T15:00:18Z","number":142,"state":"CLOSED","title":"Bug with Python 3?","url":"https://github.com/PyGithub/PyGithub/issues/142"},{"author":{"id":"MDQ6VXNlcjMyNzE0Ng==","is_bot":false,"login":"jacquev6","name":"Vincent Jacques"},"body":"","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDEzODQ4ODI0","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"Done. It's version 1.12.1 actually.\n","createdAt":"2013-02-20T18:45:12Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/141#issuecomment-13848824","viewerDidAuthor":false}],"createdAt":"2013-02-13T07:59:55Z","number":141,"state":"CLOSED","title":"Publish version 1.12.0","url":"https://github.com/PyGithub/PyGithub/issues/141"},{"author":{"id":"MDQ6VXNlcjI1Mjk1OTA=","is_bot":false,"login":"ksookocheff-va","name":"Kevin Sookocheff"},"body":"The GitHub API returns a list of all files in a directory when you use Get Contents on a directory.\n\nexample:\nhttps://api.github.com/repos/twitter/bootstrap/contents/js/?ref=d28343dc3ad53a411ae3685e7d6a7866c8c22d6b\n\nCurrently PyGithub only returns None when using this API to query a directory.\n","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDEzNDc3MDkw","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"I'll look at that soon, thank you for reporting.\n","createdAt":"2013-02-13T07:10:52Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/140#issuecomment-13477090","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDEzNDc3OTc3","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"http://developer.github.com/v3/repos/contents/#get-contents does not document the response in the case :path is a directory. In that case, Github returns a list of files. This is why I missed the \"contents of any file **or directory**\" in this doc.\n\nI will have to return a different type depending on whether `path` points to a file or a directory. So, the client will have to know beforehand if he requests the content of a file or a directory.\n\nIt doesn't make sense to mix this in the same method. I will add a `Repository.get_dir_contents` method, returning a list of `ContentFile`. I will also add an explicit alias `Repository.get_file_contents` for the current `Repository.get_contents`.\n","createdAt":"2013-02-13T07:52:32Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/140#issuecomment-13477977","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDEzNDc5MzY3","author":{"login":"bilderbuchi"},"authorAssociation":"NONE","body":"so, what happens when you do  `Repository.get_dir_contents` on a directory which contains files and other directories? e.g. how would you crawl a directory tree using this? you'd need some way to return the directories, too? \naccording to the link in the first post, the github API returns also a \"type\" dictionary key which is either \"file\" or \"dir\". so maybe a good way is to return a list of `Content` and differentiate between `ContentFile` and `ContentDir` with another mechanism?\n","createdAt":"2013-02-13T08:43:57Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/140#issuecomment-13479367","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDEzNDgxMTMw","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"Something like this (pseudo-code, obviously not tested):\n\n```\ndef crawl(dir_path, process_file, process_dir):\n    for c in repo.get_dir_contents(dir_path):  # c is a ContentFile\n        if c.type == \"file\":\n             process_file(c)\n        else:  # c.type == \"dir\"\n             process_dir(c)\n             crawl(c.path)\n```\n\nThe difference between https://api.github.com/repos/twitter/bootstrap/contents/js/bootstrap-affix.js (`Repository.get_file_contents`) and https://api.github.com/repos/twitter/bootstrap/contents/js (`Repository.get_dir_contents`) is that the first one return a structure (`ContentFile`) and second one returns a list of the structure returned by the first one (list of `ContentFile`).\n\nIn the pseudo-code above, the `ContentFile` passed to `process_file` will be built from:\n\n```\n{\n    \"sha\": \"960f2af85a7ced44c4e3190255ee3092c3665bbb\",\n    \"size\": 8320,\n    \"name\": \"bootstrap-typeahead.js\",\n    \"path\": \"js/bootstrap-typeahead.js\",\n    \"type\": \"file\",\n    \"url\": \"https://api.github.com/repos/twitter/bootstrap/contents/js/bootstrap-typeahead.js\",\n    \"git_url\": \"https://api.github.com/repos/twitter/bootstrap/git/blobs/960f2af85a7ced44c4e3190255ee3092c3665bbb\",\n    \"html_url\": \"https://github.com/twitter/bootstrap/blob/master/js/bootstrap-typeahead.js\",\n    \"_links\": {\n        \"self\": \"https://api.github.com/repos/twitter/bootstrap/contents/js/bootstrap-typeahead.js\",\n        \"git\": \"https://api.github.com/repos/twitter/bootstrap/git/blobs/960f2af85a7ced44c4e3190255ee3092c3665bbb\",\n        \"html\": \"https://github.com/twitter/bootstrap/blob/master/js/bootstrap-typeahead.js\"\n    }\n}\n```\n\nand will be lazy-completed by calling https://api.github.com/repos/twitter/bootstrap/contents/js/bootstrap-typeahead.js if `c.contents` or `c.encoding` is called.\n\nThe `ContentFile` passed to `process_dir` will be built from:\n\n```\n{\n    \"sha\": \"f1ad7515dc05d0e2bc60f7c292e4f2134dcd91cf\",\n    \"size\": 0,\n    \"name\": \"tests\",\n    \"path\": \"js/tests\",\n    \"type\": \"dir\",\n    \"url\": \"https://api.github.com/repos/twitter/bootstrap/contents/js/tests\",\n    \"git_url\": \"https://api.github.com/repos/twitter/bootstrap/git/trees/f1ad7515dc05d0e2bc60f7c292e4f2134dcd91cf\",\n    \"html_url\": \"https://github.com/twitter/bootstrap/tree/master/js/tests\",\n    \"_links\": {\n        \"self\": \"https://api.github.com/repos/twitter/bootstrap/contents/js/tests\",\n        \"git\": \"https://api.github.com/repos/twitter/bootstrap/git/trees/f1ad7515dc05d0e2bc60f7c292e4f2134dcd91cf\",\n        \"html\": \"https://github.com/twitter/bootstrap/tree/master/js/tests\"\n    }\n}\n```\n\nand will not be lazy-completed. (There is something inconsistent in Github API v3 here: calling the `url` field of this object does not return the same object as it usually does, but the list of objects in the directory.)\n","createdAt":"2013-02-13T09:37:02Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/140#issuecomment-13481130","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDEzNjYzNjQ4","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"It's now implemented in branch `develop`. It will be in next release, probably tomorrow.\n\n@ksookocheff-va @bilderbuchi I close the issue, but do not hesitate to continue discussion here if needed.\n","createdAt":"2013-02-16T18:14:01Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/140#issuecomment-13663648","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDEzNjc2NDc1","author":{"login":"bilderbuchi"},"authorAssociation":"NONE","body":"Thanks. :-)\n","createdAt":"2013-02-16T22:45:00Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/140#issuecomment-13676475","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM5MzEzMjgwNA==","author":{"login":"vipulgupta2048"},"authorAssociation":"NONE","body":"Hi, how would one go about finding directories through PyGitHub? I just need to find if the directory exist in the repo or not. \r\nUsing  `repo.get_dir_contents('screenshot/') or repo.get_dir_contents('screenshots/')`\r\nIs this correct?\r\n","createdAt":"2018-05-30T11:52:01Z","includesCreatedEdit":true,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/140#issuecomment-393132804","viewerDidAuthor":false}],"createdAt":"2013-02-12T19:53:26Z","number":140,"state":"CLOSED","title":"Repository.get_contents does not return directory information","url":"https://github.com/PyGithub/PyGithub/issues/140"},{"author":{"id":"MDQ6VXNlcjI3MzIxMA==","is_bot":false,"login":"ianozsvald","name":"Ian Ozsvald"},"body":"I noticed that calls to a user object (e.g. user.email, user.location etc) caused multiple calls to GitHub. Looking at GithubObject.py I see several references to __completed and one to _completed (single underscore) on line 72. Changing line 72 to use a double underscore removed the repeated calls to Github.\n\nI tried to run your tests but can't figure out how to do so? I'd have left you a pull request if so. I tried \"python -m unittest discover\" and also just running the files, I'm not familiar with the format you've used. I'm happy to run with logs etc if that's useful (some guidance on how to run the tests would be super helpful too). Thanks, Ian.\n","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDEzMjc5NDgx","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"That's the craziest bug ever found on PyGithub! Lazy completion is a fundamental aspect of the design of my library and... it is broken...\n\nI'll fix it beginning of next week. Thank you very much for pinpointing it!\n\nBTW, running the tests can be done by either `python -m github.tests` or `./setup.py test`. Some day, I'll take time to write a real documentation for this project.\n","createdAt":"2013-02-08T07:13:44Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/139#issuecomment-13279481","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDEzMjgwMTIx","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"Summary: inner objects are not returned by Github with all their attributes (for example, see the user in http://developer.github.com/v3/issues/#get-a-single-issue), so I've implemented \"lazy completion\": a new request is fired when you access an attribute that was not retrieved. After this request, all attributes have been retrieved and it does not make sense to fire the same request again and again. This part was broken by a missing \"_\".\n\nThe fix is now pushed on `master`. I will release a new version today or on Monday.\n\nThank you!\n","createdAt":"2013-02-08T07:43:57Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/139#issuecomment-13280121","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDEzMjg1MTU4","author":{"login":"ianozsvald"},"authorAssociation":"NONE","body":"Glad I could help :-) I confirm that the tests run here - maybe you could add the test instruction to the README? Maybe it'll help other people with contributing. Much obliged, Ian.\n","createdAt":"2013-02-08T10:48:28Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/139#issuecomment-13285158","viewerDidAuthor":false}],"createdAt":"2013-02-07T22:12:31Z","number":139,"state":"CLOSED","title":"Typo in GithubObject \"self._completed\" -> \"self.__completed\"?","url":"https://github.com/PyGithub/PyGithub/issues/139"},{"author":{"id":"MDQ6VXNlcjMyNzE0Ng==","is_bot":false,"login":"jacquev6","name":"Vincent Jacques"},"body":"","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDEzMzM0MDc4","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"Just had to update setuptools.\n","createdAt":"2013-02-09T16:56:12Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/138#issuecomment-13334078","viewerDidAuthor":false}],"createdAt":"2013-02-07T18:20:14Z","number":138,"state":"CLOSED","title":"Restore *.md and tests/ReplayData/*.txt files in source distribution","url":"https://github.com/PyGithub/PyGithub/issues/138"},{"author":{"id":"MDQ6VXNlcjMyNzE0Ng==","is_bot":false,"login":"jacquev6","name":"Vincent Jacques"},"body":"","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDEzMzM0MDg2","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"Done\n","createdAt":"2013-02-09T16:56:36Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/137#issuecomment-13334086","viewerDidAuthor":false}],"createdAt":"2013-02-07T18:19:27Z","number":137,"state":"CLOSED","title":"Publish version 1.11.1","url":"https://github.com/PyGithub/PyGithub/issues/137"},{"author":{"id":"MDQ6VXNlcjMyNzE0Ng==","is_bot":false,"login":"jacquev6","name":"Vincent Jacques"},"body":"For example, PullRequest.head.user can be an Organization (see tests reproducing #131)\n","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDM2MjU3OTY2","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"This will be in v2!\n","createdAt":"2014-02-27T16:07:52Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/136#issuecomment-36257966","viewerDidAuthor":false}],"createdAt":"2013-02-03T17:43:22Z","number":136,"state":"CLOSED","title":"Dynamically create a NamedUser or Organization where needed","url":"https://github.com/PyGithub/PyGithub/issues/136"},{"author":{"id":"MDQ6VXNlcjMyNzQ0Mg==","is_bot":false,"login":"bilderbuchi","name":"Christoph Buchner"},"body":"Hi!\nI think I've found a bug. I successfully created an API authorization with some scopes. In the program I want to use this autorization in, I'm trying to verify the correct scopes before proceeding, but this does not work as expected. From iPython:\n\n``` python\nfrom github import Github\nuser = Github(some_token).get_user()\nauths=user.get_authorizations()\nauths\nOut[5]: <github.PaginatedList.PaginatedList instance at 0xad31bac>\nfor a in auths:\n    print a.note\n---------------------------------------------------------------------------\nGithubException                           Traceback (most recent call last)\n<ipython-input-6-b49dc83bedec> in <module>()\n----> 1 for a in auths:\n      2     print a.note\n\n/usr/local/lib/python2.7/dist-packages/github/PaginatedList.pyc in __iter__(self)\n     33             yield element\n     34         while self._couldGrow():\n---> 35             newElements = self.__grow()\n     36             for element in newElements:\n     37                 yield element\n\n/usr/local/lib/python2.7/dist-packages/github/PaginatedList.pyc in __grow(self)\n     45 \n     46     def __grow(self):\n---> 47         newElements = self._fetchNextPage()\n     48         self.__elements += newElements\n     49         return newElements\n\n/usr/local/lib/python2.7/dist-packages/github/PaginatedList.pyc in _fetchNextPage(self)\n     83 \n     84     def _fetchNextPage(self):\n---> 85         headers, data = self.__requester.requestAndCheck(\"GET\", self.__nextUrl, self.__nextParams, None)\n     86 \n     87         links = self.__parseLinkHeader(headers)\n\n/usr/local/lib/python2.7/dist-packages/github/Requester.pyc in requestAndCheck(self, verb, url, parameters, input)\n     78         output = self.__structuredFromJson(output)\n     79         if status >= 400:\n---> 80             raise GithubException.GithubException(status, output)\n     81         return headers, output\n     82 \n\nGithubException: 404 {u'message': u'Not Found'}\n```\n\nis this a bug or am I doing something wrong/impossible. \n\nbtw, when creating a github instance with an authorization token, this does not error out when the token is invalid, i.e. I can say `Github(\"mySillyString\")` without error message - is this by design?\n","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDEyODIzMjQ0","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"Thank you for the report, I'll look at this issue soon.\n","createdAt":"2013-01-29T07:17:26Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/134#issuecomment-12823244","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDEyODQ4NjIy","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"Let's first go through your BTW-question :-)\n\nIt's not specific to OAuth: you could as well create a Github instance with a silly user name and a silly password: `g = github.Github(\"foo\", \"bar\")` does not fail. It will fail on the first actual request sent to Github. This is so because there is no real point doing a request just to check credentials. If you need it, you can explicitly call `g.get_user().name` just after creating `g`. It will send a request to Github and you will get an exception `github.GithubException.GithubException: 401 {u'message': u'Bad credentials'}`.\n","createdAt":"2013-01-29T18:08:16Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":1}}],"url":"https://github.com/PyGithub/PyGithub/issues/134#issuecomment-12848622","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDEyODQ5NzE2","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"I've been able to reproduce your issue. See the two .txt files in 921ba8d: Github's reply is different when authenticated with login/password and when authenticated by oauth.\n\nI will investigate further soon. X-OAuth-Scopes and X-Accepted-OAuth-Scopes headers described in http://developer.github.com/v3/oauth/#scopes may help.\n","createdAt":"2013-01-29T18:30:34Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/134#issuecomment-12849716","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDEzMDUzOTUw","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"First request to prove the token I use is OK:\n\n`$ curl -H \"Authorization: token TOKEN\" https://api.github.com/user -I`\nHTTP/1.1 200 OK\nServer: GitHub.com\nDate: Sun, 03 Feb 2013 20:42:59 GMT\nContent-Type: application/json; charset=utf-8\nConnection: keep-alive\nStatus: 200 OK\nX-GitHub-Media-Type: github.beta\n**X-Accepted-OAuth-Scopes: user, user:email, user:follow**\nCache-Control: private, s-maxage=60, max-age=60\n**X-RateLimit-Limit: 5000**\nX-Content-Type-Options: nosniff\nLast-Modified: Sun, 03 Feb 2013 17:43:22 GMT\nVary: Accept, Authorization, Cookie\n**X-OAuth-Scopes: repo, user, gist**\nContent-Length: 1633\nETag: \"97ffe7468b004ebb0e683fbd8a3e5d50\"\n**X-RateLimit-Remaining: 4989**\n\nSecond request to show what happens on a real 404 error:\n\n`$ curl -H \"Authorization: token TOKEN\" https://api.github.com/foobar -I`\nHTTP/1.1 404 Not Found\nServer: GitHub.com\nDate: Sun, 03 Feb 2013 20:42:00 GMT\nContent-Type: application/json; charset=utf-8\nConnection: keep-alive\nStatus: 404 Not Found\n**X-OAuth-Scopes: repo, user, gist**\nCache-Control:\n**X-RateLimit-Limit: 5000**\nX-Content-Type-Options: nosniff\nX-GitHub-Media-Type: github.beta\n**X-RateLimit-Remaining: 4990**\nContent-Length: 29\n\nThird request to show what happens on the /authorizations endpoint:\n\n`$ curl -H \"Authorization: token TOKEN\" https://api.github.com/authorizations -I`\nHTTP/1.1 404 Not Found\nServer: GitHub.com\nDate: Sun, 03 Feb 2013 20:44:33 GMT\nContent-Type: application/json; charset=utf-8\nConnection: keep-alive\nStatus: 404 Not Found\nX-Content-Type-Options: nosniff\n**X-RateLimit-Limit: 60**\nX-GitHub-Media-Type: github.beta\nCache-Control:\nContent-Length: 29\n**X-RateLimit-Remaining: 43**\n","createdAt":"2013-02-03T20:48:06Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/134#issuecomment-13053950","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDEzMDU0MDE2","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"So, when accessing the /authorizations endpoint with an OAuth token, Github does not even validate the token and replies as if we were unauthenticated.\n\nThis is where I stop: this has nothing to do with PyGithub, you may want to contact Github directly.\n\nNote that I can understand that accessing /authorizations is a _very_ critical operation, and that Github does not want to allow it in OAuth mode.\n","createdAt":"2013-02-03T20:51:28Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/134#issuecomment-13054016","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDEzMDY4Njk2","author":{"login":"bilderbuchi"},"authorAssociation":"NONE","body":"First, thank you for investigating. \nThe authentication verification with `g.get_user().name` is nice, I should have thought of that myself...\n\nI see that the missing scopes check is not on your side. I even now found the following in the API help which explains why we can't check authorizations with a token-authenticated user:\n\"There is an API for users to manage their own tokens. You can only access your own tokens, and only through Basic Authentication.\"\n\nBut, I also found this [in the help](http://developer.github.com/v3/oauth/#scopes): \n\n```\ncurl -H \"Authorization: bearer SOME_TOKEN\" https://api.github.com/users/bilderbuchi -I\nHTTP/1.1 200 OK\nServer: GitHub.com\nDate: Mon, 04 Feb 2013 09:45:57 GMT\nContent-Type: application/json; charset=utf-8\nConnection: keep-alive\nStatus: 200 OK\nX-Accepted-OAuth-Scopes: user, user:follow, user:email\nX-GitHub-Media-Type: github.beta\nX-RateLimit-Limit: 5000\nVary: Accept, Authorization, Cookie\nX-RateLimit-Remaining: 4992\nContent-Length: 1379\nETag: \"SOME_TAG\"\nX-Content-Type-Options: nosniff\nLast-Modified: Thu, 31 Jan 2013 16:17:04 GMT\nX-OAuth-Scopes: repo:status, gist\nCache-Control: private, s-maxage=60, max-age=60\n```\n\nAnd this gives the correct set of scopes in the `X-OAuth-Scopes` field. This seems like the correct way to check. Is that already possible in PyGithub? I guess not, I didn't find the `bearer` keyword in your API reference. In that case, would it make sense to implement this?\n","createdAt":"2013-02-04T09:49:32Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/134#issuecomment-13068696","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDEzMTE3NjEx","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"It might be possible. I'll check if it's easy this week.\n","createdAt":"2013-02-05T07:21:17Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/134#issuecomment-13117611","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDEzMTU3Njc2","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"So, `Authorization: bearer SOME_TOKEN` is just a synonym of `Authorization: token SOME_TOKEN`, and it was easy to retrieve the value of the header.\n\nYou can now access the list of scopes through `g.oauth_scopes` (after the first request).\n\nThis will be in next version, to be published this week.\n","createdAt":"2013-02-05T23:07:06Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/134#issuecomment-13157676","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDEzMTc2NDU4","author":{"login":"bilderbuchi"},"authorAssociation":"NONE","body":"Nice, thank you!\n","createdAt":"2013-02-06T10:54:50Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/134#issuecomment-13176458","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDI0NTQ3NzMxNg==","author":{"login":"ericsoco"},"authorAssociation":"NONE","body":"It's been a long time since either of you cared about this thread, but -- a note for posterity and possible increased googleability:\n\nSince the [GitHub Authorizations API](https://developer.github.com/v3/oauth_authorizations/#oauth-authorizations-api) requires Basic Authentication, and does not support using OAuth, I was stumped on how to check the granted scopes for an authorized user.\n\nThe `X-OAuth-Scopes` response header on all GitHub API requests lists those scopes. Easy-peasy. Once you know where to look...\n\nThanks for calling that out here!\n","createdAt":"2016-09-08T02:34:21Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/134#issuecomment-245477316","viewerDidAuthor":false}],"createdAt":"2013-01-28T15:33:19Z","number":134,"state":"CLOSED","title":"Can't verify authorizations of token-authorized user","url":"https://github.com/PyGithub/PyGithub/issues/134"},{"author":{"id":"MDQ6VXNlcjMzODAzMQ==","is_bot":false,"login":"kodeshpa","name":""},"body":"Hi,\n\nI am trying to create an issue using library. But always get GithubException: 404 {u'message': u'Not Found'} error message . Please help\n\nmy code looks as fellow. let me know if i am doing something wrong\n\nrepo_service = Github('Token')\nrepo_service.get_repo('Repo Name').create_issue('test', 'TestSam', assignee=None, milestone=None, labels = None)\n","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDEyNjM4Nzgw","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"It would be easier with a stack trace of the exception :-) With the information you gave, I can't know which part fails.\n\nI assume you have the same exception with just\n\n```\ng = Github('Token')\ng.get_repo('Repo Name')\n```\n\nbecause you don't use the full name of the repo.\n\nHere is an example of how to create an issue on jacquev6/PyGithub:\n\n```\ng = Github(token)\nrepo = g.get_user(\"jacquev6\").get_repo(\"PyGithub\")  # or repo = g.get_repo(\"jacquev6/PyGithub\")\nissue = repo.create_issue(\"Issue title\")\n```\n\nI hope it helps, do not hesitate to tell me if you still have problems.\n","createdAt":"2013-01-24T06:04:51Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/132#issuecomment-12638780","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDEyNjgyOTEw","author":{"login":"kodeshpa"},"authorAssociation":"NONE","body":"(Pdb) Traceback (most recent call last):\n  File \"/Users/app/views.py\", line 162, in github\n    issue1 = repo.create_issue(\"Issue title\", \"issue body\")\n  File \"/Library/Python/2.7/site-packages/github/Repository.py\", line 375, in create_issue\n    post_parameters\n  File \"/Library/Python/2.7/site-packages/github/Requester.py\", line 80, in requestAndCheck\n    raise GithubException.GithubException(status, output)\nGithubException: 404 {u'message': u'Not Found'}\n\nHope this helps. Let me know how can i get additional info \n","createdAt":"2013-01-25T01:03:34Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/132#issuecomment-12682910","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQ3NTg1OTc3NQ==","author":{"login":"jpmens"},"authorAssociation":"NONE","body":"For anybody finding this in future: I was attempting the same, also with a Github Personal Token, but the token didn't have sufficient priviledges, and the Github API returns `404` then.\r\n\r\nAdding `public_repo` rights to the token solved the problem, and I was then able to create new issues programatically.\r\n\r\n![airjp818](https://user-images.githubusercontent.com/60706/54865188-f3440b00-4d61-11e9-86b5-07643bf9ad6c.png)\r\n","createdAt":"2019-03-23T10:51:28Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":4}}],"url":"https://github.com/PyGithub/PyGithub/issues/132#issuecomment-475859775","viewerDidAuthor":false}],"createdAt":"2013-01-23T20:23:28Z","number":132,"state":"CLOSED","title":"Unable to create issue using oAuth token ","url":"https://github.com/PyGithub/PyGithub/issues/132"},{"author":{"id":"MDQ6VXNlcjEzNTU0NjM=","is_bot":false,"login":"sbesson","name":"Sébastien Besson"},"body":"Error can be reproduced with the following example:\n\n```\nimport github\nrepo = github.Github().get_user(\"openmicroscopy\").get_repo(\"ome-documentation\")\n\nassert repo.get_pull(204).head.user.login == 'imcf'\n\nfor pr in list(repo.get_pulls('closed')):\n    if pr.number == 204:\n        assert pr.head.user is None\n```\n\n/cc @joshmoore\n","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDEyNjQzOTUx","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"I'll look at this soon, thank you for reporting!\n","createdAt":"2013-01-24T09:46:13Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/131#issuecomment-12643951","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDEzMDUwMjU0","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"Comparing https://api.github.com/repos/openmicroscopy/ome-documentation/pulls/204 and https://api.github.com/repos/openmicroscopy/ome-documentation/pulls?state=closed&per_page=1&page=30 (you may need to adjust the `page` parameter to get exactly pull 204), we can see that the head.user returned by Github is null is the second case.\n\nThis means the bug is on GIthub's side and there is nothing I can do.\n\nYou may want to report it to Github.\n","createdAt":"2013-02-03T17:33:11Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/131#issuecomment-13050254","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDEzMDUyMTE5","author":{"login":"sbesson"},"authorAssociation":"CONTRIBUTOR","body":"Thanks, I reported this bug to Github. I will keep you posted about it.\n","createdAt":"2013-02-03T19:23:36Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/131#issuecomment-13052119","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDEzMDU0MTQ1","author":{"login":"pengwynn"},"authorAssociation":"NONE","body":"Sorry bout that. This should be fixed in production now. \n","createdAt":"2013-02-03T20:59:11Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/131#issuecomment-13054145","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDEzMDY4OTYy","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"It's OK now, the two links in my previous comment return the same information. Thank you!\n","createdAt":"2013-02-04T09:57:31Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/131#issuecomment-13068962","viewerDidAuthor":false}],"createdAt":"2013-01-14T16:46:39Z","number":131,"state":"CLOSED","title":"Fix PullRequestPart when using get_pulls() and the head user is an Organization","url":"https://github.com/PyGithub/PyGithub/issues/131"},{"author":{"id":"MDQ6VXNlcjMyNzE0Ng==","is_bot":false,"login":"jacquev6","name":"Vincent Jacques"},"body":"See end of http://developer.github.com/changes/2013-01-08-new-user-scopes/\n","comments":[],"createdAt":"2013-01-09T06:30:59Z","number":130,"state":"CLOSED","title":"Get a user's public ssh keys","url":"https://github.com/PyGithub/PyGithub/issues/130"},{"author":{"id":"MDQ6VXNlcjMwMDA0OA==","is_bot":false,"login":"s0undt3ch","name":"Pedro Algarvio"},"body":"Add Suppport For the [GitHub Hooks PubSubHub](http://developer.github.com/v3/repos/hooks/#pubsubhubbub)\n","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDEzMDc1NzY4","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"I'll do that soon, and publish a new version of PyGithub this week.\n","createdAt":"2013-02-04T13:01:26Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/129#issuecomment-13075768","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDEzMTU2NzUz","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"Implemented by commits f4e3295...681128d4\n\nIs in branch `develop`, will be in next release.\n","createdAt":"2013-02-05T22:48:01Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/129#issuecomment-13156753","viewerDidAuthor":false}],"createdAt":"2013-01-08T17:49:50Z","number":129,"state":"CLOSED","title":"Add Suppport For the GitHub Hooks PubSubHub","url":"https://github.com/PyGithub/PyGithub/issues/129"},{"author":{"id":"MDQ6VXNlcjcyNTkw","is_bot":false,"login":"TkTech","name":"Tyler Kennedy"},"body":"Heyo,\n\npygithub is used by Notifico for its \"Import/Sync From Github\" functionality. \n\nRepo -> https://github.com/TkTech/notifico\nSite -> http://n.tkte.ch\n","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDExNzYyODY2","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"Thank you for letting me know! I will update the readme accordingly.\n","createdAt":"2012-12-30T09:22:43Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/128#issuecomment-11762866","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDExNzY1NzEz","author":{"login":"TkTech"},"authorAssociation":"NONE","body":"Thank you for the great library!\n","createdAt":"2012-12-30T15:46:34Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/128#issuecomment-11765713","viewerDidAuthor":false}],"createdAt":"2012-12-29T11:40:53Z","number":128,"state":"CLOSED","title":"PyGithub on Notifico","url":"https://github.com/PyGithub/PyGithub/issues/128"},{"author":{"id":"MDQ6VXNlcjMyNzE0Ng==","is_bot":false,"login":"jacquev6","name":"Vincent Jacques"},"body":"","comments":[],"createdAt":"2012-12-25T12:26:56Z","number":127,"state":"CLOSED","title":"Publish version 1.11.0","url":"https://github.com/PyGithub/PyGithub/issues/127"},{"author":{"id":"MDQ6VXNlcjMyNzE0Ng==","is_bot":false,"login":"jacquev6","name":"Vincent Jacques"},"body":"http://developer.github.com/changes/2012-12-04-List-comments-for-repo/\nhttp://developer.github.com/v3/issues/comments/#list-comments-in-a-repository\nhttp://developer.github.com/v3/pulls/comments/#list-comments-in-a-repository\n","comments":[],"createdAt":"2012-12-25T11:23:10Z","number":126,"state":"CLOSED","title":"Get all Issue or Pull comments","url":"https://github.com/PyGithub/PyGithub/issues/126"},{"author":{"id":"MDQ6VXNlcjMyNzE0Ng==","is_bot":false,"login":"jacquev6","name":"Vincent Jacques"},"body":"See http://developer.github.com/changes/2012-12-06-create-authorization-for-app/ and http://developer.github.com/v3/oauth/#create-a-new-authorization\n\nAdd `client_id` and `client_secret` parameters to `AuthenticatedUser.create_authorization`.\n","comments":[],"createdAt":"2012-12-25T11:10:44Z","number":125,"state":"CLOSED","title":"Complete `AuthenticatedUser.create_authorization`","url":"https://github.com/PyGithub/PyGithub/issues/125"},{"author":{"id":"MDQ6VXNlcjEwNzQ5NDM=","is_bot":false,"login":"cjgdev","name":"Christopher Gilbert"},"body":"As per the documentation:\nhttp://developer.github.com/v3/repos/contents/\n\nThe Get Contents GitHub API accepts an optional parameter `ref` which allows the user to specify the branch. Otherwise this parameter defaults to `master`.\n\nPlease implement this optional parameter on Repository.get_contents, which currently only accepts a single parameter to specify the path.\n","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDExNjYwNjg0","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"Thank your for reporting the issue and fixing it in #124! I close this issue and will merge the pool request soon.\n","createdAt":"2012-12-24T13:26:20Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/123#issuecomment-11660684","viewerDidAuthor":false}],"createdAt":"2012-12-23T11:59:53Z","number":123,"state":"CLOSED","title":"Repository.get_contents does not accept ref=branch","url":"https://github.com/PyGithub/PyGithub/issues/123"},{"author":{"is_bot":true,"login":"app/"},"body":"remote.push(repo.head.reference) is freezing then git push ask user&pass\n\ngist.github.com is now 204.232.175.94 (old ip is  207.97.227.243).\nadd ssh connection check to prevent this bug in future:\n\nfrom envoy import run\nassert run(\"ssh -T git@gist.github.com\").status_code==1 # ok\n","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDExNTE5NDE2","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"Hello @cancerhermit,\n\ncan you please be more specific about how this is related to PyGithub? I can't understand what PyGithub has to do with the ssh problem you describe.\n\nThanks,\n","createdAt":"2012-12-19T06:52:25Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/122#issuecomment-11519416","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDExNTE5NzQz","author":{"login":""},"authorAssociation":"NONE","body":"oh sorry, it is GitPython ) \n","createdAt":"2012-12-19T07:12:01Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/122#issuecomment-11519743","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDExNTIwNDI2","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"Ok :-D\n","createdAt":"2012-12-19T07:47:53Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/122#issuecomment-11520426","viewerDidAuthor":false}],"createdAt":"2012-12-18T11:48:55Z","number":122,"state":"CLOSED","title":"push/pull timeout or ssh user/pass dialog detect","url":"https://github.com/PyGithub/PyGithub/issues/122"},{"author":{"id":"MDQ6VXNlcjMyNzE0Ng==","is_bot":false,"login":"jacquev6","name":"Vincent Jacques"},"body":"http://developer.github.com/v3/gitignore/\n","comments":[],"createdAt":"2012-12-12T13:50:12Z","number":120,"state":"CLOSED","title":"Implement retrieval of gitignore templates","url":"https://github.com/PyGithub/PyGithub/issues/120"},{"author":{"is_bot":true,"login":"app/"},"body":"https://github.com/blog/1276-welcome-to-a-new-gist . git:// not work, new urls is https://\n","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDExMjg5MjYx","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"@cancerhermit Can you please be a little more explicit about what does not work anymore?\n","createdAt":"2012-12-12T13:49:47Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/119#issuecomment-11289261","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDExMjg5Mzc3","author":{"login":""},"authorAssociation":"NONE","body":"it is not PyGithub error, but seems that Github API git_pull_url broken now :) \n","createdAt":"2012-12-12T13:54:00Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/119#issuecomment-11289377","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDExNDgxMzEz","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"I'll give it a look soon.\n","createdAt":"2012-12-18T10:42:26Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/119#issuecomment-11481313","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDExNjI2MzE4","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"I'va added a test showing the new https urls in `Gist.git_pull_url` and `Gist.git_push_url`. Everything seems OK to me. Please re-open the issue if I'm missing something.\n","createdAt":"2012-12-21T20:39:17Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/119#issuecomment-11626318","viewerDidAuthor":false}],"createdAt":"2012-12-12T08:47:25Z","number":119,"state":"CLOSED","title":"gists new api","url":"https://github.com/PyGithub/PyGithub/issues/119"},{"author":{"id":"MDQ6VXNlcjE3NDkyOTI=","is_bot":false,"login":"gregwjacobs","name":"Greg Jacobs"},"body":"In setup.py change:\n\n`from distutils.core import setup, Command`\n\nto:\n\n`from setuptools import setup, Command, find_packages`\n\nThus users can also distribute or use PyGithub in as an .egg via this command:\n\n`python setup.py bdist_egg`\n\nAFAIK this will not impact the remainder of the existing use of setup.py?\n","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDExNjI0ODc1","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"This was done as a side effect of using setuptools to support Python3.\n","createdAt":"2012-12-21T19:45:37Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/118#issuecomment-11624875","viewerDidAuthor":false}],"createdAt":"2012-12-07T14:42:13Z","number":118,"state":"CLOSED","title":"Modify setup.py to allow .egg distribution of PyGithub","url":"https://github.com/PyGithub/PyGithub/issues/118"},{"author":{"id":"MDQ6VXNlcjMyNzE0Ng==","is_bot":false,"login":"jacquev6","name":"Vincent Jacques"},"body":"","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDEwNTY3MTE4","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"Done\n","createdAt":"2012-11-20T18:42:30Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/117#issuecomment-10567118","viewerDidAuthor":false}],"createdAt":"2012-11-20T07:37:28Z","number":117,"state":"CLOSED","title":"Publish version 1.9.1","url":"https://github.com/PyGithub/PyGithub/issues/117"},{"author":{"id":"MDQ6VXNlcjMyNzE0Ng==","is_bot":false,"login":"jacquev6","name":"Vincent Jacques"},"body":"(Issue reported by private mail)\n\nIn some Github Enterprise install, there can be a plan with 999999999999 private repositories. This doesn't fit in an int, but in a long. The assertion `isinstance(attributes[\"private_repos\"], int)` on https://github.com/jacquev6/PyGithub/blob/master/github/Plan.py#L50 fails.\n\nI will replace all occurrences of `isinstance(xxx, int)` by `isinstance(x, (int, long))`.\n","comments":[],"createdAt":"2012-11-20T07:35:10Z","number":116,"state":"CLOSED","title":"Assertion failure on big numbers","url":"https://github.com/PyGithub/PyGithub/issues/116"},{"author":{"id":"MDQ6VXNlcjMyNzE0Ng==","is_bot":false,"login":"jacquev6","name":"Vincent Jacques"},"body":"","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDExNjcyNTM5","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"Done! Merry Christmas!\n","createdAt":"2012-12-25T12:25:01Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/115#issuecomment-11672539","viewerDidAuthor":false}],"createdAt":"2012-11-19T20:03:05Z","number":115,"state":"CLOSED","title":"Publish version 1.10.0","url":"https://github.com/PyGithub/PyGithub/issues/115"},{"author":{"id":"MDQ6VXNlcjMyNzE0Ng==","is_bot":false,"login":"jacquev6","name":"Vincent Jacques"},"body":"http://developer.github.com/changes/2012-10-31-gist-comment-uris/\n","comments":[],"createdAt":"2012-11-08T07:49:47Z","number":113,"state":"CLOSED","title":"Change the gist comment URIs","url":"https://github.com/PyGithub/PyGithub/issues/113"},{"author":{"id":"MDQ6VXNlcjMyNzE0Ng==","is_bot":false,"login":"jacquev6","name":"Vincent Jacques"},"body":"See http://developer.github.com/changes/2012-10-14-rate-limit-changes/ It will soon be requested.\n","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDE2OTQzMDU1","author":{"login":"joshmoore"},"authorAssociation":"NONE","body":"Hi @jacquev6. A late vote for enforcing a non-None user agent (or setting a default value of `\"PyGithub\"`). We can add our own (https://github.com/snoopycrimecop/snoopycrimecop/blob/master/scc.py) but likely can't come up with anything better than \"PyGithub\" anyway. Thanks.\n","createdAt":"2013-04-24T15:57:43Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/109#issuecomment-16943055","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDE2OTkxMzQz","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"@joshmoore You're perfectly right. I will track this in #160, which will likely be fixed by @jjh42 in #161.\n","createdAt":"2013-04-25T06:56:45Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/109#issuecomment-16991343","viewerDidAuthor":false}],"createdAt":"2012-10-28T09:44:59Z","number":109,"state":"CLOSED","title":"Send a customizable User-Agent header","url":"https://github.com/PyGithub/PyGithub/issues/109"},{"author":{"id":"MDQ6VXNlcjMyNzE0Ng==","is_bot":false,"login":"jacquev6","name":"Vincent Jacques"},"body":"See http://developer.github.com/changes/2012-10-26-notifications-api/\n","comments":[],"createdAt":"2012-10-28T08:36:58Z","number":108,"state":"CLOSED","title":"Finish implementation of the notifications API","url":"https://github.com/PyGithub/PyGithub/issues/108"},{"author":{"id":"MDQ6VXNlcjMyNzE0Ng==","is_bot":false,"login":"jacquev6","name":"Vincent Jacques"},"body":"See http://developer.github.com/changes/2012-10-24-set-default-branch/\n","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDg2MjE3Mzk4Ng==","author":{"login":"arkajitb"},"authorAssociation":"NONE","body":"It is not working","createdAt":"2021-06-16T08:44:14Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/107#issuecomment-862173986","viewerDidAuthor":false}],"createdAt":"2012-10-28T08:36:15Z","number":107,"state":"CLOSED","title":"Set the default branch of a repository","url":"https://github.com/PyGithub/PyGithub/issues/107"},{"author":{"id":"MDQ6VXNlcjMyNzE0Ng==","is_bot":false,"login":"jacquev6","name":"Vincent Jacques"},"body":"See http://developer.github.com/changes/2012-9-28-auto-init-for-repositories/\n","comments":[],"createdAt":"2012-10-28T08:34:10Z","number":106,"state":"CLOSED","title":"Implement auto-init of repositories","url":"https://github.com/PyGithub/PyGithub/issues/106"},{"author":{"id":"MDQ6VXNlcjMyNzE0Ng==","is_bot":false,"login":"jacquev6","name":"Vincent Jacques"},"body":"","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDEwNTMwNTE5","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"Just uploaded on PyPi.\n","createdAt":"2012-11-19T20:52:01Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/105#issuecomment-10530519","viewerDidAuthor":false}],"createdAt":"2012-10-15T13:32:37Z","number":105,"state":"CLOSED","title":"Publish version 1.9.0","url":"https://github.com/PyGithub/PyGithub/issues/105"},{"author":{"id":"MDQ6VXNlcjMyNzE0Ng==","is_bot":false,"login":"jacquev6","name":"Vincent Jacques"},"body":"#102 is a breaking change in the behavior, so it would be nice to provide a simple mechanism to restore the old behavior in a program that need it.\n\nMaybe an attribute of the Github class.\n","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDk4NDM5OTg=","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"So... This is a breaking change in the behavior, but the behavior was buggy according to the documentation. That's why I consider it a bugfix, and I publish the fix in a minor version.\n\nIf you really want the old behavior back, just do `g.FIX_REPO_GET_GIT_REF = False` where `g` is you `Github` instance. But beware, **I will remove that without notice after December 2012, 1st**.\n","createdAt":"2012-10-28T09:21:59Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/104#issuecomment-9843998","viewerDidAuthor":false}],"createdAt":"2012-10-15T13:32:18Z","number":104,"state":"CLOSED","title":"Add optional revert of #102","url":"https://github.com/PyGithub/PyGithub/issues/104"},{"author":{"id":"MDQ6VXNlcjMyNzE0Ng==","is_bot":false,"login":"jacquev6","name":"Vincent Jacques"},"body":"","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDk4NDQxNDk=","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"Version 1.8.1 is available on PyPi.\n","createdAt":"2012-10-28T09:46:01Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/103#issuecomment-9844149","viewerDidAuthor":false}],"createdAt":"2012-10-07T11:05:12Z","number":103,"state":"CLOSED","title":"Publish version 1.8.1","url":"https://github.com/PyGithub/PyGithub/issues/103"},{"author":{"id":"MDQ6VXNlcjk1MDUwNg==","is_bot":false,"login":"simon-weber","name":"Simon Weber"},"body":"The docs say get_git_refs performs `/repos/:user/:repo/git/refs/:ref`, but actually performs `/repos/:user/:repo/git/:ref`. For example:\n\n```\n>>> github.Github().get_user(\"jacquev6\").get_repo(\"PyGithub\").get_git_ref('heads/master')\n# => 404, but should work\n>>> github.Github().get_user(\"jacquev6\").get_repo(\"PyGithub\").get_git_ref('refs/heads/master')\n# => works, but should 404\n```\n\n`refs/` is prepended to a provided reference in the Github api: http://developer.github.com/v3/git/refs/#get-a-reference.\n","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDkxNjg0NDg=","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"This behavior is indeed not coherent with the documentations. I will fix it in next version, even if it is a breaking change.\n","createdAt":"2012-10-05T08:14:40Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/102#issuecomment-9168448","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDkyMDcwMzY=","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"Will be fixed in version 1.8.1 (I will publish it in a few days)\n","createdAt":"2012-10-07T11:06:11Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/102#issuecomment-9207036","viewerDidAuthor":false}],"createdAt":"2012-10-03T19:02:53Z","number":102,"state":"CLOSED","title":"get_git_ref does not prepend 'refs'","url":"https://github.com/PyGithub/PyGithub/issues/102"},{"author":{"id":"MDQ6VXNlcjE2Nzg0NDg=","is_bot":false,"login":"dnschnur","name":"David Schnur"},"body":"It looks like many functions that accept string parameters, like Repository.create_issue, fail with a 500 error if the string contains a percent sign.\n\nAccording to [this discussion](https://github.com/github/github-flavored-markdown/issues/63) it's the result of a limitation in Github's API, and patching Requester.py to add a Content-Type header, as suggested, does indeed solve the problem.\n\nI don't know whether this might have unexpected side-effects, though.\n","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDg5NjU1NzI=","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"Thank you for your help, but this has already been discussed in #87 and fixed by https://github.com/jacquev6/PyGithub/commit/7c60be9516f5cac308d8380cefd909f886b334bd#L0R91 \n\nIt will be published in version 1.8.0, in the next few days.\n","createdAt":"2012-09-28T06:11:14Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/101#issuecomment-8965572","viewerDidAuthor":false}],"createdAt":"2012-09-27T21:09:07Z","number":101,"state":"CLOSED","title":"Work around Github API problem with percent signs","url":"https://github.com/PyGithub/PyGithub/issues/101"},{"author":{"id":"MDQ6VXNlcjMyNzE0Ng==","is_bot":false,"login":"jacquev6","name":"Vincent Jacques"},"body":"","comments":[],"createdAt":"2012-09-25T19:50:46Z","number":99,"state":"CLOSED","title":"Issue with percent % in title created by PyGithub","url":"https://github.com/PyGithub/PyGithub/issues/99"},{"author":{"id":"MDQ6VXNlcjMyNzE0Ng==","is_bot":false,"login":"jacquev6","name":"Vincent Jacques"},"body":"Percent % in body\n","comments":[],"createdAt":"2012-09-25T19:50:45Z","number":98,"state":"CLOSED","title":"Issue created by PyGithub","url":"https://github.com/PyGithub/PyGithub/issues/98"},{"author":{"id":"MDQ6VXNlcjMyNzE0Ng==","is_bot":false,"login":"jacquev6","name":"Vincent Jacques"},"body":"","comments":[],"createdAt":"2012-09-25T19:50:43Z","number":97,"state":"CLOSED","title":"Issue with escaped percent %25 in title created by PyGithub","url":"https://github.com/PyGithub/PyGithub/issues/97"},{"author":{"id":"MDQ6VXNlcjMyNzE0Ng==","is_bot":false,"login":"jacquev6","name":"Vincent Jacques"},"body":"Escaped percent %25 in body\n","comments":[],"createdAt":"2012-09-25T19:50:41Z","number":96,"state":"CLOSED","title":"Issue created by PyGithub","url":"https://github.com/PyGithub/PyGithub/issues/96"},{"author":{"id":"MDQ6VXNlcjE3NDkyOTI=","is_bot":false,"login":"gregwjacobs","name":"Greg Jacobs"},"body":"Using .get_branches() returns at https:// URL with an enterprise github server instead of honoring base http as defined with base_url)\n\nExample:\n\n``` python\nimport github as Github\n ghe = Github(base_url = \"http://github.companyx.net/api/v3\")\n        org = ghe.get_organization('ExampleOrg')\n        repos = org.get_repos()\n        for repo in repos:\n            print repo.name\n            print \"   \", repo.description\n            for branch in repo.get_branches():\n                if branch.name == 'stable':\n                    print \"   Branch Name: \", branch.name\n                    print type(branch)\n                    pprint (vars(branch))\n                    print branch.commit.sha\n                    print branch.commit.url\n                    break\n            else:\n                print \"    No Stable Branch Found - Not an install/update candidate\"\n```\n\nExample output below:\n\n``` console\nhello_world\n    Hello World - Example developer plugin template for Test\n   Branch Name:  stable\n<class 'github.Branch.Branch'>\n{'_commit': <github.Commit.Commit object at 0x1019b51d0>,\n '_name': u'stable',\n '_requester': <github.Requester.Requester instance at 0x10198bea8>}\n84a8a1cd2e05925d545714a53a9a3d114a155b92\nhttps://github.companyx.net/api/v3/repos/ExampleOrg/hello_world/commits/84a8a1cd2e05925d545714a53a9a3d114a155b92'\n```\n\nNotice that value returned by branch.commit.url as a https URL but should honor based on http:// as defined above at ghe = Github(base_url = \"http://github.companyx.net/api/v3\")\n\nThis likely will break several things that are child / dependent upon this. \n\nVersion found in [Version 1.7]\n","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDg2NTgyMzY=","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"This is an issue of Github Enterprise itself: it returns an URL that is not the URL used to access it.\n\nI've created a work-around in #80 and commit 6fbd63b, so that I _do_ use the `base_url` you give to `Github`'s constructor even if Github Enterprise returns an https URL.\n\nBasically the only impact for you is that you cannot trust the `.url` attribute. In what case do you need it?\n\nDo you have a specific problem beside that?\n","createdAt":"2012-09-18T15:14:09Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/95#issuecomment-8658236","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDg2NTkxODU=","author":{"login":"gregwjacobs"},"authorAssociation":"NONE","body":"Actually no. After posting this I did additional testing and found as you've noted, its mostly a cosmetic bug, and the fault of github enterprise. Thanks for inclusion of the workaround!\n","createdAt":"2012-09-18T15:40:51Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/95#issuecomment-8659185","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDg2NjQxMTA=","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"Good!\n","createdAt":"2012-09-18T18:06:02Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/95#issuecomment-8664110","viewerDidAuthor":false}],"createdAt":"2012-09-18T14:06:54Z","number":95,"state":"CLOSED","title":".get_branches() does not honor base_url as defined ","url":"https://github.com/PyGithub/PyGithub/issues/95"},{"author":{"id":"MDQ6VXNlcjMyNzE0Ng==","is_bot":false,"login":"jacquev6","name":"Vincent Jacques"},"body":"Cf https://github.com/blog/1184-contributing-guidelines\n","comments":[],"createdAt":"2012-09-17T21:23:16Z","number":94,"state":"CLOSED","title":"Add a CONTRIBUTING.md file","url":"https://github.com/PyGithub/PyGithub/issues/94"},{"author":{"id":"MDQ6VXNlcjMyNzE0Ng==","is_bot":false,"login":"jacquev6","name":"Vincent Jacques"},"body":"","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDg2Mjc1NTE=","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"- Do not break support of Python 2.5, 2.6 and 2.7.\n- Add a Travis configuration for Python 3.2.\n","createdAt":"2012-09-17T19:24:28Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/93#issuecomment-8627551","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDEwNjEyMDA5","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"See https://github.com/facebook/tornado/blob/master/setup.py. It's an example of using 2to3 during setup.py install.\n","createdAt":"2012-11-21T20:01:40Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/93#issuecomment-10612009","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDEwNjE0MjI4","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"I still have to restore coverage in publish.sh. Maybe just put it in github.tests.**main**?\n","createdAt":"2012-11-21T21:04:33Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/93#issuecomment-10614228","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDEwNjI2OTYy","author":{"login":"bilderbuchi"},"authorAssociation":"NONE","body":"I guess you are aware of [this](http://python3porting.com/strategies.html) nice collection of potential strategies to follow?\n","createdAt":"2012-11-22T08:36:18Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/93#issuecomment-10626962","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDEwNjI3MzE0","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"@bilderbuchi In fact, I have begun this work without googling anything. Thank you for this link, I'll read it soon.\n","createdAt":"2012-11-22T08:51:21Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/93#issuecomment-10627314","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDEwNjQyOTMz","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"Was not as difficult as I thought :D Thank you setuptools and 2to3!\n","createdAt":"2012-11-22T19:10:06Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/93#issuecomment-10642933","viewerDidAuthor":false}],"createdAt":"2012-09-17T19:21:13Z","number":93,"state":"CLOSED","title":"Support Python 3","url":"https://github.com/PyGithub/PyGithub/issues/93"},{"author":{"id":"MDQ6VXNlcjMyNzE0Ng==","is_bot":false,"login":"jacquev6","name":"Vincent Jacques"},"body":"","comments":[],"createdAt":"2012-09-17T18:44:55Z","number":92,"state":"CLOSED","title":"Issue with escaped percent %25 in title created by PyGithub","url":"https://github.com/PyGithub/PyGithub/issues/92"},{"author":{"id":"MDQ6VXNlcjMyNzE0Ng==","is_bot":false,"login":"jacquev6","name":"Vincent Jacques"},"body":"Escaped percent %25 in body\n","comments":[],"createdAt":"2012-09-17T18:44:53Z","number":91,"state":"CLOSED","title":"Issue created by PyGithub","url":"https://github.com/PyGithub/PyGithub/issues/91"},{"author":{"id":"MDQ6VXNlcjgwNTU2Nw==","is_bot":false,"login":"jimleroyer","name":"Jimmy Royer"},"body":"Hello, I am trying to use PyGithub but have been unable to. I got an error upon import:\n\n``` python\nPython 3.2.2 (default, Sep  4 2011, 09:07:29) [MSC v.1500 64 bit (AMD64)] on win32\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>>\n>>> from github import Github\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\n  File \"C:\\Program Files\\Python\\3.2.2\\lib\\site-packages\\github\\__init__.py\", line 14, in <module>\n    from Github import Github\nImportError: No module named Github\n```\n\nI've just installed with `pip` and this one should work fine as I've been able to install other packages successfully. Why it does not work escape me though. There is a _Github.py_ file in the installation path (C:\\Program Files\\Python\\3.2.2\\Lib\\site-packages\\github). And still it complains no module with that name exists. Do you have any suggestions on what I could check to make it work?\n","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDg2MjczMDY=","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"Hello! The problem is that you are using Python 3 and PyGithub does not yet support it.\n\nYou can either downgrade to [Python 2.7](http://www.python.org/download/releases/2.7.3/) or try to run [2to3.py](http://docs.python.org/library/2to3.html) on PyGithub. I would recommend Python 2.7, because I'm almost sure PyGithub will need manual fixes after 2to3.py.\n","createdAt":"2012-09-17T19:17:28Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/90#issuecomment-8627306","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDg2Mjc1MDk=","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"I open #93 to add support of Python 3, but I'm sorry I won't do it soon. Of course I will be more than happy to accept a pull request if someone needs it badly enough to do it :)\n","createdAt":"2012-09-17T19:23:15Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/90#issuecomment-8627509","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDg2MjgyNzc=","author":{"login":"jimleroyer"},"authorAssociation":"NONE","body":"Okay! I wasn't sure as I did not see any pre-requisites on the project's description and Python's 2 projects usually failed when trying to pip install on the few ones I tried so far. Thanks for the quick response.\n","createdAt":"2012-09-17T19:45:46Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/90#issuecomment-8628277","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDU3MDA3Nzk5","author":{"login":"ddevault"},"authorAssociation":"NONE","body":"Still no python 3 support two years later? I have the same problem.\n","createdAt":"2014-09-26T19:17:02Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/90#issuecomment-57007799","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDU3MDE1MjUz","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"@SirCmpwn open a new issue describing your configuration and your problem. Both v1 and v2 of PyGithub has been working well with Python3 for a while: https://travis-ci.org/jacquev6/PyGithub/branches\n","createdAt":"2014-09-26T20:22:28Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/90#issuecomment-57015253","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDU3MDI1OTY0","author":{"login":"ddevault"},"authorAssociation":"NONE","body":"#276 \n","createdAt":"2014-09-26T21:58:19Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/90#issuecomment-57025964","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDczMjg4NTY4","author":{"login":"Krokop"},"authorAssociation":"NONE","body":"try install with pip3\n","createdAt":"2015-02-06T18:35:05Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":1}}],"url":"https://github.com/PyGithub/PyGithub/issues/90#issuecomment-73288568","viewerDidAuthor":false}],"createdAt":"2012-09-17T14:15:38Z","number":90,"state":"CLOSED","title":"Installation problem","url":"https://github.com/PyGithub/PyGithub/issues/90"},{"author":{"id":"MDQ6VXNlcjMyNzE0Ng==","is_bot":false,"login":"jacquev6","name":"Vincent Jacques"},"body":"","comments":[],"createdAt":"2012-09-17T12:55:04Z","number":89,"state":"CLOSED","title":"Foo %","url":"https://github.com/PyGithub/PyGithub/issues/89"},{"author":{"id":"MDQ6VXNlcjE0Nzc0NzA=","is_bot":false,"login":"quixotique","name":"Andrew Bettison"},"body":"If the **title** or **body** parameter of `Repository.create_issue()` contains a percent character `%` then it provokes a 500 error from `api.github.com`.\n\nCuriously, if the percent character is followed by two hex digits, eg `%2F` then the request succeeds.  In this case, the `%2F` is not url-decoded: it remains as `%2F` in the body text of the issue, not as a slash `/`.\n\nThis looks like it could be GitHub's issue: eg, their API is enforcing urlencoded input but is not actually decoding it.\n\nWhatever the case, it is impossible to create an issue using PyGithub that contains text like “works 25% of the time”.\n","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDg2MDcxODQ=","author":{"login":"quixotique"},"authorAssociation":"NONE","body":"I left a support request to GitHub on their Support page, referring to this issue.  The more I think about it, the more I suspect that their HTTP server is checking for a well-formed x-www-form-encoded body (but of course their API parses it as JSON).\n","createdAt":"2012-09-17T08:21:37Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/87#issuecomment-8607184","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDg2MDc3MDk=","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"Thank you for transmitting to Github, I also think this issue is on their side.\n","createdAt":"2012-09-17T08:47:42Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/87#issuecomment-8607709","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDg2MjYyMzg=","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"Issues #91 and #92 have been created by test added in 6ed11d0, exactly as described here.\n","createdAt":"2012-09-17T18:49:41Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/87#issuecomment-8626238","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDg2MjYzMTM=","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"Please keep me informed of what Github says, I will add a new set of tests when they fix this problem.\n","createdAt":"2012-09-17T18:51:55Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/87#issuecomment-8626313","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDg2MzU5NTk=","author":{"login":"quixotique"},"authorAssociation":"NONE","body":"Will do.  No response from GitHub yet.\n","createdAt":"2012-09-18T00:36:51Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/87#issuecomment-8635959","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDg2ODA4MTM=","author":{"login":"quixotique"},"authorAssociation":"NONE","body":"I received the following email from GitHub support:\n\n```\nHi, Andrew. For some reason our efforts to guess the content type are foiled\nwhen that character is in the payload. Please set the Content-Type to\n'application/json' explicitly to get around this issue.\n\nCheers,\n\n---\nWynn Netherland\nDeveloper, GitHub\n```\n\nIn Requester.py, I changed line 92 `headers = dict()` to `headers = { 'Content-Type': 'application/json' }` and GitHub no longer returns a 500 Server Error on title or body containing `%`.  Looks like that could be the fix.\n","createdAt":"2012-09-19T06:50:49Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/87#issuecomment-8680813","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDg2ODExMjU=","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"That sounds OK. I'll do that in next version.\n\nNote to myself: this will change _all_ the 'test/ReplayData/*.txt', meaning that none of them is actually recorded from communication with Github. So, it will require some manual testing to ensure this new header does not break other requests. Pay attention to requests with no payload, they may be disturbed by this header.\n","createdAt":"2012-09-19T07:07:26Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/87#issuecomment-8681125","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDg4MzM1Mjc=","author":{"login":"jakebiesinger"},"authorAssociation":"NONE","body":"Just found this issue trying to import google code issues using your API.  Another option is to html-encode the % sign as you read it in.  Github markdown will display the `&#37;` as &#37;.\n\nThe same issue applies to issue comments.\n","createdAt":"2012-09-24T20:31:01Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/87#issuecomment-8833527","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDg4NDUxMzg=","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"@jakebiesinger This will work in a web browser, but if you retrieve the issue through the API to use it outside a browser, it will contain the `&#37;`. I will add the `Content-Type` header.\n\nI will publish version 1.8.0 tomorrow.\n","createdAt":"2012-09-25T06:53:09Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/87#issuecomment-8845138","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDg4Njc2MTQ=","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"This comment was created through PyGihtub (after fix of Content-Type header) and contains a plain percent sign %\n","createdAt":"2012-09-25T19:47:21Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/87#issuecomment-8867614","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDg5Mjg0NjM=","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"Hum, I've been busier than expected, I will publish version 1.8.0 on Sunday (or before if I can).\n","createdAt":"2012-09-27T07:45:17Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/87#issuecomment-8928463","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDkxNjUzNDE=","author":{"login":"quixotique"},"authorAssociation":"NONE","body":"Thanks for v1.8.0.  Works a treat.\n","createdAt":"2012-10-05T04:40:52Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/87#issuecomment-9165341","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDkxNzg2NzU=","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"Thank you for your feedback!\n","createdAt":"2012-10-05T15:10:35Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/87#issuecomment-9178675","viewerDidAuthor":false}],"createdAt":"2012-09-17T07:17:56Z","number":87,"state":"CLOSED","title":"Repository.create_issue() fails on percent '%' character","url":"https://github.com/PyGithub/PyGithub/issues/87"},{"author":{"id":"MDQ6VXNlcjEwMTE2MTI=","is_bot":false,"login":"koobs","name":"Kubilay Kocak"},"body":"Will help QA and regression test the devel/py-pygithub FreeBSD port\n","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDg2MjIzNzM=","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"Hello Kubilay, thank you for maintaining the FreeBSD port of PyGithub!\n\nIn next version, tests (and their data) will be included in the pypi source archive. You will be able to run them with `./setup.py test`.\n","createdAt":"2012-09-17T16:57:45Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/86#issuecomment-8622373","viewerDidAuthor":false}],"createdAt":"2012-09-14T23:22:10Z","number":86,"state":"CLOSED","title":"Include tests in pypi tarball","url":"https://github.com/PyGithub/PyGithub/issues/86"},{"author":{"id":"MDQ6VXNlcjE3MjY2NjQ=","is_bot":false,"login":"mnsanghvi","name":""},"body":"``` python\n\nimport argparse\nimport sys\nimport os\nfrom github import Github\n\n\ndef getargs():\n    \"\"\" get command line args \"\"\"\n\n    parser = argparse.ArgumentParser()\n\n    parser.add_argument(\n        '-r',\n        '--repos',\n        required=False,\n        default=None)\n\n    parser.add_argument(\n        '-x',\n        '--excluded-repos',\n        required=False,\n        default=None)\n\n    parser.add_argument(\n        '-o',\n        '--org',\n        required=False,\n        default=\"Borg\")\n\n    parser.add_argument(\n        '-u',\n        '--user',\n        required=True,\n        default=None)\n\n    parser.add_argument(\n        '-p',\n        '--password',\n        required=True,\n        default=None)\n\n    parser.add_argument(\n        '-b',\n        '--base-url',\n        required=False,\n        default=\"http://github-enterprise.internal-server.com/api/v3\")\n\n    return(vars(parser.parse_args()))\n\ndef main():\n    \"\"\" Main street. \"\"\"\n\n    args = getargs()\n\n        my_gh = Github( args[\"user\"], args[\"password\"], args[\"base_url\"])\n        all_repos = my_gh.get_organization( args[\"org\"] ).get_repos()\n\n        if not args[\"excluded_repos\"]:\n            repos = [ item for item in all_repos  ]\n\n        else:\n            repos = [ item for item in all_repos if item not in args[\"excluded_repos\"].split(\",\") ]\n\n    else:\n        repos =  [ item for item in  args[\"repos\"].split(\",\") ]\n\n    for repo in repos:\n        print \"--> \" + repo.name\n\n        for hook in repo.get_hooks():\n            print \"-----> \",\n            print hook.config\n\nif __name__ == \"__main__\":\n    sys.exit(main())\n\n```\n\nSo if I call the above script with the --repos my-sandbox1,all-inclusive  then I get the following:\n\n``` python\n\nTraceback (most recent call last):\n  File \"utils/github-hooks.py\", line 112, in <module>\n    sys.exit(main())\n  File \"utils/github-hooks.py\", line 96, in main\n    print \"--> \" + repo.name\nAttributeError: 'str' object has no attribute 'name'\n\n```\n\nAnd similar errors when I use --exclude-repos and give it a comma separated list like I did with --repos. \n\nI'm probably doing this incorrectly, but I thought this would be something that will be commonly done\nand might be a good thing to have as part of the cookbook / tutorial as well, so good to have it documented here.\n","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDg1MzU5NDg=","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"If you call your script with the `--repos` option, then `repos` is a collection of `string`, not a collections of `Repository`, that's why, in the loop, `repo` has no `name` attribute.\n\nI would replace the line\n\n```\nrepos =  [ item for item in  args[\"repos\"].split(\",\") ]\n```\n\nby\n\n```\nrepos = [ my_gh.get_user().get_repo( item ) for item in  args[\"repos\"].split(\",\") ]\n```\n\nso that in all cases, `repos` is a collection of `Repository`.\n\nFor the `--exclude-repos` option, replace\n\n```\nrepos = [ item for item in all_repos if item not in args[\"excluded_repos\"].split(\",\") ]\n```\n\nby\n\n```\nrepos = [ item for item in all_repos if item.name not in args[\"excluded_repos\"].split(\",\") ]\n```\n\nI don't think this has anything to do with `PaginatedList`, whose only responsibility is to hide pagination requests.\n\nUnrelated remarks:\n- please have a look at http://sscce.org/, it would have been easier for me if there was not all that option parsing stuff to understand :-)\n- there may be a way to configure the `argparse.ArgumentParser` so that it does the splitting of the `--exclude-repos`'s argument. Something like `action='append'`, maybe\n","createdAt":"2012-09-13T17:21:58Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/85#issuecomment-8535948","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDg2NjczMDU=","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"Closing the issue, do not hesitate to re-open it if you need to continue the discussion.\n","createdAt":"2012-09-18T19:34:32Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/85#issuecomment-8667305","viewerDidAuthor":false}],"createdAt":"2012-09-13T16:59:53Z","number":85,"state":"CLOSED","title":"How to convert list of strings to PaginatedList ? ","url":"https://github.com/PyGithub/PyGithub/issues/85"},{"author":{"id":"MDQ6VXNlcjMyNzE0Ng==","is_bot":false,"login":"jacquev6","name":"Vincent Jacques"},"body":"","comments":[],"createdAt":"2012-09-12T19:53:42Z","number":84,"state":"CLOSED","title":"Publish version 1.8.0","url":"https://github.com/PyGithub/PyGithub/issues/84"},{"author":{"id":"MDQ6VXNlcjMyNzE0Ng==","is_bot":false,"login":"jacquev6","name":"Vincent Jacques"},"body":"See http://semver.org/\n\nSay it in the ReadMe\n","comments":[],"createdAt":"2012-09-12T14:56:27Z","number":83,"state":"CLOSED","title":"Switch to Semantic Versioning","url":"https://github.com/PyGithub/PyGithub/issues/83"},{"author":{"id":"MDQ6VXNlcjMyNzE0Ng==","is_bot":false,"login":"jacquev6","name":"Vincent Jacques"},"body":"Documentation of PyGithub is a bit rudimentary.\n\nLet's think about what we could do to improve it.\n","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDg0OTM0OTM=","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"Maybe we should enable the wiki on Github. I feel like a reference documentation should stay in the code, but tutorials and code samples would have their place on a wiki. The thing is that we need initial contents and organization for the wiki.\n","createdAt":"2012-09-12T13:33:13Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/82#issuecomment-8493493","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDg0OTQ3MTY=","author":{"login":"sagarsane"},"authorAssociation":"NONE","body":"Hello,\n\nI have also just started with this library and currently I am studying the test files and the test output files to get what and how the functions exactly return data. I also think that a Wiki of sorts will be extremely useful here.\n\nI will also be happy to contribute in the Wiki, code/output samples, etc.\n\nThank you.\nSagar\n","createdAt":"2012-09-12T14:09:45Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/82#issuecomment-8494716","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDg1MDYwNzk=","author":{"login":"mnsanghvi"},"authorAssociation":"NONE","body":"What I had in mind was something along the lines of Java's javadoc, but with some example usage thrown in as well.  I don't see it as a bad thing to have some simple code example that shows how a method or property is being used.\n\nA proper tutorial though should be in the wiki.\n","createdAt":"2012-09-12T19:03:58Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/82#issuecomment-8506079","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDg1MDY3OTQ=","author":{"login":"mnsanghvi"},"authorAssociation":"NONE","body":"Issue #40 is similar it seems and is also about documentation.\n","createdAt":"2012-09-12T19:25:05Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/82#issuecomment-8506794","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDg1MDc0Nzk=","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"I closed #40, because there is already more ideas here.\n\nI have not yet studied the generation of docs.python.org documentation, but I'm pretty sure it's based on [docstrings](http://www.python.org/dev/peps/pep-0257/), which seem comparable to Javadoc. I will google that soon.\n","createdAt":"2012-09-12T19:47:58Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/82#issuecomment-8507479","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDg1MDc2MDE=","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"So, from what has been said until now, what we could do is:\n- use the docstrings to build a reference documentation with examples focused on each methods (I will be able to host the generated documentation at http://vincent-jacques.net/PyGithub)\n- use the Github wiki for tutorial(s) and cookbook (and maybe other subjects)\n\nI'm opening the wiki right now.\n\nDo not hesitate to continue the discussion here.\n","createdAt":"2012-09-12T19:52:06Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/82#issuecomment-8507601","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDg1MDc3MTk=","author":{"login":"mnsanghvi"},"authorAssociation":"NONE","body":"If we can get docstrings to create markdown output, we could have it right here on github without having it hosted somewhere else.  One place for everything :)\n","createdAt":"2012-09-12T19:56:02Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/82#issuecomment-8507719","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDg1MTM5MjU=","author":{"login":"mnsanghvi"},"authorAssociation":"NONE","body":"One of the first things to do would be to make sure the object hierarchy is clear.\n","createdAt":"2012-09-12T23:38:09Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/82#issuecomment-8513925","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDg1MTQ5Njk=","author":{"login":"mnsanghvi"},"authorAssociation":"NONE","body":"Identify what methods need an authenticated user to function properly\n","createdAt":"2012-09-13T00:35:12Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/82#issuecomment-8514969","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDg1MTU1OTA=","author":{"login":"mnsanghvi"},"authorAssociation":"NONE","body":"Here is a sample documentation page to look at:\n\n```\n  http://packages.python.org/python-jenkins/\n```\n","createdAt":"2012-09-13T01:15:51Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/82#issuecomment-8515590","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDg1MTk3MjY=","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"> One place for everything\n\nIndeed, it's better to keep docs here on Github. Two options:\n- a [Github page](https://help.github.com/articles/user-organization-and-project-pages):\n  - generate the doc in html format\n  - push it to the gh-pages branch of PyGithub.git\n  - url: http://jacquev6.github.com/PyGithub\n- in the Wiki:\n  - generate the doc in any [gollum](https://github.com/github/gollum#page-files)-suported format\n  - push it to PyGithub.wiki.git\n  - url: https://github.com/jacquev6/PyGithub/wiki\n  - pros: same url as the tutorials and other docs\n  - cons: mix generated documentation with wiki-editable documentation, which may make us lose edits when we re-generate the doc\n\n> http://packages.python.org/python-jenkins/\n\nVery natural format for Python documentations, used on docs.python.org itself and many libraries, generated by [Sphinx](http://sphinx.pocoo.org/)\n","createdAt":"2012-09-13T06:54:06Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/82#issuecomment-8519726","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDg1MTk3ODk=","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"Possible sections for the wiki:\n- General information\n  - Pagination\n  - Authentication\n  - Rate limiting\n- Cookbooks and code samples: how to do specific things with PyGithub\n- FAQ (including guidelines for submitting good issues)\n- Hacking: how to contribute to PyGithub\n  - Record/replay test framework\n  - Guidelines for good pull requests\n  - Release process\n","createdAt":"2012-09-13T06:57:49Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/82#issuecomment-8519789","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDg1MzUwMjE=","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"In the reference documentation:\n- at least all information from ReferencesOfClasses.md\n- the equivalent of ReferenceOfApis.md\n- URL called by each method (reverse of ReferenceOfApis.md)\n","createdAt":"2012-09-13T16:53:14Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/82#issuecomment-8535021","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDg1MzUzMjU=","author":{"login":"mnsanghvi"},"authorAssociation":"NONE","body":"The information in ReferenceOfApis.md and ReferencesOfClasses.md should be combined.  It makes the most sense.  Most of the time, people will want to look up the API, and see what classes work with it, or vice versa.\n","createdAt":"2012-09-13T17:02:51Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/82#issuecomment-8535325","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDg1NDE1NzI=","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"Document InputXxx classes as well... They are used as parameters to some methods, but not documented anywhere.\n","createdAt":"2012-09-13T20:13:22Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/82#issuecomment-8541572","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDg1NDI4Mzc=","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"I've just created branch [topic/ExperimentOnDocumentation](https://github.com/jacquev6/PyGithub/tree/topic/ExperimentOnDocumentation) to test stuff related to this issue.\n\nI've crafted a script [./generateDocstrings.py](https://github.com/jacquev6/PyGithub/blob/topic/ExperimentOnDocumentation/generateDocstrings.py) that automatically puts information from ReferenceOfClasses.md and ReferencesOfApis.md in docstrings. We should first tweak this script to get as near as possible to a good documentation, and only then begin to edit it manually.\n","createdAt":"2012-09-13T20:45:58Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/82#issuecomment-8542837","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDg2MDc3Mzc=","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"In the wiki, guidelines for good issues should include a hint about logging facilities introduced by #88\n","createdAt":"2012-09-17T08:49:04Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/82#issuecomment-8607737","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDEzODQ3NjE4","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"As per version 1.12.0, documentation is now generated by sphinx, and hosted on http://jacquev6.github.com/PyGithub\n\nIt still needs improvements, so let's keep this issue open...\n","createdAt":"2013-02-20T18:23:06Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/82#issuecomment-13847618","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDE1NTQzMTI3","author":{"login":"pconrad"},"authorAssociation":"NONE","body":"Hi Everyone... I'm using PyGitHub a lot now, building scripts for running a University Course entirely using Github for  assignment submission.\n\nIt looks like the wiki hasn't really gotten off the ground yet.    I would be happy to jump in a contribute a few small \"tutorial\" like examples that are useful to me, and to my students as documentation for basic techniques that we use a lot in the scripts we are writing.\n\nThose scripts, by the way are at https://github.com/UCSB-CS-Using-GitHub-In-Courses/github-acadwf-scripts\n\nIn the meantime, I have a question---and I'm not sure if there is a mailing list, or a forum, or a general spot to ask questions, so I'm posting this one here (redirect me if there is a better place).\n\nIn my code I want to check for the existence of a certain repo in a certain organization.\n\nIf I call org.get_repo(\"foo\") and repo \"foo\" doesn't exist, what is returned?  Null?  NotSet?  False?   None?  Is an exception thrown?     At the moment, the only way I can figure this out is trial and error, or digging into the source code.\n\n(This is an issue in general that could be improved in the documentation---knowing what happens when a certain call fails.  :smile:  and its one of the things I'd probably concentrate on in any tutorial that I wrote... i.e. what does the example code for org.get_repo() look like for handling both success and failure of the get_repo call. )\n","createdAt":"2013-03-27T18:25:16Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/82#issuecomment-15543127","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDE1NTQ3NTYy","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"Hello! I'm very glad PyGithub help you manage your students' work.\n\nIndeed I've not taken time to populate the wiki. Feel absolutely free to start it, your contributions will be more than welcome. If you have suggestions regarding the [Sphinx-generated documentation](http://jacquev6.github.com/PyGithub/), they are welcome to.\n\nThere is no mailing list or forum, because for the moment I feel like Github Issues are enough and I don't want to take time to administrate something else.\n\nFor your specific question: `org.get_repo(\"non-existing-repo\")` will raise a `GithubException` and I realize right now it's not documented at all in http://jacquev6.github.com/PyGithub... I'll fix that soon (in http://jacquev6.github.com/PyGithub/utilities.html). This exception has a `status` member, which will be `404` in your case, and a `data` member which will be `{\"message\": \"Not Found\"}`. Before I document that, you may want to give a look to https://github.com/jacquev6/PyGithub/blob/master/github/tests/Exceptions.py#L49.\n","createdAt":"2013-03-27T19:24:12Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/82#issuecomment-15547562","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDE1NTYxMTE4","author":{"login":"pconrad"},"authorAssociation":"NONE","body":"Thanks so much!     I had not thought to look in the test cases---that\nmakes a lot of sense.  I teach my students that test cases can be a kind of\n\"documentation\" of how things are supposed to work---so I need to learn my\nown lesson here.\n\nI have started putting a few contributions on the wiki, and I created a\nrepo to go along with them.     If you see anywhere that I'm giving bad\nadvice, or where something can be done better another way, please jump in\nand correct my errors.\n\nThanks for building such a useful tool!\n\nRegards,\nPhill\n\nOn Wed, Mar 27, 2013 at 12:24 PM, Vincent Jacques\nnotifications@github.comwrote:\n\n> Hello! I'm very glad PyGithub help you manage your students' work.\n> \n> Indeed I've not taken time to populate the wiki. Feel absolutely free to\n> start it, your contributions will be more than welcome. If you have\n> suggestions regarding the Sphinx-generated documentationhttp://jacquev6.github.com/PyGithub/,\n> they are welcome to.\n> \n> There is no mailing list or forum, because for the moment I feel like\n> Github Issues are enough and I don't want to take time to administrate\n> something else.\n> \n> For your specific question: org.get_repo(\"non-existing-repo\") will raise\n> a GithubException and I realize right now it's not documented at all in\n> http://jacquev6.github.com/PyGithub... I'll fix that soon (in\n> http://jacquev6.github.com/PyGithub/utilities.html). This exception has a\n> status member, which will be 404 in your case, and a data member which\n> will be {\"message\": \"Not Found\"}. Before I document that, you may want to\n> give a look to\n> https://github.com/jacquev6/PyGithub/blob/master/github/tests/Exceptions.py#L49\n> .\n> \n> —\n> Reply to this email directly or view it on GitHubhttps://github.com/jacquev6/PyGithub/issues/82#issuecomment-15547562\n> .\n\n## \n\n## \n\nPhill Conrad, Lecturer (SOE)*, Dept. of Computer Science\nUniversity of California, Santa Barbara\nJoint Appointment: College of Creative Studies (www.ccs.ucsb.edu)\n\n## pconrad@cs.ucsb.edu, www.cs.ucsb.edu/~pconrad\n\n*SOE: a UC teaching faculty appointment, corresponding in rank and job\nsecurity to a tenured associate professor\n","createdAt":"2013-03-28T00:07:04Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/82#issuecomment-15561118","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDE4MjU5MTM5","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"Document the minimal authentication level for each method.\n- none: Github().get_user(\"toto\").name\n- token: Github(token).get_user().name\n- token with specific scope: Github(token).get_user().create_key(...)\n- login-password: Github(login, password).get_user().create_authorization(...)\n","createdAt":"2013-05-22T06:06:57Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/82#issuecomment-18259139","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM2MjU3OTI1","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"Clean-up issues: this is so old I close it. We'll open specific issues to improve the doc of the v2.\n","createdAt":"2014-02-27T16:07:28Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/82#issuecomment-36257925","viewerDidAuthor":false}],"createdAt":"2012-09-12T13:28:18Z","number":82,"state":"CLOSED","title":"Improve documentation","url":"https://github.com/PyGithub/PyGithub/issues/82"},{"author":{"id":"MDQ6VXNlcjMyNzE0Ng==","is_bot":false,"login":"jacquev6","name":"Vincent Jacques"},"body":"Legacy.convertXxx discards some useful information and this leads to API calls that could be avoided.\n","comments":[],"createdAt":"2012-09-12T12:14:46Z","number":81,"state":"CLOSED","title":"Complete Legacy.convertXxx","url":"https://github.com/PyGithub/PyGithub/issues/81"},{"author":{"id":"MDQ6VXNlcjE3MjY2NjQ=","is_bot":false,"login":"mnsanghvi","name":""},"body":"``` python\n>>> from github import Github\n>>> gh = Github( \"login\", \"password\", \"base_url\")\n>>> for repo in gh.get_user().get_repos():\n...         print repo.name\n...\nrepo1\nrepo2\nmy-person-linux-kernel-repo\nthe-secret-macosx-repo\n\n>>> for repo in gh.get_organization( org_name ).get_repos():\n...         print repo.name\n...\n\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\n  File \"build/bdist.macosx-10.7-intel/egg/github/Organization.py\", line 311, in get_repos\n  File \"build/bdist.macosx-10.7-intel/egg/github/Requester.py\", line 60, in requestAndCheck\n  File \"build/bdist.macosx-10.7-intel/egg/github/Requester.py\", line 76, in requestRaw\nAssertionError\n\n```\n\nIs this because of my lack of knowledge about python, or is there something else going on here ? \n\nWhat I would like to do is be able to get a list of the hooks in all the repos in an organization and also go through that list of repos in an organization and be able to create hooks.  \n","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDg0ODA0ODY=","author":{"login":"gregwjacobs"},"authorAssociation":"NONE","body":"ive gotten this trying the same operation against an enterprise version of github as well.\n\n+1\n","createdAt":"2012-09-12T03:04:26Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/80#issuecomment-8480486","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDg0ODI1NTM=","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"Definitely not a lack of knowledge on your part. I'll investigate (and hopefully fix it) _today_.\n","createdAt":"2012-09-12T05:29:13Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/80#issuecomment-8482553","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDg0ODI3MzQ=","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"Ok, this has to be related to the Enterprise thing, and I don't have access to a Github Enterprise server.\n\nCan you please check that `gh.get_organization( org_name ).url` starts with the `base_url` you give to the `Github` constructor?\n","createdAt":"2012-09-12T05:42:30Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/80#issuecomment-8482734","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDg0ODMyNjA=","author":{"login":"mnsanghvi"},"authorAssociation":"NONE","body":"I did the following:\n\n```\n print gh.get_organization( org_name ).url\n```\n\nand I got:\n\n```\n https://github.internal.tld/api/v3/orgs/org_name\n```\n\nThe base_url I had used was\n\n```\n http://github.internal.tld/api/v3\n```\n\nSo it has been changed to use https which we do not use internally.\n","createdAt":"2012-09-12T06:16:24Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/80#issuecomment-8483260","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDg0ODQxMzg=","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"This behavior of Github Enterprise looks like a bug to me.\n\nAnyway, I will work around it in PyGithub. I will publish the fix in [version 1.7](https://github.com/jacquev6/PyGithub/issues?milestone=12) tonight.\n\nNote to myself:\n- In `Requester.requestRaw`, urlparse.urlparse the requested `url` instead of checking if it startswith `self.__baseUrl` or \"/\"\n- then assert that\n  - the path startswith `self.__prefix`\n  - the port is the same\n  - the scheme is either the same or \"https\" if the `self.__baseUrl` scheme was \"http\"\n- forge a test case with a returned url starting with https instead of http\n","createdAt":"2012-09-12T07:11:00Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/80#issuecomment-8484138","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDg0OTAwNTQ=","author":{"login":"mnsanghvi"},"authorAssociation":"NONE","body":"For your assert, shouldn't that be:\n\n```\n   the scheme is either the same or \"https\" if the self.__baseUrl scheme was NOT \"http\" ? \n```\n\nThe way you've stated it, it sounds like that you're going to replace http with https.\n","createdAt":"2012-09-12T11:28:32Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/80#issuecomment-8490054","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDg0OTExNzc=","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"Don't worry, my plan is to keep all informations from `base_url` and use only the parts I need from the requested `url`, so if you say that you use http in `base_url`, I will keep this scheme for all requests.\n","createdAt":"2012-09-12T12:01:22Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/80#issuecomment-8491177","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDg0OTI4Mzk=","author":{"login":"mnsanghvi"},"authorAssociation":"NONE","body":"Well now I'm not worried :)\n\nI'm planning to fork the project and work on the documentation of it.  I think there might be a better way to generate the class reference and also provide some code samples, a sort of tutorial.\n","createdAt":"2012-09-12T13:08:53Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/80#issuecomment-8492839","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDg0OTMzNjU=","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"That would be great! I open issue #82 to discuss this subject. When you want to take time to think about that, feel free to discuss in this issue.\n","createdAt":"2012-09-12T13:29:10Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/80#issuecomment-8493365","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDg1MDY4ODA=","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"This should be fixed by previous commit, so I close the issue to be able to close the milestone tonight. Do not hesitate to re-open it if you still have related problems with version 1.7\n","createdAt":"2012-09-12T19:28:02Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/80#issuecomment-8506880","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDg1MDgwMDg=","author":{"login":"mnsanghvi"},"authorAssociation":"NONE","body":"How quickly will this show up in whatever repository is used by easy_install ?  I'm on a MacOS X system.\n","createdAt":"2012-09-12T20:04:38Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/80#issuecomment-8508008","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDg1MDgwOTM=","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"It's already on [PyPi](http://pypi.python.org/pypi/PyGithub), so `easy_install --upgrade PyGithub` should fetch it.\n","createdAt":"2012-09-12T20:07:26Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/80#issuecomment-8508093","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDg1MDgxNDg=","author":{"login":"mnsanghvi"},"authorAssociation":"NONE","body":"duh !  that was quick :)\n\nthanks.\n","createdAt":"2012-09-12T20:09:06Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/80#issuecomment-8508148","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDg1MDg2OTQ=","author":{"login":"mnsanghvi"},"authorAssociation":"NONE","body":"``` python\n>>> gh = Github( login, password, github_url)\n>>> for org in gh.get_organization( org_name ).get_repos():\n...     print org.name\n... \n\na-very-nice-repo\nmy-linux-kernel-repo\nmy-pygithub\nrepo1\nrepo2\nsandbox1\nsandbox3\n\n>>>\n\n```\n\nIt works !!! :) \n","createdAt":"2012-09-12T20:25:56Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/80#issuecomment-8508694","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDg1MDk0MjM=","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"\\o/\n","createdAt":"2012-09-12T20:48:51Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/80#issuecomment-8509423","viewerDidAuthor":false}],"createdAt":"2012-09-12T02:07:44Z","number":80,"state":"CLOSED","title":"Assertion Failure ??","url":"https://github.com/PyGithub/PyGithub/issues/80"},{"author":{"id":"MDQ6VXNlcjE5OTUy","is_bot":false,"login":"sxalexander","name":"Sam Alexander"},"body":"When I instantiate a AuthenticatedUser and attempt to manage keys I am getting the following error:\n\n```\n>>> g = Github('token')\n>>> g.get_user().url\n'/user'\n>>> g.get_user().name\nu'Sam Alexander'\n>>> g.get_user().get_keys()\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\n  File \"/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-   packages/github/AuthenticatedUser.py\", line 445, in get_keys\n    None\n  File \"/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/github/Requester.py\", line 66, in requestAndCheck\n    raise GithubException.GithubException( status, output )\ngithub.GithubException.GithubException: 404 {u'message': u'Not Found'}`\n```\n","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDg0ODI2NTE=","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"Can you please try `Github( 'login', 'password' ).get_user().get_keys()`? I could not reproduce your issue, so I suspect this has something to do with the scope of your token.\n","createdAt":"2012-09-12T05:36:51Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/79#issuecomment-8482651","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDg0ODQ2NTY=","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"In fact, I think it is not possible at all to access keys with OAuth: I think Github doesn't want third party applications to be able to see/modify ssh keys.\n","createdAt":"2012-09-12T07:39:35Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/79#issuecomment-8484656","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDg1OTk5NTE=","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"A note was added in issue #82 to add the minimum level of authentication of each method in the future reference documentation.\n\nI assume this issue is solved and I close it, but @sxalexander do not hesitate to re-open it if you are not satisfied with my answer.\n","createdAt":"2012-09-16T21:39:39Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/79#issuecomment-8599951","viewerDidAuthor":false}],"createdAt":"2012-09-12T00:14:28Z","number":79,"state":"CLOSED","title":"AuthenticatedUser.get_keys() / .create_key() raises github.GithubException.GithubException: 404 {u'message': u'Not Found'}`","url":"https://github.com/PyGithub/PyGithub/issues/79"},{"author":{"id":"MDQ6VXNlcjMyNzE0Ng==","is_bot":false,"login":"jacquev6","name":"Vincent Jacques"},"body":"- ChangeLog.md: create and take History from ReadMe.md\n- ReadMe.md: add links to other *.md files\n- doc/ReferenceOfClasses.md: check (at least remove Github.search_repo)\n","comments":[],"createdAt":"2012-09-11T06:45:12Z","number":78,"state":"CLOSED","title":"Improve documentation","url":"https://github.com/PyGithub/PyGithub/issues/78"},{"author":{"id":"MDQ6VXNlcjE4MzEyMzg=","is_bot":false,"login":"kukuts","name":""},"body":"legacy_search_repos - keyword and language but no start_page parameter\nHow to get eg 3rd page right?\n","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDg0NDc3MzE=","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"PyGithub hides pagination: the return value of methods returning an iterator of Something ([Reference](https://github.com/jacquev6/PyGithub/blob/master/doc/ReferenceOfClasses.md)) is just... an iterator! It will do subsequent pagination requests when needed.\n\nSee https://github.com/jacquev6/PyGithub/blob/master/github/Legacy.py#L16 for pagination of legacy APIs, and https://github.com/jacquev6/PyGithub/blob/master/github/PaginatedList.py#L67 for pagination of modern APIs.\n\nI hope it helps\n","createdAt":"2012-09-11T05:45:35Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/77#issuecomment-8447731","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDg0NjkyMjY=","author":{"login":"kukuts"},"authorAssociation":"NONE","body":"Ok, didn't see much iterators before.\nBut i don't like that you have to type numbers to get specific page:\n\n```\ng = Github()\nr = g.legacy_search_repos(\"ruby\")\ni = 200\nwhile i < 300:\n    print(r[i].name)\n    i += 1\n```\n\nGithub can change number of repos per page. But i still want make 1 request (1 page) if they do, without code editing.\n\nOr is there better way to search?\n","createdAt":"2012-09-11T19:15:20Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/77#issuecomment-8469226","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDg0Njk5NzY=","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"It could look like:\n\n```\nrepos = g.legacy_search_repos( \"python\" )\n\nfor repo in repos[ 200:300 ]:\n    print repo.name\n```\n\nBut beware, I've designed PyGithub to _hide_ pagination, so if your use case needs paginated results, PyGithub may need some modifications. Especially, as it is implemented now, this will do the pagination requests to Github until it gets 300 elements, and then just skip the 200 first ones.\n\nIt could be possible to modify PaginatedList-related stuff to allow your use case, but I need to understand what you are trying to achieve, and to think about it so that I don't break the current behavior too much.\n","createdAt":"2012-09-11T19:37:55Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/77#issuecomment-8469976","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDg0NzEwMDI=","author":{"login":"kukuts"},"authorAssociation":"NONE","body":"I want script which will:\nsearch repos with 3 parameters including page;\ndump results so i can look to them without connection and dumps' file names will include all parameters; \nwill not request github if i already searched that (with option).\n\nWith it it will be easy to fast download interesting repos by another script which will parse url and pull repo to user/repo directory unless it exists. Integrate this scripts with editor (grab repo in point) and you don't have to ever use web interface for exploring repos.\n\nI have first for api.v2, second doesn't use api\n","createdAt":"2012-09-11T20:12:29Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/77#issuecomment-8471002","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDg0NzIwNDM=","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"I'll think about it. I may have an idea to cleanly expose pagination requests without breaking the existing behavior. I'll keep you informed.\n","createdAt":"2012-09-11T20:44:24Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/77#issuecomment-8472043","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDg0NzIyNjc=","author":{"login":"kukuts"},"authorAssociation":"NONE","body":"Thank you. I'm too lazy to make requests without api library and not interested in Python now :(\n","createdAt":"2012-09-11T20:51:05Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/77#issuecomment-8472267","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDg0NzQwNjk=","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"Note to myself:\n- implement a method `PaginatedList.PaginatedList.get_page` similar to `Legacy.PaginatedList.get_page` from commit 8ad0acc\n- test\n- document\n","createdAt":"2012-09-11T21:51:38Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/77#issuecomment-8474069","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDg0NzYyOTg=","author":{"login":"kukuts"},"authorAssociation":"NONE","body":"Hm.. another thing, i cant find a way to get user-name of the owner of repo... not \"name\" like Vincent. I can get full_name only: jacquev6/PyGithub eg\n","createdAt":"2012-09-11T23:23:46Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/77#issuecomment-8476298","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDg0NzgzNzQ=","author":{"login":"kukuts"},"authorAssociation":"NONE","body":"Anyway script works with minimum changes, just no pagination.\n","createdAt":"2012-09-12T01:24:35Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/77#issuecomment-8478374","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDg0ODI0ODM=","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"For the login of the owner of a repository, did you have any problem with `repo.owner.login`?\n","createdAt":"2012-09-12T05:23:02Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/77#issuecomment-8482483","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDg0ODc4OTY=","author":{"login":"kukuts"},"authorAssociation":"NONE","body":"No. Sorry, didn't find by several searches. I guess there is repo->owner in api and you make another request to get .login? If so it shouldn't be so. \nEdit: But i think it doesn't cuz getting user names of many repos is fast.\n","createdAt":"2012-09-12T10:04:30Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/77#issuecomment-8487896","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDg0OTEwNzU=","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"No, no more API call: in [the legacy search API](http://developer.github.com/v3/search/#search-repositories), there is a `owner` in the `repository`, I just convert it into a _lazy_ `NamedUser` object. This object already knows its `login`, and will do an API call only if you access another attribute.\n\nSo, to be perfectly clear, the following code will do exactly one call to the API:\n\n```\ng = Github()\nrepos = g.legacy_search_repos( \"python\" )\n\nfor repo in repos.get_page( 3 ):\n    print repo.owner.login, repo.name\n```\n\nand this call will be `GET /legacy/repos/search/python?start_page=4`\n\n**But** if you `print repo.full_name`, it will do another call for each repository, because the full name is not returned by the legacy search API.\n\nNotes about `get_page`:\n- it will be in [version 1.7](https://github.com/jacquev6/PyGithub/issues?milestone=12)\n- its argument starts from 0, so, it is not a mistake, `get_page( 3 )` will call `start_page=4`\n- `get_page( 0 )` will call the URL without `start_page`\n","createdAt":"2012-09-12T11:56:21Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/77#issuecomment-8491075","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDg0OTEzNDA=","author":{"login":"kukuts"},"authorAssociation":"NONE","body":"Ok, you answered another question i was going to ask also: why printing with repo.full_name is slow. Ye, i know it's issues of api.\n\nBut why \n\n```\nfor repo in g.legacy_search_repos(\"ruby\"):\n    print repo.description\n```\n\nis also slow?\n","createdAt":"2012-09-12T12:08:58Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/77#issuecomment-8491340","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDg0OTE0NTk=","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"Because I was lazy when I implemented [convertRepo](https://github.com/jacquev6/PyGithub/blob/master/github/Legacy.py#L55). It discards all attributes but `name` and `owner`.\n\nI open issue #81 to fix that.\n","createdAt":"2012-09-12T12:15:11Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/77#issuecomment-8491459","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDg0OTE1MDE=","author":{"login":"kukuts"},"authorAssociation":"NONE","body":"Thank you\n","createdAt":"2012-09-12T12:17:03Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/77#issuecomment-8491501","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDg1MDY3Nzc=","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"Implemented as described in [previous comment](https://github.com/jacquev6/PyGithub/issues/77#issuecomment-8491075)\n","createdAt":"2012-09-12T19:24:37Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/77#issuecomment-8506777","viewerDidAuthor":false}],"createdAt":"2012-09-11T03:44:18Z","number":77,"state":"CLOSED","title":"No ability to fetch specific page with search api","url":"https://github.com/PyGithub/PyGithub/issues/77"},{"author":{"id":"MDQ6VXNlcjMyNzE0Ng==","is_bot":false,"login":"jacquev6","name":"Vincent Jacques"},"body":"","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDg1MDcyNDQ=","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"Published!\n","createdAt":"2012-09-12T19:40:27Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/76#issuecomment-8507244","viewerDidAuthor":false}],"createdAt":"2012-09-10T04:28:38Z","number":76,"state":"CLOSED","title":"Publish version 1.7","url":"https://github.com/PyGithub/PyGithub/issues/76"},{"author":{"id":"MDQ6VXNlcjMyNzE0Ng==","is_bot":false,"login":"jacquev6","name":"Vincent Jacques"},"body":"And remove the 'generated code' header\n","comments":[],"createdAt":"2012-09-10T04:27:36Z","number":75,"state":"CLOSED","title":"Separate code generation artifacts","url":"https://github.com/PyGithub/PyGithub/issues/75"},{"author":{"id":"MDQ6VXNlcjMyNzE0Ng==","is_bot":false,"login":"jacquev6","name":"Vincent Jacques"},"body":"Was dropped by #62 and should not be too difficult to restore\n","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDgzOTE2ODg=","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"Sorry, I did not test PyGithub against Python 2.5 for real. If it does not work, I'll be happy to accept merge requests for fixes, but I don't plan to take the time to fix it myself.\n","createdAt":"2012-09-08T17:20:19Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/73#issuecomment-8391688","viewerDidAuthor":false}],"createdAt":"2012-09-08T08:59:52Z","number":73,"state":"CLOSED","title":"Restore support of Python 2.5","url":"https://github.com/PyGithub/PyGithub/issues/73"},{"author":{"id":"MDQ6VXNlcjE3OTM2MTc=","is_bot":false,"login":"boucman","name":"Boucman"},"body":"Hello\n\nI am trying to find out if a commit was written by a member of a project or not...\n\nthe following test program should tell me that hanatos is a member of the project... but it fails.\n\ndid I not understand something wrt PyGithub ?\n\nthx in advance\n\nBoucman\n\n``` python\n#!/usr/bin/env python\nfrom github import Github\ngithub = Github()\norg = github.get_organization(\"darktable-org\");\nrepo = org.get_repo(\"darktable\");\ncommit = repo.get_commit(\"699975ad5e609e813eaccc1265cc738ec3f92094\")\nfor member in org.get_members():\n    print member.id\nprint \"aaaaaaaaaaaa\"\nprint commit.author.id\n\nif(org.has_in_members(commit.author)):\n    print \"found\"\nelse:\n    print \"not found\"\n```\n","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDgzODU3MTg=","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"Hello!\n\nOrganization members can only be manipulated by owners of the organization. If you are not an owner, you have to use \"public members\". http://developer.github.com/v3/orgs/members/#list-members has a note about that.\n\nThis code\n\n```\ng = github.Github()\norg = g.get_organization( \"darktable-org\" )\nuser = g.get_user( \"hanatos\" )\n\nprint \"public members of\", org.login, \":\"\nfor member in org.get_public_members():\n    print \"   \", member.login, \"<--- HERE\" if member.login == user.login else \"\"\n\nprint org.login, \"has_in_members\", user.login, \"?\", org.has_in_members( user )\nprint org.login, \"has_in_public_members\", user.login, \"?\", org.has_in_public_members( user )\n```\n\nwill print\n\n```\npublic members of darktable-org :\n    bieber\n    boucman\n    [snip]\n    hanatos <--- HERE\n    [snip]\ndarktable-org has_in_members hanatos ? False\ndarktable-org has_in_public_members hanatos ? True\n```\n\nI assume you are an owner of the organization, so you can change the first line to authenticate yourself: `g = github.Github( your_login, your_password )` and then you should be able to use `Organization.has_in_members`.\n","createdAt":"2012-09-08T08:42:55Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/72#issuecomment-8385718","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDgzODg5NjA=","author":{"login":"boucman"},"authorAssociation":"NONE","body":"Oh thanks a lot, and sorry for the noise, My bad... \n","createdAt":"2012-09-08T16:00:17Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/72#issuecomment-8388960","viewerDidAuthor":false}],"createdAt":"2012-09-08T07:00:05Z","number":72,"state":"CLOSED","title":"org.has_in_member does not work as expected","url":"https://github.com/PyGithub/PyGithub/issues/72"},{"author":{"id":"MDQ6VXNlcjMyNzE0Ng==","is_bot":false,"login":"jacquev6","name":"Vincent Jacques"},"body":"See http://developer.github.com/changes/2012-9-5-watcher-api/ \n\nWe have to modify methods related to watchers to allow them to manage subscriptions.\n","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDMxMTU3NTUz","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"This does not make sense anymore\n","createdAt":"2013-12-24T04:06:18Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/71#issuecomment-31157553","viewerDidAuthor":false}],"createdAt":"2012-09-08T00:00:02Z","number":71,"state":"CLOSED","title":"Implement multi-step release of starring/watching","url":"https://github.com/PyGithub/PyGithub/issues/71"},{"author":{"id":"MDQ6VXNlcjMyNzE0Ng==","is_bot":false,"login":"jacquev6","name":"Vincent Jacques"},"body":"Implement APIs described in http://developer.github.com/v3/repos/starring/, and in http://developer.github.com/v3/repos/watching/\n\nKeep in mind this post: http://developer.github.com/changes/2012-9-5-watcher-api/\n","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDgzODI0Mjk=","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"We still have to implement something to follow the multi-step release described in http://developer.github.com/changes/2012-9-5-watcher-api/ We will do that in a subsequent release.\n","createdAt":"2012-09-07T23:58:16Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/70#issuecomment-8382429","viewerDidAuthor":false}],"createdAt":"2012-09-07T22:31:27Z","number":70,"state":"CLOSED","title":"Repository starring/watching","url":"https://github.com/PyGithub/PyGithub/issues/70"},{"author":{"id":"MDQ6VXNlcjMyNzE0Ng==","is_bot":false,"login":"jacquev6","name":"Vincent Jacques"},"body":"Implement APIs described in http://developer.github.com/v3/repos/merging/\n","comments":[],"createdAt":"2012-09-05T06:51:40Z","number":69,"state":"CLOSED","title":"Merging","url":"https://github.com/PyGithub/PyGithub/issues/69"},{"author":{"id":"MDQ6VXNlcjMyNzE0Ng==","is_bot":false,"login":"jacquev6","name":"Vincent Jacques"},"body":"Implement APIs described in http://developer.github.com/v3/issues/assignees/\n","comments":[],"createdAt":"2012-09-05T06:50:38Z","number":68,"state":"CLOSED","title":"Assignees","url":"https://github.com/PyGithub/PyGithub/issues/68"},{"author":{"id":"MDQ6VXNlcjMyNzE0Ng==","is_bot":false,"login":"jacquev6","name":"Vincent Jacques"},"body":"Implement APIs described in http://developer.github.com/v3/repos/statuses/\n","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDgyODk1MjU=","author":{"login":"bilderbuchi"},"authorAssociation":"NONE","body":"Thank you, I was just going to open an issue for that. No need to hurry because of this, though, I won't need it too soon. :-)\n","createdAt":"2012-09-05T07:08:11Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/67#issuecomment-8289525","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDgzMDAzNzQ=","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"I think I'll do it for the middle of next week\n","createdAt":"2012-09-05T14:21:16Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/67#issuecomment-8300374","viewerDidAuthor":false}],"createdAt":"2012-09-05T06:49:54Z","number":67,"state":"CLOSED","title":"Statuses","url":"https://github.com/PyGithub/PyGithub/issues/67"},{"author":{"id":"MDQ6VXNlcjMyNzE0Ng==","is_bot":false,"login":"jacquev6","name":"Vincent Jacques"},"body":"","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDgzOTM0OTU=","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"Published!\n","createdAt":"2012-09-08T18:00:28Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/66#issuecomment-8393495","viewerDidAuthor":false}],"createdAt":"2012-09-04T20:12:49Z","number":66,"state":"CLOSED","title":"Publish version 1.6","url":"https://github.com/PyGithub/PyGithub/issues/66"},{"author":{"id":"MDQ6VXNlcjQ2NjY1NA==","is_bot":false,"login":"berndca","name":"Bernd Meyer"},"body":"I have not been able to figure out how to access the github API request for GET /repos/:user/:repo/contents/[:path] using PyGithub. Perhaps I'm missing something?\n\nPlease advise.\nThanks, Bernd\n","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDgyNzY5ODU=","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"All the APIs described in http://developer.github.com/v3/repos/contents/ are newer than the last version of PyGithub (or at least, I was not aware of them when I published that version).\n\nI will implement them soon, you can expect them middle of next week.\n\nFor reference, if you don't find an API in https://github.com/jacquev6/PyGithub/blob/master/doc/ReferenceOfApis.md then I've not implemented it yet.\n","createdAt":"2012-09-04T20:11:37Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/65#issuecomment-8276985","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDgyODI4ODE=","author":{"login":"berndca"},"authorAssociation":"NONE","body":"Thanks! I'm looking forward to the next release.\n","createdAt":"2012-09-04T23:38:50Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/65#issuecomment-8282881","viewerDidAuthor":false}],"createdAt":"2012-09-04T17:42:29Z","number":65,"state":"CLOSED","title":"GET /repos/:user/:repo/contents/:path","url":"https://github.com/PyGithub/PyGithub/issues/65"},{"author":{"id":"MDQ6VXNlcjMyNzE0Ng==","is_bot":false,"login":"jacquev6","name":"Vincent Jacques"},"body":"","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDgzMDc2NTk=","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"Just published on [PyPi](http://pypi.python.org/pypi/PyGithub).\n","createdAt":"2012-09-05T17:56:28Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/64#issuecomment-8307659","viewerDidAuthor":false}],"createdAt":"2012-09-03T08:41:45Z","number":64,"state":"CLOSED","title":"Publish version 1.5","url":"https://github.com/PyGithub/PyGithub/issues/64"},{"author":{"id":"MDQ6VXNlcjU3NzMyMg==","is_bot":false,"login":"malexw","name":"Alex W"},"body":"Hi Vincent, I wanted to let you know that we've started using PyGithub over at Upverter. You can see an example of it in action here: https://upverter.com/JBionics/a07fd2563a253ccf/Programmable-RC-Car-Controller-Arduino-Shield/\n\nUpverter is a web-based schematic capture and PCB layout tool for people who design electronics. Like github, it's free for anyone to use as long as they publish their designs with an open-source license. We let designers attach a github project to an Upverter project, and use PyGithub to pull in some basic stats about the project (including a README file), and show them on the project's main page.\n\nCheers,\nAlex\n","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDgyMzI1NzI=","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"Wow! Upverter is a very impressive project. I have been designing some PCBs myself and always felt bad about storing them and connecting them to source code of embedded software. I'm looking forward the PCB layout and manufacture feature, it will make Upverter very useful for amateur electronics!\n\nI'm very proud and very happy to be a small part of your project, thank you for letting me know.\n","createdAt":"2012-09-03T08:39:41Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/63#issuecomment-8232572","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDgyNzI0NDc=","author":{"login":"malexw"},"authorAssociation":"NONE","body":"Awesome, great to hear some positive feedback! If you're interested in trying out the alpha version of our PCB layout tool, send me your Upverter account name (alex@upverter.com) and I can upgrade you. We're hoping to have the layout and manufacturing tools rolled out to everyone in the next few weeks.\n","createdAt":"2012-09-04T17:54:47Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/63#issuecomment-8272447","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDgyNzY4MzU=","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"PM sent.\n","createdAt":"2012-09-04T20:07:55Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/63#issuecomment-8276835","viewerDidAuthor":false}],"createdAt":"2012-08-31T16:36:04Z","number":63,"state":"CLOSED","title":"PyGithub on Upverter","url":"https://github.com/PyGithub/PyGithub/issues/63"},{"author":{"id":"MDQ6VXNlcjM0NDA5NQ==","is_bot":false,"login":"xobb1t","name":"Dima Kukushkin"},"body":"I just realized that there is no option to set timeout for github api requests. There is no timeout at all in `Requester`.\nIn python2.6 was added option `timeout` for `httplib.HTTPConnection` and `httplib.HTTPSConnection`. It seems that it will drop support of python<2.6.\nAnother way to change the way that `Requester` works. You can use `requests` library from @kennethreitz. BTW it will simplify whole `Requester` API.\n","comments":[],"createdAt":"2012-08-25T19:05:41Z","number":61,"state":"CLOSED","title":"Add timeout option","url":"https://github.com/PyGithub/PyGithub/issues/61"},{"author":{"id":"MDQ6VXNlcjY3MTc1MQ==","is_bot":false,"login":"pmchen","name":"Peter Chen"},"body":"I'm just starting to to use PyGithub (and python).  Thanks for creating such a useful tool.  I'm teaching a large class and using PyGithub to programmatically manage hundreds of repos.\n\nIs there a way to delete a repo via PyGithub?  github API v3 includes this, but I don't see a Repository.delete() method in PyGithub.\n\nAnother minor (and unrelated) issue: Is there a way to get_team by name (instead of by id)?  The only way I can see to find a team by name is by iterating over all teams and looking at team.name.\n\nThanks for your help.\n","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDc5MTg1NDI=","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"Deleting a repository is a new functionality that was not implemented in the API when I published the last version of PyGithub. It is now documented here: http://developer.github.com/v3/repos/#delete-a-repository\n\nI will implement it in PyGithub at the beginning of September.\n","createdAt":"2012-08-21T22:21:13Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/60#issuecomment-7918542","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDc5MTg3Mjg=","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"For the 'get_team' part of your issue, I can't find a way to get the id of a team from its name here: http://developer.github.com/v3/orgs/teams/ so there is no way to do it in PyGithub without iterating on 'get_teams()'\n","createdAt":"2012-08-21T22:27:24Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/60#issuecomment-7918728","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDc5MjIyODI=","author":{"login":"pmchen"},"authorAssociation":"NONE","body":"Thanks for your fast reply and help.  I look forward to having repo delete.\n","createdAt":"2012-08-22T01:44:09Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/60#issuecomment-7922282","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDc5NjIyNTI=","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"On-going developments are here: https://github.com/jacquev6/PyGithub/tree/topic/DeleteRepository\n","createdAt":"2012-08-23T07:43:36Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/60#issuecomment-7962252","viewerDidAuthor":false}],"createdAt":"2012-08-21T21:47:28Z","number":60,"state":"CLOSED","title":"delete repo","url":"https://github.com/PyGithub/PyGithub/issues/60"},{"author":{"id":"MDQ6VXNlcjEwMjc0MTM=","is_bot":false,"login":"nixoz2k7","name":"Sergey Nikitin"},"body":"Hello, here is the problem.\nNo Comments returned. But comments count showing proper value.\n\np = z.pulls[1]\np\nOUTPUT: <github.PullRequest.PullRequest object at 0x104e6e5d0>\nOUTPUT: u'\\u041d\\u0435 \\u043f\\u0440\\u0438\\u043d\\u0438\\u043c\\u0430\\u0442\\u044c =)'\np.comments\nOUTPUT: 1\np.get_comments()\nOUTPUT: <github.PaginatedList.PaginatedList instance at 0x104cd6c68>\nlist(p.get_comments())\nOUTPUT: []\n\nAny ideas ?\n","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDc5MTgzODU=","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"Hello!\n\nI confirm that the following code exhibits the same issue:\n\n```\nimport github\n\ng = github.Github()\nr = g.get_user( \"jacquev6\" ).get_repo( \"PyGithub\" )\np = r.get_pull( 57 )\nprint p.title, \"has\", p.comments, \"comments\"\nprint [ c.body[ :15 ] for c in p.get_comments() ]\n```\n\nIt prints:\n\n```\nAllows connection to GitHub Enterprise installs on local URLs has 2 comments\n[]\n```\n\nThis last line calls API https://api.github.com/repos/jacquev6/PyGithub/pulls/57/comments, as documented in http://developer.github.com/v3/pulls/comments/#list-comments-on-a-pull-request, but the API returns an empty list. I've just managed to get the comments by calling  https://api.github.com/repos/jacquev6/PyGithub/issues/57/comments instead. The issue must be on Github's side.\n\nAs a **temporary** work-around, you can use the following code to do as if the pull request is an issue, and call the other API:\n\n```\nprint [ c.body[ :15 ] for c in r.get_issue( p.number ).get_comments() ]\n```\n\nRight now, I have not enough time to take care of this problem, but if it's still here at the beginning of September, I will contact Github and/or patch PyGithub.\n\nEnjoy,\n","createdAt":"2012-08-21T22:15:01Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/59#issuecomment-7918385","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDc5MjYxMjY=","author":{"login":"bilderbuchi"},"authorAssociation":"NONE","body":"To enhance the workaround a bit, you can do this to determine if an issue is a PR or not (because all PRs are issues, too):\n\n```\n        if myIssue.pull_request.diff_url:\n            PR=True\n        else:\n            PR=False\n```\n","createdAt":"2012-08-22T06:56:34Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"HEART","users":{"totalCount":1}}],"url":"https://github.com/PyGithub/PyGithub/issues/59#issuecomment-7926126","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDc5MjYzMTc=","author":{"login":"nixoz2k7"},"authorAssociation":"NONE","body":"Thank you! Will use this as a workaround.\n","createdAt":"2012-08-22T07:10:09Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/59#issuecomment-7926317","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDgyMzI5NDA=","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"I've just contacted Github for this issue.\n","createdAt":"2012-09-03T08:56:13Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/59#issuecomment-8232940","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDgyODg5ODM=","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"And here is the reply I received from Github:\n\n```\nFrom: Wynn Netherland\nSubject: API v3, list comments on pull requests\n\nHi, Vincent. I know it's confusing but we actually have three types of comments on GitHub, so there are\nthree different spots in the API to grab them. Be sure you're looking in the right spot for the data you expect.\n\nPull Request comments are the top-level comments found on the Pull Request page. These are retrieved via\nthe Issues API [1] since PRs are essentially specialized Issues. Pull Request review comments are those made\nagainst the diff on the PR. You can grab these with the Review Comments API [2]. Finally, line comments made\noutside the context of a PR on a raw commit can be retrieved via the Commit Comments API [3].\n\nArmed with that info, let me know if you're not seeing the data you expect and the API call you're making, and I\ncan dig a bit deeper.\n\n[1] http://developer.github.com/v3/issues/comments/\n[2] http://developer.github.com/v3/pulls/comments/\n[3] http://developer.github.com/v3/repos/comments/\n\nCheers,\n```\n\nSo, this is coherent with what we can see here: https://github.com/jacquev6/PyGithub/pull/57, as `PullRequest.get_comments` uses the Pull Requests API. @nixoz2k7 Is it coherent with your original issue as well?\n\nAnyway, this is misleading, so I will add two methods named `get_issue_comments` (using the Issues API) and `get_review_comments` (synonym for `get_comments`, using the Pull Requests API). Expect this for the middle of next week.\n","createdAt":"2012-09-05T06:36:26Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":1}},{"content":"HEART","users":{"totalCount":1}}],"url":"https://github.com/PyGithub/PyGithub/issues/59#issuecomment-8288983","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDgzODc0ODk=","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"I've just pushed the new methods on https://github.com/jacquev6/PyGithub/tree/develop. I close the issue because I feel it's solved. @nixoz2k7, do not hesitate to re-open it if you still have a problem with what has been said.\n","createdAt":"2012-09-08T13:20:02Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/59#issuecomment-8387489","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDgzODgyODA=","author":{"login":"nixoz2k7"},"authorAssociation":"NONE","body":"Thank you so much ;)\nbtw, it works great with \"issues\" workaround. stable for 2 weeks already.\n\nThank you again.\nSergey.\n","createdAt":"2012-09-08T14:53:08Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":1}}],"url":"https://github.com/PyGithub/PyGithub/issues/59#issuecomment-8388280","viewerDidAuthor":false}],"createdAt":"2012-08-21T15:33:36Z","number":59,"state":"CLOSED","title":"No Comments returned for PullRequest","url":"https://github.com/PyGithub/PyGithub/issues/59"},{"author":{"id":"MDQ6VXNlcjMyNzE0Ng==","is_bot":false,"login":"jacquev6","name":"Vincent Jacques"},"body":"","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDc0OTk1NTA=","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"Published, at last...\n","createdAt":"2012-08-04T06:11:43Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/58#issuecomment-7499550","viewerDidAuthor":false}],"createdAt":"2012-07-24T16:12:37Z","number":58,"state":"CLOSED","title":"Publish version 1.4","url":"https://github.com/PyGithub/PyGithub/issues/58"},{"author":{"id":"MDQ6VXNlcjMyNzE0Ng==","is_bot":false,"login":"jacquev6","name":"Vincent Jacques"},"body":"Cf http://developer.github.com/v3/markdown/\n","comments":[],"createdAt":"2012-07-09T20:07:41Z","number":56,"state":"CLOSED","title":"Implement markdown rendering","url":"https://github.com/PyGithub/PyGithub/issues/56"},{"author":{"id":"MDQ6VXNlcjMyNzE0Ng==","is_bot":false,"login":"jacquev6","name":"Vincent Jacques"},"body":"","comments":[],"createdAt":"2012-07-03T07:36:55Z","number":55,"state":"CLOSED","title":"Publish version 1.3","url":"https://github.com/PyGithub/PyGithub/issues/55"},{"author":{"id":"MDQ6VXNlcjMyNzQ0Mg==","is_bot":false,"login":"bilderbuchi","name":"Christoph Buchner"},"body":"Hi!\n\nIt's great that all date-like objects are datetime.datetime now, makes working with it so easy. However, I think you missed GitAuthor.date, it would be great if this would also return datetimes.\n\nBackground: To get the dates of tags, I did `MyTag.commit.commit.committer.date`, and expected this to return a datetime object (like all the others do), but it returns a string.\n","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDY3MTAzNTU=","author":{"login":"bilderbuchi"},"authorAssociation":"NONE","body":"Interestingly, if I convert this manually in the meantime, using the method you use in the PyGithub code (`tdate=datetime.datetime.strptime(t.commit.commit.committer.date, \"%Y-%m-%dT%H:%M:%SZ\")`), I get an error cause the format does not match. I get a string of the form `2010-02-11T01:17:27-08:00` - time zone information has been added, but I don't know how to parse it, the `:` in `-08:00` prevents me from using `%z` (which expects UTC offset in the form +HHMM or -HHMM). I will discard it for now, but maybe you got insight why this happens?\n","createdAt":"2012-07-02T14:58:45Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/54#issuecomment-6710355","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDY3Mjc1NTM=","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"Hello Christoph!\n\nIndeed this attribute should be a `datetime.datetime`. And as you noticed, it is not formated like other dates returned by Github... I remember I discovered that when I was doing the conversion from string of all the `*_at` and `*_on` attributes, and I did not take time to dig deeper.\n\nI will create a more generic date parsing function that handles all formats returned by Github, and I'll use it for all `datetime` attributes.\n\nBut before that, I'll have to understand timezone handling in Python, so do not expect this too soon (maybe mid-July).\n","createdAt":"2012-07-03T07:15:53Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/54#issuecomment-6727553","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDY3Mjc2NTk=","author":{"login":"bilderbuchi"},"authorAssociation":"NONE","body":"yeah no problem, I'm not reliant on so precise information, take your time. btw, maybe that's a bug in the github API? why would this one time be returned in a different way than all the others? I can't see a reason for this.\n\nagreed, time(zones) in python are crazy at times.\n","createdAt":"2012-07-03T07:24:21Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/54#issuecomment-6727659","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDY3Mjc4NDg=","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"I don't think it's a bug in Github:\n- `GitAuthor.date` is related to an action done somewhere (on the committer's computer), so it carries the timezone of this computer\n- other datetimes are related to actions done on Github's servers, so it's returned with a \"Z\" timezone meaning \"UTC\", the timezone of these servers.\n","createdAt":"2012-07-03T07:36:30Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/54#issuecomment-6727848","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDY3MjgwNjk=","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"And by the way, I'm not sure it's a problem for you but I prefer to make it clear: if `tag` is a `Tag`, then `tag.commit.commit.committer.date` is the date of the tagged commit, not the date of the tag. If you really need the date of the tag, you need a `GitTag` and use `git_tag.tagger.date`.\n","createdAt":"2012-07-03T07:50:18Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/54#issuecomment-6728069","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDY3MjgyNDE=","author":{"login":"bilderbuchi"},"authorAssociation":"NONE","body":"ah, makes sense. If you want to avoid the timezone confusion, mayb what is suggested [here](http://stackoverflow.com/a/117615/599884) makes most sense: \n\"Keep your internal datetime objects naive and in UTC and convert to your timezone for formatting only. The reason why you probably want naive objects (objects without timezone information) is that many libraries and database adapters have no idea about timezones.\"\nSo maybe it makes sense to just convert the GitAuthor times to UTC when getting them (i.e. apply the offset to the given time), to be consistent with the rest.\n\nThanks about the clarification re: GitTag/Tag. I prefer the date of the tagged commit, though, the tags mark release commits.\n","createdAt":"2012-07-03T07:59:36Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/54#issuecomment-6728241","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDY3MjgzNzA=","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"If I convert the `GitAuthor.date` to UTC, I loose the information about where the committer lives... It may or may not be a problem depending on my client's use case.\n\nI'll find a way to make it clear and not loose information, maybe I will convert `date` to UTC (keep it naive), and add another attribute `timezone` to `GitAuthor`.\n","createdAt":"2012-07-03T08:08:08Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/54#issuecomment-6728370","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDY4ODY1NjE=","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"I still have to convert the datetime to UTC. But there is something silly about timezones returned by Github: my commits are timezoned \"-07:00\" while I live in France (UTC +1 or +2). I have to investigate that.\n","createdAt":"2012-07-10T19:42:43Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/54#issuecomment-6886561","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDY5NzI0MTQ=","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"Well, well, well... I now revise my judgement: **absolutely all** commits I've retrieved from Github are in timezone -07:00, so this must indeed be a flaw in the API, returning date formatted in the local timezone of the GIthub servers only for this attribute. @bilderbuchi, you were right in https://github.com/jacquev6/PyGithub/issues/54#issuecomment-6727659 :-)\n\nThere is no point keeping this GitAuthor.timezone attribute. I will just convert everything to UTC.\n","createdAt":"2012-07-13T19:05:53Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/54#issuecomment-6972414","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDY5OTQ0MzY=","author":{"login":"bilderbuchi"},"authorAssociation":"NONE","body":"ok. maybe also write to github about this probable bug in the API, to see what's the deal?\n","createdAt":"2012-07-15T19:57:26Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/54#issuecomment-6994436","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDcwNjA4MTg=","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"@bilderbuchi, to be honest, I don't think I will take time to contact Github about that.\n","createdAt":"2012-07-18T09:12:53Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/54#issuecomment-7060818","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDcwNjA5OTM=","author":{"login":"bilderbuchi"},"authorAssociation":"NONE","body":"Sure, I understand. :-)\n","createdAt":"2012-07-18T09:21:16Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/54#issuecomment-7060993","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQxNzExMDE1OQ==","author":{"login":"letmaik"},"authorAssociation":"NONE","body":"@jacquev6 It would be good if you could add a note in the API docs that the returned datetime object is a naive UTC datetime object.","createdAt":"2018-08-29T21:21:49Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/54#issuecomment-417110159","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQxNzI1NjY0OA==","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"@letmaik I'm not working on PyGithub anymore. If you want to open a PR with a documentation change, I'm sure the current maintainers will merge it.","createdAt":"2018-08-30T09:37:26Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/54#issuecomment-417256648","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQxNzI5MTE1MQ==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"@letmaik Yes, I will be happy to review it.","createdAt":"2018-08-30T11:48:34Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/54#issuecomment-417291151","viewerDidAuthor":false}],"createdAt":"2012-07-02T14:38:01Z","number":54,"state":"CLOSED","title":"GitAuthor.date should return datetime, not string","url":"https://github.com/PyGithub/PyGithub/issues/54"},{"author":{"id":"MDQ6VXNlcjMyNzE0Ng==","is_bot":false,"login":"jacquev6","name":"Vincent Jacques"},"body":"","comments":[],"createdAt":"2012-06-28T20:12:18Z","number":53,"state":"CLOSED","title":"Publish version 1.2","url":"https://github.com/PyGithub/PyGithub/issues/53"},{"author":{"id":"MDQ6VXNlcjMyNzE0Ng==","is_bot":false,"login":"jacquev6","name":"Vincent Jacques"},"body":"","comments":[],"createdAt":"2012-06-28T19:56:21Z","number":52,"state":"CLOSED","title":"Issue created by PyGithub to test issue #50","url":"https://github.com/PyGithub/PyGithub/issues/52"},{"author":{"id":"MDQ6VXNlcjMyNzQ0Mg==","is_bot":false,"login":"bilderbuchi","name":"Christoph Buchner"},"body":"Hi!\nBack again. :-) I started playing around with 1.1, and it seems many things happened in the meantime. \nFor one, the docs seem to be out of sync with the code. For example, get_issues seems to return a PaginatedList, but I can't find a mention of that class in the /doc folder. \n\nBackground: With the old version, I got a list of all the issues (open & closed) by saying\n\n```\n Issues=repo.get_issues(state='open') + repo.get_issues(state='closed')\n```\n\nThis worked perfectly well with the method returning normal lists, but running my code now, it complains about `TypeError: unsupported operand type(s) for +: 'instance' and 'instance'`\nAlso, later on I hit the issue that `PaginatedList instance has no attribute '__len__'` when I want to count the number of issues with `len(Issues)` as worked before.\n\nI realize that this is maybe not a proper issue report, since I'm asking how to do stuff, but I don't see where/how else I can find out to do these things \"properly\" because the docs don't seem to offer this information. Those two errors are probably only symptoms of the changes in the library, and I'm of course willing to fix those myself, but I don't know where to find info about that, if not in the doc folder.\nThanks for any help anyway! :-)\n","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDY1NjgxNjQ=","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"Welcome back! Indeed, PyGithub has evolved (and stabilized).\n\nMethods that used to return a list of objects now return a `PaginatedList`. `PaginatedList` instances are only iterable (They do not support concatenation as lists do, and you cannot call `len` on them).\n\nThe rationale behind that? It is related to issue #33 and requests returning a large number of objects. In the previous version, creating a list of all the requested objects required a lot of [pagination requests](http://developer.github.com/v3/#pagination), and was quite long. It was a waste of time if the user was interested only in the first elements of that list. Enters `PaginatedList`, which does the pagination requests only when really needed. And it is no more limited to 10 pages.\n\nSo, to achieve what your are trying to do, you have to iterate the `PaginatedList` explicitly, either in a loop, or in the constructor of another collection.\n\nSimple iteration:\n\n```\nfor issue in itertools.chain(\n        repo.get_issues( state = 'closed' ),\n        repo.get_issues( state = 'open' )\n):\n    do stuff\n```\n\nReal list from PaginatedList (and then you can have its length):\n\n```\nissues = list( repo.get_issues( state = 'closed' ) ) + list( repo.get_issues( state = 'open' ) )\nnb_issues = len( issues )\n```\n","createdAt":"2012-06-26T06:34:33Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/51#issuecomment-6568164","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDY1NjgxODE=","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"I'll try to document this behavior soon.\n","createdAt":"2012-06-26T06:35:48Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/51#issuecomment-6568181","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDY1Njg1NTM=","author":{"login":"bilderbuchi"},"authorAssociation":"NONE","body":"Thanks for this, very helpful. I didn't know I could cast to list so easily (could've tried, though >.<)\n","createdAt":"2012-06-26T07:02:14Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/51#issuecomment-6568553","viewerDidAuthor":false}],"createdAt":"2012-06-25T21:24:43Z","number":51,"state":"CLOSED","title":"Docs seem to be out of sync with code?","url":"https://github.com/PyGithub/PyGithub/issues/51"},{"author":{"id":"MDQ6VXNlcjE4MzEyMzg=","is_bot":false,"login":"kukuts","name":""},"body":"New API ported from v2 but i have trouble with adopting ask's library for v2 API to support v3 style for searching. \nhttp://developer.github.com/v3/search/\n\nIts not described in the page about parameters that search for repos API supports.\nThey are same as in v2 API, you can look them in ask's library.\nIn v2 was like that https://github.com/api/v2/json/repos/search/testing?start_page=2&language=Python\nIn v3 is https://api.github.com/legacy/repos/search/testing?start_page=2&language=Python\n","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDY0ODEyMDA=","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"Those new apis where documented on June 5th, in https://github.com/github/developer.github.com/commit/3cff4bb9a1f1baf3101c984072cd4b4f0165618c. This explains that they are not covered by PyGithub 1.0 that was released on June 3rd.\n\nIt should not be too difficult to support them. I'll try to do it next week.\n","createdAt":"2012-06-21T12:42:19Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/49#issuecomment-6481200","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDY0ODEzOTI=","author":{"login":"kukuts"},"authorAssociation":"NONE","body":"Thank you\n","createdAt":"2012-06-21T12:52:06Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/49#issuecomment-6481392","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDY2NDEyMjM=","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"Problem: issues returned by the [`/legacy/issues/search` API](http://developer.github.com/v3/search/#search-issues) do not match those returned by [other v3 APIs](http://developer.github.com/v3/issues/#response):\n- labels are returned only by name, not not name, color and url\n- date-time format is different\n- maybe something else\n\nOf course, similar differences exist for users and repositories.\n\nIntegrating this legacy API will be more difficult than I thought.\n","createdAt":"2012-06-28T20:49:13Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/49#issuecomment-6641223","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDY2NzMzODA=","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"This is implemented in version 1.2, you can update from pypi.\n","createdAt":"2012-06-29T18:47:28Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/49#issuecomment-6673380","viewerDidAuthor":false}],"createdAt":"2012-06-21T12:27:38Z","number":49,"state":"CLOSED","title":"Support new Search API","url":"https://github.com/PyGithub/PyGithub/issues/49"},{"author":{"id":"MDQ6VXNlcjU3NzMyMg==","is_bot":false,"login":"malexw","name":"Alex W"},"body":"Installing on OS X 10.7 via:\n    $ pip install PyGithub\n\n(Using the Python 2.7 package from python.org, and not OS X's python2.6 flavour)\n\nGot an error message:\n    running install_data\n    copying ReadMe.md -> /System/Library/Frameworks/Python.framework/Versions/2.7/\n    error: /System/Library/Frameworks/Python.framework/Versions/2.7/ReadMe.md: Permission denied\n\nWhile I can use sudo to make the error message go away, I don't think `/System/Library/Frameworks/Python.framework/Versions/2.7/` is the correct location for the documentation. I don't know much about writing setup.py files, but after looking at gunicorn, flask, and numpy, it doesn't look like any of them use data_files for installing documentation.\n","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDY0NjczMTI=","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"Hello Alex, thank you for your feedback.\n\nI've just pushed the version 1.1 of the package. I've used `package_data` as explained in the [documentation of distutils](http://docs.python.org/distutils/setupscript.html#installing-package-data), but I'm still not very confident about my understanding of distutils... \n\nCould you please upgrade the package and tell if it's better?\n","createdAt":"2012-06-20T21:11:31Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/48#issuecomment-6467312","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDY0Njc2NDI=","author":{"login":"malexw"},"authorAssociation":"NONE","body":"Thanks for looking at this so quickly! Here's the result of running `python setup.py install` with your new changes:\n\n```\n<snip>\nrunning install_lib\ncopying build/lib/COPYING -> /Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages\ncopying build/lib/COPYING.LESSER -> /Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages\ncreating /Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/doc\ncopying build/lib/doc/Design.md -> /Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/doc\ncopying build/lib/doc/ReferenceOfApis.md -> /Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/doc\ncopying build/lib/doc/ReferenceOfClasses.md -> /Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/doc\ncopying build/lib/github/Requester.py -> /Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/github\ncopying build/lib/ReadMe.md -> /Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages\n</snip>\n```\n\nI wish I could help, but I'm afraid I don't know how setuptools works.\n","createdAt":"2012-06-20T21:22:44Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/48#issuecomment-6467642","viewerDidAuthor":false}],"createdAt":"2012-06-20T18:33:44Z","number":48,"state":"CLOSED","title":"data_files install location","url":"https://github.com/PyGithub/PyGithub/issues/48"},{"author":{"id":"MDQ6VXNlcjE0Njg1MTk=","is_bot":false,"login":"aneroid","name":"Anirudh Dutt"},"body":"Hi @jacquev6 When a github user's name has not been entered, I get a TypeError:\n`TypeError: coercing to Unicode: need string or buffer, NoneType found`\n\nUsing:\n\n```\nuser = gh.get_user('username')\nprint user.id\nprint user.login + ' -> ' + user.name\n```\n\nAlso happens with `getattr`:\n\n```\nprint getattr(user, u'login') + ' -> ' + getattr(user, u'name', u'No name entered')\n#(or)\nprint getattr(user, 'login') + ' -> ' + getattr(user, 'name', 'No name entered')\n```\n\nIs this the expected behaviour for missing (non-mandatory) attributes? I used `except TypeError:` as a workaround.\n","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDYzNTczNzQ=","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"Hello, when the user has not set his name, `user.name` is `None`, so you can't concatenate it with a string. The exception is not raised by PyGithub but by your code. Try `print user.login, \"->\", user.name` to avoid string concatenation.\n","createdAt":"2012-06-15T14:08:33Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/46#issuecomment-6357374","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDYzNTc0MjI=","author":{"login":"aneroid"},"authorAssociation":"NONE","body":"Perfect! Thanks, that worked. I _knew_ `+` for string concatenation was evil...did not listen.\n","createdAt":"2012-06-15T14:10:33Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/46#issuecomment-6357422","viewerDidAuthor":false}],"createdAt":"2012-06-15T13:54:39Z","number":46,"state":"CLOSED","title":"TypeError when Attribute doesn't exist","url":"https://github.com/PyGithub/PyGithub/issues/46"},{"author":{"id":"MDQ6VXNlcjg5OTA2OA==","is_bot":false,"login":"jeblair","name":"James E. Blair"},"body":"The project has both COPYING and COPYING.LESSER files, containing the GPL and LGPL respectively.  The file headers seem to suggest the project is LGPL licensed, but the COPYING file suggests it is GPL licensed.\n\nCould you please clarify your intent (for example, by removing an unneeded COPYING\\* file, or indicating in the license headers that you intend to dual license it [1]).\n\nThanks!  PyGithub looks great, and I'd love to be able to use it!\n\n[1] I personally do not recommend dual licensing under GPL and LGPL\n","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDYyOTM1NzI=","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"PyGithub is definitely licensed under the GNU **Lesser** General Public License.\n\nAccording to http://www.gnu.org/licenses/gpl-howto.html, including both COPYING and COPYING.LESSER is the good way to use the LGPL. Anyway, this is misleading, so I will add a section about licensing in the readme today or tomorrow.\n\nThank you for your feedback, I hope PyGithub will be useful for you.\n","createdAt":"2012-06-13T06:03:24Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/45#issuecomment-6293572","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDYzMDU2MjU=","author":{"login":"jeblair"},"authorAssociation":"NONE","body":"Sorry I wasn't up to date on v3 licensing best practices.  Thank you very much!\n","createdAt":"2012-06-13T16:17:27Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/45#issuecomment-6305625","viewerDidAuthor":false}],"createdAt":"2012-06-12T23:16:05Z","number":45,"state":"CLOSED","title":"Please clarify licensing","url":"https://github.com/PyGithub/PyGithub/issues/45"},{"author":{"id":"MDQ6VXNlcjMyNzE0Ng==","is_bot":false,"login":"jacquev6","name":"Vincent Jacques"},"body":"","comments":[],"createdAt":"2012-05-30T20:01:34Z","number":44,"state":"CLOSED","title":"Type all parameters","url":"https://github.com/PyGithub/PyGithub/issues/44"},{"author":{"id":"MDQ6VXNlcjMyNzE0Ng==","is_bot":false,"login":"jacquev6","name":"Vincent Jacques"},"body":"","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDMxMTU3NTk3","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"This contradicts #195: closing.\n","createdAt":"2013-12-24T04:08:29Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/43#issuecomment-31157597","viewerDidAuthor":false}],"createdAt":"2012-05-30T20:00:36Z","number":43,"state":"CLOSED","title":"Make all attributes either optional or mandatory","url":"https://github.com/PyGithub/PyGithub/issues/43"},{"author":{"id":"MDQ6VXNlcjMyNzE0Ng==","is_bot":false,"login":"jacquev6","name":"Vincent Jacques"},"body":"","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDM2MjU3ODEz","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"Clean-up issues: this will be in v2 (next week-end or so)\n","createdAt":"2014-02-27T16:06:28Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/42#issuecomment-36257813","viewerDidAuthor":false}],"createdAt":"2012-05-30T06:19:02Z","number":42,"state":"CLOSED","title":"Create enumerations for string attributes/arguments with a finite set of values","url":"https://github.com/PyGithub/PyGithub/issues/42"},{"author":{"id":"MDQ6VXNlcjMyNzE0Ng==","is_bot":false,"login":"jacquev6","name":"Vincent Jacques"},"body":"","comments":[],"createdAt":"2012-05-30T06:16:47Z","number":41,"state":"CLOSED","title":"Use type datetime.datetime for appropriate attributes/arguments","url":"https://github.com/PyGithub/PyGithub/issues/41"},{"author":{"id":"MDQ6VXNlcjMyNzE0Ng==","is_bot":false,"login":"jacquev6","name":"Vincent Jacques"},"body":"It would be good to have a doc that is more like other documentations of Python libraries.\n","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDg1MDczMDE=","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"Closing as duplicate of #82\n","createdAt":"2012-09-12T19:42:21Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/40#issuecomment-8507301","viewerDidAuthor":false}],"createdAt":"2012-05-30T06:15:03Z","number":40,"state":"CLOSED","title":"Generate a docs.python.org-like documentation","url":"https://github.com/PyGithub/PyGithub/issues/40"},{"author":{"id":"MDQ6VXNlcjMyNzE0Ng==","is_bot":false,"login":"jacquev6","name":"Vincent Jacques"},"body":"","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDU5ODEyMzI=","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"Duplicate of #18...\n","createdAt":"2012-05-29T11:45:46Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/38#issuecomment-5981232","viewerDidAuthor":false}],"createdAt":"2012-05-29T11:44:40Z","number":38,"state":"CLOSED","title":"Remove _identity from the json description","url":"https://github.com/PyGithub/PyGithub/issues/38"},{"author":{"id":"MDQ6VXNlcjMyNzE0Ng==","is_bot":false,"login":"jacquev6","name":"Vincent Jacques"},"body":"Cf http://developer.github.com/v3/pulls/comments/#alternative-input, but my first tests did not succeed.\n","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDg0NzE1NTE=","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"In [previous commit](https://github.com/jacquev6/PyGithub/blob/11aeaa76a0bf38cdc547b98d440c933694a2e04e/test/ReplayData/PullRequest.testCreateCommentReply.txt), I get an error response from Github for the following request:\n\nPOST https://api.github.com/repos/jacquev6/PyGithub/pulls/31/comments\n{\"body\": \"Reply created by PyGithub\", \"in_reply_to\": 1580134}\n\nThe error is:\n422 Unprocessable Entity\n{\"errors\":[\n{\"resource\":\"PullRequestReviewComment\",\"code\":\"missing_field\",\"field\":\"commit_id\"},\n{\"resource\":\"PullRequestReviewComment\",\"code\":\"missing_field\",\"field\":\"path\"},\n{\"resource\":\"PullRequestReviewComment\",\"code\":\"missing_field\",\"field\":\"diff_hunk\"},\n{\"resource\":\"PullRequestReviewComment\",\"code\":\"missing_field\",\"field\":\"original_position\"}\n],\"message\":\"Validation Failed\"}\n\nI am lazy and won't contact Github about that. If someone really cares about this API being in PyGithub, please show me a POST with in_reply_to that works, and I will use it.\n","createdAt":"2012-09-11T20:30:09Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/37#issuecomment-8471551","viewerDidAuthor":false}],"createdAt":"2012-05-29T11:39:15Z","number":37,"state":"CLOSED","title":"Understand and implement POST /repos/:user/:repo/pulls/:number/comments with in_reply_to","url":"https://github.com/PyGithub/PyGithub/issues/37"},{"author":{"id":"MDQ6VXNlcjMyNzE0Ng==","is_bot":false,"login":"jacquev6","name":"Vincent Jacques"},"body":"For example, in `Organization.get_repos( type )`, `type` should be added to the url, as described in http://developer.github.com/v3/repos/#list-organization-repositories\n","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDU5ODEwODQ=","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"Add a test `Issue33.testClosedIssues` when `Repository.get_issues` uses its 'state' parameter for issue #33\n","createdAt":"2012-05-29T11:36:02Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/36#issuecomment-5981084","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDU5OTE5NjU=","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"@Lyloa I have to mention someone to test `Repository.get_issues` with argument `mentioned`\n","createdAt":"2012-05-29T18:38:53Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/36#issuecomment-5991965","viewerDidAuthor":false}],"createdAt":"2012-05-29T11:33:19Z","number":36,"state":"CLOSED","title":"Re-implement url parameters","url":"https://github.com/PyGithub/PyGithub/issues/36"},{"author":{"id":"MDQ6VXNlcjMyNzE0Ng==","is_bot":false,"login":"jacquev6","name":"Vincent Jacques"},"body":"https://api.github.com/hooks is not documented, but it is referred by http://developer.github.com/v3/repos/hooks/#create-a-hook\n","comments":[],"createdAt":"2012-05-29T11:29:46Z","number":35,"state":"CLOSED","title":"Implement https://api.github.com/hooks","url":"https://github.com/PyGithub/PyGithub/issues/35"},{"author":{"id":"MDQ6VXNlcjMyNzE0Ng==","is_bot":false,"login":"jacquev6","name":"Vincent Jacques"},"body":"","comments":[],"createdAt":"2012-05-29T07:13:42Z","number":34,"state":"CLOSED","title":"Check that there is no more `todo`s in code","url":"https://github.com/PyGithub/PyGithub/issues/34"},{"author":{"id":"MDQ6VXNlcjMyNzQ0Mg==","is_bot":false,"login":"bilderbuchi","name":"Christoph Buchner"},"body":"As the title says, `get_issues()` seems to return a max of 250 items. \nIt can't be a pagination thing I think because a page is max. 100 items long as per http://developer.github.com/v3/#pagination\n\nRepro:\n\n```\nfrom github import Github\ng = Github()\ntest=g.get_user('openframeworks').get_repo('openFrameworks').get_issues()\nlen(test)\n```\n\nThis repo hast 940 closed and 340 open issues.\n","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDU5NjU3MjQ=","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"You're definitively my best user ! I hope you will not get tired of discovering bugs and limitations in my library.\n\nThis issue is related to https://github.com/jacquev6/PyGithub/blob/master/github/Requester.py#L28 and the `pageCount < 10`: I've had to limit to 10 pages for some obscure reason I don't remember.\n\nIn version 1.0, `get_issues` (and other `get_collection`s) will not return a Python `list` but a `github.PaginatedList` which will be iterable and not limited to 10 pages, (but you won't be able to call `len` on it).\n","createdAt":"2012-05-28T13:52:22Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/33#issuecomment-5965724","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDU5NjU4OTE=","author":{"login":"bilderbuchi"},"authorAssociation":"NONE","body":"I see. Is there a possibility to increase the number of items per page to work around this for now? This is in the API (with `&per_page=100` according to API docs), but I'm unsure how to do this in PyGithub. Default is 25, max 100.\n","createdAt":"2012-05-28T14:04:25Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/33#issuecomment-5965891","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDU5NjY1NTU=","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"If you can't or don't want to modify PyGithub locally, I'm afraid you're stuck to 10 pages of 25 items, sorry.\n\nIf you can patch PyGithub, just increase/remove the limit on `pageCount` in `Requester.py`.\n\nBe assured I will publish version 1.0 on next Monday, with all the things I promised :)\n","createdAt":"2012-05-28T14:42:47Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/33#issuecomment-5966555","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDU5NjY2MzM=","author":{"login":"bilderbuchi"},"authorAssociation":"NONE","body":"I see. I can either patch it locally, or just wait for next week. It will take a while until I get all the other work done, waiting for 1.0 probably won't delay me at all.\n","createdAt":"2012-05-28T14:47:02Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/33#issuecomment-5966633","viewerDidAuthor":false}],"createdAt":"2012-05-28T13:18:01Z","number":33,"state":"CLOSED","title":"get_issues() returns max. 250 items","url":"https://github.com/PyGithub/PyGithub/issues/33"},{"author":{"id":"MDQ6VXNlcjMyNzE0Ng==","is_bot":false,"login":"jacquev6","name":"Vincent Jacques"},"body":"Body created by PyGithub\n","comments":[],"createdAt":"2012-05-27T05:40:15Z","number":30,"state":"CLOSED","title":"Issue also created by PyGithub","url":"https://github.com/PyGithub/PyGithub/issues/30"},{"author":{"id":"MDQ6VXNlcjMyNzE0Ng==","is_bot":false,"login":"jacquev6","name":"Vincent Jacques"},"body":"","comments":[],"createdAt":"2012-05-25T11:47:59Z","number":29,"state":"CLOSED","title":"Publish version 0.7","url":"https://github.com/PyGithub/PyGithub/issues/29"},{"author":{"id":"MDQ6VXNlcjMyNzE0Ng==","is_bot":false,"login":"jacquev6","name":"Vincent Jacques"},"body":"Body edited by PyGithub\n","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDIwMjI3NzUz","author":{"login":"stuglaser"},"authorAssociation":"CONTRIBUTOR","body":"Comment created by PyGithub\n","createdAt":"2013-06-29T10:31:38Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":1}},{"content":"HOORAY","users":{"totalCount":1}}],"url":"https://github.com/PyGithub/PyGithub/issues/28#issuecomment-20227753","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQxNTU3MDg5NQ==","author":{"login":"allevin"},"authorAssociation":"CONTRIBUTOR","body":"Comment created by PyGithub","createdAt":"2018-08-23T21:05:39Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/28#issuecomment-415570895","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQxNTc2MjgxOQ==","author":{"login":"allevin"},"authorAssociation":"CONTRIBUTOR","body":"Comment created by PyGithub","createdAt":"2018-08-24T13:43:44Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/28#issuecomment-415762819","viewerDidAuthor":false}],"createdAt":"2012-05-19T10:38:23Z","number":28,"state":"CLOSED","title":"Issue created by PyGithub","url":"https://github.com/PyGithub/PyGithub/issues/28"},{"author":{"id":"MDQ6VXNlcjMyNzQ0Mg==","is_bot":false,"login":"bilderbuchi","name":"Christoph Buchner"},"body":"As per discussion in 6945921c529be14c3a8f566dd1e483674516d46d\n\nI have observed that autocompletion (using PyDev+Eclipse in my case) is pretty erratic.\nFor example, in the tutorial from the readme, `g.get_u` gets autocompleted correctly, but `g.get_user().get_r` (or any method or attribute applicable to `NamedUsers`/`AuthenticatedUser`, really) does not show autocompletion to `g.get_user().get_repo()`.\n\nThis makes exploring the library/API a bit cumbersome. \n","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDU5ODE0MDk=","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"Will be OK in version 1.0: no more strange meta-description of the API, and the (generated, but it does not mater) code is easily readable by the IDE's auto-completion tool.\n","createdAt":"2012-05-29T11:56:06Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/27#issuecomment-5981409","viewerDidAuthor":false}],"createdAt":"2012-05-18T10:52:29Z","number":27,"state":"CLOSED","title":"Facilitate IDE autocompletion","url":"https://github.com/PyGithub/PyGithub/issues/27"},{"author":{"id":"MDQ6VXNlcjMyNzQ0Mg==","is_bot":false,"login":"bilderbuchi","name":"Christoph Buchner"},"body":"Hi!\n\nI tried to find a function which returns the number of API requests I have remaining due to [rate limiting](http://developer.github.com/v3/#rate-limiting). Is this somewhere in the library and I can't find it? If not, I think it would be a great feature to have, to be able to keep track of how many requests certain actions use up.\n","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDU3ODAxODM=","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"Thank you for your feedback.\n\nI have indeed not yet implemented this feature because I have no real use of it: each API call is more than half a second long, so it's hard to reach the rate limit.\n\nAnyway, it is easy to extract the rate limiting headers, so I will add an attribute to the Github class to give access to their last value.\n\nExpect it in version 1.0. I will set an expected date on the milestone during the week-end.\n","createdAt":"2012-05-18T05:27:40Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/26#issuecomment-5780183","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDU3ODE4MDM=","author":{"login":"bilderbuchi"},"authorAssociation":"NONE","body":"Ah good point about it being hard to reach. Thanks for implementing it. No hurry, though, it's not that important. :-)\n","createdAt":"2012-05-18T08:34:04Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/26#issuecomment-5781803","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDU4MjAxOTk=","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"Implemented in ca97469. Will be in version 1.0.\n","createdAt":"2012-05-21T11:17:12Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/26#issuecomment-5820199","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDU4MjA5MTI=","author":{"login":"bilderbuchi"},"authorAssociation":"NONE","body":"Thanks. :-)\n","createdAt":"2012-05-21T12:09:57Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/26#issuecomment-5820912","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQ4MTIzMDc3OA==","author":{"login":"brianjmurrell"},"authorAssociation":"CONTRIBUTOR","body":"> each API call is more than half a second long, so it's hard to reach the rate limit.\r\n\r\nFor the absolute max rate limit, yes.  But it's really quite easy to trigger abuse rate limiting:\r\n\r\n```\r\n[2019-04-09T10:02:14.101Z] 2019-04-09 10:02:11,214 POST https://api.github.com/.../pulls/284/reviews {'Content-Type': 'application/json', 'Authorization': 'Basic (login and password removed)', 'User-Agent': 'PyGithub/Python'} {...} ==> 422 {'status': '422 Unprocessable Entity', 'x-accepted-oauth-scopes': '', 'content-length': '171', 'x-github-media-type': 'github.v3; format=json', 'content-security-policy': \"default-src 'none'\", 'x-content-type-options': 'nosniff', 'access-control-expose-headers': 'ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Reset, X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type', 'x-github-request-id': '9F34:7C5C:3ABC39:7696C8:5CAC6DA0', 'strict-transport-security': 'max-age=31536000; includeSubdomains; preload', 'x-ratelimit-remaining': '4719', 'server': 'GitHub.com', 'x-ratelimit-limit': '5000', 'x-oauth-scopes': 'notifications, public_repo', 'date': 'Tue, 09 Apr 2019 10:02:11 GMT', 'x-frame-options': 'deny', 'access-control-allow-origin': '*', 'referrer-policy': 'origin-when-cross-origin, strict-origin-when-cross-origin', 'content-type': 'application/json; charset=utf-8', 'x-xss-protection': '1; mode=block', 'x-ratelimit-reset': '1554806424'} {\"message\":\"Unprocessable Entity\",\"errors\":[\"was submitted too quickly\"],\"documentation_url\":\"https://developer.github.com/v3/pulls/reviews/#create-a-pull-request-review\"}\r\n```\r\n\r\n#1084, FWIW.","createdAt":"2019-04-09T12:29:42Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/26#issuecomment-481230778","viewerDidAuthor":false}],"createdAt":"2012-05-17T12:02:05Z","number":26,"state":"CLOSED","title":"Rate limiting?","url":"https://github.com/PyGithub/PyGithub/issues/26"},{"author":{"id":"MDQ6VXNlcjMyNzE0Ng==","is_bot":false,"login":"jacquev6","name":"Vincent Jacques"},"body":"List known clients.\n\nFirst known client: http://pypi.python.org/pypi/tratihubis/ (cf #24)\n","comments":[],"createdAt":"2012-05-07T10:49:06Z","number":25,"state":"CLOSED","title":"List project(s) using PyGithub","url":"https://github.com/PyGithub/PyGithub/issues/25"},{"author":{"id":"MDQ6VXNlcjMyODcyNg==","is_bot":false,"login":"roskakori","name":"Thomas Aglassinger"},"body":"Thanks for PyGithub, it is easy to use and very complete. I just successfully used it to convert Trac tickets to Guthub issues.\n\nBut I had to learn the hard way that `create_issue()` expectes the milestone as number instead of a title. To track this down, I added the following `print` statement to `Requester.py`:\n\n``` python\ndef __statusCheckedRequest( self, verb, url, parameters, input ):\n    status, headers, output = self.__rawRequest( verb, url, parameters, input )\n    if status < 200 or status >= 300:\n        print output # <--- Added by me.\n        raise UnknownGithubObject() # <--- sadly lacks any error details\n    return headers, output\n```\n\nAs `output` already contains all the information needed (as JSON dump), it would be helpful if the exception raised here would include this information in the exception message.\n","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDU0NDkyMzc=","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"Thank you for the suggestion. It's somehow related to https://github.com/jacquev6/PyGithub/issues/6, even if I have not described it in details.\n\nI'm currently doing a very deep rewrite, which will lead to much more readable stack traces in case of exceptions, and I will include more details about the error. I may also be able to detect type errors _before_ sending the request to github.\n\nBy the way, I'm very glad to hear that you have solved a real-life use case using PyGithub :-)\n","createdAt":"2012-05-01T22:03:59Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/24#issuecomment-5449237","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDU1MTgyNzI=","author":{"login":"roskakori"},"authorAssociation":"NONE","body":"Good to hear you are already working on this in #6, so I suppose this can be tagged as duplicate and be closed.\n\nBTW, I cleaned up my script to convert Trac tickets to Github issues and uploaded it to PyPI: http://pypi.python.org/pypi/tratihubis/. It seems that at least some people find it useful, so hopefully it helps to popularize PyGithub a little.\n","createdAt":"2012-05-04T19:23:57Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/24#issuecomment-5518272","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDYwMTk3MDA=","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"Should be much improved by 7248e66. Will be in version 1.0\n","createdAt":"2012-05-30T19:58:35Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/24#issuecomment-6019700","viewerDidAuthor":false}],"createdAt":"2012-04-30T20:01:20Z","number":24,"state":"CLOSED","title":"Improve error messages on broken requests","url":"https://github.com/PyGithub/PyGithub/issues/24"},{"author":{"id":"MDQ6VXNlcjExMzcwMTg=","is_bot":false,"login":"tallforasmurf","name":"Nat Picker"},"body":"This is probably user error (I don't really know what I'm doing) but if I execute `repo.get_download(1)` or `repo.get_download('foobar')` (I'm not sure what the proper id for a download is), I get the following error trace:\n\n```\nTraceback (most recent call last):\n  File \"/Applications/WingIDE.app/Contents/MacOS/src/debug/tserver/_sandbox.py\", line 1, in <module>\n# Used internally for debug sandbox under external interpreter\n  File \"/Library/Python/2.6/site-packages/PyGithub-0.6-py2.6.egg/github/GithubObjects/GithubObject/GithubObject.py\", line 77, in <lambda>\n  File \"/Library/Python/2.6/site-packages/PyGithub-0.6-py2.6.egg/github/GithubObjects/GithubObject/List.py\", line 114, in __execute\n  File \"/Library/Python/2.6/site-packages/PyGithub-0.6-py2.6.egg/github/GithubObjects/GithubObject/TypePolicies.py\", line 25, in createNonLazy\n  File \"/Library/Python/2.6/site-packages/PyGithub-0.6-py2.6.egg/github/GithubObjects/GithubObject/GithubObject.py\", line 73, in __init__\n  File \"/Library/Python/2.6/site-packages/PyGithub-0.6-py2.6.egg/github/GithubObjects/GithubObject/GithubObject.py\", line 103, in __fetchAttribute\n  File \"/Library/Python/2.6/site-packages/PyGithub-0.6-py2.6.egg/github/GithubObjects/GithubObject/Basic.py\", line 62, in updateAttributes\n  File \"/Library/Python/2.6/site-packages/PyGithub-0.6-py2.6.egg/github/Github.py\", line 10, in _dataRequest\n  File \"/Library/Python/2.6/site-packages/PyGithub-0.6-py2.6.egg/github/Requester.py\", line 17, in dataRequest\n  File \"/Library/Python/2.6/site-packages/PyGithub-0.6-py2.6.egg/github/Requester.py\", line 39, in __statusCheckedRequest\ngithub.Requester.UnknownGithubObject:\n```\n\nAlso possibly related: `repo.get_download()` (what weird things users do, eh?) causes a shorter trace ending in Type Error. \n","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDUxODYwNjE=","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"`UnknownGithubObject` is the exception I throw when you request an object that doesn't exist. Here, there is no download with `id` `1` or `\"foobar\"` in your repo.\n\nThe `TypeError` you get when calling `repo.get_download()`is because `get_download` requires an argument as stated in the [reference of classes](https://github.com/jacquev6/PyGithub/blob/master/ReferenceOfClasses.md) (See \"Downloads\" in \"class Repository\").\n\nSo, what argument should you pass to `get_downloads`? Well, the documentation says `id`, so you can first call `get_downloads` which returns a list of `Download`s, and look what is `Download.id`.\n\nThe fact is that I have no repository to test this with downloads, but here is an example with issues (`g` is a `Github` instance):\n\n```\n>>> g.get_user().get_repo( \"PyGithub\" ).get_issues()[0].number\n23\n>>> g.get_user().get_repo( \"PyGithub\" ).get_issue( 23 )\n<github.GithubObjects.GithubObject.GithubObject.Issue instance at 0x10c9aaea8>\n```\n\n(I took the `number` attribute of the first `Issue`, because the reference says that `get_issue` takes a `number`.)\n\nI hope it helps.\n","createdAt":"2012-04-17T21:10:15Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/23#issuecomment-5186061","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDUyMjYwOTA=","author":{"login":"tallforasmurf"},"authorAssociation":"NONE","body":"I hope this report will be useful, however, I am not going to be using this package after all. I discovered (what should have been obvious) that I can get everything I need from github just using urllib and reading the page.\n\n```\nimport urllib2\ntry:\n    u = urllib2.urlopen( 'https://github.com/<user>/<public-repo>', timeout=5 )\nexcept:\n    #cannot contact github - try later\n    #exit\ns = u.read()\nu.close()\n```\n\nIt's all there, file names, SHA, last commit date, and if I want to read file data, no need to decode a blob, it's at `https://raw.github.com/<user>/<public-repo>/master/<filename>`\n","createdAt":"2012-04-19T16:40:02Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/23#issuecomment-5226090","viewerDidAuthor":false}],"createdAt":"2012-04-17T19:03:44Z","number":23,"state":"CLOSED","title":"UnknownGithubObject on get_download() with invalid key","url":"https://github.com/PyGithub/PyGithub/issues/23"},{"author":{"id":"MDQ6VXNlcjMyNzE0Ng==","is_bot":false,"login":"jacquev6","name":"Vincent Jacques"},"body":"","comments":[],"createdAt":"2012-04-17T05:52:29Z","number":22,"state":"CLOSED","title":"Publish version 0.6","url":"https://github.com/PyGithub/PyGithub/issues/22"},{"author":{"id":"MDQ6VXNlcjExMzcwMTg=","is_bot":false,"login":"tallforasmurf","name":"Nat Picker"},"body":"Did easy_install on Mac OS 10.6 (python 2.6) and attempt to execute tutorial sequence:\n\n```\n>>> from github import Github\n>>> gh = Github('tallforasmurf','<redacted>')\n>>> au = gh.get_user()\n>>> au.id\n1137018\n>>> r = au.get_repos()\nTraceback (most recent call last):\n  File \"/Applications/WingIDE.app/Contents/MacOS/src/debug/tserver/_sandbox.py\", line 1, in <module>\n    # Used internally for debug sandbox under external interpreter\n  File \"/Library/Python/2.6/site-packages/PyGithub-0.5-    py2.6.egg/github/GithubObjects/GithubObject/GithubObject.py\", line 77, in <lambda>\n  File \"/Library/Python/2.6/site-packages/PyGithub-0.5-py2.6.egg/github/GithubObjects/GithubObject/List.py\", line 176, in __execute\n  File \"/Library/Python/2.6/site-packages/PyGithub-0.5-py2.6.egg/github/GithubObjects/GithubObject/TypePolicies.py\", line 22, in createLazy\n  File \"/Library/Python/2.6/site-packages/PyGithub-0.5-py2.6.egg/github/GithubObjects/GithubObject/GithubObject.py\", line 69, in __init__\n  File \"/Library/Python/2.6/site-packages/PyGithub-0.5-py2.6.egg/github/GithubObjects/GithubObject/GithubObject.py\", line 87, in _updateAttributes\nKeyError: u'permissions'\n```\n\nSame error on `get_repo('name of existing repo')`\n","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDUxNjg3NTc=","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"Thank you for reporting this. I'll publish a fix as soon as possible (tonight or tomorrow)\n","createdAt":"2012-04-17T05:50:25Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/21#issuecomment-5168757","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDUxODE2NDA=","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"Fixed in version 0.6. Please `easy_install --upgrade pygithub`\n","createdAt":"2012-04-17T17:59:18Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/21#issuecomment-5181640","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDUxODMwMTA=","author":{"login":"tallforasmurf"},"authorAssociation":"NONE","body":"yes fixed thanks\n","createdAt":"2012-04-17T18:58:05Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/21#issuecomment-5183010","viewerDidAuthor":false}],"createdAt":"2012-04-16T20:20:21Z","number":21,"state":"CLOSED","title":"KeyError executing tutorial example?","url":"https://github.com/PyGithub/PyGithub/issues/21"},{"author":{"id":"MDQ6VXNlcjMyNzE0Ng==","is_bot":false,"login":"jacquev6","name":"Vincent Jacques"},"body":"","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDU5ODE0NTE=","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"This will be covered by #36\n","createdAt":"2012-05-29T11:58:04Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/20#issuecomment-5981451","viewerDidAuthor":false}],"createdAt":"2012-03-19T19:08:18Z","number":20,"state":"CLOSED","title":"Rework GitTree.recursive","url":"https://github.com/PyGithub/PyGithub/issues/20"},{"author":{"id":"MDQ6VXNlcjMyNzE0Ng==","is_bot":false,"login":"jacquev6","name":"Vincent Jacques"},"body":"In general, when you get a collection, you should get an iterable, and the pagination should be done only if needed. This is mandatory for Github.get_gists\n","comments":[],"createdAt":"2012-03-19T19:04:19Z","number":19,"state":"CLOSED","title":"Rework Github.get_gists","url":"https://github.com/PyGithub/PyGithub/issues/19"},{"author":{"id":"MDQ6VXNlcjMyNzE0Ng==","is_bot":false,"login":"jacquev6","name":"Vincent Jacques"},"body":"`_identity` exists only in `Label`, `NamedUser` and `Repository`, and should be replaced by proper attribute (`urlquote( self.name)`, `self.login` and `self.full_name`) in methods like `AuthenticatedUser.add_to_following`\n","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDM2MjU3NzY0","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"Clean-up issues: this is so old. And most probably inapplicable to v2 (expected next week-end or so)\n","createdAt":"2014-02-27T16:06:01Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/18#issuecomment-36257764","viewerDidAuthor":false}],"createdAt":"2012-03-14T06:49:31Z","number":18,"state":"CLOSED","title":"Remove _identity","url":"https://github.com/PyGithub/PyGithub/issues/18"},{"author":{"id":"MDQ6VXNlcjMyNzE0Ng==","is_bot":false,"login":"jacquev6","name":"Vincent Jacques"},"body":"","comments":[],"createdAt":"2012-03-13T12:09:48Z","number":17,"state":"CLOSED","title":"Document issue reporting","url":"https://github.com/PyGithub/PyGithub/issues/17"},{"author":{"id":"MDQ6VXNlcjMyNzE0Ng==","is_bot":false,"login":"jacquev6","name":"Vincent Jacques"},"body":"","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDMwMjkyMjI5Ng==","author":{"login":"NicoHood"},"authorAssociation":"NONE","body":"Is this software GPL or LGPL now?","createdAt":"2017-05-21T08:18:27Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/16#issuecomment-302922296","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQxODMzNjUyMw==","author":{"login":"spectejb"},"authorAssociation":"NONE","body":"@jacquev6 - I wanted to follow up on @NicoHood 's question.  It appears this software is dual-licensed under both GPL and LGPL where we could choose either.  Can you confirm that is true?  Thanks, in advance, for your help!","createdAt":"2018-09-04T11:43:30Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/16#issuecomment-418336523","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQxOTQ5MDczOQ==","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"@spectejb @NicoHood I have found no indication of double licensing in the source repo. Can you please be more explicit about the confusion? I think opening a new issue would also be more visible for the current maintainers if you want more follow-up.\r\n\r\nJust in case you're confused by the COPYING and COPYING.LESSER files, they are here because https://choosealicense.com/licenses/lgpl-3.0/ says so (paragraph \"How to apply\").\r\n\r\nSo my *intention* was LGPL.","createdAt":"2018-09-07T16:17:10Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/16#issuecomment-419490739","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQxOTU0Mjk3Mw==","author":{"login":"spectejb"},"authorAssociation":"NONE","body":"Thanks for confirming your intentions, @jacquev6!\r\n\r\nMy comment is related to what appears to be a copy/paste error.  The label in COPYING says LGPL 3.0 but the text is for GPL (https://github.com/PyGithub/PyGithub/blob/master/COPYING)","createdAt":"2018-09-07T19:31:07Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/16#issuecomment-419542973","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQ2NDQ2Nzk4NQ==","author":{"login":"spectejb"},"authorAssociation":"NONE","body":"Thanks for adding the LGPL 3.0 license, jacquev6!  It may be helpful to delete the GPL 3.0 text as well.  \r\n\r\nAppreciate the clarification!","createdAt":"2019-02-17T15:05:20Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/16#issuecomment-464467985","viewerDidAuthor":false}],"createdAt":"2012-03-13T06:25:31Z","number":16,"state":"CLOSED","title":"Add copyright and license notice","url":"https://github.com/PyGithub/PyGithub/issues/16"},{"author":{"id":"MDQ6VXNlcjMyNzE0Ng==","is_bot":false,"login":"jacquev6","name":"Vincent Jacques"},"body":"One would want to use the API without authentication, with login+password, and with OAuth token. Let's cover these use-cases.\n","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDU5MjQxOTg=","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"It means that there will be three ways to create an instance of the Github class:\n    github = Github()\n    github = Github( login, password )\n    github = Github( oauth_token )\n","createdAt":"2012-05-25T06:31:42Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/15#issuecomment-5924198","viewerDidAuthor":false}],"createdAt":"2012-03-13T06:24:05Z","number":15,"state":"CLOSED","title":"Implement all authentication schemes","url":"https://github.com/PyGithub/PyGithub/issues/15"},{"author":{"id":"MDQ6VXNlcjMyNzE0Ng==","is_bot":false,"login":"jacquev6","name":"Vincent Jacques"},"body":"","comments":[],"createdAt":"2012-03-13T06:23:35Z","number":14,"state":"CLOSED","title":"Rework BaseUrl to use tuples instead of string concatenation","url":"https://github.com/PyGithub/PyGithub/issues/14"},{"author":{"id":"MDQ6VXNlcjMyNzE0Ng==","is_bot":false,"login":"jacquev6","name":"Vincent Jacques"},"body":"","comments":[],"createdAt":"2012-03-13T06:22:27Z","number":13,"state":"CLOSED","title":"Remove the _repo hugly hack","url":"https://github.com/PyGithub/PyGithub/issues/13"},{"author":{"id":"MDQ6VXNlcjMyNzE0Ng==","is_bot":false,"login":"jacquev6","name":"Vincent Jacques"},"body":"","comments":[],"createdAt":"2012-03-13T06:21:57Z","number":12,"state":"CLOSED","title":"Type all attributes","url":"https://github.com/PyGithub/PyGithub/issues/12"},{"author":{"id":"MDQ6VXNlcjMyNzE0Ng==","is_bot":false,"login":"jacquev6","name":"Vincent Jacques"},"body":"","comments":[],"createdAt":"2012-03-13T06:08:10Z","number":11,"state":"CLOSED","title":"Implement alternative inputs","url":"https://github.com/PyGithub/PyGithub/issues/11"},{"author":{"id":"MDQ6VXNlcjMyNzE0Ng==","is_bot":false,"login":"jacquev6","name":"Vincent Jacques"},"body":"","comments":[],"createdAt":"2012-03-12T22:08:06Z","number":10,"state":"CLOSED","title":"Separate GithubObjects.py in several files","url":"https://github.com/PyGithub/PyGithub/issues/10"},{"author":{"id":"MDQ6VXNlcjMyNzE0Ng==","is_bot":false,"login":"jacquev6","name":"Vincent Jacques"},"body":"Check that there is no more `todo`s in code\nCheck that we have 100% test coverage\n","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDYwODg0MzI=","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"Done! You can `easy_install --upgrade PyGithub`.\n","createdAt":"2012-06-03T19:56:17Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/9#issuecomment-6088432","viewerDidAuthor":false}],"createdAt":"2012-03-12T21:58:05Z","number":9,"state":"CLOSED","title":"Publish version 1.0","url":"https://github.com/PyGithub/PyGithub/issues/9"},{"author":{"id":"MDQ6VXNlcjMyNzE0Ng==","is_bot":false,"login":"jacquev6","name":"Vincent Jacques"},"body":"","comments":[],"createdAt":"2012-03-12T21:38:49Z","number":8,"state":"CLOSED","title":"Publish version 0.5","url":"https://github.com/PyGithub/PyGithub/issues/8"},{"author":{"id":"MDQ6VXNlcjMyNzE0Ng==","is_bot":false,"login":"jacquev6","name":"Vincent Jacques"},"body":"","comments":[],"createdAt":"2012-03-12T20:47:21Z","number":7,"state":"CLOSED","title":"Publish version 0.4","url":"https://github.com/PyGithub/PyGithub/issues/7"},{"author":{"id":"MDQ6VXNlcjMyNzE0Ng==","is_bot":false,"login":"jacquev6","name":"Vincent Jacques"},"body":"","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDU1NDc1NzY=","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"This was reported by user in #24. I close this one because the other one has more information.\n","createdAt":"2012-05-07T10:45:58Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/6#issuecomment-5547576","viewerDidAuthor":false}],"createdAt":"2012-03-12T19:45:51Z","number":6,"state":"CLOSED","title":"Review exceptions policy when receiving error HTTP status","url":"https://github.com/PyGithub/PyGithub/issues/6"},{"author":{"id":"MDQ6VXNlcjMyNzE0Ng==","is_bot":false,"login":"jacquev6","name":"Vincent Jacques"},"body":"","comments":[],"createdAt":"2012-03-08T12:21:28Z","number":5,"state":"CLOSED","title":"Implement full API","url":"https://github.com/PyGithub/PyGithub/issues/5"},{"author":{"id":"MDQ6VXNlcjMyNzE0Ng==","is_bot":false,"login":"jacquev6","name":"Vincent Jacques"},"body":"All attributes and method parameters must have an identified and documented type\n","comments":[],"createdAt":"2012-03-06T16:48:40Z","number":4,"state":"CLOSED","title":"Review public interface homogeneity ","url":"https://github.com/PyGithub/PyGithub/issues/4"},{"author":{"id":"MDQ6VXNlcjMyNzE0Ng==","is_bot":false,"login":"jacquev6","name":"Vincent Jacques"},"body":"","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDU5NjU4MTI=","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"For example, `Repository.edit` has a first parameter, `name`, which is mandatory, and should not. We could deduce it from the `name` attribute.\n","createdAt":"2012-05-28T13:58:35Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/3#issuecomment-5965812","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM2MjU3NjY1","author":{"login":"jacquev6"},"authorAssociation":"MEMBER","body":"Clean-up issues: this will be in v2 (next week-end or so).\n","createdAt":"2014-02-27T16:05:10Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/3#issuecomment-36257665","viewerDidAuthor":false}],"createdAt":"2012-03-06T16:47:49Z","number":3,"state":"CLOSED","title":"Deduce mandatory parameters","url":"https://github.com/PyGithub/PyGithub/issues/3"},{"author":{"id":"MDQ6VXNlcjMyNzE0Ng==","is_bot":false,"login":"jacquev6","name":"Vincent Jacques"},"body":"","comments":[],"createdAt":"2012-03-06T16:46:49Z","number":2,"state":"CLOSED","title":"Use objects instead of string for shas, ids, etc. arguments","url":"https://github.com/PyGithub/PyGithub/issues/2"},{"author":{"id":"MDQ6VXNlcjMyNzE0Ng==","is_bot":false,"login":"jacquev6","name":"Vincent Jacques"},"body":"","comments":[],"createdAt":"2012-02-27T09:11:14Z","number":1,"state":"CLOSED","title":"Gitub -> Github everywhere","url":"https://github.com/PyGithub/PyGithub/issues/1"}]

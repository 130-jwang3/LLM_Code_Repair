[{"author":{"id":"MDQ6VXNlcjM1MjI5ODQz","is_bot":false,"login":"klibertowski","name":"Kevin Libertowski"},"body":"Downloading release assets via `asset.download_asset()` is no longer working for me. I tracked the issue down to the assets being stored at \"release-assets.githubusercontent.com\" which is not included in [this assertion](https://github.com/PyGithub/PyGithub/blob/da30d6e793ffb4fbe70383b59d2eb7026fe2d8c7/github/Requester.py#L1228).\n\nIt was working fine before, so GitHub presumably changed the location where they store release assets.","comments":[],"createdAt":"2025-07-15T21:39:50Z","number":3315,"state":"OPEN","title":"Downloading release assets no longer working","url":"https://github.com/PyGithub/PyGithub/issues/3315"},{"author":{"id":"MDQ6VXNlcjQzNzUwNjQ4","is_bot":false,"login":"DelevoXDG","name":"Maksim Zdobnikau"},"body":"This endpoint is basically the same as the one supported `get_team_by_slug`, except with IDs instead of slugs:\n```py\n    def get_team_by_slug(self, slug: str) -> Team:\n        \"\"\"\n        :calls: `GET /orgs/{org}/teams/{team_slug} <https://docs.github.com/en/rest/reference/teams#get-a-team-by-name>`_\n        \"\"\"\n```\n\nHowever, since some endpoints got deprecated (#2946), including `GET /teams/{id}`, this method in `Organization`:\n```\n    def get_team(self, id: int) -> Team:\n        \"\"\"\n        :calls: `GET /teams/{id} <https://docs.github.com/en/rest/reference/teams>`_\n        \"\"\"\n```\nhas to be updated to call `/organizations/{org_id}/team/{team_id}` instead\n\nWhile this is the same endpoint as used in `get_team_by_slug`, it is explicitly [allowed](https://docs.github.com/en/rest/teams/teams?apiVersion=2022-11-28#get-a-team-by-name) to use IDs instead of slugs, and the current implementation just doesn't allow sending the request using IDs.","comments":[],"createdAt":"2025-07-01T16:22:53Z","number":3308,"state":"OPEN","title":"Support `GET /organizations/{org_id}/team/{team_id}` endpoint","url":"https://github.com/PyGithub/PyGithub/issues/3308"},{"author":{"id":"MDQ6VXNlcjczMTIzMjQ0","is_bot":false,"login":"OksanaTka","name":"Oksana Tkachenko"},"body":"### Feature request\n\nI would like to request support in PyGitHub for enabling the \"Request pull request review from Copilot\" rule in GitHub repository rulesets.\n\nThis option is currently available in the GitHub UI under:\nRulesets → Branch rules → Pull request review → \"Request pull request review from Copilot\"\n\n### Why it's important\nThis rule enables automatic PR review requests from GitHub Copilot where applicable. Supporting this in PyGitHub would help teams automate and standardize repository setup across organizations.\n\n### Additional context\nThis rule appears to be part of the newer GitHub Rulesets system, not the legacy branch protection API. If/when GitHub exposes this rule through their API, it would be great for PyGitHub to support it.\n\nThank you!\n","comments":[],"createdAt":"2025-06-24T13:19:58Z","number":3305,"state":"OPEN","title":"Add support for Copilot PR review rule in repository rulesets","url":"https://github.com/PyGithub/PyGithub/issues/3305"},{"author":{"id":"MDQ6VXNlcjM1NTAyNzI4","is_bot":false,"login":"matt-davis27","name":"Matt Davis"},"body":"## Problem Statement\n\nWe need a solution to ensure that the python boolean representations are correctly converted to JSON-compatible lowercase counterparts. Currently, when you pass **query parameters** to the GitHub REST API, such as in the [GET Notifications endpoint](https://docs.github.com/en/rest/activity/notifications#list-notifications-for-the-authenticated-user), there is a bug when you attempt to input true/false values as Python boolean variables. \n\nFor example, in the following function:\n\nhttps://github.com/PyGithub/PyGithub/blob/b4092b5d5255610fa998f66c720ab5700fddabeb/github/Repository.py#L3801\n\nthe query parameters *all* and *participating* are boolean and, in the Repository.py file, there are type assertions to enforce such. However, when the params are actually sent to the `self._requester`, they are not converted correctly to their JSON-compatible lowercase counterparts and are (as such) ignored by the GitHub API. \n\n-----\n## Reproducible Example\n\nThe following code should show all user notifications, even those that were previously marked as read. However, the since the python boolean value `True` is not converted correctly, you will only see notifications that are not yet marked as read.\n\n```python\nfrom github import Github, Auth\n\nauth = Auth.Token('<access_token>')\ng = Github(auth=auth)\norg = g.get_organization('<organization>')\nrepo = org.get_repo('<repository>')\n\nnotifications = repo.get_notifications(all=True)\nfor notification in notifications:\n    print(notification.subject)\n```\n\n-----\n## Potential Root Cause\n\nThe code `urllib.parse.urlencode(parameter_list)` in the `add_parameters_to_url()` function of **Requester.py** Line 494\n\nhttps://github.com/PyGithub/PyGithub/blob/b4092b5d5255610fa998f66c720ab5700fddabeb/github/Requester.py#L494\n\ndoes not correctly convert python boolean data types \"True\" and \"False\" into json formatted \"true\" and \"false\" values respectively. See this [Stack Overflow question](https://stackoverflow.com/questions/66904887/python-urllib-keeps-booleans-capitalized-when-using-urllib-parse-urlencode) on the same topic. Perhaps we can switch to another url parsing function or some custom code solution to solve this problem?","comments":[],"createdAt":"2025-06-23T22:57:45Z","number":3304,"state":"OPEN","title":"Missing Conversion of Python boolean values (True, False) to their JSON-compatible lowercase counterparts (true, false)","url":"https://github.com/PyGithub/PyGithub/issues/3304"},{"author":{"id":"MDQ6VXNlcjE5MzIzMjY=","is_bot":false,"login":"aolieman","name":"Alex Olieman"},"body":"The Release Asset download feature added in #3060 is currently broken for public repositories.\n\nSteps to reproduce:\n\n```python\nfrom github import Github\n\ngithub = Github()\npublic_repo = github.get_repo(\"stellarcarbon/sorocarbon\")\nlatest_release = public_repo.get_latest_release()\nasset = latest_release.assets[0]\nasset.download_asset(f\"/tmp/{asset.name}\")\n```\n\nIt fails on:\nhttps://github.com/PyGithub/PyGithub/blob/b4092b5d5255610fa998f66c720ab5700fddabeb/github/Requester.py#L1179\n\n```text\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\n  File \"/home/alex/.pyenv/versions/stellarcarbon-3.12/lib/python3.12/site-packages/github/GitReleaseAsset.py\", line 163, in download_asset\n    self._requester.getFile(self.url, path=path, chunk_size=chunk_size)\n  File \"/home/alex/.pyenv/versions/stellarcarbon-3.12/lib/python3.12/site-packages/github/Requester.py\", line 901, in getFile\n    _, _, stream_chunk_iterator = self.getStream(url, parameters, headers, cnx, chunk_size=chunk_size)\n                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/alex/.pyenv/versions/stellarcarbon-3.12/lib/python3.12/site-packages/github/Requester.py\", line 928, in getStream\n    status, responseHeaders, output = self.__requestEncode(\n                                      ^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/alex/.pyenv/versions/stellarcarbon-3.12/lib/python3.12/site-packages/github/Requester.py\", line 1098, in __requestEncode\n    status, responseHeaders, output = self.__requestRaw(\n                                      ^^^^^^^^^^^^^^^^^^\n  File \"/home/alex/.pyenv/versions/stellarcarbon-3.12/lib/python3.12/site-packages/github/Requester.py\", line 1186, in __requestRaw\n    del requestHeaders[\"Authorization\"]\n        ~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^\nKeyError: 'Authorization'\n```\n\nApparently, the assumption that an Authorization header will be present is incorrect. I don't know which (if any) other features are impacted by this assumption. Could we simply pop the key, or check for its presence before deletion?","comments":[{"id":"IC_kwDOADYVqs611z8o","author":{"login":"alecglen"},"authorAssociation":"NONE","body":"Also ran into this. I'd recommend `requestHeaders = {k: v for k, v in requestHeaders.items() if k != \"Authorization\"}` to also avoid mutating the original dict in case the Requester uses it elsewhere.","createdAt":"2025-07-09T01:46:47Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/3302#issuecomment-3050782504","viewerDidAuthor":false}],"createdAt":"2025-06-19T13:44:49Z","number":3302,"state":"OPEN","title":"Asset download from a public repo fails without auth","url":"https://github.com/PyGithub/PyGithub/issues/3302"},{"author":{"id":"MDQ6VXNlcjg3OTczNDAy","is_bot":false,"login":"bahag-klickst","name":"Tim Klicks"},"body":"Hej all,\n\nI am using PyGitHub for some of my work and I am very happy with it.\nUnfortunately I stumbled across a small limitation when it comes to comparing commits inside a repository, as the https://pygithub.readthedocs.io/en/latest/github_objects/Repository.html#github.Repository.Repository.compare does not support passing per_page parameter, so you only get 250 results/commits by default.\n\nIt would be great to have the possibility to set the per_page parameter or the even get a paginated list of commits by default.\n\nThanks in advance and best regards,\nTim","comments":[],"createdAt":"2025-06-16T09:14:51Z","number":3301,"state":"OPEN","title":"Repository Compare should allow pagination","url":"https://github.com/PyGithub/PyGithub/issues/3301"},{"author":{"id":"MDQ6VXNlcjI1NTc3MDgz","is_bot":false,"login":"LecrisUT","name":"Cristian Le"},"body":"As far as I could see the webhook capabilities for this project is to manipulate the webhook presence in repos and organizations. This RFE goes a bit further to suggest making a dataclass or requivalent \"strong\"-type class to access the webhook payload.\n\nThe benefit would be that there would be a central place for the webhook data schema, and it can be used to seamlessly convert to PyGithub objects if we need to query more detailed information.\n\nThe scope can be very limited and assume the user has the json object and only a constructor is provided that accepts either a json object or a dict.","comments":[],"createdAt":"2025-05-28T09:43:40Z","number":3296,"state":"OPEN","title":"RFE: Using PyGithub to parse Github webhook payload","url":"https://github.com/PyGithub/PyGithub/issues/3296"},{"author":{"id":"MDQ6VXNlcjYyNTI5Nw==","is_bot":false,"login":"antspy","name":"Antonio"},"body":"Hi, \n\nI am calling `create_review_comment` as follows: \n\n```python \n    pr.create_review_comment(\n      body=body,\n      commit=last_commit,\n      path=path,\n      line=line,\n      side='RIGHT',\n      subject_type='line',\n    )\n```\n\nbut I'm getting the following error: \n\n```\ngithub.GithubException.GithubException: Invalid request.\n\nNo subschema in \"oneOf\" matched.\n\"positioning\" wasn't supplied.\n\"position\" wasn't supplied.\n\"in_reply_to\" wasn't supplied.\n\"subject_type\" is not a permitted key.\n\"line\" is not a permitted key.: 422 {\"message\": \"Invalid request.\\n\\nNo subschema in \\\"oneOf\\\" matched.\\n\\\"positioning\\\" wasn't supplied.\\n\\\"position\\\" wasn't supplied.\\n\\\"in_reply_to\\\" wasn't supplied.\\n\\\"subject_type\\\" is not a permitted key.\\n\\\"line\\\" is not a permitted key.\", \"documentation_url\": \"https://docs.github.com/rest/pulls/comments#create-a-review-comment-for-a-pull-request\", \"status\": \"422\"}\n```\n\nThe error is raised in the following line: `site-packages/github/Requester.py\", line 624, in requestJsonAndCheck: return self.__check(`\nwhich as far as I understand it's github API telling the library that the request was not correctly formed. ","comments":[{"id":"IC_kwDOADYVqs6sJ4Df","author":{"login":"antspy"},"authorAssociation":"NONE","body":"Apparently, passing `subject_type='line',` is what makes the RPC fail. If I don't pass anything, this works as intended. ","createdAt":"2025-05-17T10:13:38Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/3293#issuecomment-2888270047","viewerDidAuthor":false}],"createdAt":"2025-05-17T10:03:14Z","number":3293,"state":"OPEN","title":"[Bug] Create review comment is broken","url":"https://github.com/PyGithub/PyGithub/issues/3293"},{"author":{"id":"MDQ6VXNlcjc2Mzc2MA==","is_bot":false,"login":"kishaningithub","name":"Kishan B"},"body":"Would be great if the following endpoint can be codified in this library.\n\nhttps://docs.github.com/en/rest/code-scanning/code-scanning?apiVersion=2022-11-28#update-a-code-scanning-default-setup-configuration","comments":[{"id":"IC_kwDOADYVqs6vpCji","author":{"login":"Kwstubbs"},"authorAssociation":"NONE","body":"# REMINDER\n2025-06-05 - Last update of this issue was on 2025-05-05.\n","createdAt":"2025-06-05T23:01:31Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/3290#issuecomment-2946771170","viewerDidAuthor":false}],"createdAt":"2025-05-05T15:40:39Z","number":3290,"state":"OPEN","title":"[Feature request] Implementation of code-scanning/default-setup endpoint","url":"https://github.com/PyGithub/PyGithub/issues/3290"},{"author":{"id":"MDQ6VXNlcjY2NTI2OQ==","is_bot":false,"login":"chriskuehl","name":"Chris Kuehl"},"body":"Connection pooling does not appear to work since v2.6.0. Instead, a new connection is opened to the GitHub server for each request, causing a performance regression. I believe I have traced this down to the introduction of https://github.com/PyGithub/PyGithub/pull/3060. I will open a PR with a suggested fix.\n\n## Reproduction\n\n```python\nimport os, logging\nlogging.basicConfig(level=logging.DEBUG)\n\nfrom github import Github, Auth\nauth = Auth.Token(os.environ['GITHUB_TOKEN'])\ng = Github(auth=auth)\nprint(list(g.get_user().get_repos()))\n```\n\n### Output (v2.5.0)\n\n```\n$ GITHUB_TOKEN=xxx python test.py\nDEBUG:urllib3.connectionpool:Starting new HTTPS connection (1): api.github.com:443\nDEBUG:urllib3.connectionpool:https://api.github.com:443 \"GET /user/repos HTTP/1.1\" 200 None\nDEBUG:urllib3.connectionpool:https://api.github.com:443 \"GET /user/repos?page=2 HTTP/1.1\" 200 None\nDEBUG:urllib3.connectionpool:https://api.github.com:443 \"GET /user/repos?page=3 HTTP/1.1\" 200 None\nDEBUG:urllib3.connectionpool:https://api.github.com:443 \"GET /user/repos?page=4 HTTP/1.1\" 200 None\nDEBUG:urllib3.connectionpool:https://api.github.com:443 \"GET /user/repos?page=5 HTTP/1.1\" 200 None\nDEBUG:urllib3.connectionpool:https://api.github.com:443 \"GET /user/repos?page=6 HTTP/1.1\" 200 None\n```\n\n\n### Output (v2.6.0 through current `main` branch)\n\n```\n$ GITHUB_TOKEN=xxx python test.py\nDEBUG:urllib3.connectionpool:Starting new HTTPS connection (1): api.github.com:443\nDEBUG:urllib3.connectionpool:https://api.github.com:443 \"GET /user/repos HTTP/1.1\" 200 None\nDEBUG:urllib3.connectionpool:Starting new HTTPS connection (1): api.github.com:443\nDEBUG:urllib3.connectionpool:https://api.github.com:443 \"GET /user/repos?page=2 HTTP/1.1\" 200 None\nDEBUG:urllib3.connectionpool:Starting new HTTPS connection (1): api.github.com:443\nDEBUG:urllib3.connectionpool:https://api.github.com:443 \"GET /user/repos?page=3 HTTP/1.1\" 200 None\nDEBUG:urllib3.connectionpool:Starting new HTTPS connection (1): api.github.com:443\nDEBUG:urllib3.connectionpool:https://api.github.com:443 \"GET /user/repos?page=4 HTTP/1.1\" 200 None\nDEBUG:urllib3.connectionpool:Starting new HTTPS connection (1): api.github.com:443\nDEBUG:urllib3.connectionpool:https://api.github.com:443 \"GET /user/repos?page=5 HTTP/1.1\" 200 None\nDEBUG:urllib3.connectionpool:Starting new HTTPS connection (1): api.github.com:443\n```","comments":[],"createdAt":"2025-04-29T20:35:39Z","number":3288,"state":"OPEN","title":"Connection pooling broken since v2.6.0","url":"https://github.com/PyGithub/PyGithub/issues/3288"},{"author":{"id":"MDQ6VXNlcjE0NTA4MA==","is_bot":false,"login":"dlancer","name":"Vladislav Balabanov"},"body":"Test code:\n\n```python\n    from github import Auth, Github\n\n    ...\n    auth = Auth.Token(token)\n    g = Github(auth=auth)\n    org = g.get_organization(ORG)\n    public_key = org.get_public_key()\n    secret = org.get_secret(secret_name=\"ORG_SECRET\")\n    result = secret.edit(value=encrypted) # result is always False, due 404 error from Github api\n ```\nDebug output:\n```\nDEBUG:urllib3.connectionpool:https://api.github.com:443 \"PATCH /orgs/ORG/actions/secrets/ORG_SECRET/actions/secrets/ORG_SECRET HTTP/1.1\" 404 None\n```\n\nIssue similar to this one https://github.com/PyGithub/PyGithub/issues/2785\n\nInvalid code: \nhttps://github.com/PyGithub/PyGithub/blob/main/github/OrganizationSecret.py#L98-L102","comments":[],"createdAt":"2025-04-23T13:00:42Z","number":3286,"state":"OPEN","title":"OrganizationSecret \"edit\" method always failing with 404 due malformed url","url":"https://github.com/PyGithub/PyGithub/issues/3286"},{"author":{"id":"U_kgDOCxuDzw","is_bot":false,"login":"aau357","name":""},"body":"","comments":[],"createdAt":"2025-04-14T17:03:19Z","number":3285,"state":"OPEN","title":"1 lesson","url":"https://github.com/PyGithub/PyGithub/issues/3285"},{"author":{"id":"MDQ6VXNlcjcwMjI4MzQx","is_bot":false,"login":"carlosd-29","name":""},"body":"The create_team function expects the maintainers to be list[int] but the api expects a list[str]:\nhttps://github.com/PyGithub/PyGithub/blob/bdc58c3813a5beb32cc376de7822218266ab8620/github/Organization.py#L844\n\n\n<img width=\"800\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/f9f09e53-86b1-415c-a491-ba54e1989913\" />\n","comments":[{"id":"IC_kwDOADYVqs6qe-eD","author":{"login":"interifter"},"authorAssociation":"NONE","body":"@carlosd-29 I highly recommend pasting text instead of screenshots :)\n\n\n## Context\nFor more context, it appears GH recently updated their endpoint for creating teams: https://docs.github.com/en/enterprise-cloud@latest/rest/teams/teams?apiVersion=2022-11-28#create-a-team\n\nBut it appears they did not fully update the documentation (our internal team should be filing a bug against them). That is, they now specify you must pass in array of _strings_, but then state these must be GH IDs, which are not strings.\n\n(emphasis mine)\n\n> `maintainers` array of **_strings_** \n> List **GitHub IDs** for organization members who will become team maintainers.\n\n## Workaround\n\nWhat GH actually wants is the `login`\n\nWe can simply drop into using the `requester` directly:\n\n```python\nteam_maintainers = {\n    'some ad group': [\n        {\n            'login': 'interifter',\n            'email': 'some.email@some.place',\n            'id': 12345678},\n    ],\n}\n\nclient = Github(token)\norg_client = client.get_organization(org)\n# login instead of id\nmaintainers = [str(x[\"login\"]) for x in team_maintainers[\"some ad group\"]\nheader, data = org_client.requester.requestJsonAndCheck(\"POST\", f\"{org_client.url}/teams\", input={\"name\": name, \"description\": description, \"maintainers\": maintainers})\n```\n\n## Proposed Fix\n\nIn [Organization.py](https://github.com/PyGithub/PyGithub/blob/main/github/Organization.py), modify `create_team`:\n\n1. change [line 844](https://github.com/PyGithub/PyGithub/blob/main/github/Organization.py#L844):\n\n```diff\n-         maintainers: Opt[list[int]] = NotSet,\n+         maintainers: Opt[list[str]] = NotSet, \n```\n\n2. change [line 861](https://github.com/PyGithub/PyGithub/blob/main/github/Organization.py#L861):\n\n```diff\n-        assert is_optional_list(maintainers, int), maintainers\n+        assert is_optional_list(maintainers, str), maintainers\n```\n","createdAt":"2025-05-07T20:26:37Z","includesCreatedEdit":true,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":1}}],"url":"https://github.com/PyGithub/PyGithub/issues/3278#issuecomment-2860246915","viewerDidAuthor":false}],"createdAt":"2025-04-09T23:17:31Z","number":3278,"state":"OPEN","title":"[BUG] Create_team maintainers bug","url":"https://github.com/PyGithub/PyGithub/issues/3278"},{"author":{"id":"MDQ6VXNlcjYzMDA4NTg0","is_bot":false,"login":"jakubedzior","name":"Jakub Kędzior"},"body":"Attempting to access `Commit.repository` attr gives `None` instead of promised `Repository`, as it does not exist in [API response (or schema)](https://docs.github.com/en/rest/commits/commits?apiVersion=2022-11-28#get-a-commit), even though it was added in `2.6.0`: https://github.com/PyGithub/PyGithub/pull/3116.","comments":[],"createdAt":"2025-04-09T10:49:21Z","number":3276,"state":"OPEN","title":"Commit.repository is None","url":"https://github.com/PyGithub/PyGithub/issues/3276"},{"author":{"id":"MDQ6VXNlcjU2MjQ1MDQ2","is_bot":false,"login":"haotong-yang","name":"Haotong Yang"},"body":"When I try to run the following code:\n\n```\ng = Github(ACCESS_TOKEN)\n# Get the repository\nREPO_OWNER = \"mwaskom\"\nREPO_NAME = \"seaborn\"\nrepo = g.get_repo(f\"{REPO_OWNER}/{REPO_NAME}\")\npr = repo.get_pull(number=265)\nfiles = pr.get_files()\nfor f in files:\n    print(\"DEBUG\")\n    print(\"DEBUG\", f.filename)\n    print(\"DEBUG\", f.patch)\n    print(\"====\"*10)\n```\nI find there are some files, which occur in the `files` list and they indeed modified in the PR, but their f.patch is None. These are some .ipynb files. However, I find some other .ipynb files can work with the code. I don't know whether it is a bug or it is expected because some of strange properties of the modified files. But I notice that the typehint does not describe a situation that the file.patch will return None.\n\nIt is the PR in seaborn [github](https://github.com/mwaskom/seaborn/pull/265)\n\nThe complete output is here. For the last four files, their file.patch is None.\n```\nDEBUG\nDEBUG doc/installing.rst\nDEBUG @@ -35,16 +35,25 @@ Recommended dependencies\n \n -  `patsy <http://patsy.readthedocs.org/en/latest/>`__\n \n+Version-wise, we make an attempt to keep seaborn working on the stable Debian\n+channels. There may be cases where some more advanced features only work with\n+newer versions of these dependencies, although these should be rare. There are\n+also some known bugs on older versions of matplotlib, so you should in general\n+try to use a modern version, but for many cases older matplotlibs will work\n+fine.  Seaborn is tested on the most recent versions offered through ``conda``.\n+\n+Import conventions\n+~~~~~~~~~~~~~~~~~~\n+\n+By convention, ``seaborn`` is abbreviated to ``sns`` on imports.\n \n Testing\n ~~~~~~~\n \n To test seaborn, run ``make test`` in the root directory of the source\n distribution. This runs the unit test suite (which can also be exercised\n separately by running ``nosetests``). It also runs the code in the example \n-notebooks, comparing the output to what is stored in the notebook files and\n-reporting any discrepancies. Testing requires the Python Image Library, which\n-is not a dependency of the main package.\n+notebooks to smoke-test a broader and more realistic range of example usage.\n \n Bugs\n ~~~~\n========================================\nDEBUG\nDEBUG doc/tutorial/aesthetics.ipynb\nDEBUG @@ -1,7 +1,7 @@\n {\n  \"metadata\": {\n   \"name\": \"\",\n-  \"signature\": \"sha256:db5d4a6e728415c5827a518ba0b28ad8da0b761880992b21bb80f2fd9e9aec88\"\n+  \"signature\": \"sha256:acc014c04f576e775bdeea9cfc812baacc8419e7920a421fd8c10509a17b8e6c\"\n  },\n  \"nbformat\": 3,\n  \"nbformat_minor\": 0,\n@@ -34,6 +34,17 @@\n       \"Matplotlib is highly customizable, but it can be hard to know what settings to tweak to achieve an attractive plot. Seaborn comes with a number of customized themes and a high-level interface for controlling the look of matplotlib figures.\"\n      ]\n     },\n+    {\n+     \"cell_type\": \"code\",\n+     \"collapsed\": false,\n+     \"input\": [\n+      \"%matplotlib inline\"\n+     ],\n+     \"language\": \"python\",\n+     \"metadata\": {},\n+     \"outputs\": [],\n+     \"prompt_number\": null\n+    },\n     {\n      \"cell_type\": \"code\",\n      \"collapsed\": false,\n========================================\nDEBUG\nDEBUG doc/tutorial/axis_grids.ipynb\nDEBUG @@ -1,7 +1,7 @@\n {\n  \"metadata\": {\n   \"name\": \"\",\n-  \"signature\": \"sha256:6f336429c3f5f736e2d14de899c8b70252b398690771485d0010a78edfa425eb\"\n+  \"signature\": \"sha256:5aa0e296b4c7db35b7f5e1b5288206ca99fc5d60efbb0c378fcd6267f39e544e\"\n  },\n  \"nbformat\": 3,\n  \"nbformat_minor\": 0,\n@@ -29,21 +29,18 @@\n      \"cell_type\": \"raw\",\n      \"metadata\": {},\n      \"source\": [\n-      \"When exploring medium-dimensional data, a useful approach is to draw multiple instances of the same plot on different subsets of your dataset. This technique is sometimes called either \\\"lattice\\\", or `\\\"trellis\\\" <http://netlib.bell-labs.com/cm/ms/departments/sia/project/trellis>`_ plotting, and it is related to the idea of `\\\"small multiples\\\" <http://en.wikipedia.org/wiki/Small_multiple>`_. It allows the viewer to quickly extract a large amount of information about complex data. Matplotlib offers good support for making figures with multiple axes; seaborn builds on top of this to directly link the structure of the plot to the structure of your dataset.\\n\",\n+      \"When exploring medium-dimensional data, a useful approach is to draw multiple instances of the same plot on different subsets of your dataset. This technique is sometimes called either \\\"lattice\\\", or `\\\"trellis\\\" <http://netlib.bell-labs.com/cm/ms/departments/sia/project/trellis>`_ plotting, and it is related to the idea of `\\\"small multiples\\\" <http://en.wikipedia.org/wiki/Small_multiple>`_. It allows a viewer to quickly extract a large amount of information about complex data. Matplotlib offers good support for making figures with multiple axes; seaborn builds on top of this to directly link the structure of the plot to the structure of your dataset.\\n\",\n       \"\\n\",\n-      \"To use these features, your data has to be in a Pandas DataFrame and it must take the form of what Hadley Whickam calls `\\\"tidy\\\" data <http://vita.had.co.nz/papers/tidy-data.pdf>`_. In brief, that means your dataframe should be structured such that each column is a variable and each row is an observation.\"\n+      \"To use these features, your data has to be in a Pandas DataFrame and it must take the form of what Hadley Whickam calls `\\\"tidy\\\" data <http://vita.had.co.nz/papers/tidy-data.pdf>`_. In brief, that means your dataframe should be structured such that each column is a variable and each row is an observation.\\n\",\n+      \"\\n\",\n+      \"For advanced use, you can use the objects discussed in this part of the tutorial directly, which will provide maximum flexibility. Some seaborn functions (such as :func:`lmplot`, :func:`factorplot`, :func:`pairplot`, and :func:`jointplot`) also use them behind the scenes. Unlike other seaborn functions that are \\\"Axes-level\\\" and draw onto specific (possibly already-existing) matplotlib ``Axes`` without otherwise manipulating the figure, these higher-level functions create a figure when called and are generally more strict about how it gets set up. In some cases, arguments either to those functions or to the constructor of the class they rely on will provide a different interface attributes like the figure size, as in the case of :func:`lmplot` where you can set the height and aspect ratio for each facet rather than the overall size of the figure. Any function that uses one of these objects will always return it after plotting, though, and most of these objects have convenience methods for changing how the plot, often in a more abstract and easy way.\"\n      ]\n     },\n     {\n      \"cell_type\": \"code\",\n      \"collapsed\": false,\n      \"input\": [\n-      \"import numpy as np\\n\",\n-      \"import pandas as pd\\n\",\n-      \"import seaborn as sns\\n\",\n-      \"from scipy import stats\\n\",\n-      \"import matplotlib as mpl\\n\",\n-      \"import matplotlib.pyplot as plt\"\n+      \"%matplotlib inline\"\n      ],\n      \"language\": \"python\",\n      \"metadata\": {},\n@@ -54,7 +51,12 @@\n      \"cell_type\": \"code\",\n      \"collapsed\": false,\n      \"input\": [\n-      \"%matplotlib inline\"\n+      \"import numpy as np\\n\",\n+      \"import pandas as pd\\n\",\n+      \"import seaborn as sns\\n\",\n+      \"from scipy import stats\\n\",\n+      \"import matplotlib as mpl\\n\",\n+      \"import matplotlib.pyplot as plt\"\n      ],\n      \"language\": \"python\",\n      \"metadata\": {},\n========================================\nDEBUG\nDEBUG doc/tutorial/categorical_linear_models.ipynb\nDEBUG @@ -1,6 +1,7 @@\n {\n  \"metadata\": {\n-  \"name\": \"\"\n+  \"name\": \"\",\n+  \"signature\": \"sha256:596ee95726b8eb1cbd51a81254cb68deebbbc70d1a0347b41327a6a846b8d11d\"\n  },\n  \"nbformat\": 3,\n  \"nbformat_minor\": 0,\n@@ -24,6 +25,17 @@\n       \"Linear models with categorical data\"\n      ]\n     },\n+    {\n+     \"cell_type\": \"code\",\n+     \"collapsed\": false,\n+     \"input\": [\n+      \"%matplotlib inline\"\n+     ],\n+     \"language\": \"python\",\n+     \"metadata\": {},\n+     \"outputs\": [],\n+     \"prompt_number\": null\n+    },\n     {\n      \"cell_type\": \"code\",\n      \"collapsed\": false,\n========================================\nDEBUG\nDEBUG doc/tutorial/color_palettes.ipynb\nDEBUG @@ -1,8 +1,7 @@\n {\n  \"metadata\": {\n-  \"celltoolbar\": \"Raw Cell Format\",\n   \"name\": \"\",\n-  \"signature\": \"sha256:3d538aaff6c33d4e321e369374fa2d94fb790aaec874c6089e12f1aae970fda6\"\n+  \"signature\": \"sha256:c251765620311b0785c5e2fb072fb69cd349e4e94bed46e2aa6b1f3465980e41\"\n  },\n  \"nbformat\": 3,\n  \"nbformat_minor\": 0,\n@@ -39,15 +38,35 @@\n       \"Seaborn makes it easy to select and use color palettes that are suited to the kind of data you are working with and the goals you have in visualizing it.\"\n      ]\n     },\n+    {\n+     \"cell_type\": \"code\",\n+     \"collapsed\": false,\n+     \"input\": [\n+      \"%matplotlib inline\"\n+     ],\n+     \"language\": \"python\",\n+     \"metadata\": {},\n+     \"outputs\": [],\n+     \"prompt_number\": null\n+    },\n     {\n      \"cell_type\": \"code\",\n      \"collapsed\": false,\n      \"input\": [\n       \"import numpy as np\\n\",\n       \"import seaborn as sns\\n\",\n-      \"import matplotlib.pyplot as plt\\n\",\n-      \"np.random.seed(sum(map(ord, \\\"palettes\\\")))\\n\",\n-      \"%matplotlib inline\"\n+      \"import matplotlib.pyplot as plt\"\n+     ],\n+     \"language\": \"python\",\n+     \"metadata\": {},\n+     \"outputs\": [],\n+     \"prompt_number\": null\n+    },\n+    {\n+     \"cell_type\": \"code\",\n+     \"collapsed\": false,\n+     \"input\": [\n+      \"np.random.seed(sum(map(ord, \\\"palettes\\\")))\"\n      ],\n      \"language\": \"python\",\n      \"metadata\": {},\n========================================\nDEBUG\nDEBUG doc/tutorial/quantitative_linear_models.ipynb\nDEBUG @@ -1,6 +1,7 @@\n {\n  \"metadata\": {\n-  \"name\": \"\"\n+  \"name\": \"\",\n+  \"signature\": \"sha256:edbd8da88eb901b9efb55c29553b60bce978e745d0fad5b3dcad94fcfa620cb3\"\n  },\n  \"nbformat\": 3,\n  \"nbformat_minor\": 0,\n@@ -31,6 +32,17 @@\n       \"Linear models are very common in statistical analysis. They are used to understand how linear combinations of *predictor* (or *independent*) variables relate to a *response* (or *dependent*) variable. Seaborn has several functions for exploratory visualizations that correspond with linear regression. This page will focus on the functions that can be used when the main predictor variable (or variables) are quantitative. They differ from functions focused on :ref:`categorical variables <linear_categorical>` in that they fit and plot a representation of the model itself in the form of a regression line.\"\n      ]\n     },\n+    {\n+     \"cell_type\": \"code\",\n+     \"collapsed\": false,\n+     \"input\": [\n+      \"%matplotlib inline\"\n+     ],\n+     \"language\": \"python\",\n+     \"metadata\": {},\n+     \"outputs\": [],\n+     \"prompt_number\": null\n+    },\n     {\n      \"cell_type\": \"code\",\n      \"collapsed\": false,\n========================================\nDEBUG\nDEBUG examples/aesthetics.ipynb\nDEBUG None\n========================================\nDEBUG\nDEBUG examples/linear_models.ipynb\nDEBUG None\n========================================\nDEBUG\nDEBUG examples/plotting_distributions.ipynb\nDEBUG None\n========================================\nDEBUG\nDEBUG examples/timeseries_plots.ipynb\nDEBUG None\n========================================\n```","comments":[{"id":"IC_kwDOADYVqs6jkEwB","author":{"login":"haotong-yang"},"authorAssociation":"NONE","body":"We use v2.6.1","createdAt":"2025-03-21T18:28:02Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/3270#issuecomment-2744142849","viewerDidAuthor":false}],"createdAt":"2025-03-21T18:26:30Z","number":3270,"state":"OPEN","title":"[BUG] A bug return None when file.patch in a PR. A bug or a incorrect typehing?","url":"https://github.com/PyGithub/PyGithub/issues/3270"},{"author":{"id":"MDQ6VXNlcjE5NDI4NA==","is_bot":false,"login":"jdnurmi","name":"James D. Nurmi"},"body":"```\n    gh_org = gh.get_organization(\"ORGNAME\")\n    tagvar = gh_org.get_variable(variable_name=\"SOME_VAR_NAME\")\n    tagvar.edit(value=\"foo\")\n```\nReturns false (and a 404) due to appending `/actions/variables/{self.name}` twice, once at construction of the OrganizationVariable from the Organization.get_variable() and once again in the .edit() function.\n\nLocally, I've patched it to\n```\n         status, _, _ = self._requester.requestJson(\n             \"PATCH\",\n-            f\"{self.url}/actions/variables/{self.name}\",\n+            f\"{self.url}\",\n             input=patch_parameters,\n         )\n```\n\nWhich works for me, but it's not 100% clear whether it's the construct or the edit that's \"wrong\" in terms of how it should be fixed - so I defer to you guys!","comments":[],"createdAt":"2025-03-12T12:07:48Z","number":3266,"state":"OPEN","title":"Editing Organization Variable uses incorrect PATCH url","url":"https://github.com/PyGithub/PyGithub/issues/3266"},{"author":{"id":"U_kgDOCSjBwA","is_bot":false,"login":"Atim-01","name":""},"body":"My code is as follows:\n\nfrom github import Github, Auth\ntoken = \"YOUR_GITHUB_TOKEN\"\nauth = Auth.Token(token)\nclient = Github(auth=auth)\n\nWhen I run this code using PyGithub version 2.6.1, I receive the following error:\nClient.__init__() got an unexpected keyword argument 'proxies'\n\nAdditional Context:\nEnvironment:\nPython version: (Python 3.10.11)\nOS: (Windows 10)\n\nWorkaround Tried:\nI attempted to force reinstall and upgrade PyGithub, but the error persists.\n\nCould you please advise if this is a known issue with version 2.6.1 or if an upgrade is required to resolve this? Thank you for your assistance.\n\n","comments":[{"id":"IC_kwDOADYVqs6nEJTX","author":{"login":"bncmajor"},"authorAssociation":"NONE","body":"I have checked and works fine on my end with the same setup except OS is W11:\n\n![Image](https://github.com/user-attachments/assets/581e200a-b4e0-4386-b63d-b9e115077918)","createdAt":"2025-04-14T20:15:03Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/3265#issuecomment-2802881751","viewerDidAuthor":false}],"createdAt":"2025-03-12T06:08:38Z","number":3265,"state":"OPEN","title":"Client.init() got an unexpected keyword argument 'proxies' when using Auth.Token() (PyGithub v2.6.1)","url":"https://github.com/PyGithub/PyGithub/issues/3265"},{"author":{"id":"MDQ6VXNlcjc5MTg3NTU=","is_bot":false,"login":"doglex","name":"VuRBd8KQXjFNJmxG9Uo0"},"body":"``` python\nfrom github import Github, AuthenticatedUser\n\nuser: AuthenticatedUser = None \nuser.\n```\n\nwhen keyboard type `user.`,  should auto provide candidate methods,  such as `add_to_emails`,  `add_to_following`,  \nbut not, why?","comments":[{"id":"IC_kwDOADYVqs6h7H59","author":{"login":"doglex"},"authorAssociation":"NONE","body":"oh, it is a module, not class, should change to `from github.AuthenticatedUser import AuthenticatedUser`","createdAt":"2025-03-12T06:05:23Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/3264#issuecomment-2716630653","viewerDidAuthor":false}],"createdAt":"2025-03-12T05:53:06Z","number":3264,"state":"OPEN","title":"Cannot  auto-compelete in Pycharm?","url":"https://github.com/PyGithub/PyGithub/issues/3264"},{"author":{"id":"MDQ6VXNlcjc5OTk2OTI=","is_bot":false,"login":"OscarVanL","name":"Oscar van Leusen"},"body":"I am trying to create an environment with the name `deploy/prod/service`.\n\nI am doing so like this:\n```python\nimport github\nfrom github import (\n    Github,\n    Auth,\n    EnvironmentProtectionRuleReviewer,\n    EnvironmentDeploymentBranchPolicy,\n)\n\napprovers = \"team1,team2\"\n\ng = Github(auth=Auth.Token(token))\norg = g.get_organization(org)\nrepo = org.get_repo(repo)\n\nteamSlugs = approvers.split(\",\")\nfor slug in teamSlugs:\n    team = org.get_team_by_slug(slug.strip())\n    teamIDs.append(team.id)\n\nenv_name=\"deploy/prod/service\"\n\nrepo.create_environment(\n        environment_name=urllib.parse.quote_plus(env_name),\n        reviewers=[\n            EnvironmentProtectionRuleReviewer.ReviewerParams(type_=\"Team\", id_=team_id)\n            for team_id in teamIDs\n        ],\n        deployment_branch_policy=EnvironmentDeploymentBranchPolicy.EnvironmentDeploymentBranchPolicyParams(\n            protected_branches=True, custom_branch_policies=False\n        ),\n    )\n```\n\nThis fails with the error:\n```\nTraceback (most recent call last):\n  File \"/opt/actions-runner/_work/REPO/.github/actions/setup-environment/setup-environment.py\", line 47, in <module>\n    repo.create_environment(\n  File \"/home/USER/.local/lib/python3.12/site-packages/github/Repository.py\", line 4262, in create_environment\n    headers, data = self._requester.requestJsonAndCheck(\n                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/USER/.local/lib/python3.12/site-packages/github/Requester.py\", line 624, in requestJsonAndCheck\n    return self.__check(\n           ^^^^^^^^^^^^^\n  File \"/home/USER/.local/lib/python3.12/site-packages/github/Requester.py\", line 792, in __check\n    raise self.createException(status, responseHeaders, data)\ngithub.GithubException.UnknownObjectException: 404 {\"message\": \"Not Found\", \"documentation_url\": \"https://docs.github.com/rest\", \"status\": \"404\"}\n```\n\nSpecifically, when I enable debug logging, I can see it is making a request to this:\n`PUT https://api.github.com/repos/OR/REPO/environments/approve/prod/service {'Authorization': 'token (oauth token removed)', 'User-Agent': 'PyGithub/Python', 'Content-Type': 'application/json'} {\"wait_timer\": 0, \"reviewers\": [{\"type\": \"Team\", \"id\": 1234}, {\"type\": \"Team\", \"id\": 5678}], \"deployment_branch_policy\": {\"protected_branches\": true, \"custom_branch_policies\": false}} ==> 404 {'date': 'Tue, 11 Mar 2025 16:50:59 GMT', 'content-type': 'application/json; charset=utf-8', 'x-github-media-type': 'github.v3; format=json', 'x-github-api-version-selected': '2022-11-28', 'x-ratelimit-limit': '15000', 'x-ratelimit-remaining': '14955', 'x-ratelimit-reset': '1741713285', 'x-ratelimit-used': '45', 'x-ratelimit-resource': 'core', 'access-control-expose-headers': 'ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO, X-GitHub-Request-Id, Deprecation, Sunset', 'access-control-allow-origin': '*', 'strict-transport-security': 'max-age=31536000; includeSubdomains; preload', 'x-frame-options': 'deny', 'x-content-type-options': 'nosniff', 'x-xss-protection': '0', 'referrer-policy': 'origin-when-cross-origin, strict-origin-when-cross-origin', 'content-security-policy': \"default-src 'none'\", 'vary': 'Accept-Encoding, Accept, X-Requested-With', 'content-encoding': 'gzip', 'transfer-encoding': 'chunked', 'server': 'github.com'} {\"message\":\"Not Found\",\"documentation_url\":\"https://docs.github.com/rest\",\"status\":\"404\"}`\n\nSo specifically, I can see it made a request to the non-url encoded: `https://api.github.com/repos/ORG/REPO/environments/approve/prod/service`.\n\nI tried the same request using [actions/github-script](https://github.com/actions/github-script) with debug logging. In this one, I can see it made the request to the correct url-encoded form of the env name:\n```\nPUT /repos/ORG/REPO/environments/approve%2Fprod%2Fservice - 200 in 262ms\n```\n\nIt appears you are sanitising this using `environment_name = urllib.parse.quote(environment_name)`, I can see this function has the default `safe='/'` kwarg, which means the forward slash character is not being url encoded when it _should be_ in this case. I think you should switch to `urllib.parse.quote_plus` instead.\n\nI have created a PR to fix the issue, which can be found here: https://github.com/PyGithub/PyGithub/pull/3263","comments":[],"createdAt":"2025-03-11T17:10:21Z","number":3262,"state":"OPEN","title":"URL Encoding misses forward slashes in `create_environment` environment_name","url":"https://github.com/PyGithub/PyGithub/issues/3262"},{"author":{"id":"MDQ6VXNlcjkzMjg0MzM=","is_bot":false,"login":"mschoettle","name":"Matthias Schoettle"},"body":"I am cleaning up merged branches and two PRs used the same source branch name. When calling `delete_branch` on the second PR the following error is raised due to a `GitRef(ref=None)`:\n\n```python\nTraceback (most recent call last):\n  File \"path/to/project/gh_branch_deleter.py\", line 31, in <module>\n    pull.delete_branch()\n  File \"path/to/cache/uv/environments-v2/gh-branch-deleter-55d50c1f1548d2bb/lib/python3.12/site-packages/github/PullRequest.py\", line 851, in delete_branch\n    return self.head.repo.get_git_ref(f\"heads/{self.head.ref}\").delete()\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"path/to/cache/uv/environments-v2/gh-branch-deleter-55d50c1f1548d2bb/lib/python3.12/site-packages/github/GitRef.py\", line 99, in delete\n    headers, data = self._requester.requestJsonAndCheck(\"DELETE\", self.url)\n                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"path/to/cache/uv/environments-v2/gh-branch-deleter-55d50c1f1548d2bb/lib/python3.12/site-packages/github/Requester.py\", line 631, in requestJsonAndCheck\n    self.__customConnection(url),\n    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"path/to/cache/uv/environments-v2/gh-branch-deleter-55d50c1f1548d2bb/lib/python3.12/site-packages/github/Requester.py\", line 799, in __customConnection\n    if not url.startswith(\"/\"):\n           ^^^^^^^^^^^^^^\nAttributeError: 'NoneType' object has no attribute 'startswith'\n```\n\nTested this with `pygithub==2.6.1`\n\nFor some reason `self.head.repo.get_git_ref(f\"heads/{self.head.ref}\")` returns `GitRef(ref=None)` instead of raising a 404 with `Not found` which would be caught by `__check`.","comments":[],"createdAt":"2025-03-10T19:17:31Z","number":3261,"state":"OPEN","title":"PullRequest.delete_branch fails with AttributeError when branch is already deleted","url":"https://github.com/PyGithub/PyGithub/issues/3261"},{"author":{"id":"MDQ6VXNlcjUzMTUxNTcw","is_bot":false,"login":"cahillsf","name":"Stephen Cahill"},"body":"recently some confusing behavior has come up with PaginatedList.  maybe it is already fixed? https://github.com/PyGithub/PyGithub/pull/3240/files but i don't really know\n\nhere is a code snippet in python REPL to demonstrate:\n\n```python\n➜ python3\nPython 3.10.13 (main, Oct 25 2024, 15:21:56) [Clang 16.0.0 (clang-1600.0.26.3)] on darwin\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>> import os\n>>> import github\n>>> token = os.environ.get(\"GITHUB_TOKEN\")\n>>> gh = github.Github(token)\n>>> results2 = gh.search_issues(\"repo:<REPO> is:pr head:<BRANCH_NAME> state:open\")\n>>> print(results2.totalCount)\n0\n>>> for result in results2: print(result.number)\n...\n29627\n>>> print(results2.totalCount)\n1\n```\n\nwe are using v2.6.1\n\nseems like you need to call the iterator in order for `totalCount` to report accurately","comments":[{"id":"IC_kwDOADYVqs6hLWwu","author":{"login":"cahillsf"},"authorAssociation":"NONE","body":"ah maybe a duplicate of https://github.com/PyGithub/PyGithub/issues/2620","createdAt":"2025-03-06T15:03:54Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/3257#issuecomment-2704108590","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs6hcI86","author":{"login":"SeanTAllen"},"authorAssociation":"NONE","body":"So this started happening to us 4 days ago as well. (version 1.54.1)\n\nWe had code that runs in docker images that has been running fine for years and it stopped working.\n\nThe search in question would always return 0 or 1 result. totalCount worked fine until 4 days ago when it started always returning 0. If I hit the github API directly, it has the correct value in total_count.\n\nNo idea what happened. It doesn't appear GH changed anything. Nothing in the image has changed in a really long time, but poof. It just stopped working correctly.\n\nI've updated to try to get the first index from results and catch the IndexError that might happen.","createdAt":"2025-03-08T22:17:47Z","includesCreatedEdit":true,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/3257#issuecomment-2708508474","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs6h2rB1","author":{"login":"cahillsf"},"authorAssociation":"NONE","body":"> So this started happening to us 4 days ago as well. (version 1.54.1)\n> \n> We had code that runs in docker images that has been running fine for years and it stopped working.\n> \n> The search in question would always return 0 or 1 result. totalCount worked fine until 4 days ago when it started always returning 0. If I hit the github API directly, it has the correct value in total_count.\n> \n> No idea what happened. It doesn't appear GH changed anything. Nothing in the image has changed in a really long time, but poof. It just stopped working correctly.\n> \n> I've updated to try to get the first index from results and catch the IndexError that might happen.\n\nah interesting, thanks for adding @SeanTAllen -- our setup is very similar","createdAt":"2025-03-11T19:21:58Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/3257#issuecomment-2715463797","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs6u8SH7","author":{"login":"ByteMeAsap"},"authorAssociation":"NONE","body":"I am facing this issue as well","createdAt":"2025-06-03T12:37:30Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/3257#issuecomment-2935038459","viewerDidAuthor":false}],"createdAt":"2025-03-04T21:48:25Z","number":3257,"state":"OPEN","title":"[Bug] Confusing behavior in PaginatedList","url":"https://github.com/PyGithub/PyGithub/issues/3257"},{"author":{"id":"MDQ6VXNlcjMxNDM3MDc5","is_bot":false,"login":"gopidesupavan","name":"GPK"},"body":"It would be very helpful Repository object supports `Create deployment branch policy` and `Delete deployment branch policy` endpoints\n\nhttps://docs.github.com/en/rest/deployments/branch-policies?apiVersion=2022-11-28#create-a-deployment-branch-policy\nhttps://docs.github.com/en/rest/deployments/branch-policies?apiVersion=2022-11-28#delete-a-deployment-branch-policy","comments":[],"createdAt":"2025-02-28T20:35:38Z","number":3250,"state":"OPEN","title":"Support for deployment branch policies in Repository object","url":"https://github.com/PyGithub/PyGithub/issues/3250"},{"author":{"id":"U_kgDOBiCEcQ","is_bot":false,"login":"anigamer101","name":""},"body":"\n<!DOCTYPE html>\n<p>Hello there. I am As2rofy (github : anigamer101 because of website) and I am creating a python library called ArkensPy (<a href = github.com/anigmaer101/Arkens>Main program repo</a>)\naiohttp, one of your dependencies, is a bit outdated and requires python 3.9 or earlier. However, ArkensPy uses a comand that was introduced later on. Kindly update your aiohttp version, so that ArkensPy can be feasible.\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        Thanks!                            \n                                                                                                                                                                                                                                                                                                                                                                                  As2rofy                                                                                                                                                                                                                   \nP.S  You can install it by running</p>\n</html>`pip install Arkenspy`","comments":[],"createdAt":"2025-02-28T12:13:18Z","number":3247,"state":"OPEN","title":"Python library dependency","url":"https://github.com/PyGithub/PyGithub/issues/3247"},{"author":{"id":"MDQ6VXNlcjEwMDIzMDA=","is_bot":false,"login":"atodorov","name":"Alexander Todorov"},"body":"\nFor this run https://github.com/gluwa/creditcoin3/actions/runs/13428940044/job/37517043952:\n\n![Image](https://github.com/user-attachments/assets/5facd29c-77b8-4475-9035-dc6694702203)\n\nI can list all of the annotations, however the `title` attribute always appears to be `None`. \n\nI am assuming that the text **Wait for creditcoin3-node to sync past block number 0x6111b1** from the screenshot above is what `.title` should be. Correct me if I'm wrong.\n\n\nCode snippet to reproduce the issue:\n```\n>>> repo = gh.get_repo(\"gluwa/creditcoin3\")\n>>> cr = repo.get_check_run(37517043952)\n>>>\n>>> output = cr.output\n>>> output.text, output.summary, output.title\n(None, None, None)\n>>>\n>>> output.annotations_count, output.text, output.summary, output.title\n(2, None, None, None)\n>>>\n>>> \n>>> for a in cr.get_annotations():\n...     print(a.annotation_level, \"T=\", a.title, \"M=\", a.message, \"D=\", a.raw_details)\n... \nwarning T=  M= The following actions uses Node.js version which is deprecated and will be forced to run on node20: i3h/download-release-asset@v1. For more info: https://github.blog/changelog/2024-03-07-github-actions-all-actions-will-run-on-node20-instead-of-node16-by-default/ D= \nfailure T=  M= The action 'Wait for creditcoin3-node to sync past block number 0x6111b1' has timed out after 25 minutes. D= \n```\n```\n\nI am willing to follow up with GitHub Support and provide a PR for this. Just need to know if my assumption is correct or if I should be looking into a different direction. Will keep digging meanwhile.","comments":[{"id":"IC_kwDOADYVqs6fPRdR","author":{"login":"atodorov"},"authorAssociation":"NONE","body":"FTR I've tried both with classic token & a fine-grained one and both seem to have the appropriate permissions (according to GitHub's AI bot suggestions). With both tokens the API just responds with empty strings (also tested it via `curl`).\n\nI've opened a ticket with GitHub for more details.","createdAt":"2025-02-20T13:58:30Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/3227#issuecomment-2671581009","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs6fQ7Fj","author":{"login":"atodorov"},"authorAssociation":"NONE","body":"The answer from GitHub Support is \n\n```\nUnfortunately, you've encountered a long-standing issue with our documentation. The Checks API does not support Fine-Grained PATs or classic PATs. Currently, only GitHub Apps can use the Checks API.\n```\n\n\nI will send a PR adding a warning to the doc-string for the relevant classes later. ","createdAt":"2025-02-20T16:27:41Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/3227#issuecomment-2672013667","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs6fY1xe","author":{"login":"EnricoMi"},"authorAssociation":"COLLABORATOR","body":"I'd say, `\"The Checks API does not support Fine-Grained PATs or classic PATs.\"` is a bit strong wording. It sounds like those tokens are not authorized to use the Checks API. But they are.\n\nYou can definitively use those PAT tokens to read the Checks API, you might not be able to create (write) checks, though.\n\nHere, I am reading a check with a PAT token:\n\n```python\nfrom github import Github\nfrom github.Auth import Token\ntoken = Token(\"github_pat_...\")\ngh = Github(auth=token)\nrepo = gh.get_repo(\"EnricoMi/publish-unit-test-result-action\", lazy=True)\ncr = repo.get_check_run(37526731599)\n\nimport json\njson.dumps(cr.output.raw_data, ensure_ascii=False)\n```\n```json\n{\n  \"title\": \"All 438 tests pass in 45m 2s\",\n  \"summary\": \"   180 files     180 suites   45m 2s ⏱️\\\\n   438 tests    438 ✅     0 💤 0 ❌\\\\n78 840 runs  77 202 ✅ 1 638 💤 0 ❌\\\\n\\\\nResults for commit 11089dfb.\\\\n\\\\n…\",\n  \"text\": null,\n  \"annotations_count\": 1,\n  \"annotations_url\": \"https://api.github.com/repos/EnricoMi/publish-unit-test-result-action/check-runs/37526731599/annotations\"\n}\n```\n\nThe check you are referring seems to have a different source than my check. My check has been created through the Checks API directly (using PyGithub and a Github Actions token), with `title` and `summary` set. It can be retrieved with a PAT token shown above.\n\nYour check has been created by the Github Actions runner, specifically via a Github Actions command: https://docs.github.com/en/actions/writing-workflows/choosing-what-your-workflow-does/workflow-commands-for-github-actions#setting-an-error-message\nThe runner creates an annotation that is shown on the Summary page of the run.\n\nThe checks created through the Checks API are not shown there, they are show as their own job: https://github.com/EnricoMi/publish-unit-test-result-action/actions/runs/12432085301/job/35578116211\n\nSo these seem to be different things.\n\nHere is another check from my repo:\n```python\ncr = repo.get_check_run(35578096488)\njson.dumps(cr.output.raw_data, ensure_ascii=False)\n```\n```json\n{\n  \"title\": null,\n  \"summary\": null,\n  \"text\": null,\n  \"annotations_count\": 2,\n  \"annotations_url\": \"https://api.github.com/repos/EnricoMi/publish-unit-test-result-action/check-runs/35578096488/annotations\"\n}\n```\nThey can be found on the \"Summary\" page of the run: https://github.com/EnricoMi/publish-unit-test-result-action/actions/runs/12764944728","createdAt":"2025-02-21T09:54:03Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/3227#issuecomment-2674089054","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs6fZecB","author":{"login":"atodorov"},"authorAssociation":"NONE","body":"> I'd say, `\"The Checks API does not support Fine-Grained PATs or classic PATs.\"` is a bit strong wording.\n\nThis is verbatim from what GitHub Support told me. Whether they have misunderstood my use-case or they just gave me an incorrect answer I can't say. \n\nI can update my doc-string PR with a different wording if anyone has a better idea - I just want to document the behavior where some of these attributes are null or empty strings b/c I've lost too much time trying to figure that one out. \n\nOn the topic of whether check runs and their annotations are different depending on how they were created - IDK if that's the case. One would assume that it's the same data structure underlying both use cases. However it could very well be the case that in one of the examples the data for these attributes is missing and not returned by the API (which may have nothing to do with the token type or its permissions).","createdAt":"2025-02-21T11:04:34Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/3227#issuecomment-2674255617","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs6fbJkH","author":{"login":"EnricoMi"},"authorAssociation":"COLLABORATOR","body":"We could mark those attributes optional (`str | None`) via Python typing.","createdAt":"2025-02-21T14:27:16Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/3227#issuecomment-2674694407","viewerDidAuthor":false}],"createdAt":"2025-02-20T13:13:40Z","number":3227,"state":"OPEN","title":"CheckRunAnnotation.title always seems to be None","url":"https://github.com/PyGithub/PyGithub/issues/3227"},{"author":{"id":"MDQ6VXNlcjU3ODU0Mw==","is_bot":false,"login":"webknjaz","name":"🇺🇦 Sviatoslav Sydorenko (Святослав Сидоренко)"},"body":"Apparently, MyPy is violently unhappy when checking things like except block expressions:\n```python\nsrc/awx_plugins/credentials/github_app.py: note: In function \"extract_github_app_install_token\":\nsrc/awx_plugins/credentials/github_app.py:236:12:236:33: error: Expression type\ncontains \"Any\" (has type \"type[UnknownObjectException]\")  [misc]\n        except UnknownObjectException as github_install_not_found_exc:\n               ^~~~~~~~~~~~~~~~~~~~~~\n```\n\nThis is when running MyPy with `disallow_any_expr = true` (and `strict = true` in general).\n\nI believe, this is coming from https://github.com/PyGithub/PyGithub/blob/038624c/github/GithubException.py#L56.\n\nMyPy's own docs suggest using `object` in place of `Any` whenever possible: https://mypy.readthedocs.io/en/latest/dynamic_typing.html#any-vs-object.\n\nSo it'd be nice to see if that would work here.","comments":[{"id":"IC_kwDOADYVqs6fIa40","author":{"login":"EnricoMi"},"authorAssociation":"COLLABORATOR","body":"Thanks for pointing this out. So this is not a bug you experience but simply an observation when configuring mypy more strictly?","createdAt":"2025-02-19T21:19:40Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/3218#issuecomment-2669784628","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs6fIbdD","author":{"login":"EnricoMi"},"authorAssociation":"COLLABORATOR","body":"Ah, you are using the `UnknownObjectException` in your code and have those strict mypy config there.","createdAt":"2025-02-19T21:20:56Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/3218#issuecomment-2669786947","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs6fJpKb","author":{"login":"webknjaz"},"authorAssociation":"CONTRIBUTOR","body":"Yeah, technically type annotations are public API. And anything that evaluates to `Any` counts as imprecise typing in MyPy — it can even generate type coverage reports (HTML, XML, plain text). So this is useful to track. The reports show it visually but the strict mode makes type checking fail. I ignored the entries but hope there's an opportunity to improve this project through more accurate typing. Bonus points for publishing type coverage to Codecov and surfacing it as a check on PRs...","createdAt":"2025-02-20T00:43:17Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/3218#issuecomment-2670105243","viewerDidAuthor":false}],"createdAt":"2025-02-19T15:47:50Z","number":3218,"state":"OPEN","title":"Replace `Any` with `object` in exception typing","url":"https://github.com/PyGithub/PyGithub/issues/3218"},{"author":{"id":"MDQ6VXNlcjU3ODU0Mw==","is_bot":false,"login":"webknjaz","name":"🇺🇦 Sviatoslav Sydorenko (Святослав Сидоренко)"},"body":"I was passing an `int` to `Auth` as per its typing annotations, which I didn't initially realize was cascading into a problem with the JWT RFC violation.\n\nThis was when I was writing some tests that supply a legit RSA keypair and exercise [`create_jwt()`](https://github.com/PyGithub/PyGithub/blob/038624c/github/Auth.py#L240-L242).\n\nI then attempt to decode the payload with signature verification. I attempted `jwt.decode(..., issuer=123)` / `jwt.decode(..., issuer='123')` and hit errors in both cases. So I troubleshooted the problem and discovered that PyGitHub uses App ID as an integer value when constructing JWT payload. But the JWT spec is pretty clear about the expectation that it must be a string:\n> [4.1.1](https://datatracker.ietf.org/doc/html/rfc7519#section-4.1.1).  \"iss\" (Issuer) Claim\n>\n>   The \"iss\" (issuer) claim identifies the principal that issued the\n>   JWT.  The processing of this claim is generally application specific.\n>   The \"iss\" value is **a case-sensitive string** containing a StringOrURI\n>   value.  Use of this claim is OPTIONAL.\n\n*(emphasis mine)*\n\nSo the bug in PyGitHub is that it doesn't turn the number into a string, and the bug in PyJWT is that it allows it in the first place. I also filed the issue over there too: https://github.com/jpadilla/pyjwt/issues/1039.\n\nGitHub's own docs correctly show it as being a string as well: https://docs.github.com/en/apps/creating-github-apps/authenticating-with-a-github-app/generating-a-json-web-token-jwt-for-a-github-app#example-using-python-to-generate-a-jwt.\n\nImplementing this will also allow supporting Client ID issuer values: https://github.com/PyGithub/PyGithub/issues/3213.","comments":[{"id":"IC_kwDOADYVqs6e54r8","author":{"login":"webknjaz"},"authorAssociation":"CONTRIBUTOR","body":"This should be easily fixable by wrapping https://github.com/PyGithub/PyGithub/blob/038624c/github/Auth.py#L276C20-L276C32 with `str()`.\n\nAnd in addition to that, `jwt.decode()` invocations in tests at https://github.com/PyGithub/PyGithub/blob/038624c/tests/Authentication.py#L300-L305 and https://github.com/PyGithub/PyGithub/blob/038624c/tests/Authentication.py#L315-L320 can be improved with the built-in issuer verification that PyJWT provides.","createdAt":"2025-02-18T15:02:44Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/3214#issuecomment-2665974524","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs6fECq5","author":{"login":"webknjaz"},"authorAssociation":"CONTRIBUTOR","body":"Alternatively, it could probably be normalized right in the initializer: https://github.com/PyGithub/PyGithub/blob/038624c/github/Auth.py#L231C9-L231C30.","createdAt":"2025-02-19T13:20:09Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/3214#issuecomment-2668636857","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs6hMS-E","author":{"login":"webknjaz"},"authorAssociation":"CONTRIBUTOR","body":"UPD: PyJWT merged a fix that implements more validation in a few places. This will probably cascade into failures in PyGitHub soon.","createdAt":"2025-03-06T16:33:28Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/3214#issuecomment-2704355204","viewerDidAuthor":false}],"createdAt":"2025-02-18T14:56:36Z","number":3214,"state":"OPEN","title":"[BUG] Illegal `iss` integer type in generated JWTs","url":"https://github.com/PyGithub/PyGithub/issues/3214"},{"author":{"id":"MDQ6VXNlcjU3ODU0Mw==","is_bot":false,"login":"webknjaz","name":"🇺🇦 Sviatoslav Sydorenko (Святослав Сидоренко)"},"body":"It was announced on May 1, 2024, that client IDs can now be used when making JWTs: https://github.blog/changelog/2024-05-01-github-apps-can-now-use-the-client-id-to-fetch-installation-tokens/.\n\nLooking at https://docs.github.com/en/apps/creating-github-apps/authenticating-with-a-github-app/generating-a-json-web-token-jwt-for-a-github-app#about-json-web-tokens-jwts, it specifically calls this out, recommending that people prefer client IDs over App IDs:\n\n> The client ID or application ID of your GitHub App. This value is used to find the right public key to verify the signature of the JWT. You can find your app's IDs on the settings page for your GitHub App. _**Use of the client ID is recommended.**_ For more information about navigating to the settings page for your GitHub App, see [Modifying a GitHub App registration](https://docs.github.com/en/apps/maintaining-github-apps/modifying-a-github-app-registration#navigating-to-your-github-app-settings).\n\n*(emphasis mine)*\n\nThe GH App settings interface in the UI (`https://github.com/organizations/<org>/settings/apps/<app>`) also has this hint:\n> Using your App ID to get installation tokens? You can now [use your Client ID instead](https://docs.github.com/apps/creating-github-apps/authenticating-with-a-github-app/generating-a-json-web-token-jwt-for-a-github-app).\n\nThe current implementation hardcoded the use of App IDs (also in a way that violates the JWT spec — https://github.com/PyGithub/PyGithub/issues/3214 / https://github.com/jpadilla/pyjwt/issues/1039).","comments":[{"id":"IC_kwDOADYVqs6e7fYD","author":{"login":"webknjaz"},"authorAssociation":"CONTRIBUTOR","body":"Reading through the code, I think that passing Client ID to `app_id=` should work, after all. So this might be a documentation issue instead of a feature request.","createdAt":"2025-02-18T17:32:19Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/3213#issuecomment-2666395139","viewerDidAuthor":false}],"createdAt":"2025-02-18T14:37:59Z","number":3213,"state":"OPEN","title":"[FR][docs?] Support Client IDs in JWT","url":"https://github.com/PyGithub/PyGithub/issues/3213"},{"author":{"id":"MDQ6VXNlcjg2NDExMzEz","is_bot":false,"login":"aquint-zama","name":"Alex Quint"},"body":"Github API supports an endpoint to list all packages from a Github organization as described [here](https://docs.github.com/en/rest/packages/packages?apiVersion=2022-11-28#list-packages-for-an-organization) \n\nCould be great to add the support in PyGithub.\n\nNote that a preliminary PR is already available in #3074 \nThank you.","comments":[],"createdAt":"2025-02-03T14:18:27Z","number":3184,"state":"OPEN","title":"Add support for Organization packages","url":"https://github.com/PyGithub/PyGithub/issues/3184"},{"author":{"id":"MDQ6VXNlcjM2NjIyMzI=","is_bot":false,"login":"psaile","name":"Philipp Saile"},"body":"Github is extending the issues with [sub-issues](https://github.blog/changelog/2025-01-13-evolving-github-issues-public-preview/) including new [REST API endpoints for sub-issues](https://docs.github.com/en/rest/issues/sub-issues?apiVersion=2022-11-28). It would be great if support for sub-issues could be added to PyGithub.","comments":[],"createdAt":"2025-01-23T09:27:27Z","number":3178,"state":"OPEN","title":"Feature request: Add support for sub-issues","url":"https://github.com/PyGithub/PyGithub/issues/3178"},{"author":{"id":"MDQ6VXNlcjE5NzQ1Mjk5","is_bot":false,"login":"zettelin","name":"Younghoon YUN"},"body":"### What's the problem?\n\nI am using GitHub Enterprise which has primary and replication server. All the requests should target the replication server, however the redirection url is based on primary server. In this case, the following lines cause an error, \n\nhttps://github.com/PyGithub/PyGithub/blob/f7d522495ee89ef00a5ed788479beaee277612bf/github/Requester.py#L1061-L1065\n\nwhich is `RuntimeError: Github server redirected from host REPLICATION to PRIMARY, please correct your Github server URL via base_url: Github(base_url=...)`\n\n### How to fix it?\n- Allow host redirection with optional argument in `github.Github()`\n\n\n\n\n","comments":[{"id":"IC_kwDOADYVqs6bXNLR","author":{"login":"EnricoMi"},"authorAssociation":"COLLABORATOR","body":"I presume this exists as a safety measure. I think redirections should not be allowed to any hosts but some kind of base domain or maybe regular expression. So relaxing this `o.hostname != self.__hostname` should consider that.\n\nContribution welcome. Given this is an enterprise feature, please consider sponsoring.","createdAt":"2025-01-22T08:11:19Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":1}}],"url":"https://github.com/PyGithub/PyGithub/issues/3177#issuecomment-2606551761","viewerDidAuthor":false}],"createdAt":"2025-01-22T05:39:39Z","number":3177,"state":"OPEN","title":"allow host redirection","url":"https://github.com/PyGithub/PyGithub/issues/3177"},{"author":{"id":"MDQ6VXNlcjEzNDYxNzAy","is_bot":false,"login":"heitorPB","name":"Heitor de Bittencourt"},"body":"I have the following request that I'd like to have a proper Python implementation:\n\n```console\ncurl --request PUT https://api.github.com/repos/{owner}/{repo}/pages \\\n     --header \"Authorization: token ${GITHUB_TOKEN}\" \\\n     --header \"Accept: application/vnd.github.v3+json\" \\\n     --data '{\"build_type\":\"workflow\"}'\n```\n\nBut I couldn't find in the docs how to interact with the GH Pages endpoint. Docs are available in https://docs.github.com/en/rest/pages/pages?apiVersion=2022-11-28","comments":[],"createdAt":"2025-01-20T20:05:29Z","number":3174,"state":"OPEN","title":"Support configuring GitHub pages","url":"https://github.com/PyGithub/PyGithub/issues/3174"},{"author":{"id":"MDQ6VXNlcjUyOTMzOTk1","is_bot":false,"login":"gfog-floqast","name":"Greg Fogelberg"},"body":"The CustomProperty class currently only [supports](https://github.com/PyGithub/PyGithub/blob/main/github/OrganizationCustomProperty.py#L51) [\"string\", \"single_select\"]. GitHub now [supports](https://docs.github.com/en/rest/orgs/custom-properties?apiVersion=2022-11-28#create-or-update-custom-properties-for-an-organization) multi_select and true_false in addition to these.\n\n","comments":[],"createdAt":"2025-01-17T20:06:02Z","number":3172,"state":"OPEN","title":"CustomProperty supports additional value_type options","url":"https://github.com/PyGithub/PyGithub/issues/3172"},{"author":{"id":"U_kgDOBghUWw","is_bot":false,"login":"HugoPBrito","name":"Hugo Pereira Brito"},"body":"Dear PyGitHub Team,\r\n\r\nYou currently have the `dependabot security updates` field. Would it be possible for you to implement the `dependabot alerts field` as well? I'm working on a check, and I need to retrieve this parameter.\r\n\r\nThank you for your consideration, and please let me know if additional details are needed.","comments":[],"createdAt":"2024-12-30T15:35:48Z","number":3103,"state":"OPEN","title":"Feature request: add `dependabot alerts` field","url":"https://github.com/PyGithub/PyGithub/issues/3103"},{"author":{"id":"U_kgDOBo5jyw","is_bot":false,"login":"SWITCHin2","name":"Satya Sasini"},"body":"Description: \r\nI was adding a comment to a issue by using the .create_comment() method.\r\nLater when I was editing the body using .edit() function, each time I used that it adds the same comment I added using create_comment() method.\r\n\r\nNote:\r\nI tried to get a new instance of the issue from the old repo instance before using .edit() function.\r\n\r\nhttps://github.com/PyGithub/PyGithub/blob/3d84a47a88f6757514cb3ee91b829f53ba09e7e0/github/Issue.py#L317\r\n\r\nIf allowed can I resolve it and anyone help with the actual issue\r\n\r\ni think in the create_command() method we should not do both the works simultaneously like making a comment and creating a new instance of comment class\r\n","comments":[{"id":"IC_kwDOADYVqs6Y6hPa","author":{"login":"SWITCHin2"},"authorAssociation":"NONE","body":"@EnricoMi , can you please look into this, each time i m editing issue body using `.edit()` function of issue class, one comment that i have added using `.create_command()` is getting added multiple times\r\n\r\n","createdAt":"2024-12-30T13:20:34Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/3100#issuecomment-2565477338","viewerDidAuthor":false}],"createdAt":"2024-12-26T11:33:46Z","number":3100,"state":"OPEN","title":"bug: Issue getting commented multiple times","url":"https://github.com/PyGithub/PyGithub/issues/3100"},{"author":{"id":"U_kgDOBghUWw","is_bot":false,"login":"HugoPBrito","name":"Hugo Pereira Brito"},"body":"I am currently working on implementing a check to ensure that open Git branches are up to date before they can\r\nbe merged into code base. To achieve this, access to the `Require branches to be up to date before merging` field is essential, as it would allow me to programmatically enforce this requirement.\r\n\r\nWould it be possible to include support for retrieving the `Require branches to be up to date before merging` field in PyGitHub?\r\n\r\nThank you for your consideration, and please let me know if additional details are needed.","comments":[],"createdAt":"2024-12-17T09:35:29Z","number":3097,"state":"OPEN","title":"Feature request: access to `Require branches to be up to date before merging` field","url":"https://github.com/PyGithub/PyGithub/issues/3097"},{"author":{"id":"MDQ6VXNlcjE1OTE4NDg=","is_bot":false,"login":"AnkeshThakur","name":"Ankesh Kumar Thakur"},"body":"During execution when PyGithub needs to refresh token it ran into problem. It was running smoothly before but at that moment started giving 401 errors. What appears to be the reason for this is caused by difference between time of local system and github servers. This error came around midnight local time. Generally it is not observed but for long running processes it might be critical. \r\n\r\nStack trace: \r\n\r\n```\r\nFile \"/usr/local/lib/python3.11/site-packages/github/Requester.py\", line 548, in requestJsonAndCheck\r\n    return self.__check(*self.requestJson(verb, url, parameters, headers, input, self.__customConnection(url)))\r\n                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"/usr/local/lib/python3.11/site-packages/github/Requester.py\", line 713, in requestJson\r\n    return self.__requestEncode(cnx, verb, url, parameters, headers, input, encode)\r\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"/usr/local/lib/python3.11/site-packages/github/Requester.py\", line 798, in __requestEncode\r\n    requestHeaders[\"Authorization\"] = f\"{self.__auth.token_type} {self.__auth.token}\"\r\n                                                                  ^^^^^^^^^^^^^^^^^\r\n  File \"/usr/local/lib/python3.11/site-packages/github/Auth.py\", line 328, in token\r\n    self.__installation_authorization = self._get_installation_authorization()\r\n                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"/usr/local/lib/python3.11/site-packages/github/Auth.py\", line 339, in _get_installation_authorization\r\n    return self.__integration.get_access_token(\r\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"/usr/local/lib/python3.11/site-packages/github/GithubIntegration.py\", line 228, in get_access_token\r\n    headers, response = self.__requester.requestJsonAndCheck(\r\n                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"/usr/local/lib/python3.11/site-packages/github/Requester.py\", line 548, in requestJsonAndCheck\r\n    return self.__check(*self.requestJson(verb, url, parameters, headers, input, self.__customConnection(url)))\r\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"/usr/local/lib/python3.11/site-packages/github/Requester.py\", line 609, in __check\r\n    raise self.createException(status, responseHeaders, data)\r\ngithub.GithubException.GithubException: 401 {\"message\": \"'Expiration time' claim ('exp') must be a numeric value representing the future time at which the assertion expires\", \"documentation_url\": \"https://docs.github.com/rest\", \"status\": \"401\"}\r\n```\r\n\r\nA relevant issue issue was resolved here - https://github.com/octokit/auth-app.js/pull/164\r\n\r\nThe approach identifies the time diff b/w servers and adjust exp/iat accordingly.","comments":[],"createdAt":"2024-12-11T07:30:30Z","number":3092,"state":"OPEN","title":"System and Github server time difference is causing 401","url":"https://github.com/PyGithub/PyGithub/issues/3092"},{"author":{"id":"U_kgDOBghUWw","is_bot":false,"login":"HugoPBrito","name":"Hugo Pereira Brito"},"body":"Dear PyGitHub Team,\r\n\r\nI am currently working on implementing a check to ensure that all commits in a pull request are signed and verified before merging. To achieve this, access to the `required_signatures` field is essential, as it would allow me to programmatically enforce this requirement.\r\n\r\nWould it be possible to include support for retrieving the `required_signatures` field in `PyGitHub`? I believe this feature would be valuable for others as well, particularly in workflows where commit verification is a priority.\r\n\r\nThank you for your consideration, and please let me know if additional details are needed.","comments":[],"createdAt":"2024-12-10T11:34:05Z","number":3090,"state":"OPEN","title":"Feature Request: Access to required_signatures Field","url":"https://github.com/PyGithub/PyGithub/issues/3090"},{"author":{"id":"MDQ6VXNlcjI5NTU0NTA4","is_bot":false,"login":"ethan-oro","name":"ethanoro"},"body":"the type hinting for the `creator` kwarg to `Repository.get_issues` is `creator: Opt[NamedUser] = NotSet,`; however, we see later in code the following two statements:\r\n\r\n```assert is_optional(creator, (str, github.NamedUser.NamedUser)), creator```\r\n\r\nand \r\n\r\n```\r\n        if is_defined(creator):\r\n            if isinstance(creator, str):\r\n                url_parameters[\"creator\"] = creator\r\n            else:\r\n                url_parameters[\"creator\"] = creator._identity\r\n```\r\n\r\n\r\nas well as documentation that says \r\n\r\n```\r\n:param creator: string or :class:`github.NamedUser.NamedUser`\r\n```","comments":[],"createdAt":"2024-11-25T22:44:43Z","number":3084,"state":"OPEN","title":"incorrect type hinting for `creator` kwarg to `Repository.get_issues`","url":"https://github.com/PyGithub/PyGithub/issues/3084"},{"author":{"id":"MDQ6VXNlcjkxMjY1OTA1","is_bot":false,"login":"david-hodgson-at-sky","name":"David Hodgson"},"body":"Please add  a \r\n\r\n- `get_pending_invitations` \r\n\r\nand \r\n\r\n- `get_failed_invitations `\r\n\r\nfor an organization, based on the API end points \r\n\r\n- `https://docs.github.com/en/rest/orgs/members#list-pending-organization-invitations`\r\n\r\nand\r\n\r\n- `https://docs.github.com/en/rest/orgs/members#list-failed-organization-invitations`\r\n\r\nI cannot see any way to get this information with your module's Organisation class methods.","comments":[],"createdAt":"2024-11-05T20:57:42Z","number":3077,"state":"OPEN","title":"pending and failed invitations lists","url":"https://github.com/PyGithub/PyGithub/issues/3077"},{"author":{"id":"MDQ6VXNlcjQ0NzAwMjY5","is_bot":false,"login":"EnricoMi","name":"Enrico Minack"},"body":"Similar to how the REST API reference section is generated via `doc/conf.py` (scanning code for `:calls:` annotations).","comments":[],"createdAt":"2024-10-30T15:10:52Z","number":3073,"state":"OPEN","title":"[Docs] Add supported GraphQL endpoints to reference section in docs","url":"https://github.com/PyGithub/PyGithub/issues/3073"},{"author":{"id":"U_kgDOBmYfUg","is_bot":false,"login":"jeremy-jimmy","name":"Jérémy PICOSSON"},"body":"I have a repository in my GitHub account, I activated the \"Projects\" section manually and I created a example project from the web client.\r\n\r\nThen I tried to create a new project using the PyGithub package using a simple script as below : \r\n\r\n```python\r\nfrom github import Github\r\nGITHUB_APP = Github(\"*************\")\r\nREPO_APP = GITHUB_APP.get_repo(\"*************\")\r\n\r\nREPO_APP.create_project(name=\"TEST AUTO PROJET\")\r\n```\r\n\r\nBut I'm getting this error : \r\n\r\n> GithubException: 410 {\"message\": \"Projects are disabled for this repository\", \"documentation_url\": \"https://docs.github.com/v3/projects\", \"status\": \"410\"}\r\n\r\nSince, I was able to create a project manually, I'm surprised that it says the projects are disable. It's not the case\r\n\r\nThanks in advance,\r\n\r\n","comments":[{"id":"IC_kwDOADYVqs6RYZ3u","author":{"login":"rikvermeer"},"authorAssociation":"NONE","body":"I have the same, and I've checked the repo settings ","createdAt":"2024-10-26T00:50:03Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":1}}],"url":"https://github.com/PyGithub/PyGithub/issues/3071#issuecomment-2439093742","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs6RcPQN","author":{"login":"EnricoMi"},"authorAssociation":"COLLABORATOR","body":"Documentation says, besides insufficient privileges, `410 Gone` is returned when no classic projects exist in the repository. Looks like (classic) projects can only be added to repositories if thy already have classic projects. Can you confirm your repositories already have classic projects, and that you have successfully added a classic project manually?\r\n\r\nhttps://docs.github.com/en/rest/projects/projects?apiVersion=2022-11-28#create-a-repository-project","createdAt":"2024-10-27T16:58:40Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/3071#issuecomment-2440098829","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs6Reown","author":{"login":"jeremy-jimmy"},"authorAssociation":"NONE","body":"> Documentation says, besides insufficient privileges, `410 Gone` is returned when no classic projects exist in the repository. Looks like (classic) projects can only be added to repositories if thy already have classic projects. Can you confirm your repositories already have classic projects, and that you have successfully added a classic project manually?\r\n> \r\n> https://docs.github.com/en/rest/projects/projects?apiVersion=2022-11-28#create-a-repository-project\r\n\r\nYes, I confirm you I was able to create manually a project. What do you mean by classic ? When I created it manually, the \"classic\" term was never mentioned on the web client.","createdAt":"2024-10-28T07:15:53Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/3071#issuecomment-2440727591","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs6Re-XS","author":{"login":"jeremy-jimmy"},"authorAssociation":"NONE","body":"To precise my case, I'm working with private repositories","createdAt":"2024-10-28T08:07:46Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/3071#issuecomment-2440816082","viewerDidAuthor":false}],"createdAt":"2024-10-25T14:51:50Z","number":3071,"state":"OPEN","title":"[ BUG ? ] Repository can't create new project","url":"https://github.com/PyGithub/PyGithub/issues/3071"},{"author":{"id":"MDQ6VXNlcjEzMTgzNzQ=","is_bot":false,"login":"JanisV","name":""},"body":"release-bot (https://github.com/JanisV/release-bot) - a Telegram bot that notifies you of new GitHub releases.","comments":[{"id":"IC_kwDOADYVqs6Xbq1M","author":{"login":"billnapier"},"authorAssociation":"CONTRIBUTOR","body":"The best way to do this is would be to create a PR to be reviewed that adds this.","createdAt":"2024-12-13T05:59:03Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/3070#issuecomment-2540612940","viewerDidAuthor":false}],"createdAt":"2024-10-25T07:32:32Z","number":3070,"state":"OPEN","title":"Can you add release-bot to the list of projects using PyGitHub?","url":"https://github.com/PyGithub/PyGithub/issues/3070"},{"author":{"id":"U_kgDOBjEsFg","is_bot":false,"login":"sbkobaidze","name":"Saba Kobaidze"},"body":"I am trying to create repo for user using my app ( I double checked the scopes and I have read/write access)  and I am getting this error  `'NamedUser' object has no attribute 'create_repo'`. I checked and both org and user definitely has create_repo methods. What can be the issue?","comments":[{"id":"IC_kwDOADYVqs6RcPb-","author":{"login":"EnricoMi"},"authorAssociation":"COLLABORATOR","body":"Can you please link to the `create_repo` method of user?","createdAt":"2024-10-27T17:00:46Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/3068#issuecomment-2440099582","viewerDidAuthor":false}],"createdAt":"2024-10-24T14:18:08Z","number":3068,"state":"OPEN","title":"'NamedUser' object has no attribute 'create_repo'","url":"https://github.com/PyGithub/PyGithub/issues/3068"},{"author":{"id":"MDQ6VXNlcjEwNDYzMTk=","is_bot":false,"login":"srijiths","name":"Srijith.S"},"body":"This feature is available in create_repo method in organization. But the same need to be replicated to create_repo_from_template as well.\r\n\r\nReference PR : https://github.com/PyGithub/PyGithub/pull/1872","comments":[{"id":"IC_kwDOADYVqs6RcPel","author":{"login":"EnricoMi"},"authorAssociation":"COLLABORATOR","body":"Do you mind open a PR or this?","createdAt":"2024-10-27T17:01:12Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/3066#issuecomment-2440099749","viewerDidAuthor":false}],"createdAt":"2024-10-23T22:29:16Z","number":3066,"state":"OPEN","title":"Add support for the 'visibility' attribute on organization.create_repo_from_template","url":"https://github.com/PyGithub/PyGithub/issues/3066"},{"author":{"id":"MDQ6VXNlcjcwNjg0NzE5","is_bot":false,"login":"justhecuke","name":""},"body":"The properties need to have `T | None` typing to be correct, due to `_NotSetType`'s `value` of None, and the possibility that a completed set of data does not have a value for the property.\r\n\r\nWhen the response from GitHub does not have data associated with a property, that property will return `None` instead of the type it is supposed to return, leading to errors around having a surprise `None` entering the code.\r\n\r\nIf we property type the properties as possibly being None, we can get around this problem and more easily write resilient code.","comments":[],"createdAt":"2024-10-11T13:44:20Z","number":3061,"state":"OPEN","title":"Incorrect types for data in Workflow, WorkflowRun, others that use Attribute[T] = _NotSetType -> Completable -> property[T] pattern","url":"https://github.com/PyGithub/PyGithub/issues/3061"},{"author":{"id":"MDQ6VXNlcjE2NDQzMDkw","is_bot":false,"login":"mihaigalos","name":"Mihai Galos"},"body":"We're using Docs-as-Code in git and want to show who contributed to a specific page.\r\n\r\nAuthorship is evaluated internally using get_commits(). This however, doesn't follow files moves. So the original authors aren't show anymore for files which were moved.\r\n\r\nThis feature request is for adding a `follow: bool` flag in the `get_commits()` API to essentially do the same as `git log --follow --`.","comments":[{"id":"IC_kwDOADYVqs6NxAmo","author":{"login":"mihaigalos"},"authorAssociation":"NONE","body":"Had a quick look at the REST and GraphQL APIs. I didn't see anything awfully conspiquous which we could use.\r\nIt might be that for this to work, one would need to locally clone the repo and run `git log --follow filename`.","createdAt":"2024-09-27T05:34:58Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/3053#issuecomment-2378434984","viewerDidAuthor":false}],"createdAt":"2024-09-27T05:27:30Z","number":3053,"state":"OPEN","title":"Feature Request: get_commits(follow=True)","url":"https://github.com/PyGithub/PyGithub/issues/3053"},{"author":{"is_bot":true,"login":"app/github-actions"},"body":"<!--\nThis dashboard was generated by the [top-issues-action](https://github.com/rickstaa/top-issues-action) action.\n-->\n\nA simple dashboard that lists the top issues/bugs/features and pull requests.\n\n## Top issues <a href=\"#top-issues\" id=\"top-issues\"/>\n\n1. #1373 :+1:`37`\n2. #2178 :+1:`32`\n3. #2718 :+1:`30`\n4. #1538 :+1:`29`\n5. #2140 :+1:`17`\n6. #536 :+1:`16`\n7. #2730 :+1:`12`\n8. #2416 :+1:`9`\n9. #2503 :+1:`8`\n10. #1448 :+1:`8`\n\n## Top PRs <a href=\"#top-prs\" id=\"top-prs\"/>\n\n1. #2966 :+1:`3`\n2. #1676 :+1:`3`\n3. #3074 :+1:`2`\n4. #3022 :+1:`2`\n5. #2268 :+1:`2`\n6. #2245 :+1:`2`\n7. #3294 :+1:`1`\n8. #3289 :+1:`1`\n9. #3284 :+1:`1`\n10. #3283 :+1:`1`\n\n> Created by the [rickstaa/top-issues-action](https://github.com/rickstaa/top-issues-action) action (last update: 7/20/2025, 12:34:46 AM).","comments":[],"createdAt":"2024-09-19T13:26:46Z","number":3050,"state":"OPEN","title":"Top Issues Dashboard","url":"https://github.com/PyGithub/PyGithub/issues/3050"},{"author":{"id":"U_kgDOCmRcOw","is_bot":false,"login":"BenedictStrunk-otto","name":"Benedict Strunk"},"body":"/repos/{owner}/{repo}/automated-security-fixes allows for GET, PUT and DELETE. \r\nPUT (enable_automated_security_fixes) and DELETE (disable_automated_security_fixes) are implemented while GET seemingly isn't.\r\n\r\nGitHub API docs: https://docs.github.com/en/rest/repos/repos?apiVersion=2022-11-28#check-if-automated-security-fixes-are-enabled-for-a-repository\r\n\r\nBest regards and thanks for this project :)","comments":[],"createdAt":"2024-09-10T08:23:27Z","number":3042,"state":"OPEN","title":"github.Repository is missing method for GET automated-security-fixes","url":"https://github.com/PyGithub/PyGithub/issues/3042"},{"author":{"id":"U_kgDOCd6Mtg","is_bot":false,"login":"johannes-russek-sh","name":""},"body":"When trying to add a lot of comments in PullRequest.create_review, the github API will always return 404 - probably because the per-api-call secondary quota is reached. Retries always fail, since the amount of comments doesn't change.\r\n\r\nThe API could provide a workaround by setting the review to PENDING, then adding comments and eventually publishing it.\r\n\r\nHowever, PyGithub does not appear to support updating the event of a review after creating it: PullRequestReview.edit() only updates the body.","comments":[{"id":"IC_kwDOADYVqs6LZcGj","author":{"login":"johannes-russek-sh"},"authorAssociation":"NONE","body":"maybe adding a submit method to the PullRequestReview would work?\r\n\r\n```\r\n    def submit(self, event: str, body: Opt[str] = NotSet) -> None:\r\n        \"\"\"\r\n        :calls: `POST /repos/:owner/:repo/pulls/:number/reviews/:review_id/events <https://developer.github.com/v3/pulls/reviews/>`_\r\n        \"\"\"\r\n        assert is_defined(event, str), event\r\n        assert is_optional(body), body\r\n        assert event in [\"APPROVE\", \"REQUEST_CHANGES\", \"COMMENT\"], event\r\n\r\n        post_parameters = NotSet.remove_unset_items({\r\n            \"event\": event,\r\n            \"body\": body\r\n        })\r\n\r\n        headers, data = self._requester.requestJsonAndCheck(\r\n            \"POST\",\r\n            f\"{self.pull_request_url}/reviews/{self.id}/events\",\r\n            input=post_parameters,\r\n        )\r\n        self._useAttributes(data)\r\n```","createdAt":"2024-09-09T17:38:51Z","includesCreatedEdit":true,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/3038#issuecomment-2338701731","viewerDidAuthor":false}],"createdAt":"2024-09-09T14:00:10Z","number":3038,"state":"OPEN","title":"issues with pull request review, adding many comments always fails, publishing pending reviews not supported","url":"https://github.com/PyGithub/PyGithub/issues/3038"},{"author":{"id":"MDQ6VXNlcjUyOTY0MTY=","is_bot":false,"login":"beckermr","name":"Matthew R. Becker"},"body":"The current way of getting app tokens does not produce a repo-specific token. I tried to pass the output of `get_repo_installation` to `get_access_token` and the output token has access to `all` repos.","comments":[{"id":"IC_kwDOADYVqs6K9kNc","author":{"login":"beckermr"},"authorAssociation":"NONE","body":"We need to pass `repositories` to the get_access_token. The installation returned for the repo is apparently not specific to the repo in the github api.","createdAt":"2024-09-05T12:24:39Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/3037#issuecomment-2331394908","viewerDidAuthor":false}],"createdAt":"2024-09-05T12:03:48Z","number":3037,"state":"OPEN","title":"app tokens for specific repos do not work","url":"https://github.com/PyGithub/PyGithub/issues/3037"},{"author":{"id":"MDQ6VXNlcjQ0NzAwMjY5","is_bot":false,"login":"EnricoMi","name":"Enrico Minack"},"body":"The `totalCount` property returns `0` count when unknown. It should return `None` in that case. Use `NotSet` to distinguish between un-determined (`NotSet`) and not known (`None`).","comments":[],"createdAt":"2024-09-05T08:29:21Z","number":3036,"state":"OPEN","title":"PaginationList.totalCount pretends `0` when not known","url":"https://github.com/PyGithub/PyGithub/issues/3036"},{"author":{"id":"MDQ6VXNlcjQ0NzAwMjY5","is_bot":false,"login":"EnricoMi","name":"Enrico Minack"},"body":"The current code says:\r\n\r\n        if not self.__totalCount:\r\n\r\nwhich, if `0` will be true, so a request is triggered to determine the total count, which is already known.\r\n\r\nThis should read\r\n\r\n        if self.__totalCount is not None:\r\n\r\nAdd a test to show current behaviour is inefficient and fix.","comments":[],"createdAt":"2024-09-04T19:08:14Z","number":3035,"state":"OPEN","title":"Accessing pagination.totalCount with value 0 triggers request","url":"https://github.com/PyGithub/PyGithub/issues/3035"},{"author":{"id":"MDQ6VXNlcjYyMjIzMg==","is_bot":false,"login":"ck3mp3r","name":"Christian Kemper 🍉"},"body":"The implementation for retrieving dismissal_apps is missing.\r\nFetching dismissal_users and dismissal_teams is present and accounted for.\r\nHaving this would be useful to complete an ansible module that has the ability to compare what is present in a branch protection to then decide if an update is required.\r\n\r\nNote: might be worth prioritising #2718 over this feature request...","comments":[{"id":"IC_kwDOADYVqs6K0kIN","author":{"login":"ck3mp3r"},"authorAssociation":"NONE","body":"It seems branch protection retrieval is also not implemented fully... I have just realised that the following parameters can be managed but not read...\r\n* users_bypass_pull_request_allowances\r\n* teams_bypass_pull_request_allowances\r\n* apps_bypass_pull_request_allowances","createdAt":"2024-09-04T13:22:26Z","includesCreatedEdit":true,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/3032#issuecomment-2329035277","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs6K1uZb","author":{"login":"ck3mp3r"},"authorAssociation":"NONE","body":"I am currently attempting to fix the issues and could use a little help re testing etc. as python is not my main language and I lack experience around tooling and some conventions, happy to incorporate any suggestions.\r\n\r\n #3034","createdAt":"2024-09-04T15:12:03Z","includesCreatedEdit":true,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/3032#issuecomment-2329339483","viewerDidAuthor":false}],"createdAt":"2024-09-03T21:31:56Z","number":3032,"state":"OPEN","title":"dismissal_apps retrieval missing in branch protection","url":"https://github.com/PyGithub/PyGithub/issues/3032"},{"author":{"id":"MDQ6VXNlcjE5ODM4Mjg1","is_bot":false,"login":"mdadams","name":"Michael Adams"},"body":"As far as I can tell, the API endpoints for GitHub Classroom are not currently supported by PyGithub.  By any chance, would it be possible to add support for these endpoints?  These endpoints are described here:\r\n\r\n  - <https://docs.github.com/en/rest/classroom?apiVersion=2022-11-28>\r\n\r\nGitHub Classroom is quite popular for teaching purposes.  So, being able to use PyGithub to interface with the API endpoints for GitHub Classroom would be a fabulous.","comments":[],"createdAt":"2024-08-24T00:25:04Z","number":3026,"state":"OPEN","title":"Add support for REST API endpoints for GitHub Classroom","url":"https://github.com/PyGithub/PyGithub/issues/3026"},{"author":{"id":"MDQ6VXNlcjg1OTIxNDQ=","is_bot":false,"login":"zhimin-z","name":"Zhmin Zhao"},"body":"I attempt to scrape issues and commits from a list of repositories. However, some repositories just throw the following exception: `Returned object contains no URL: 400`. What could I do?\r\n\r\nHere is my scraping script:\r\n```\r\nfrom datetime import datetime\r\nfrom github import Github\r\nfrom github import Auth\r\n\r\nimport pandas as pd\r\nimport time\r\nimport json\r\nimport os\r\n\r\npath_data = '../data'\r\npath_result = '../result'\r\npath_key = '../key'\r\npath_respository = f'{path_data}/repositories'\r\n\r\n# Load GitHub token from a JSON file\r\nwith open(f'{path_key}/.github.json') as f:\r\n    github_token = json.load(f)['login_or_token']\r\n    auth = Auth.Token(github_token)\r\n    g = Github(auth=auth)\r\n\r\n# File paths for the consolidated JSON files\r\npull_requests_file = f\"{path_data}/pull_requests.json\"\r\ncommits_file = f\"{path_data}/commits.json\"\r\nissues_file = f\"{path_data}/issues.json\"\r\n\r\n# Initialize empty files if they don't exist\r\nfor file in [pull_requests_file, commits_file, issues_file]:\r\n    if not os.path.exists(file):\r\n        with open(file, 'w') as f:\r\n            pass\r\n\r\ndef check_rate_limit():\r\n    rate_limit = g.get_rate_limit().core\r\n    remaining = rate_limit.remaining\r\n    reset_timestamp = rate_limit.reset.timestamp()\r\n\r\n    if remaining == 0:\r\n        reset_time = datetime.fromtimestamp(reset_timestamp)\r\n        sleep_time = (reset_time - datetime.now()).total_seconds() + 10  # Adding a small buffer\r\n        print(f\"Rate limit exceeded. Sleeping for {sleep_time} seconds.\")\r\n        time.sleep(sleep_time)\r\n\r\ndef process_repository(repo_name):\r\n    repo = g.get_repo(repo_name)\r\n    \r\n    # Check rate limit before processing\r\n    check_rate_limit()\r\n\r\n    # Process pull requests\r\n    pull_requests = []\r\n    for index, pr in enumerate(repo.get_pulls(state='all')):\r\n        pull_requests.append({\r\n            'repository': repo_name,\r\n            'index': index,\r\n            'message': pr.title,\r\n            'contributor_id': pr.user.login,\r\n            'creation_time': pr.created_at,\r\n            'labels': [label.name for label in pr.labels],\r\n            'state': pr.state\r\n        })\r\n        time.sleep(0.5)  # Sleep for 100ms to avoid rate limit\r\n    \r\n    # Append pull requests to file\r\n    if pull_requests:\r\n        pr_df = pd.DataFrame(pull_requests)\r\n        pr_df.to_json(pull_requests_file, orient='records', lines=True, mode='a')\r\n\r\n    # Check rate limit before processing next item\r\n    check_rate_limit()\r\n    \r\n    # Process commits\r\n    commits = []\r\n    for index, commit in enumerate(repo.get_commits()):\r\n        commits.append({\r\n            'repository': repo_name,\r\n            'index': index,\r\n            'message': commit.commit.message,\r\n            'contributor_id': commit.author.login if commit.author else 'Unknown',\r\n            'creation_time': commit.commit.author.date,\r\n        })\r\n        time.sleep(0.5)  # Sleep for 100ms to avoid rate limit\r\n    \r\n    # Append commits to file\r\n    if commits:\r\n        commit_df = pd.DataFrame(commits)\r\n        commit_df.to_json(commits_file, orient='records', lines=True, mode='a')\r\n\r\n    # Check rate limit before processing next item\r\n    check_rate_limit()\r\n\r\n    # Process issues\r\n    issues = []\r\n    for index, issue in enumerate(repo.get_issues(state='all')):\r\n        issues.append({\r\n            'repository': repo_name,\r\n            'index': index,\r\n            'message': issue.title,\r\n            'contributor_id': issue.user.login,\r\n            'creation_time': issue.created_at,\r\n            'labels': [label.name for label in issue.labels],\r\n            'state': issue.state\r\n        })\r\n        time.sleep(0.5)  # Sleep for 100ms to avoid rate limit\r\n    \r\n    # Append issues to file\r\n    if issues:\r\n        issues_df = pd.DataFrame(issues)\r\n        issues_df.to_json(issues_file, orient='records', lines=True, mode='a')\r\n\r\n# Process each repository\r\nfor repo in ['EleutherAI/lm-evaluation-harness', 'huggingface/optimum-benchmark']:\r\n    try:\r\n        process_repository(repo)\r\n        print(f\"Processed {repo} successfully.\")\r\n    except Exception as e:\r\n        print(f\"Error processing {repo}: {str(e)}\")\r\n\r\nprint(\"All repositories processed and data saved.\")\r\n```","comments":[],"createdAt":"2024-08-17T01:26:41Z","number":3021,"state":"OPEN","title":"Returned object contains no URL: 400","url":"https://github.com/PyGithub/PyGithub/issues/3021"},{"author":{"id":"MDQ6VXNlcjM3Nzk1ODY2","is_bot":false,"login":"doljae","name":"Seokjae Lee"},"body":" # Description\r\n\r\nIn some cases, the URL in the Repository and the URL in the Requester may not match, and this causes an AssertionError.\r\n\r\n# Example\r\n\r\nWhen we initially create a `Github` object, it seems to create a `Requester` object internally to continue using it.\r\n\r\nThe `Repository` object is based on the response from the GitHub API, **which can cause mismatches between the hostname of the `Requester` and the hostname of the `Repository` object URL.**\r\n\r\nFor example, suppose you have two different GitHub hostnames\r\n\r\n- `a.github.com` -> Origin server\r\n- `b.github.com` -> Replica server (hostname created for other purposes, such as load balancing, and responds the same as the original server)\r\n\r\nIn this case, if we create a `GitHub` object with `b.github.com` as the base url, the `Requestor`'s hostname will be `b.github.com`. However, the hostname of the `Repository` will be `a.github.com`, which will cause the assertions in the code below to fail.\r\n\r\n```python\r\ng = Github(base_url=\"https://b.github.com/api/v3\", auth=auth) # Requester.hostname: b.github.com\r\nrepo = g.get_repo(\"hello/world\") # Repository url: a.github.com\r\npr = repo.get_pull(816) # AssertionError!\r\n```\r\n\r\nhttps://github.com/PyGithub/PyGithub/blob/23e8756397e9935e6a3307826de29c04cf853e94/github/Repository.py#L3074\r\nhttps://github.com/PyGithub/PyGithub/blob/23e8756397e9935e6a3307826de29c04cf853e94/github/Requester.py#L925\r\n\r\n\r\nIt seems like it would be simple to just fix this, but I may not be understanding this correctly and would like to start an issue to see what the maintainers think.","comments":[],"createdAt":"2024-08-16T03:31:07Z","number":3019,"state":"OPEN","title":"Repository's URL and Requester's URL might not match","url":"https://github.com/PyGithub/PyGithub/issues/3019"},{"author":{"id":"MDQ6VXNlcjU1MzM4OTQz","is_bot":false,"login":"Xiaoven","name":"Xiaoven"},"body":"## Description\r\nI'm encountering an issue with the `totalCount` property in the `PaginatedList` class when using PyGithub to search code. **The behavior of `totalCount` is inconsistent depending on whether it is accessed before or after iterating over the `PaginatedList` object.** This design is confusing and leads to unexpected results.\r\n\r\nI used PyGithub to search for code and retrieve the `total_count` value from the response.\r\n\r\nLet's assume the query is `hello world\" which returns more than 1000 results.\r\n\r\nAfter reading the official documentation for the `PaginatedList `class:\r\n> If you want to know the total number of items in the list::\r\n>    print(user.get_repos().totalCount)\r\n\r\nI wrote my code as below:\r\n```py\r\nresults = client.search_code(query)\r\ntotalCount = results.totalCount\r\nfor result in results:\r\n    do_something(result)\r\n```\r\n\r\n### Observed Behavior\r\nI found that the totalCount value is capped at 1,000, instead of reflecting the `total_count` value from the API response.\r\n\r\nThrough debugging, I discovered that if `results.totalCount` is accessed **before** iterating over the `PaginatedList`, it triggers the `PaginatedList::totalCount` property, which initializes `totalCount` by setting `per_page` to 1 and calculates `totalCount` based on **the page number**. \r\n```py\r\n    @property\r\n    def totalCount(self) -> int:\r\n        if not self.__totalCount:\r\n            params = {} if self.__nextParams is None else self.__nextParams.copy()\r\n            # set per_page = 1 so the totalCount is just the number of pages\r\n            params.update({\"per_page\": 1})\r\n\r\n            headers, data = self.__requester.requestJsonAndCheck(\r\n                \"GET\", self.__firstUrl, parameters=params, headers=self.__headers\r\n            )\r\n\r\n            if \"link\" not in headers:  \r\n                # Under what conditions does this branch execute?\r\n                # Likely when total_count is less than or equal to per_page (1 now), \r\n                # meaning the first page is also the last page.\r\n                if data and \"total_count\" in data:\r\n                    self.__totalCount = data[\"total_count\"]\r\n                elif data:\r\n                    if isinstance(data, dict):\r\n                        data = data[self.__list_item]\r\n                    self.__totalCount = len(data)\r\n                else:\r\n                    self.__totalCount = 0\r\n            else:\r\n                links = self.__parseLinkHeader(headers)\r\n                lastUrl = links.get(\"last\")\r\n                if lastUrl:\r\n                    self.__totalCount = int(parse_qs(lastUrl)[\"page\"][0])\r\n                else:\r\n                    self.__totalCount = 0\r\n        return self.__totalCount  # type: ignore\r\n```\r\n\r\nThe value is correct when the `total_count` is smaller than 1000. However, when the `total_count` > 1000.\r\n\r\nTo retrieve the correct `total_count` value from the response, I must iterate over the results first, which invokes the `_getPage` method and updates totalCount with:\r\n```py\r\nself.__totalCount = data.get(\"total_count\")\r\n```\r\n\r\n### Expected Behavior\r\n`totalCount` should accurately reflect the `total_count` value from the response regardless of when it is accessed.\r\n\r\n## Suggestion\r\nI'm not sure if this is a bug or an intentional design choice (though it’s confusing, at least for me). I hope you can either fix it or update the documentation to provide a detailed explanation of this behavior. Clarifying this will help users understand the difference and ensure they retrieve the expected value of `totalCount`.","comments":[{"id":"IC_kwDOADYVqs6LFO31","author":{"login":"EnricoMi"},"authorAssociation":"COLLABORATOR","body":"The PyGitHub client is a mere proxy in this matter. Those numbers come from the GitHub REST API. Their support should give you robust answers.\r\n\r\nMy feeling is that search firstly provides an estimate of total count if the number of results is high. Secondly, iterating over the results is probably capped at some number of results.","createdAt":"2024-09-06T07:16:11Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/3018#issuecomment-2333404661","viewerDidAuthor":false}],"createdAt":"2024-08-15T01:26:41Z","number":3018,"state":"OPEN","title":"Inconsistent `totalCount` in `PaginatedList` Before and After Iteration","url":"https://github.com/PyGithub/PyGithub/issues/3018"},{"author":{"id":"MDQ6VXNlcjkyODczNjE=","is_bot":false,"login":"michaelhankin","name":"Michael Hankin"},"body":"Hey folks, I'm working on a project where it would be useful to have this endpoint exposed by PyGithub.\r\n\r\nSee https://docs.github.com/en/rest/repos/repos?apiVersion=2022-11-28#list-codeowners-errors.","comments":[],"createdAt":"2024-08-08T13:41:12Z","number":3015,"state":"OPEN","title":"Expose the /repos/{owner}/{repo}/codeowners/errors endpoint on repositories","url":"https://github.com/PyGithub/PyGithub/issues/3015"},{"author":{"id":"MDQ6VXNlcjUyNTE0ODc=","is_bot":false,"login":"huwcbjones","name":"Huw Jones"},"body":"I've got a script that's creating a ref (branch) and replacing it if it already exists.\r\n\r\n```py\r\nbranch_ref = \"heads/my-ref\"\r\nwith suppress(GithubException):\r\n   repo.get_git_ref(branch_ref).delete()\r\nref =repo.create_git_ref(branch_ref, commit.sha)\r\n``` \r\n\r\nBy specifying the ref without the `refs/` prefix, I get the following:\r\n```\r\nDEBUG:urllib3.connectionpool:https://api.github.com:443 \"GET /repos/$org/$repo/git/refs/heads/my-ref HTTP/1.1\" 200 None\r\nDEBUG:urllib3.connectionpool:https://api.github.com:443 \"DELETE /repos/$org/$repo/git/refs/heads/my-ref HTTP/1.1\" 204 0\r\nDEBUG:urllib3.connectionpool:https://api.github.com:443 \"POST /repos/$org/$repo/git/refs HTTP/1.1\" 422 147\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n    ref = repo.create_git_ref(branch_ref, commit.sha)\r\n          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"/usr/lib/python3.11/site-packages/github/Repository.py\", line 1221, in create_git_ref\r\n    headers, data = self._requester.requestJsonAndCheck(\"POST\", f\"{self.url}/git/refs\", input=post_parameters)\r\n                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"/usr/lib/python3.11/site-packages/github/Requester.py\", line 548, in requestJsonAndCheck\r\n    return self.__check(*self.requestJson(verb, url, parameters, headers, input, self.__customConnection(url)))\r\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"/usr/lib/python3.11/site-packages/github/Requester.py\", line 609, in __check\r\n    raise self.createException(status, responseHeaders, data)\r\ngithub.GithubException.GithubException: 422 {\"message\": \"Reference name must start with 'refs/'.\", \"documentation_url\": \"https://docs.github.com/rest/git/refs#create-a-reference\", \"status\": \"422\"}\r\n```\r\n\r\nIf I specifying with the `refs/` prefix, I get the following:\r\n```py\r\nbranch_ref = \"refs/heads/my-ref\"\r\nwith suppress(GithubException):\r\n   repo.get_git_ref(branch_ref).delete()\r\nref =repo.create_git_ref(branch_ref, commit.sha)\r\n``` \r\n\r\n```\r\nDEBUG:urllib3.connectionpool:https://api.github.com:443 \"GET /repos/$org/$repo/git/refs/refs/heads/my-ref HTTP/1.1\" 404 None\r\nDEBUG:urllib3.connectionpool:https://api.github.com:443 \"POST /repos/$org/$repo/git/refs HTTP/1.1\" 201 493\r\n```\r\n\r\nNote the double `refs/refs` in the GET request to check if the ref already exists.\r\nI'm going to bodge around this, but it was wholy unexpected!","comments":[{"id":"IC_kwDOADYVqs6HgXvZ","author":{"login":"EnricoMi"},"authorAssociation":"COLLABORATOR","body":"I agree the double `refs` looks strange but I think that is correct. The first `refs` is part of the API, the second `refs` is part of the Git reference. This corresponds with Github and Git documentation.\r\n\r\nIt should read `branch_ref = \"refs/heads/my-ref\"`.\r\n\r\nhttps://git-scm.com/book/en/v2/Git-Internals-Git-References\r\nhttps://docs.github.com/en/rest/git/refs?apiVersion=2022-11-28#create-a-reference","createdAt":"2024-08-07T12:56:33Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/3014#issuecomment-2273410009","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs6HgneT","author":{"login":"huwcbjones"},"authorAssociation":"CONTRIBUTOR","body":"What I was expecting was to be able to pass the same ref to `create_ref` and then fetch it back with `get_ref`, but because `get_ref` appends a prefix of `refs/`, you cannot round trip.\r\nAnd no, I do not believe the `refs/refs` is not part of the API, see below.\r\n```\r\nhuw: ~/D/PyGithub $ gh api 'repos/PyGithub/PyGithub/git/refs/refs/heads/main' | jq .\r\ngh: Not Found (HTTP 404)\r\n{\r\n  \"message\": \"Not Found\",\r\n  \"documentation_url\": \"https://docs.github.com/rest/git/refs#get-all-references-in-a-namespace\",\r\n  \"status\": \"404\"\r\n}\r\nhuw: ~/D/PyGithub $ gh api 'repos/PyGithub/PyGithub/git/refs/heads/main' | jq .\r\n{\r\n  \"ref\": \"refs/heads/main\",\r\n  \"node_id\": \"MDM6UmVmMzU0NDQ5MDpyZWZzL2hlYWRzL21haW4=\",\r\n  \"url\": \"https://api.github.com/repos/PyGithub/PyGithub/git/refs/heads/main\",\r\n  \"object\": {\r\n    \"sha\": \"23e8756397e9935e6a3307826de29c04cf853e94\",\r\n    \"type\": \"commit\",\r\n    \"url\": \"https://api.github.com/repos/PyGithub/PyGithub/git/commits/23e8756397e9935e6a3307826de29c04cf853e94\"\r\n  }\r\n}\r\n```","createdAt":"2024-08-07T13:27:06Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/3014#issuecomment-2273474451","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs6HhjOa","author":{"login":"EnricoMi"},"authorAssociation":"COLLABORATOR","body":"As pointed out in #2992, it looks like `get_git_ref` false uses `git/refs` endpoint, where it should be `git/ref`, which requires the ref to be `refs/heads/main`.","createdAt":"2024-08-07T15:16:23Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"HOORAY","users":{"totalCount":1}}],"url":"https://github.com/PyGithub/PyGithub/issues/3014#issuecomment-2273719194","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs6HiIaa","author":{"login":"huwcbjones"},"authorAssociation":"CONTRIBUTOR","body":"Oh that very much looks like I've come across the same bug!\r\nHappy to close this off when that PR gets merged 😊 ","createdAt":"2024-08-07T16:33:52Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/3014#issuecomment-2273871514","viewerDidAuthor":false}],"createdAt":"2024-08-07T10:45:59Z","number":3014,"state":"OPEN","title":"Repo.get_git_ref/create_git_ref inconsistent prefix","url":"https://github.com/PyGithub/PyGithub/issues/3014"},{"author":{"id":"MDQ6VXNlcjEzMTg1Ng==","is_bot":false,"login":"raboof","name":"Arnout Engelen"},"body":"When the part of the GitHub API you'd like to access is not yet supported by PyGithub, it would be nice to call those URI's 'directly' while still leveraging PyGithub's authorization etc infrastructure, perhaps even pagination. Of course this would just return the response as raw bytes or perhaps a `dict`.\r\n\r\nIs there anything like that in PyGithub right now that I missed, or if not, would this be acceptable as a contribution?","comments":[{"id":"IC_kwDOADYVqs6HU6-w","author":{"login":"EnricoMi"},"authorAssociation":"COLLABORATOR","body":"You could check if `github.Requester` works for you.","createdAt":"2024-08-06T05:23:18Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/3012#issuecomment-2270408624","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs6jNrSL","author":{"login":"IAmHughes"},"authorAssociation":"NONE","body":"> You could check if `github.Requester` works for you.\n\nCan you provide an example of this? I can't find any working examples","createdAt":"2025-03-19T22:05:26Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/3012#issuecomment-2738271371","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs6jTfFn","author":{"login":"raboof"},"authorAssociation":"NONE","body":"I've used\n\n```\nimport github as pygithub\n\nGH = pygithub.Github(GH_TOKEN)\nstatus, headers, body = GH.requester.requestJson(\"GET\", f'/repos/{repo.full_name}/private-vulnerability-reporting')\n```\n\nto find out whether a repo has private vulnerability reporting enabled","createdAt":"2025-03-20T09:56:32Z","includesCreatedEdit":true,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"EYES","users":{"totalCount":1}}],"url":"https://github.com/PyGithub/PyGithub/issues/3012#issuecomment-2739794279","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs6jVkSW","author":{"login":"IAmHughes"},"authorAssociation":"NONE","body":"> I've used\n> \n> ```\n> import github as pygithub\n> \n> GH = pygithub.Github(GH_TOKEN)\n> status, headers, body = GH.requester.requestJson(\"GET\", f'/repos/{repo.full_name}/private-vulnerability-reporting')\n> ```\n> \n> to find out whether a repo has private vulnerability reporting enabled\n\nIf you're willing, I'd love to see examples like this in the examples in docs. Thanks for sharing! I got my code working.\n\nExample calling the [suspend a user](https://docs.github.com/en/enterprise-server@3.16/rest/enterprise-admin/users?apiVersion=2022-11-28#suspend-a-user) endpoint for GitHub Enterprise Server:\n\n```python\ngh_client = Github(base_url=f'{ghes_url}', auth=Auth.Token(token))\nresponse = gh_client.requester.requestJsonAndCheck(\n    \"PUT\",\n    f'/users/{username}/suspended',\n    headers=headers\n)\n```\n\nWhere `headers` is defined in another area to ensure the new global IDs are used (as I'm doing some GraphQL calls as well).","createdAt":"2025-03-20T12:45:18Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/3012#issuecomment-2740339862","viewerDidAuthor":false}],"createdAt":"2024-08-02T15:11:37Z","number":3012,"state":"OPEN","title":"'raw' API calls","url":"https://github.com/PyGithub/PyGithub/issues/3012"},{"author":{"id":"MDQ6VXNlcjg0MjA5NTQ0","is_bot":false,"login":"zhighleggett","name":""},"body":"If requesting a branch that does not exist, a generic `GithubException` is raised, however the proper exception to be raised is `UnknownObjectException`. Per the docstring:\r\n\r\n```\r\nclass UnknownObjectException(GithubException):\r\n    \"\"\"\r\n    Exception raised when a non-existing object is requested (when Github API replies with a 404 HTML status)\r\n    \"\"\"\r\n```\r\n\r\nThe reason this happens is because the code that generates the exception based on the HTTP error code is not only looking at the status, but is also looking at the message it encapsulates. It only builds the `UnknownObjectException` if the message is \"not found\" but the 404 HTTP response when requesting an unknown branch has the message \"Branch not found\".\r\n```\r\n      elif status == 404 and message == \"not found\":\r\n            exc = GithubException.UnknownObjectException\r\n```\r\n\r\nIs there any reason that we are checking the contents of the message and not just the HTTP status code? If there is, would it at least be better to chang `message == \"not found\"` to `\"not found\" in message`?\r\n\r\nMinimal example:\r\n```\r\n>>> import github\r\n>>> gh = github.Github(\"ACCESS_TOKEN_REDACTED\")\r\n>>> org = gh.get_organization(\"ORG_NAME_REDACTED\")\r\n>>> repo = org.get_repo(\"REPO_NAME_REDACTED\")\r\n>>> branch = repo.get_branch(\"foo\")\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"C:\\Users\\zhighleggett\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\github\\Repository.py\", line 2018, in get_branch\r\n    headers, data = self._requester.requestJsonAndCheck(\"GET\", f\"{self.url}/branches/{branch}\")\r\n                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"C:\\Users\\zhighleggett\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\github\\Requester.py\", line 548, in requestJsonAndCheck\r\n    return self.__check(*self.requestJson(verb, url, parameters, headers, input, self.__customConnection(url)))\r\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"C:\\Users\\zhighleggett\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\github\\Requester.py\", line 609, in __check\r\n    raise self.createException(status, responseHeaders, data)\r\ngithub.GithubException.GithubException: 404 {\"message\": \"Branch not found\", \"documentation_url\": \"https://docs.github.com/rest/branches/branches#get-a-branch\", \"status\": \"404\"}\r\n```","comments":[{"id":"IC_kwDOADYVqs6GkiY_","author":{"login":"EnricoMi"},"authorAssociation":"COLLABORATOR","body":"The likely reason for this is the fact that Github likes to put different errors behind the same HTTP status code.\r\n\r\nI agree, the message checking logic could be improved as suggested.","createdAt":"2024-07-30T08:03:41Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/3011#issuecomment-2257724991","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs6GxvrU","author":{"login":"zhighleggett"},"authorAssociation":"NONE","body":"Is there any reason to check the message at all? If the `UnknownObjectException` docstring is to be believed, any 404 error message should result in that exception.","createdAt":"2024-07-31T18:49:01Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/3011#issuecomment-2261187284","viewerDidAuthor":false}],"createdAt":"2024-07-30T00:24:44Z","number":3011,"state":"OPEN","title":"Wrong exception type raised when requesting non-existent branch.","url":"https://github.com/PyGithub/PyGithub/issues/3011"},{"author":{"id":"MDQ6VXNlcjg0MjA5NTQ0","is_bot":false,"login":"zhighleggett","name":""},"body":"Hello,\r\n\r\nI'm trying to programatically get the name of the master branch of my repo. To do this I'm trying to access the `master_branch` property in `Repository` but even though the documentation says it should return a string, I get back None regardless of the repo I've checked.\r\n\r\nThe repos are all private work-related repos so I can't share the exact code here but basically what I'm doing is:\r\n\r\n```\r\n>>> import github\r\n>>> gh = github.Github(\"ACCESS_TOKEN_REDACTED\")\r\n>>> org = gh.get_organization(\"ORG_NAME_REDACTED\")\r\n>>> repo = org.get_repo(\"REPO_NAME_REDACTED\")\r\n>>> branch = repo.master_branch\r\n>>> branch is None\r\nTrue\r\n```\r\n\r\nDoes this suggest I've configured my repo incorrectly? Or am I misunderstanding how to properly use the library?\r\n\r\nThanks in advance. Please let me know what other information might be helpful for troubleshooting.","comments":[{"id":"IC_kwDOADYVqs6OaHlp","author":{"login":"kkom"},"authorAssociation":"NONE","body":"I get the same kind of error when trying to access any property! Applies to `delete_branch_on_merge`, `allow_merge_commit`, etc. They are all `None`.\r\n\r\nIt appears that the `_completeIfNotSet` method doesn't work correctly?","createdAt":"2024-10-02T17:22:37Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/3007#issuecomment-2389211497","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs6OaK_3","author":{"login":"zhighleggett"},"authorAssociation":"NONE","body":"@kkom I never did figure out why `master_branch` wasn't set and I don't know if it'll help with the other attributes you're looking for but `repo.default_branch` ended up working to get the master branch name.","createdAt":"2024-10-02T17:28:20Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":1}},{"content":"HEART","users":{"totalCount":1}}],"url":"https://github.com/PyGithub/PyGithub/issues/3007#issuecomment-2389225463","viewerDidAuthor":false}],"createdAt":"2024-07-26T22:56:22Z","number":3007,"state":"OPEN","title":"Why is my repo object's master_branch property None?","url":"https://github.com/PyGithub/PyGithub/issues/3007"},{"author":{"id":"MDQ6VXNlcjI5NzM3MjI=","is_bot":false,"login":"arash77","name":"Arash Kadkhodaei"},"body":"To call some GraphQL APIs for comments it is necessary to have the node_id.","comments":[],"createdAt":"2024-07-16T11:24:29Z","number":3003,"state":"OPEN","title":"node_id in IssueComment class","url":"https://github.com/PyGithub/PyGithub/issues/3003"},{"author":{"id":"MDQ6VXNlcjgxNDE3NzUw","is_bot":false,"login":"RSAlderman","name":""},"body":"MEND.io code scanning tool has identified that the latest available [PyGithub 2.3.0](https://pypi.org/project/PyGithub/2.3.0/) (released 2024-03-24) has a dependency on a vulnerable urllib3 package < v2.2.2 ([CVE-2024-37891](https://github.com/urllib3/urllib3/security/advisories/GHSA-34jh-p97f-mpxf))\r\n\r\n> PyGithub-2.3.0-py3-none-any.whl (Root Library)\r\n> ❌ urllib3-2.0.7-py3-none-any.whl (Vulnerable Library)\r\n\r\nCan you please indicate when a remediated version is planned to be released?","comments":[{"id":"IC_kwDOADYVqs6D9YlA","author":{"login":"EnricoMi"},"authorAssociation":"COLLABORATOR","body":"The PyGithub package depends on `urllib3>=1.26.0`, so urllib3 v2.2.2 should be picked up.","createdAt":"2024-07-08T12:19:23Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/2999#issuecomment-2213906752","viewerDidAuthor":false}],"createdAt":"2024-07-08T11:12:50Z","number":2999,"state":"OPEN","title":"Remediation for CVE-2024-37891","url":"https://github.com/PyGithub/PyGithub/issues/2999"},{"author":{"id":"U_kgDOCl7YiA","is_bot":false,"login":"Mahdiyar-Ghassemi","name":"Mahdiyar Ghassemi"},"body":"im trying to runserver in django o see one of my apps namely \"page\" resulted in witnessing module not found \r\n\r\n```\r\nFile \"C:\\Users\\ASUS\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\threading.py\", line 1073, in _bootstrap_inner\r\n    self.run()\r\n  File \"C:\\Users\\ASUS\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\threading.py\", line 1010, in run\r\n    self._target(*self._args, **self._kwargs)\r\n  File \"C:\\Users\\ASUS\\Desktop\\Django\\env\\Lib\\site-packages\\django\\utils\\autoreload.py\", line 64, in wrapper\r\n    fn(*args, **kwargs)\r\n  File \"C:\\Users\\ASUS\\Desktop\\Django\\env\\Lib\\site-packages\\django\\core\\management\\commands\\runserver.py\", line 125, in inner_run\r\n    autoreload.raise_last_exception()\r\n  File \"C:\\Users\\ASUS\\Desktop\\Django\\env\\Lib\\site-packages\\django\\utils\\autoreload.py\", line 87, in raise_last_exception\r\n    raise _exception[1]\r\n  File \"C:\\Users\\ASUS\\Desktop\\Django\\env\\Lib\\site-packages\\django\\core\\management\\__init__.py\", line 394, in execute\r\n    autoreload.check_errors(django.setup)()\r\n  File \"C:\\Users\\ASUS\\Desktop\\Django\\env\\Lib\\site-packages\\django\\utils\\autoreload.py\", line 64, in wrapper\r\n    fn(*args, **kwargs)\r\n  File \"C:\\Users\\ASUS\\Desktop\\Django\\env\\Lib\\site-packages\\django\\__init__.py\", line 24, in setup\r\n    apps.populate(settings.INSTALLED_APPS)\r\n  File \"C:\\Users\\ASUS\\Desktop\\Django\\env\\Lib\\site-packages\\django\\apps\\registry.py\", line 91, in populate\r\n    app_config = AppConfig.create(entry)\r\n                 ^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"C:\\Users\\ASUS\\Desktop\\Django\\env\\Lib\\site-packages\\django\\apps\\config.py\", line 193, in create\r\n    import_module(entry)\r\n  File \"C:\\Users\\ASUS\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\importlib\\__init__.py\", line 90, in import_module\r\n    return _bootstrap._gcd_import(name[level:], package, level)\r\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"<frozen importlib._bootstrap>\", line 1387, in _gcd_import\r\n  File \"<frozen importlib._bootstrap>\", line 1360, in _find_and_load\r\n  File \"<frozen importlib._bootstrap>\", line 1324, in _find_and_load_unlocked\r\nModuleNotFoundError: No module named ' page'\r\n```\r\n","comments":[{"id":"IC_kwDOADYVqs6DXiLX","author":{"login":"EnricoMi"},"authorAssociation":"COLLABORATOR","body":"Can you share the minimal Python code that produces this error?","createdAt":"2024-07-02T18:03:16Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/2998#issuecomment-2203984599","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs6DqFQ5","author":{"login":"Mahdiyar-Ghassemi"},"authorAssociation":"NONE","body":"> Can you share the minimal Python code that produces this error?\r\n\r\nurls.py : \r\n```\r\nfrom django.contrib import admin\r\nfrom django.urls import path, include\r\n\r\nurlpatterns = [\r\n    path('admin/', admin.site.urls),\r\n    path('', include('page.urls'))\r\n]\r\n```\r\n","createdAt":"2024-07-04T12:23:54Z","includesCreatedEdit":true,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/2998#issuecomment-2208846905","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs6Drs1h","author":{"login":"EnricoMi"},"authorAssociation":"COLLABORATOR","body":"How is PyGithub involved in this code?","createdAt":"2024-07-04T15:51:46Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/2998#issuecomment-2209271137","viewerDidAuthor":false}],"createdAt":"2024-07-01T13:54:59Z","number":2998,"state":"OPEN","title":"Module not found on DJANGO ","url":"https://github.com/PyGithub/PyGithub/issues/2998"},{"author":{"id":"MDQ6VXNlcjY5OTk5MTMw","is_bot":false,"login":"richonguzman","name":"Ricardo Guzman (Richonguzman)"},"body":"hi,\r\n\r\ni suceded uploading folders and files of updated code to my repo , which is great\r\n\r\nbut every time a file is added a warning/notification over mail/phone gets received as run canceled\r\n\r\nis this because it was uploaded to MAIN and not to another branch?","comments":[],"createdAt":"2024-06-26T16:39:56Z","number":2996,"state":"OPEN","title":"Constant github run canceled warnings/notification but working","url":"https://github.com/PyGithub/PyGithub/issues/2996"},{"author":{"id":"MDQ6VXNlcjkzNDU3MTE=","is_bot":false,"login":"richlysakowski","name":"Rich Lysakowski"},"body":"We need a conda installer package to use in production applications.  The links to the installer on conda-forge are broken. ","comments":[],"createdAt":"2024-06-13T21:13:43Z","number":2990,"state":"OPEN","title":"conda package missing from conda-forge - Links are broken - package is missing for production applications. ","url":"https://github.com/PyGithub/PyGithub/issues/2990"},{"author":{"id":"MDQ6VXNlcjE3OTE3MjU0","is_bot":false,"login":"anastasrado","name":"Anastas Radosavljevic"},"body":"```\r\nbranch.edit_protection(\r\n                    enforce_admins=desired_protection_settings[\"enforce_admins\"],\r\n                    required_linear_history=desired_protection_settings[\"required_linear_history\"],\r\n                    # required_conversation_resolution=desired_protection_settings[\"required_conversation_resolution\"],  # Not supported in this version\r\n                    lock_branch=desired_protection_settings[\"lock_branch\"],\r\n                    allow_fork_syncing=desired_protection_settings[\"allow_fork_syncing\"],\r\n                    users_bypass_pull_request_allowances=desired_protection_settings[\"users_bypass_pull_request_allowances\"],\r\n                    teams_bypass_pull_request_allowances=desired_protection_settings[\"teams_bypass_pull_request_allowances\"],\r\n                    apps_bypass_pull_request_allowances=desired_protection_settings[\"apps_bypass_pull_request_allowances\"],\r\n                    block_creations=desired_protection_settings[\"block_creations\"],\r\n                    require_last_push_approval=desired_protection_settings[\"require_last_push_approval\"]\r\n                )\r\n\r\n```\r\n\r\nI am having issues with parameters in edit_protection. I started writing a script that needs to update some protection parameters but it seems like I'm constantly getting errors that some fields that should be allowed(checked the documentation for edit_protection) like required_conversation_resolution, required_linear_history, allow_deletions.\r\n\r\nIt seems like there is a problem with edit_protection, please correct me if I'm wrong.","comments":[],"createdAt":"2024-06-05T11:16:33Z","number":2984,"state":"OPEN","title":"edit_protection() got an unexpected keyword argument","url":"https://github.com/PyGithub/PyGithub/issues/2984"},{"author":{"id":"MDQ6VXNlcjg0NDM4Nzk3","is_bot":false,"login":"stas-linearb","name":"Stas Onichak "},"body":"call get_repo function:\r\n\r\n```\r\nauth = Auth.Token('some-token')\r\nbase_url = 'https://my.github.biz'\r\ngithub_client = Github(base_url=base_url, auth=auth)\r\nrepo = github_client.get_repo('some-repo-name')\r\n```\r\n\r\nWe receive the following error:\r\n\r\n```\r\n    repo = github_client.get_repo(repo_name)\r\n  File \"/app/lib/python3.8/site-packages/github/MainClass.py\", line 434, in get_repo\r\n    return github.Repository.Repository(self.__requester, headers, data, completed=True)\r\n  File \"/app/lib/python3.8/site-packages/github/GithubObject.py\", line 402, in __init__\r\n    super().__init__(requester, headers, attributes, completed)\r\n  File \"/app/lib/python3.8/site-packages/github/GithubObject.py\", line 187, in __init__\r\n    self._storeAndUseAttributes(headers, attributes)\r\n  File \"/app/lib/python3.8/site-packages/github/GithubObject.py\", line 199, in _storeAndUseAttributes\r\n    self._useAttributes(attributes)\r\n  File \"/app/lib/python3.8/site-packages/github/Repository.py\", line 4185, in _useAttributes\r\n    if \"allow_auto_merge\" in attributes:  # pragma no branch\r\nTypeError: argument of type 'NoneType' is not iterable\r\n```\r\n\r\n**The package version: 2.3.0**","comments":[{"id":"IC_kwDOADYVqs5_pL5s","author":{"login":"EnricoMi"},"authorAssociation":"COLLABORATOR","body":"Does your code work for you with 2.2.0?","createdAt":"2024-05-31T08:36:08Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/2980#issuecomment-2141503084","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs5_pSn_","author":{"login":"EnricoMi"},"authorAssociation":"COLLABORATOR","body":"Looks like Github returns no data for the repository, and no error as well. Maybe you get more insights running this before your code:\r\n```\r\nfrom github import enable_console_debug_logging\r\nenable_console_debug_logging()\r\n```","createdAt":"2024-05-31T08:52:37Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/2980#issuecomment-2141530623","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs6Bi1Fg","author":{"login":"stas-linearb"},"authorAssociation":"NONE","body":"> Does your code work for you with 2.2.0?\r\n\r\nI didn't try, will do.","createdAt":"2024-06-17T13:24:21Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/2980#issuecomment-2173391200","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs6BspjS","author":{"login":"stas-linearb"},"authorAssociation":"NONE","body":"Version 2.2.0 has the same error.\r\n\r\nGood news, I have more details about the problem.\r\nIt happens when we connect to GitHub Enterprise Server(in my case version 3.10.9) and the service is in some kind of maintenance mode or even \"down.\" Instead of an API response in JSON format, the server returns HTML.\r\n\r\nThis case is not handled in the PyGithub package, and it just throws the error mentioned above.  ","createdAt":"2024-06-18T12:19:35Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":1}}],"url":"https://github.com/PyGithub/PyGithub/issues/2980#issuecomment-2175965394","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs6C0Dtq","author":{"login":"dabarreiroc"},"authorAssociation":"NONE","body":"@stas-linearb Was able to reproduce the same issue with GitHub Enterprise Server 3.10.11, server is not down but I guess it must be in some sort of maintenance mode.\r\nI was able to overcome this issue by following the proposed solution in this StackOverflow post [Github Enterprise with custom hostname: add /api/v3 to Custom URL](https://stackoverflow.com/a/57025445/14788450)","createdAt":"2024-06-27T13:23:25Z","includesCreatedEdit":true,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/2980#issuecomment-2194684778","viewerDidAuthor":false}],"createdAt":"2024-05-26T12:53:26Z","number":2980,"state":"OPEN","title":"get_repo -> argument of type 'NoneType' is not iterable","url":"https://github.com/PyGithub/PyGithub/issues/2980"},{"author":{"id":"MDQ6VXNlcjEwODA2MTc=","is_bot":false,"login":"jblorenzo","name":"JB Lorenzo"},"body":"```\r\nfrom github import Github\r\n\r\nfrom github import Auth\r\nauth = Auth.Token(\"your token\")\r\n\r\ng = Github(auth=auth)\r\n\r\nrepo_path = \"arachnys/cabot\"\r\nrepo = g.get_repo(repo_path)\r\n\r\nissue = repo.get_issue(624)\r\ntimeline = issue.get_timeline()\r\nprint(timeline.totalCount)\r\n```\r\n\r\nThis prints\r\n\r\n`2`\r\n\r\nBut if you go to https://api.github.com/repos/arachnys/cabot/issues/624/timeline\r\n\r\nThere's 3 events. The one with \"cross-referenced\" is not returned.","comments":[{"id":"IC_kwDOADYVqs6CjCDI","author":{"login":"adrianabedon"},"authorAssociation":"NONE","body":"This may be related to https://github.com/orgs/community/discussions/58534.","createdAt":"2024-06-25T23:53:01Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":2}}],"url":"https://github.com/PyGithub/PyGithub/issues/2978#issuecomment-2190221512","viewerDidAuthor":false}],"createdAt":"2024-05-23T15:15:54Z","number":2978,"state":"OPEN","title":"Cross-referenced events are not included in get_timeline()","url":"https://github.com/PyGithub/PyGithub/issues/2978"},{"author":{"id":"MDQ6VXNlcjEwODE4NjUw","is_bot":false,"login":"miha42-github","name":"Michael Hay"},"body":"## Problem Introduction\r\nWhen trying to upload a json stringified dict to a repository resulting content in the repository is garbled.  \r\n\r\n## Example calling code with explanation\r\nAs per `Repository.py` inputs can either be bytes or a string that is ready to be encoded and therefore transmitted to a repository.\r\n```python\r\n        content_to_transmit = json.dumps(obj)\r\n        try:\r\n            repo = self.github_instance.get_repo(f\"{self.org_name}/{self.repo_name}\")\r\n            file_path = f\"{container_name}/{self.object_files[container_name]}\"\r\n            # file_contents = repo.get_contents(file_path, ref=ref, sha=sha)\r\n            write_response = repo.update_file(\r\n                file_path, \r\n                f\"Update object [{self.object_files[container_name]}]\", \r\n                content=content_to_transmit,\r\n                sha=sha, \r\n                branch=ref\r\n            )\r\n            return [\r\n                True, \r\n                {\r\n                    \"status_msg\": f\"wrote object [{self.object_files[container_name]}] to container [{container_name}]\",\r\n                    \"status_code\": 200 \r\n                },\r\n                write_response\r\n            ]\r\n        except Exception as e:\r\n            print(e)\r\n            return [\r\n                False, \r\n                {\r\n                    \"status_code\":f\"unable to write object [{self.object_files[container_name]}] to container [{container_name}] due to [{str(e)}]\",\r\n                    \"status_msg\": 503\r\n                }, \r\n                str(e)\r\n            ]\r\n```\r\nWhen this is called with just the string this error is returned `'bytes' object has no attribute 'encode'` which caused me to explore `github.Repository.update_file`.\r\n\r\n## Problem resolution\r\nAs I inspected the file I found that the `if` block on line `2495` was improperly indented.\r\n\r\n### Version in main branch\r\n```python\r\nif not isinstance(content, bytes):\r\n            content = content.encode(\"utf-8\")\r\ncontent = b64encode(content).decode(\"utf-8\")\r\n```\r\n\r\nAs I looked at the code I realized that even if bytes or string was supplied the output would not be correct; therefore, I indented the `if` block and tried the call again.\r\n\r\n### Verified fixed version\r\n ```python\r\nif not isinstance(content, bytes):\r\n            content = content.encode(\"utf-8\")\r\n            content = b64encode(content).decode(\"utf-8\")\r\n```\r\n\r\nWith that changed I tried the call again and was able to find the content in the repository to be correctly received, stored as json, and viewable in the repository.  I've provided the original file, the fixed file and a patch file for review.\r\n\r\n[PyGithub.zip](https://github.com/PyGithub/PyGithub/files/15365347/PyGithub.zip)","comments":[{"id":"IC_kwDOADYVqs5_pnIA","author":{"login":"EnricoMi"},"authorAssociation":"COLLABORATOR","body":"Given `content` is a string, it has to be converted into bytes (UTF8 encoded) and then base64 encoded (UTF8 string).\r\nGiven `content` is bytes, it only has to be base64 encoded (UTF8 string).\r\n\r\nThe error `'bytes' object has no attribute 'encode'` sounds like it entered the `if` clause though `content` were `bytes`.\r\n\r\nCan you please provide the full error message and the type of `content`?\r\n\r\nThere is a test case `testUpdateFile` in `tests/Repository.py` that tests with a string.","createdAt":"2024-05-31T09:36:02Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/2972#issuecomment-2141614592","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs5_svup","author":{"login":"miha42-github"},"authorAssociation":"NONE","body":"In the code above `content_to_update` is a string and not a bytes object -- see below.  \r\n\r\n```python\r\ncontent_to_transmit = json.dumps(obj) # obj a Python dict(), json.dumps() converts to a string and not bytes object\r\n        try:\r\n            repo = self.github_instance.get_repo(f\"{self.org_name}/{self.repo_name}\")\r\n            file_path = f\"{container_name}/{self.object_files[container_name]}\"\r\n            # file_contents = repo.get_contents(file_path, ref=ref, sha=sha)\r\n            write_response = repo.update_file(\r\n                file_path, \r\n                f\"Update object [{self.object_files[container_name]}]\", \r\n                content=content_to_transmit, # I'm sending this string to repo.update_file()\r\n                sha=sha, \r\n                branch=ref\r\n            )\r\n```\r\n\r\nUnfortunately, since I'm in the middle of some critical development work getting back to reproducing the error won't happen for quite some time.  However, I've included the patch which indented the `if` stanza on line `2495` in `github.Repository.update_file`. After I made the change I was able to proceed by passing the string into `update_file()` and saw the result as a JSON document in my target repository.","createdAt":"2024-05-31T14:51:18Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/2972#issuecomment-2142436265","viewerDidAuthor":false}],"createdAt":"2024-05-18T13:54:05Z","number":2972,"state":"OPEN","title":"Upload of content using github.Repository.update_file produces garbled content","url":"https://github.com/PyGithub/PyGithub/issues/2972"},{"author":{"id":"MDQ6VXNlcjM0OTMzMjMz","is_bot":false,"login":"jodelasur","name":""},"body":"`GithubRetry`'s default values  for `status_forcelist` and `allowed_methods` are computed in `__init__`. See [here](https://github.com/PyGithub/PyGithub/blob/7266e812ed2976ea36a4303edecfe5d75522343f/github/GithubRetry.py#L79-L80). We had a use case where we wanted extend (not override) the default values, but we resorted to copy-pasting. It would be better to have class members for it, similar to `Retry.DEFAULT_ALLOWED_METHODS`. \r\n\r\nInstead of:\r\n```python\r\nGithubRetry(\r\n    # GithubRetry default value + 401\r\n    status_forcelist=list(range(500, 600)) + [403, 401],\r\n    # GithubRetry default value + \"PATCH\". \r\n    # GithubRetry.DEFAULT_ALLOWED_METHODS currently inherited from urllib3.Retry\r\n    allowed_methods=GithubRetry.DEFAULT_ALLOWED_METHODS.union(\r\n        {\"GET\", \"POST\", \"PATCH\"}\r\n    ),\r\n)\r\n```\r\n\r\nit would be better to have:\r\n```python\r\nGithubRetry(\r\n    status_forcelist=GithubRetry.DEFAULT_STATUS_FORCELIST + [401],\r\n    allowed_methods=GithubRetry.DEFAULT_ALLOWED_METHODS | {\"PATCH\"},\r\n)\r\n```\r\n\r\n\r\n","comments":[{"id":"IC_kwDOADYVqs5_pgo4","author":{"login":"EnricoMi"},"authorAssociation":"COLLABORATOR","body":"This sounds useful, please go ahead and create a pull request!","createdAt":"2024-05-31T09:25:01Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/2970#issuecomment-2141588024","viewerDidAuthor":false}],"createdAt":"2024-05-14T06:55:04Z","number":2970,"state":"OPEN","title":"Implement GithubRetry DEFAULT_ALLOWED_METHODS and DEFAULT_STATUS_FORCELIST","url":"https://github.com/PyGithub/PyGithub/issues/2970"},{"author":{"id":"U_kgDOBu1YXw","is_bot":false,"login":"LorenzoCattai","name":"Lorenzo Cattai"},"body":"I am trying to access my GitHub projects but they do not seem to exists according to PyGithub.\r\n\r\nThis is the code I'm trying to run (`GITHUB_TOKEN` censored):\r\n```python\r\nfrom github import Github\r\n\r\ngithub = Github(GITHUB_TOKEN)\r\n\r\nfor repository in github.get_user().get_repos():\r\n    print(repository.name)\r\n    for project in repository.get_projects():\r\n        print(project.name)\r\n```\r\nIt only prints out the name of my repositories but not a single project name.\r\n\r\nSo I tried to get the project directly usign `github.get_project()` like this (`GITHUB_TOKEN` censored):\r\n```python\r\nfrom github import Github\r\n\r\ngithub = Github(GITHUB_TOKEN)\r\n\r\nproject = github.get_project(1)\r\nprint(project.name)\r\n```\r\nBut this errors out with:\r\n```\r\nRequest GET /projects/1 failed with 403: Forbidden\r\nTraceback (most recent call last):\r\n  File \"c:\\Users\\user\\test\\main.py\", line 22, in <module>\r\n    project = github.get_project(1)\r\n              ^^^^^^^^^^^^^^^^^^^^^\r\n  File \"C:\\Users\\user\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\github\\MainClass.py\", line 464, in get_project\r\n    headers, data = self.__requester.requestJsonAndCheck(\r\n                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"C:\\Users\\user\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\github\\Requester.py\", line 548, in requestJsonAndCheck    \r\n    return self.__check(*self.requestJson(verb, url, parameters, headers, input, self.__customConnection(url)))\r\n                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"C:\\Users\\user\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\github\\Requester.py\", line 713, in requestJson\r\n    return self.__requestEncode(cnx, verb, url, parameters, headers, input, encode)\r\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"C:\\Users\\user\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\github\\Requester.py\", line 810, in __requestEncode        \r\n    status, responseHeaders, output = self.__requestRaw(cnx, verb, url, requestHeaders, encoded_input)\r\n                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"C:\\Users\\user\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\github\\Requester.py\", line 844, in __requestRaw\r\n    response = cnx.getresponse()\r\n               ^^^^^^^^^^^^^^^^^\r\n  File \"C:\\Users\\user\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\github\\Requester.py\", line 196, in getresponse\r\n    r = verb(\r\n        ^^^^^\r\n  File \"C:\\Users\\user\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\requests\\sessions.py\", line 602, in get\r\n    return self.request(\"GET\", url, **kwargs)\r\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"C:\\Users\\user\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\requests\\sessions.py\", line 589, in request\r\n    resp = self.send(prep, **send_kwargs)\r\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"C:\\Users\\user\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\requests\\sessions.py\", line 703, in send\r\n    r = adapter.send(request, **kwargs)\r\n        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"C:\\Users\\user\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\requests\\adapters.py\", line 486, in send\r\n    resp = conn.urlopen(\r\n           ^^^^^^^^^^^^^\r\n  File \"C:\\Users\\user\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\urllib3\\connectionpool.py\", line 938, in urlopen\r\n    retries = retries.increment(method, url, response=response, _pool=self)\r\n              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"C:\\Users\\user\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\github\\GithubRetry.py\", line 185, in increment\r\n    raise Requester.createException(response.status, response.headers, content)  # type: ignore\r\n    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\ngithub.GithubException.GithubException: 403 {\"message\": \"Must have admin rights to Repository.\", \"documentation_url\": \"https://docs.github.com/rest/projects/projects#get-a-project\"}\r\n```\r\n\r\nI have tried both code snippets with `classic` tokens and `fine grained tokens` (with all scopes enabled) from the repository and project owner user but the result is the same.","comments":[{"id":"IC_kwDOADYVqs59V0Vj","author":{"login":"LorenzoCattai"},"authorAssociation":"NONE","body":"From further research it seems that there is a different api for [classic projects](https://docs.github.com/en/rest/projects/projects?apiVersion=2022-11-28#get-a-project) and [(new) projects](https://docs.github.com/en/issues/planning-and-tracking-with-projects/automating-your-project/using-the-api-to-manage-projects), I'm guessing all new github projects are now of the new type by default so that's why none of mine are showing up, PyGithub is only using the old API for projects is seems, #2405 talks about the new api, it seems they called it `ProjectsV2` and it uses `GraphQL` instead us `RESTful`.","createdAt":"2024-05-09T15:19:47Z","includesCreatedEdit":true,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/2967#issuecomment-2102871395","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs59V14b","author":{"login":"LorenzoCattai"},"authorAssociation":"NONE","body":"This Issue could be potentially considered a duplicate of #2140 as that Issue asks for support for the new api while I was just reporting the fact that new github projects are not showing up when using PyGithub, tho that Issue should probably get renamed to just `Support for (new) projects` or something similar as I believe it's not in beta anymore if this new project type is what github created on my repositories by default.","createdAt":"2024-05-09T15:22:50Z","includesCreatedEdit":true,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/2967#issuecomment-2102877723","viewerDidAuthor":false}],"createdAt":"2024-05-09T15:16:28Z","number":2967,"state":"OPEN","title":"User Projects NOT Showing Up","url":"https://github.com/PyGithub/PyGithub/issues/2967"},{"author":{"id":"MDQ6VXNlcjgxNTUwMTU0","is_bot":false,"login":"Razboinicul","name":"R9_"},"body":"How can I get a repo url?","comments":[{"id":"IC_kwDOADYVqs5-kUlG","author":{"login":"hodeinavarro"},"authorAssociation":"CONTRIBUTOR","body":"You're looking for `clone_url` or `html_url` most likely.\r\n`svn_url` also returns the repository URL but I'd not use it as it seems meant for a different purpose.","createdAt":"2024-05-21T21:12:34Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/2964#issuecomment-2123450694","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs5_pXRR","author":{"login":"EnricoMi"},"authorAssociation":"COLLABORATOR","body":"@Razboinicul can you be a bit more specific? Can you share some code so we now where you are stuck? Have you had a look into the [examples](https://pygithub.readthedocs.io/en/stable/examples/Repository.html)?","createdAt":"2024-05-31T09:03:08Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/2964#issuecomment-2141549649","viewerDidAuthor":false}],"createdAt":"2024-05-03T18:28:44Z","number":2964,"state":"OPEN","title":"Get repo url","url":"https://github.com/PyGithub/PyGithub/issues/2964"},{"author":{"id":"MDQ6VXNlcjE1NDE=","is_bot":false,"login":"bakert","name":"Thomas David Baker"},"body":"Encountered this a couple of times today during GitHub's (currently ongoing) prod issues. The library probably wants to be robust to this/at least throw its own exception rather than a TypeError?\r\n\r\n```\r\nFile \"/home/pdadmin/decksite/.venv/lib/python3.10/site-packages/github/Requester.py\", line 528, in __createException\r\n    message = output.get(\"message\", \"\").lower() if output is not None else \"\"\r\n      self = <github.Requester.Requester object at 0x7fb440ae78b0>\r\n      status = 500\r\n      headers = <exception while printing> Traceback (most recent call last):\r\n          File \"/home/pdadmin/decksite/.venv/lib/python3.10/site-packages/traceback_with_variables/core.py\", line 222, in _to_cropped_str\r\n            raw = print_(obj)\r\n        TypeError: 'str' object is not callable\r\n        \r\n      output = [{'url': 'https://api.github.com/repos/PennyDreadfulMTG/Penny-Dreadful-Tools/pulls/11982', 'id': 1731819095, 'node_id': 'PR_kwDOBCHlNs5nOXZX', 'html_url': 'https://github.com/PennyDreadfulMTG/Penny-Dreadful-Tools/pull/11982', 'diff_url': 'https://github.com/PennyDreadfulMTG/Penny-Dreadful-Tools/pull/11982.diff', 'patch_url': 'https://github.com/PennyDreadfulMTG/Penny-Dreadful-Tools/pull/11982.patch', 'issue_url': 'https://api.github.com/repos/PennyDreadfulMTG/Penny-Dreadful-Tools/issues/11982', 'number': 11982, 'state': 'closed', 'locked': False, 'title': 'build(deps): bump urllib3 from 2.1.0 to 2.2.1', 'user': {'login': 'dependabot[bot]', 'id': 49699333, 'node_id': 'MDM6Qm90NDk2OTkzMzM=', 'avatar_url': 'https://avatars.githubusercontent.com/in/29110?v=4', 'gravatar_id': '', 'url': 'https://api.github.com/users/dependabot%5Bbot%5D', 'html_url': 'https://github.com/apps/dependabot', 'followers_url': 'https://api.github.com/users/dependabot%5Bbot%5D/followers', 'following_url': 'https://...\r\nbuiltins.AttributeError: 'list' object has no attribute 'get'\r\n```\r\n\r\nFull stack trace in case it's useful:\r\n\r\n<details>\r\n\r\n```md\r\nTraceback with variables (most recent call last):\r\n  File \"/home/pdadmin/decksite/run.py\", line 132, in task\r\n    run_all_tasks(module, 'HOURLY')\r\n      args = ['maintenance', 'hourly']\r\n      module = 'maintenance'\r\n      name = 'hourly'\r\n      multiverse = <module 'magic.multiverse' from '/home/pdadmin/decksite/magic/multiverse.py'>\r\n      oracle = <module 'magic.oracle' from '/home/pdadmin/decksite/magic/oracle.py'>\r\n      c = AttributeError(\"'list' object has no attribute 'get'\")\r\n      repo = <module 'shared.repo' from '/home/pdadmin/decksite/shared/repo.py'>\r\n  File \"/home/pdadmin/decksite/run.py\", line 198, in run_all_tasks\r\n    raise error\r\n      module = 'maintenance'\r\n      with_flag = 'HOURLY'\r\n      error = AttributeError(\"'list' object has no attribute 'get'\")\r\n      m = <module 'maintenance' from '/home/pdadmin/decksite/maintenance/__init__.py'>\r\n      APP = <PDFlask 'decksite'>\r\n      _importer = FileFinder('/home/pdadmin/decksite/maintenance')\r\n      modname = 'validate_translations_test'\r\n      _ispkg = False\r\n      s = <module 'maintenance.validate_translations_test' from '/home/pdadmin/decksite/maintenance/validate_translations_test.py'>\r\n      timer = 34924607.489579886\r\n      t = 0.0008053556084632874\r\n      repo = <module 'shared.repo' from '/home/pdadmin/decksite/shared/repo.py'>\r\n  File \"/home/pdadmin/decksite/run.py\", line 189, in run_all_tasks\r\n    s.run()\r\n      module = 'maintenance'\r\n      with_flag = 'HOURLY'\r\n      error = AttributeError(\"'list' object has no attribute 'get'\")\r\n      m = <module 'maintenance' from '/home/pdadmin/decksite/maintenance/__init__.py'>\r\n      APP = <PDFlask 'decksite'>\r\n      _importer = FileFinder('/home/pdadmin/decksite/maintenance')\r\n      modname = 'validate_translations_test'\r\n      _ispkg = False\r\n      s = <module 'maintenance.validate_translations_test' from '/home/pdadmin/decksite/maintenance/validate_translations_test.py'>\r\n      timer = 34924607.489579886\r\n      t = 0.0008053556084632874\r\n      repo = <module 'shared.repo' from '/home/pdadmin/decksite/shared/repo.py'>\r\n  File \"/home/pdadmin/decksite/maintenance/homepage_cache.py\", line 12, in run\r\n    merges = news.code_merges(start_date, end_date, force_refresh=True)\r\n      start_date = datetime.datetime(2024, 2, 16, 8, 0, tzinfo=<UTC>)\r\n      end_date = datetime.datetime(2024, 4, 24, 10, 45, 6, 961737, tzinfo=datetime.timezone.utc)\r\n  File \"/home/pdadmin/decksite/decksite/data/news.py\", line 61, in code_merges\r\n    merges = [Container({'date': dtutil.UTC_TZ.localize(pull.merged_at), 'title': pull.title, 'url': pull.html_url, 'type': 'code-release'}) for pull in repo.get_pull_requests(start_date, end_date, max_items) if 'Not News' not in [[label.name](http://label.name/) for label in pull.as_issue().labels]]\r\n      start_date = datetime.datetime(2024, 2, 16, 8, 0, tzinfo=<UTC>)\r\n      end_date = datetime.datetime(2024, 4, 24, 10, 45, 6, 961737, tzinfo=datetime.timezone.utc)\r\n      max_items = 9223372036854775807\r\n      force_refresh = True\r\n      allow_fetch = True\r\n      merges = []\r\n  File \"/home/pdadmin/decksite/shared/repo.py\", line 132, in get_pull_requests\r\n    for pull in git_repo.get_pulls(state='closed', sort='updated', direction='desc'):\r\n      start_date = datetime.datetime(2024, 2, 16, 8, 0, tzinfo=<UTC>)\r\n      end_date = datetime.datetime(2024, 4, 24, 10, 45, 6, 961737, tzinfo=datetime.timezone.utc)\r\n      max_pull_requests = 9223372036854775807\r\n      repo_name = 'PennyDreadfulMTG/Penny-Dreadful-Tools'\r\n      gh_user = 'REDACTED'\r\n      gh_pass = 'REDACTED'\r\n      pulls = [PullRequest(title=\"Revamp achievements detail page\", number=12260), PullRequest(title=\"build(deps): bump inflect from 7.2.0 to 7.2.1\", number=12267), PullRequest(title=\"build(deps): bump pydantic from 2.7.0 to 2.7.1\", number=12268), PullRequest(title=\"build(deps): bump freezegun from 1.4.0 to 1.5.0\", number=12266), PullRequest(title=\"build(deps): bump coverage from 7.4.4 to 7.5.0\", number=12265), PullRequest(title=\"build(deps): bump pydantic-core from 2.18.1 to 2.18.2\", number=12264), PullRequest(title=\"build(deps): bump google-api-python-client from 2.126.0 to 2.127.0\", number=12263), PullRequest(title=\"build(deps): bump types-setuptools from 69.5.0.20240415 to 69.5.0.20240423\", number=12262), PullRequest(title=\"Support is:outlaw in card search\", number=12259), PullRequest(title=\"isort --fix the current codebase\", number=12258), PullRequest(title=\"Return card mouseover to working order on /rotation\", number=12255), PullRequest(title=\"Saner behavior for rank sort\", number=12254), Pull...\r\n      g = <github.MainClass.Github object at 0x7fb440d2c070>\r\n      git_repo = Repository(full_name=\"PennyDreadfulMTG/Penny-Dreadful-Tools\")\r\n      pull = PullRequest(title=\"build(deps): bump types-setuptools from 69.1.0.20240215 to 69.1.0.20240217\", number=11984)\r\n      merged_dt = datetime.datetime(2024, 2, 18, 20, 27, 33, tzinfo=<UTC>)\r\n      updated_dt = datetime.datetime(2024, 2, 18, 20, 27, 33, tzinfo=<UTC>)\r\n  File \"/home/pdadmin/decksite/.venv/lib/python3.10/site-packages/github/PaginatedList.py\", line 69, in __iter__\r\n    newElements = self._grow()\r\n      self = <github.PaginatedList.PaginatedList object at 0x7fb440b36b90>\r\n      newElements = [PullRequest(title=\"build(deps): bump pydantic from 2.6.2 to 2.6.3\", number=12018), PullRequest(title=\"build(deps): bump sentry-sdk from 1.40.5 to 1.40.6\", number=12017), PullRequest(title=\"build(deps): bump cachetools from 5.3.2 to 5.3.3\", number=12016), PullRequest(title=\"build(deps): bump typing-extensions from 4.9.0 to 4.10.0\", number=12015), PullRequest(title=\"build(deps): bump pydantic from 2.6.1 to 2.6.2\", number=12014), PullRequest(title=\"build(deps): bump coverage from 7.4.2 to 7.4.3\", number=12010), PullRequest(title=\"build(deps): bump types-setuptools from 69.1.0.20240217 to 69.1.0.20240223\", number=12012), PullRequest(title=\"build(deps-dev): bump eslint from 8.56.0 to 8.57.0\", number=12013), PullRequest(title=\"build(deps): bump importlib-resources from 6.1.1 to 6.1.2\", number=12011), PullRequest(title=\"build(deps): bump orjson from 3.9.14 to 3.9.15\", number=12009), PullRequest(title=\"build(deps): bump pydantic-core from 2.16.2 to 2.16.3\", number=12007), PullRequest(title=\"b...\r\n  File \"/home/pdadmin/decksite/.venv/lib/python3.10/site-packages/github/PaginatedList.py\", line 80, in _grow\r\n    newElements = self._fetchNextPage()\r\n      self = <github.PaginatedList.PaginatedList object at 0x7fb440b36b90>\r\n  File \"/home/pdadmin/decksite/.venv/lib/python3.10/site-packages/github/PaginatedList.py\", line 213, in _fetchNextPage\r\n    headers, data = self.__requester.requestJsonAndCheck(\r\n      self = <github.PaginatedList.PaginatedList object at 0x7fb440b36b90>\r\n  File \"/home/pdadmin/decksite/.venv/lib/python3.10/site-packages/github/Requester.py\", line 442, in requestJsonAndCheck\r\n    return self.__check(\r\n      self = <github.Requester.Requester object at 0x7fb440ae78b0>\r\n      verb = 'GET'\r\n      url = 'https://api.github.com/repositories/69330230/pulls?state=closed&sort=updated&direction=desc&page=8'\r\n      parameters = None\r\n      headers = <exception while printing> Traceback (most recent call last):\r\n          File \"/home/pdadmin/decksite/.venv/lib/python3.10/site-packages/traceback_with_variables/core.py\", line 222, in _to_cropped_str\r\n            raw = print_(obj)\r\n        TypeError: 'str' object is not callable\r\n        \r\n      input = None\r\n  File \"/home/pdadmin/decksite/.venv/lib/python3.10/site-packages/github/Requester.py\", line 487, in __check\r\n    raise self.__createException(status, responseHeaders, data)\r\n      self = <github.Requester.Requester object at 0x7fb440ae78b0>\r\n      status = 500\r\n      responseHeaders = {'server': 'GitHub.com', 'date': 'Wed, 24 Apr 2024 10:45:19 GMT', 'content-type': 'application/json; charset=utf-8', 'content-length': '762897', 'cache-control': 'private, max-age=60, s-maxage=60', 'vary': 'Accept, Authorization, Cookie, X-GitHub-OTP, Accept-Encoding, Accept, X-Requested-With', 'etag': '\"2ac1999983609d975294ffd7ef63e08a5b54a2a008dfc6a021df86406e6e5ded\"', 'x-oauth-scopes': 'repo', 'x-accepted-oauth-scopes': '', 'x-github-media-type': 'github.v3; format=json', 'link': '<https://api.github.com/repositories/69330230/pulls?state=closed&sort=updated&direction=desc&page=7>; rel=\"prev\", <https://api.github.com/repositories/69330230/pulls?state=closed&sort=updated&direction=desc&page=9>; rel=\"next\", <https://api.github.com/repositories/69330230/pulls?state=closed&sort=updated&direction=desc&page=193>; rel=\"last\", <https://api.github.com/repositories/69330230/pulls?state=closed&sort=updated&direction=desc&page=1>; rel=\"first\"', 'x-github-api-version-selected': '2022-11-28', 'x-r...\r\n      output = '[{\"url\":\"https://api.github.com/repos/PennyDreadfulMTG/Penny-Dreadful-Tools/pulls/11982\",\"id\":1731819095,\"node_id\":\"PR_kwDOBCHlNs5nOXZX\",\"html_url\":\"https://github.com/PennyDreadfulMTG/Penny-Dreadful-Tools/pull/11982\",\"diff_url\":\"https://github.com/PennyDreadfulMTG/Penny-Dreadful-Tools/pull/11982.diff\",\"patch_url\":\"https://github.com/PennyDreadfulMTG/Penny-Dreadful-Tools/pull/11982.patch\",\"issue_url\":\"https://api.github.com/repos/PennyDreadfulMTG/Penny-Dreadful-Tools/issues/11982\",\"number\":11982,\"state\":\"closed\",\"locked\":false,\"title\":\"build(deps): bump urllib3 from 2.1.0 to 2.2.1\",\"user\":{\"login\":\"dependabot[bot]\",\"id\":49699333,\"node_id\":\"MDM6Qm90NDk2OTkzMzM=\",\"avatar_url\":\"https://avatars.githubusercontent.com/in/29110?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/dependabot%5Bbot%5D\",\"html_url\":\"https://github.com/apps/dependabot\",\"followers_url\":\"https://api.github.com/users/dependabot%5Bbot%5D/followers\",\"following_url\":\"https://api.github.com/users/dependabot%5Bbot%5...\r\n      data = [{'url': 'https://api.github.com/repos/PennyDreadfulMTG/Penny-Dreadful-Tools/pulls/11982', 'id': 1731819095, 'node_id': 'PR_kwDOBCHlNs5nOXZX', 'html_url': 'https://github.com/PennyDreadfulMTG/Penny-Dreadful-Tools/pull/11982', 'diff_url': 'https://github.com/PennyDreadfulMTG/Penny-Dreadful-Tools/pull/11982.diff', 'patch_url': 'https://github.com/PennyDreadfulMTG/Penny-Dreadful-Tools/pull/11982.patch', 'issue_url': 'https://api.github.com/repos/PennyDreadfulMTG/Penny-Dreadful-Tools/issues/11982', 'number': 11982, 'state': 'closed', 'locked': False, 'title': 'build(deps): bump urllib3 from 2.1.0 to 2.2.1', 'user': {'login': 'dependabot[bot]', 'id': 49699333, 'node_id': 'MDM6Qm90NDk2OTkzMzM=', 'avatar_url': 'https://avatars.githubusercontent.com/in/29110?v=4', 'gravatar_id': '', 'url': 'https://api.github.com/users/dependabot%5Bbot%5D', 'html_url': 'https://github.com/apps/dependabot', 'followers_url': 'https://api.github.com/users/dependabot%5Bbot%5D/followers', 'following_url': 'https://...\r\n  File \"/home/pdadmin/decksite/.venv/lib/python3.10/site-packages/github/Requester.py\", line 528, in __createException\r\n    message = output.get(\"message\", \"\").lower() if output is not None else \"\"\r\n      self = <github.Requester.Requester object at 0x7fb440ae78b0>\r\n      status = 500\r\n      headers = <exception while printing> Traceback (most recent call last):\r\n          File \"/home/pdadmin/decksite/.venv/lib/python3.10/site-packages/traceback_with_variables/core.py\", line 222, in _to_cropped_str\r\n            raw = print_(obj)\r\n        TypeError: 'str' object is not callable\r\n        \r\n      output = [{'url': 'https://api.github.com/repos/PennyDreadfulMTG/Penny-Dreadful-Tools/pulls/11982', 'id': 1731819095, 'node_id': 'PR_kwDOBCHlNs5nOXZX', 'html_url': 'https://github.com/PennyDreadfulMTG/Penny-Dreadful-Tools/pull/11982', 'diff_url': 'https://github.com/PennyDreadfulMTG/Penny-Dreadful-Tools/pull/11982.diff', 'patch_url': 'https://github.com/PennyDreadfulMTG/Penny-Dreadful-Tools/pull/11982.patch', 'issue_url': 'https://api.github.com/repos/PennyDreadfulMTG/Penny-Dreadful-Tools/issues/11982', 'number': 11982, 'state': 'closed', 'locked': False, 'title': 'build(deps): bump urllib3 from 2.1.0 to 2.2.1', 'user': {'login': 'dependabot[bot]', 'id': 49699333, 'node_id': 'MDM6Qm90NDk2OTkzMzM=', 'avatar_url': 'https://avatars.githubusercontent.com/in/29110?v=4', 'gravatar_id': '', 'url': 'https://api.github.com/users/dependabot%5Bbot%5D', 'html_url': 'https://github.com/apps/dependabot', 'followers_url': 'https://api.github.com/users/dependabot%5Bbot%5D/followers', 'following_url': 'https://...\r\nbuiltins.AttributeError: 'list' object has no attribute 'get'\r\n```\r\n\r\n\r\n</details>","comments":[],"createdAt":"2024-04-24T14:39:17Z","number":2958,"state":"OPEN","title":"TypeError: 'str' object is not callable when GitHub 500s","url":"https://github.com/PyGithub/PyGithub/issues/2958"},{"author":{"id":"MDQ6VXNlcjUzODg0NDkw","is_bot":false,"login":"austinlucaslake","name":"Austin Lucas Lake"},"body":"## Background\r\nI'm developing a `UserGPGKey` class to expose this library to [GitHub's REST API endpoints for GPG keys](https://docs.github.com/en/rest/users/gpg-keys?apiVersion=2022-11-28). The UserGPG class is moduled similar to the already-existing `UserKey` class. The necessiary modifcations have been made to `NamedUser` and `AuthenticatedUser` in order to access GPG keys after authentication.\r\n\r\n## Problem\r\nIn the tests of UserKey, AuthenticatedUser, and NamedUser tests, there is information provived on some SSH keys which from my understanding comes from @jacquev6. Here are screenshots from the codebase showcasing what I am refering to:\r\n\r\n[tests/UserKey.py](https://github.com/PyGithub/PyGithub/blob/main/tests/UserKey.py)\r\n![image](https://github.com/PyGithub/PyGithub/assets/53884490/15e91fb0-f533-4bf5-8be0-c44860df32fc)\r\n\r\n[tests/AuthenticatedUser.py](https://github.com/PyGithub/PyGithub/blob/main/tests/AuthenticatedUser.py)\r\n![image](https://github.com/PyGithub/PyGithub/assets/53884490/2711af3b-5056-4ee7-a5c2-d030b6cd0975)\r\n\r\n[tests/NamedUser.py](https://github.com/PyGithub/PyGithub/blob/main/tests/NamedUser.py)\r\n![image](https://github.com/PyGithub/PyGithub/assets/53884490/adfc9460-722c-4f44-8d4e-da6b300b6760)\r\n\r\nWhat I'd like to know is if I'd need something similar and hardcode information from my own GPG key(s) into the testing code for UserGPGKey? \r\n\r\nIf possible, I'd like to avoid doing this for privacy reasons.\r\nThanks in advance for reading this rather lengthy issue! 😅  ","comments":[{"id":"IC_kwDOADYVqs57rDw5","author":{"login":"austinlucaslake"},"authorAssociation":"NONE","body":"Working towards #2413 ","createdAt":"2024-04-24T12:55:59Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/2957#issuecomment-2074885177","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs57ukBL","author":{"login":"austinlucaslake"},"authorAssociation":"NONE","body":"For clarity, the fork can be found [here](https://github.com/austinlucaslake/PyGithub/tree/usergpgkey), and the relevant commits/changes [here](https://github.com/PyGithub/PyGithub/compare/main...austinlucaslake:PyGithub:usergpgkey).","createdAt":"2024-04-24T20:40:34Z","includesCreatedEdit":true,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/2957#issuecomment-2075803723","viewerDidAuthor":false}],"createdAt":"2024-04-24T12:51:36Z","number":2957,"state":"OPEN","title":"Do I need to hardcode my own GPG keys for new UserGPGKey class?","url":"https://github.com/PyGithub/PyGithub/issues/2957"},{"author":{"id":"MDQ6VXNlcjU3NTk0NjY4","is_bot":false,"login":"Lslightly","name":"Qingwei Li"},"body":"Since #1753 has so many comments about `BadCredentialsException`, is it possible to add some tips when raising the exception? For example, add a link to the issue or suggest some checks like https://github.com/PyGithub/PyGithub/issues/1753#issuecomment-1039533679.\r\n\r\nI think this saves users' time since searching for `Bad Credentials` is time-consuming and reading such long issue without an conclusion is tiring and depressing.\r\n\r\nI guess there are many downstream apps that uses cache or other persistent system like database because getting issues/comments or other information from github is time-consuming. So I think it is important to add some tips or notes when raising `BadCredentialsException`\r\n\r\nBesides, it is better to add a function `check` to check the validity of objects and a function `refresh` for re-validate a object since most fields of a `Issue`-like object is valid except the `token` field. ","comments":[],"createdAt":"2024-04-22T10:46:17Z","number":2955,"state":"OPEN","title":"add some tips for `BadCredentialsException` ","url":"https://github.com/PyGithub/PyGithub/issues/2955"},{"author":{"id":"MDQ6VXNlcjc4NTYxMTky","is_bot":false,"login":"amcsparron2793-Water","name":""},"body":"PyGithub works great on my project with Django 4.3/Python3.8 - but while testing to upgrade to Django 5/Py3.12, I found that on import, (specifically, `from github import Github, Repository, BadCredentialsException, GithubException, UnknownObjectException`)\r\na Value Error gets thrown, see below.\r\nit seems to be something to do with wrapt, but I've tried installing wrapt on its own, as per a previous issue, but that didn't seem to help as it was the same version.\r\n\r\n\r\n\r\n`Exception in thread django-main-thread:\r\nTraceback (most recent call last):\r\n  File \"C:\\Users\\amcsparron\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\threading.py\", line 1073, in _bootstrap_inner\r\n    self.run()\r\n  File \"C:\\Users\\amcsparron\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\threading.py\", line 1010, in run\r\n    self._target(*self._args, **self._kwargs)\r\n  File \"C:\\Users\\amcsparron\\Desktop\\Python_Projects\\BackflowPreventionValveCatalog\\venv312\\Lib\\site-packages\\django\\utils\\autoreload.py\", line 64, in wrapper\r\n    fn(*args, **kwargs)\r\n  File \"C:\\Users\\amcsparron\\Desktop\\Python_Projects\\BackflowPreventionValveCatalog\\venv312\\Lib\\site-packages\\django\\core\\management\\commands\\runserver.py\", line 133, in inner_run\r\n    self.check(display_num_errors=True)\r\n  File \"C:\\Users\\amcsparron\\Desktop\\Python_Projects\\BackflowPreventionValveCatalog\\venv312\\Lib\\site-packages\\django\\core\\management\\base.py\", line 486, in check\r\n    all_issues = checks.run_checks(\r\n                 ^^^^^^^^^^^^^^^^^^\r\n  File \"C:\\Users\\amcsparron\\Desktop\\Python_Projects\\BackflowPreventionValveCatalog\\venv312\\Lib\\site-packages\\django\\core\\checks\\registry.py\", line 88, in run_checks\r\n    new_errors = check(app_configs=app_configs, databases=databases)\r\n                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"C:\\Users\\amcsparron\\Desktop\\Python_Projects\\BackflowPreventionValveCatalog\\venv312\\Lib\\site-packages\\django\\core\\checks\\urls.py\", line 42, in check_url_namespaces_unique\r\n    all_namespaces = _load_all_namespaces(resolver)\r\n                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"C:\\Users\\amcsparron\\Desktop\\Python_Projects\\BackflowPreventionValveCatalog\\venv312\\Lib\\site-packages\\django\\core\\checks\\urls.py\", line 61, in _load_all_namespaces\r\n    url_patterns = getattr(resolver, \"url_patterns\", [])\r\n                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"C:\\Users\\amcsparron\\Desktop\\Python_Projects\\BackflowPreventionValveCatalog\\venv312\\Lib\\site-packages\\django\\utils\\functional.py\", line 47, in __get__\r\n    res = instance.__dict__[self.name] = self.func(instance)\r\n                                         ^^^^^^^^^^^^^^^^^^^\r\n  File \"C:\\Users\\amcsparron\\Desktop\\Python_Projects\\BackflowPreventionValveCatalog\\venv312\\Lib\\site-packages\\django\\urls\\resolvers.py\", line 738, in url_patterns\r\n    patterns = getattr(self.urlconf_module, \"urlpatterns\", self.urlconf_module)\r\n                       ^^^^^^^^^^^^^^^^^^^\r\n  File \"C:\\Users\\amcsparron\\Desktop\\Python_Projects\\BackflowPreventionValveCatalog\\venv312\\Lib\\site-packages\\django\\utils\\functional.py\", line 47, in __get__\r\n    res = instance.__dict__[self.name] = self.func(instance)\r\n                                         ^^^^^^^^^^^^^^^^^^^\r\n  File \"C:\\Users\\amcsparron\\Desktop\\Python_Projects\\BackflowPreventionValveCatalog\\venv312\\Lib\\site-packages\\django\\urls\\resolvers.py\", line 731, in urlconf_module\r\n    return import_module(self.urlconf_name)\r\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"C:\\Users\\amcsparron\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\importlib\\__init__.py\", line 90, in import_module\r\n    return _bootstrap._gcd_import(name[level:], package, level)\r\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"<frozen importlib._bootstrap>\", line 1387, in _gcd_import\r\n  File \"<frozen importlib._bootstrap>\", line 1360, in _find_and_load\r\n  File \"<frozen importlib._bootstrap>\", line 1331, in _find_and_load_unlocked\r\n  File \"<frozen importlib._bootstrap>\", line 935, in _load_unlocked\r\n  File \"<frozen importlib._bootstrap_external>\", line 995, in exec_module\r\n  File \"<frozen importlib._bootstrap>\", line 488, in _call_with_frames_removed\r\n  File \"C:\\Users\\amcsparron\\Desktop\\Python_Projects\\BackflowPreventionValveCatalog\\BackflowPreventionValveCatalog\\urls.py\", line 22, in <module>\r\n    path('', include('Homepage.urls')),\r\n             ^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"C:\\Users\\amcsparron\\Desktop\\Python_Projects\\BackflowPreventionValveCatalog\\venv312\\Lib\\site-packages\\django\\urls\\conf.py\", line 39, in include\r\n    urlconf_module = import_module(urlconf_module)\r\n                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"C:\\Users\\amcsparron\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\importlib\\__init__.py\", line 90, in import_module\r\n    return _bootstrap._gcd_import(name[level:], package, level)\r\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"<frozen importlib._bootstrap>\", line 1387, in _gcd_import\r\n  File \"<frozen importlib._bootstrap>\", line 1360, in _find_and_load\r\n  File \"<frozen importlib._bootstrap>\", line 1331, in _find_and_load_unlocked\r\n  File \"<frozen importlib._bootstrap>\", line 935, in _load_unlocked\r\n  File \"<frozen importlib._bootstrap_external>\", line 995, in exec_module\r\n  File \"<frozen importlib._bootstrap>\", line 488, in _call_with_frames_removed\r\n  File \"C:\\Users\\amcsparron\\Desktop\\Python_Projects\\BackflowPreventionValveCatalog\\Homepage\\urls.py\", line 3, in <module>\r\n    from . import views\r\n  File \"C:\\Users\\amcsparron\\Desktop\\Python_Projects\\BackflowPreventionValveCatalog\\Homepage\\views.py\", line 5, in <module>\r\n    from .forms import ValveBugReportModelForm\r\n  File \"C:\\Users\\amcsparron\\Desktop\\Python_Projects\\BackflowPreventionValveCatalog\\Homepage\\forms.py\", line 19, in <module>\r\n    raise e\r\n  File \"C:\\Users\\amcsparron\\Desktop\\Python_Projects\\BackflowPreventionValveCatalog\\Homepage\\forms.py\", line 15, in <module>\r\n    from github import Github, Repository, BadCredentialsException, GithubException, UnknownObjectException\r\n  File \"C:\\Users\\amcsparron\\Desktop\\Python_Projects\\BackflowPreventionValveCatalog\\venv312\\Lib\\site-packages\\github\\__init__.py\", line 52, in <module>\r\n    from . import Auth\r\n  File \"C:\\Users\\amcsparron\\Desktop\\Python_Projects\\BackflowPreventionValveCatalog\\venv312\\Lib\\site-packages\\github\\Auth.py\", line 39, in <module>\r\n    from github.InstallationAuthorization import InstallationAuthorization\r\n  File \"C:\\Users\\amcsparron\\Desktop\\Python_Projects\\BackflowPreventionValveCatalog\\venv312\\Lib\\site-packages\\github\\InstallationAuthorization.py\", line 45, in <module>\r\n    import github.NamedUser\r\n  File \"C:\\Users\\amcsparron\\Desktop\\Python_Projects\\BackflowPreventionValveCatalog\\venv312\\Lib\\site-packages\\github\\NamedUser.py\", line 60, in <module>\r\n    import github.Event\r\n  File \"C:\\Users\\amcsparron\\Desktop\\Python_Projects\\BackflowPreventionValveCatalog\\venv312\\Lib\\site-packages\\github\\Event.py\", line 46, in <module>\r\n    import github.Organization\r\n  File \"C:\\Users\\amcsparron\\Desktop\\Python_Projects\\BackflowPreventionValveCatalog\\venv312\\Lib\\site-packages\\github\\Organization.py\", line 91, in <module>\r\n    import github.OrganizationDependabotAlert\r\n  File \"C:\\Users\\amcsparron\\Desktop\\Python_Projects\\BackflowPreventionValveCatalog\\venv312\\Lib\\site-packages\\github\\OrganizationDependabotAlert.py\", line 31, in <module>\r\n    from github.Repository import Repository\r\n  File \"C:\\Users\\amcsparron\\Desktop\\Python_Projects\\BackflowPreventionValveCatalog\\venv312\\Lib\\site-packages\\github\\Repository.py\", line 164, in <module>\r\n    import github.Artifact\r\n  File \"C:\\Users\\amcsparron\\Desktop\\Python_Projects\\BackflowPreventionValveCatalog\\venv312\\Lib\\site-packages\\github\\Artifact.py\", line 49, in <module>\r\n    import github.WorkflowRun\r\n  File \"C:\\Users\\amcsparron\\Desktop\\Python_Projects\\BackflowPreventionValveCatalog\\venv312\\Lib\\site-packages\\github\\WorkflowRun.py\", line 39, in <module>\r\n    import github.PullRequest\r\n  File \"C:\\Users\\amcsparron\\Desktop\\Python_Projects\\BackflowPreventionValveCatalog\\venv312\\Lib\\site-packages\\github\\PullRequest.py\", line 87, in <module>\r\n    import github.Team\r\n  File \"C:\\Users\\amcsparron\\Desktop\\Python_Projects\\BackflowPreventionValveCatalog\\venv312\\Lib\\site-packages\\github\\Team.py\", line 89, in <module>\r\n    class Team(CompletableGithubObject):\r\n  File \"C:\\Users\\amcsparron\\Desktop\\Python_Projects\\BackflowPreventionValveCatalog\\venv312\\Lib\\site-packages\\github\\Team.py\", line 260, in Team\r\n    @deprecated(\r\n     ^^^^^^^^^^^\r\n  File \"C:\\Users\\amcsparron\\Desktop\\Python_Projects\\BackflowPreventionValveCatalog\\venv312\\Lib\\site-packages\\deprecated\\classic.py\", line 276, in deprecated\r\n    @wrapt.decorator(adapter=adapter)\r\n     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"C:\\Users\\amcsparron\\Desktop\\Python_Projects\\BackflowPreventionValveCatalog\\venv312\\Lib\\site-packages\\wrapt\\decorators.py\", line 427, in decorator\r\n    return _build(wrapper, _wrapper, adapter=decorator)\r\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"C:\\Users\\amcsparron\\Desktop\\Python_Projects\\BackflowPreventionValveCatalog\\venv312\\Lib\\site-packages\\wrapt\\decorators.py\", line 239, in _build\r\n    return AdapterWrapper(wrapped=wrapped, wrapper=wrapper,\r\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"_pydevd_bundle\\\\pydevd_pep_669_tracing_cython.pyx\", line 504, in _pydevd_bundle.pydevd_pep_669_tracing_cython.PyRaiseCallback.__call__\r\n  File \"_pydevd_bundle\\\\pydevd_pep_669_tracing_cython.pyx\", line 47, in _pydevd_bundle.pydevd_pep_669_tracing_cython.PEP669CallbackBase.frame\r\nValueError: wrapper has not been initialized`\r\n\r\n\r\n\r\n","comments":[{"id":"IC_kwDOADYVqs6GPxrx","author":{"login":"KoNekoD"},"authorAssociation":"NONE","body":"+","createdAt":"2024-07-26T08:56:43Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/2954#issuecomment-2252282609","viewerDidAuthor":false}],"createdAt":"2024-04-19T13:50:52Z","number":2954,"state":"OPEN","title":"'Wrapper has not been Initialized' error on import in Py3.12 with django 5","url":"https://github.com/PyGithub/PyGithub/issues/2954"},{"author":{"id":"MDQ6VXNlcjg2NDAz","is_bot":false,"login":"arademaker","name":"Alexandre Rademaker"},"body":"\r\n1. I am the owner of the organization\r\n2. I created Fine-grained personal access tokens\r\n\r\nWhat permission do I need? \r\n\r\n```python\r\nauth = Auth.Token(GKEY)\r\ng = Github(auth=auth)\r\norg = g.get_organization(ORGNAME)\r\nprint(org)\r\nteams = org.get_teams().  # <<- error here\r\nfor g in teams:\r\n    print(g)\r\n```\r\n\r\n```\r\ngithub.GithubException.GithubException: 403 {\"message\": \"Resource not accessible by personal access token\", \"documentation_url\": \"https://docs.github.com/rest/teams/teams#list-teams\"}\r\n```","comments":[{"id":"IC_kwDOADYVqs57QEcs","author":{"login":"dregad"},"authorAssociation":"NONE","body":"> What permission do I need?\r\n\r\n1. Your token's *Resource owner* needs to be the **organisation**<sup>1</sup> (i.e. when you view the token, it should read `Access on the <ORG_NAME> organization`. If it shows `Access on <USERNAME>`, you will need to create another token with the correct owner.\r\n2. Under *Organization permissions*, select Read-only (or higher) access to *Members*\r\n\r\n<sup>1</sup> The organisation must allow this: https://github.com/organizations/<ORG_NAME>/settings/personal-access-tokens\r\n\r\nHope this helps.","createdAt":"2024-04-20T23:07:24Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/2951#issuecomment-2067810092","viewerDidAuthor":false}],"createdAt":"2024-04-13T00:24:35Z","number":2951,"state":"OPEN","title":"unable to list the teams of an organization","url":"https://github.com/PyGithub/PyGithub/issues/2951"},{"author":{"id":"MDQ6VXNlcjIwOTQ0NzMy","is_bot":false,"login":"paradise321","name":"Paradise123321"},"body":"Hello guys,\r\nI have a question and seems not able to find the answer, and need your help or check, thanks!\r\n\r\nAccording to Github's \"[the best practices for using the REST API](https://docs.github.com/en/rest/using-the-rest-api/best-practices-for-using-the-rest-api?apiVersion=2022-11-28)\", it says:\r\n\r\n[Use conditional requests if appropriate](https://docs.github.com/en/rest/using-the-rest-api/best-practices-for-using-the-rest-api?apiVersion=2022-11-28#use-conditional-requests-if-appropriate)\r\n\r\nSo I wonder how can I do that in PyGithub? Say I want to request some repo's README file, thanks!\r\n","comments":[],"createdAt":"2024-04-12T14:25:39Z","number":2950,"state":"OPEN","title":"How to make conditional requests if appropriate in PyGithub?","url":"https://github.com/PyGithub/PyGithub/issues/2950"},{"author":{"id":"MDQ6VXNlcjYxNzAwODE=","is_bot":false,"login":"mxmehl","name":"Max Mehl"},"body":"I noticed that the `Team` class uses some legacy endpoints.\r\n\r\nOne example is [`Team.add_membership()`](https://pygithub.readthedocs.io/en/latest/github_objects/Team.html#github.Team.Team.add_membership), which calls `PUT /teams/{id}/memberships/{user}`. According to the [REST API documentation](https://docs.github.com/en/rest/teams/members?apiVersion=2022-11-28#add-or-update-team-membership-for-a-user-legacy), this endpoint is legacy:\r\n\r\n> Deprecation Notice: This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Add or update team membership for a user](https://docs.github.com/rest/teams/members#add-or-update-team-membership-for-a-user) endpoint.\r\n>\r\n> `PUT /orgs/{org}/teams/{team_slug}/memberships/{username}`\r\n\r\nIs this already on your radar? How do you generally handle such deprecations?\r\n\r\nIf this is a todo item for you, I'm not sure whether I can execute it alone. I already made a smaller contribution to this project, but I wouldn't know how to make such a big transition as definitely more than just this endpoint is deprecated.","comments":[{"id":"IC_kwDOADYVqs57ITTF","author":{"login":"EnricoMi"},"authorAssociation":"COLLABORATOR","body":"I think that should simply be fixed by changing the URL used. Updating the test data might be the most elaborate part.\r\n\r\nYou could draft a PR changing the URLs first and I can look into test data. Please consider all `/team/{id}` urls.","createdAt":"2024-04-19T05:09:57Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/2946#issuecomment-2065773765","viewerDidAuthor":false}],"createdAt":"2024-04-08T08:40:43Z","number":2946,"state":"OPEN","title":"`Team` class using legacy API endpoints","url":"https://github.com/PyGithub/PyGithub/issues/2946"},{"author":{"id":"MDQ6VXNlcjQ1NjAwNTc=","is_bot":false,"login":"joelostblom","name":"Joel Ostblom"},"body":"Is there a way too either return only org repos matching a regex or quickly returning all the repo names (and then doing the regex match as a separate step)? Currently I have only found this approach:\r\n\r\n```py\r\nrepos = g.get_organization('org-name').get_repos()\r\n[repo.name for repo in repos]\r\n```\r\n\r\nBut that takes a prohibitively long time for large orgs due to it having to traverse all the repo end points in the API. I was hoping that there was a way to retrieve all the repo names with a single API call and then parsing that list before connecting only to the desired repos.\r\n\r\nRunning something like this from the command line is an order of magnitude faster, so I'm thinking there must be an end point in the API for getting all names directly ([maybe this one?](https://docs.github.com/en/rest/repos/repos?apiVersion=2022-11-28#list-organization-repositories)):\r\n\r\n```\r\ngh repo list org-name --json name --jq '.[].name' -L 99999  \r\n```","comments":[],"createdAt":"2024-04-06T16:06:00Z","number":2944,"state":"OPEN","title":"Quick way to get all repo names of an org (or query repos based on regex directly)","url":"https://github.com/PyGithub/PyGithub/issues/2944"},{"author":{"id":"MDQ6VXNlcjc1NzExNTg=","is_bot":false,"login":"xmo-odoo","name":""},"body":"A while ago, Github allowed [forking repositories within an organisation](https://github.blog/changelog/2022-06-27-improved-innersource-collaboration-and-enterprise-fork-policies/) (with both source and destination being the organisation).\r\n\r\nWhen creating a PR, the `head` can be `{owner}:{branch}` which is not sufficient to distinguish between same-organisation forks. To handle this issue, they added a `head_repo` parameter, which is the name of the source repository for the PR.\r\n\r\npygithub does not currently support this parameter. It should probably be either a string or an organisation.\r\n\r\nAn other update which might be nice is to allow using a `Branch` as `head`, that way pygithub would have all the metadata for both sides of the PR creation and can infer all the bits and where to put them.","comments":[{"id":"IC_kwDOADYVqs6FpiJY","author":{"login":"shafr"},"authorAssociation":"NONE","body":"Same here, none of current combination helps and causes error message to appear:\r\n\r\n```\r\ngithub.GithubException.GithubException: 422 {\"message\": \"Validation Failed\", \"errors\": [{\"resource\": \"PullRequest\", \"field\": \"head\", \"code\": \"invalid\"}], \"documentation_url\": \"https://docs.github.com/rest/pulls/pulls#create-a-pull-request\", \"status\": \"422\"}\r\n```","createdAt":"2024-07-22T07:17:56Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/2942#issuecomment-2242257496","viewerDidAuthor":false}],"createdAt":"2024-04-05T14:02:50Z","number":2942,"state":"OPEN","title":"`head_repo` missing from `create_pull`","url":"https://github.com/PyGithub/PyGithub/issues/2942"},{"author":{"id":"MDQ6VXNlcjQxMDU1NzM5","is_bot":false,"login":"SinaRanjkeshzade","name":"Sina Ranjkeshzadeh"},"body":"To get some commits before a specific time I used `list(repo.get_commits(until=issue_creation_time))`. But when I run it, it never ends. Instead if I write `repo.get_commits(until=issue_creation_time)` and ignore converting to 'list', everything works fine. ","comments":[],"createdAt":"2024-04-02T11:54:50Z","number":2935,"state":"OPEN","title":"list(repo.get_commits(until=issue_creation_time)) gets stuck for me and never ends","url":"https://github.com/PyGithub/PyGithub/issues/2935"},{"author":{"id":"MDQ6VXNlcjU1NzY4OTcw","is_bot":false,"login":"QinhaoChang","name":""},"body":"Greetings, I would like to extend my gratitude of the hardwork of this Library. I would like to know if there is a possibility that we could have a functionality  apply to the following scenario: \r\n1 . in an open pull request, it has list of commits.  A developer merge a pull request from his forked repo ( or other repo) to his feature branch, and include this merge in a commit in this open pull request. Would it be possible that we use PyGitHub to get that merged pull reuqest information  from the commit?   \r\nCC: @HowellWang\r\nThank you in advance and appreciate your time to read this! ","comments":[],"createdAt":"2024-03-29T03:28:05Z","number":2933,"state":"OPEN","title":"Get pull request merged from other repository information from the commit history ","url":"https://github.com/PyGithub/PyGithub/issues/2933"},{"author":{"id":"MDQ6VXNlcjE2ODg5MjA=","is_bot":false,"login":"guymatz","name":"Guy Matz"},"body":"Hi!  Thank you for all you do!  Is it possible to check if a branch has been merged?","comments":[{"id":"IC_kwDOADYVqs546kvs","author":{"login":"xvega"},"authorAssociation":"CONTRIBUTOR","body":"> Hi! Thank you for all you do! Is it possible to check if a branch has been merged?\r\n\r\nHello @guymatz \r\n\r\nI noticed this was posted as an issue; it's actually a perfect question for the PyGitHub Discussions Q&A section. Where you can [ask the community for help](https://github.com/PyGithub/PyGithub/discussions/categories/q-a)\r\n\r\nStack Overflow is also a good place for reaching a broader audience with the pygithub tag.\r\n\r\nIssues are best reserved for bug reports or feature suggestions, helping maintainers or people looking into issues to contribute solutions to prioritize development work. As PyGithub is seeking new maintainers, https://github.com/PyGithub/PyGithub/discussions/2205\r\n\r\n\r\nTo answer your question:\r\n\r\nIt's possible to check if a branch has been merged:\r\n\r\n- For a PR check the `merged_at` field in the response.\r\n- For a branch you can do it this way:\r\n\r\n```python\r\nbase = \"main\"\r\nhead = \"your_branch\"\r\n\r\ncomparison = repo.compare(base, head)\r\n```\r\n\r\nThat's using this [endpoint](https://docs.github.com/en/rest/commits/commits?apiVersion=2022-11-28#compare-two-commits) \r\n","createdAt":"2024-03-31T09:51:49Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/2932#issuecomment-2028620780","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs55UdtH","author":{"login":"guymatz"},"authorAssociation":"NONE","body":"Yes, of course.  Sorry!  Thanks!!","createdAt":"2024-04-03T19:22:01Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/2932#issuecomment-2035407687","viewerDidAuthor":false}],"createdAt":"2024-03-27T13:57:30Z","number":2932,"state":"OPEN","title":"Check if a branch has been merged?","url":"https://github.com/PyGithub/PyGithub/issues/2932"},{"author":{"id":"MDQ6VXNlcjYwNDE2NDY3","is_bot":false,"login":"disbr007","name":"Jeff Disbrow"},"body":"I was trying to get some metrics around time from requested review to the review being completed, but it seems like only \"open\" review requests (those that haven't been completed) are returned.\r\n\r\nAm I correct? Is this intended? Is there another way to get _all_ review requests for a PR?","comments":[{"id":"IC_kwDOADYVqs537xFo","author":{"login":"EnricoMi"},"authorAssociation":"COLLABORATOR","body":"I think this is expected: https://docs.github.com/en/rest/pulls/review-requests?apiVersion=2022-11-28#get-all-requested-reviewers-for-a-pull-request\r\n\r\nIf you find a way in the API to get all review requests, then we can find a way to provide them via PyGithub.","createdAt":"2024-03-21T12:28:56Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/2924#issuecomment-2012156264","viewerDidAuthor":false}],"createdAt":"2024-03-20T18:06:52Z","number":2924,"state":"OPEN","title":"PullRequest.get_review_requests() only returns requests that have not been completed","url":"https://github.com/PyGithub/PyGithub/issues/2924"},{"author":{"id":"U_kgDOCbx2Aw","is_bot":false,"login":"nitang22","name":""},"body":"Why is my role None instead of admin?\r\n\r\n```python\r\nfrom github import Github\r\nfrom github import Auth\r\n\r\nauth = Auth.Token(\"\")\r\ng = Github(auth=auth)\r\nfor user in g.get_organization('xxxx').get_members():\r\n    print(f'username: {user.login}, role: {user.role}')\r\n```\r\n\r\nOutput \r\n```\r\nusername: nitang22, role: None\r\n```\r\n\r\nAdditionally, can we retrieve a list of pending members?  ","comments":[{"id":"IC_kwDOADYVqs53VIX3","author":{"login":"nitang22"},"authorAssociation":"NONE","body":"Same as #1477 ","createdAt":"2024-03-16T15:54:38Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/2922#issuecomment-2002028023","viewerDidAuthor":false}],"createdAt":"2024-03-16T15:50:16Z","number":2922,"state":"OPEN","title":"Role is None instead of admin","url":"https://github.com/PyGithub/PyGithub/issues/2922"},{"author":{"id":"MDQ6VXNlcjE3MTI2MTY4","is_bot":false,"login":"vipinshreyaskumar","name":"Vipin Shreyas Kumar"},"body":"Native API to get all the markdown files in a repository. ","comments":[],"createdAt":"2024-03-09T17:22:31Z","number":2917,"state":"OPEN","title":"Get all Markdown files in a repo","url":"https://github.com/PyGithub/PyGithub/issues/2917"},{"author":{"id":"MDQ6VXNlcjE2NDc2NDU=","is_bot":false,"login":"glaubitz","name":"John Paul Adrian Glaubitz"},"body":"The testsuite requires `httpretty` (https://github.com/gabrielfalcao/HTTPretty) which hasn't been updated since 2022 and still depends on `urllib3` 1.x which is problematic for Linux distributions which provide Python packages through their repositories and cannot provide old versions of `urllib3`.\r\n\r\nCan the testsuite be adapted to drop support for `httpretty`?","comments":[],"createdAt":"2024-03-07T11:49:54Z","number":2915,"state":"OPEN","title":"Testsuite requires httpretty which seems orphaned upstream","url":"https://github.com/PyGithub/PyGithub/issues/2915"},{"author":{"id":"U_kgDOBYLN_g","is_bot":false,"login":"AdrianVMartin","name":"Adrian V. Martin"},"body":"While running in colab the code:\r\n!pip install PyGithub\r\nfrom github import Github\r\nReceiving the error:\r\nImportError                               Traceback (most recent call last)\r\n[<ipython-input-7-d9790518fcd5>](https://localhost:8080/#) in <cell line: 2>()\r\n      1 get_ipython().system('pip install PyGithub')\r\n----> 2 from github import Github\r\n\r\nImportError: cannot import name 'Github' from 'github' (/usr/local/lib/python3.10/dist-packages/github/__init__.py)","comments":[{"id":"IC_kwDOADYVqs52wffc","author":{"login":"xvega"},"authorAssociation":"CONTRIBUTOR","body":"I noticed this was posted as an issue; it's actually a perfect question for the PyGitHub Discussions Q&A section. Where you can [ask the community for help](https://github.com/PyGithub/PyGithub/discussions/categories/q-a) \r\n\r\nStack Overflow is also a fantastic place for reaching a broader audience with the pygithub tag.\r\n\r\nIssues are best reserved for bug reports or feature suggestions, helping maintainers or people looking into issues to contribute solutions to prioritize development work. As PyGithub is seeking new maintainers, [focusing our efforts is more important than ever. ](https://github.com/PyGithub/PyGithub/discussions/2205)\r\n\r\n> While running in colab the code: !pip install PyGithub from github import Github Receiving the error: ImportError Traceback (most recent call last) in <cell line: 2>() 1 get_ipython().system('pip install PyGithub') ----> 2 from github import Github\r\n> \r\n> ImportError: cannot import name 'Github' from 'github' (/usr/local/lib/python3.10/dist-packages/github/**init**.py)\r\n\r\n@AdrianVMartin can you add some screenshots or steps to reproduce your error? I tried to reproduce your error in Colab but worked fine for me.\r\n\r\n<img width=\"1024\" alt=\"image\" src=\"https://github.com/PyGithub/PyGithub/assets/3665266/9e4209b5-2387-463f-b500-defcdc731656\">\r\n","createdAt":"2024-03-12T19:47:16Z","includesCreatedEdit":true,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_DOWN","users":{"totalCount":1}}],"url":"https://github.com/PyGithub/PyGithub/issues/2911#issuecomment-1992423388","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs55blly","author":{"login":"simonasmulevicius-humbility"},"authorAssociation":"NONE","body":"Getting the same issue on my end","createdAt":"2024-04-04T13:47:55Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/2911#issuecomment-2037274994","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs552FD2","author":{"login":"amindadgar"},"authorAssociation":"NONE","body":"The same error on my end too. It seems there is another package that is causing this and when I try to remove all my python packages using this\r\n```\r\npip freeze | xargs pip uninstall -y\r\n```\r\n\r\nand after that when I'm trying to install the pygithub package\r\n```\r\npip install PyGithub\r\n```\r\n\r\nEverything works as expected and no error will pop up when running the code below\r\n```\r\nfrom github import GitHub\r\n```","createdAt":"2024-04-09T06:12:31Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":4}},{"content":"HEART","users":{"totalCount":3}}],"url":"https://github.com/PyGithub/PyGithub/issues/2911#issuecomment-2044219638","viewerDidAuthor":false}],"createdAt":"2024-02-26T15:14:24Z","number":2911,"state":"OPEN","title":"from github import Github","url":"https://github.com/PyGithub/PyGithub/issues/2911"},{"author":{"id":"MDQ6VXNlcjM1NjIwMDA3","is_bot":false,"login":"see-k-er","name":"Vishnupriya Varadharaju"},"body":"Hello!\r\nI am using this repo for a project and came across `repo.network_count` method in class `github.Repository.Repository.`\r\n\r\n```    @property\r\n    def network_count(self) -> int:\r\n        \"\"\"\r\n        :type: integer\r\n        \"\"\"\r\n        self._completeIfNotSet(self._network_count)\r\n        return self._network_count.value\r\n```\r\nThe value returned for this field seemed to be the same as that of `repo.forks`. Can someone explain what this field is?","comments":[{"id":"IC_kwDOADYVqs53OyD2","author":{"login":"xvega"},"authorAssociation":"CONTRIBUTOR","body":"Hello @see-k-er \r\n\r\nI noticed this was posted as an issue; it's actually a perfect question for the PyGitHub Discussions Q&A section. Where you can [ask the community for help](https://github.com/PyGithub/PyGithub/discussions/categories/q-a) \r\n\r\nStack Overflow is also a fantastic place for reaching a broader audience with the pygithub tag.\r\n\r\nIssues are best reserved for bug reports or feature suggestions, helping maintainers or people looking into issues to contribute solutions to prioritize development work. As PyGithub is seeking new maintainers, [focusing our efforts is more important than ever. ](https://github.com/PyGithub/PyGithub/discussions/2205)","createdAt":"2024-03-15T19:57:12Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/2908#issuecomment-2000363766","viewerDidAuthor":false}],"createdAt":"2024-02-25T20:56:56Z","number":2908,"state":"OPEN","title":"What does network_count represent?","url":"https://github.com/PyGithub/PyGithub/issues/2908"},{"author":{"id":"U_kgDOCRx2Vg","is_bot":false,"login":"AndriiY-SK","name":""},"body":"I want to deactivate/activate webhooks but PyGithub `hook.edit` require `name` and `config` field to update webhook.  \r\nI tried code below but  this code delete a webhook secret  \r\n```\r\nconfig = hook.config\r\ndel config['secret']\r\nhook.edit(\r\n  name=hook.name,\r\n  config=config,\r\n  active=False\r\n)\r\n```\r\n\r\nAlso, I tried to update `config` with orignal config and it broke `secret` value with `*********`  \r\n\r\nIn the [doc](https://docs.github.com/en/rest/repos/webhooks?apiVersion=2022-11-28#update-a-repository-webhook) say that we should pass `secret` for webhook if `secret` previously had.\r\nHowever, I tried code sample to patch webhook from the doc page to update just `active` field and it works   \r\n```\r\ncurl -L -X PATCH -H \"Accept: application/vnd.github+json\" -H \"Authorization: Bearer <TOKEN>\" -H \"X-GitHub-Api-Version: 2022-11-28\" https://api.github.com/repos/<ORG>/<REPO>/hooks/<HOOK_ID> -d '{\"active\":true}'\r\n```\r\n![image](https://github.com/PyGithub/PyGithub/assets/152860246/da6a58c0-7fb2-4b26-b4c8-233b88cded8d)\r\n \r\n Of course, you have implementation to omit webhooks secret in the Github UI repository settings but not in PyGithub  \r\n\r\n\r\nAbout PyGithub `hook.edit` implementation  \r\nWhy do we need to check that `name is str`  and `config is dict` but remove unsetted items like a `name` and `config`  \r\n```\r\n        post_parameters = NotSet.remove_unset_items(\r\n            {\r\n                \"name\": name,\r\n                \"config\": config,\r\n                \"events\": events,\r\n                \"add_events\": add_events,\r\n                \"remove_events\": remove_events,\r\n                \"active\": active,\r\n            }\r\n        )\r\n``` \r\n\r\nVersion: PyGithub==2.1.1","comments":[],"createdAt":"2024-02-20T08:52:33Z","number":2906,"state":"OPEN","title":"How to omit webhook secret update (config) when change webhook status active/inactive","url":"https://github.com/PyGithub/PyGithub/issues/2906"},{"author":{"id":"MDQ6VXNlcjYzMjIwMjU4","is_bot":false,"login":"DaeAman","name":"Aman Kumar"},"body":"`comment = repo.get_comment(comment_id)`\r\n\r\ndoing this in python, with correct access (all permissions given, able to create comments via API), but unable to fetch using pygithub library. Can someone help here please? Thanks!","comments":[],"createdAt":"2024-02-03T15:00:24Z","number":2893,"state":"OPEN","title":"get_comment for issues resulting in 404 even with correct access for tokens","url":"https://github.com/PyGithub/PyGithub/issues/2893"},{"author":{"id":"U_kgDOBtOUPg","is_bot":false,"login":"darkpandarts","name":""},"body":"Hi,\r\n\r\nI think  the `squash_merge_commit_message` Github api has changed. If I run the following code:\r\n\r\n```\r\n        ghub = Github(self.token)\r\n        repo = ghub.get_repo(f\"{self.owner}/{self.repository}\")\r\n        print(f\"Repository: {repo.full_name}\")\r\n        # print(dir(repo))\r\n        repo.edit(\r\n            allow_squash_merge=True,\r\n            squash_merge_commit_message=\"COMMIT_MESSAGES\",\r\n        )\r\n```\r\n\r\nI get the following error:\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"/media/bsgt/jogi1/XX_local_PSYNC_linux2/XXX_CONTRACTING/stablecaps/0000_STABLECAPS_GITREPOS/scriptomatix/git/modify_github_settings/mod_github_settings.py\", line 87, in <module>\r\n    mgs.main()\r\n  File \"/media/bsgt/jogi1/XX_local_PSYNC_linux2/XXX_CONTRACTING/stablecaps/0000_STABLECAPS_GITREPOS/scriptomatix/git/modify_github_settings/mod_github_settings.py\", line 33, in main\r\n    repo.edit(\r\n  File \"/media/bsgt/jogi1/XX_local_PSYNC_linux2/XXX_CONTRACTING/stablecaps/0000_STABLECAPS_GITREPOS/scriptomatix/git/modify_github_settings/venv/lib/python3.9/site-packages/github/Repository.py\", line 1949, in edit\r\n    headers, data = self._requester.requestJsonAndCheck(\"PATCH\", self.url, input=post_parameters)\r\n  File \"/media/bsgt/jogi1/XX_local_PSYNC_linux2/XXX_CONTRACTING/stablecaps/0000_STABLECAPS_GITREPOS/scriptomatix/git/modify_github_settings/venv/lib/python3.9/site-packages/github/Requester.py\", line 537, in requestJsonAndCheck\r\n    return self.__check(*self.requestJson(verb, url, parameters, headers, input, self.__customConnection(url)))\r\n  File \"/media/bsgt/jogi1/XX_local_PSYNC_linux2/XXX_CONTRACTING/stablecaps/0000_STABLECAPS_GITREPOS/scriptomatix/git/modify_github_settings/venv/lib/python3.9/site-packages/github/Requester.py\", line 598, in __check\r\n    raise self.createException(status, responseHeaders, data)\r\ngithub.GithubException.GithubException: 422 {\"message\": \"Validation Failed\", \"errors\": [{\"message\": \"Sorry, invalid setting combination. The following are valid combinations for the squash commit title and message: PR_TITLE and PR_BODY, PR_TITLE and BLANK, PR_TITLE and COMMIT_MESSAGES, COMMIT_OR_PR_TITLE and COMMIT_MESSAGES. (invalid_squash_commit_setting_combo)\", \"resource\": \"Repository\", \"field\": \"merge_commit_allowed\", \"code\": \"invalid\"}], \"documentation_url\": \"https://docs.github.com/rest/repos/repos#update-a-repository\"}\r\n```\r\n\r\nThe api options have changed as per the message:\r\n\r\n```\r\nThe following are valid combinations for the squash commit title and message: PR_TITLE and PR_BODY, PR_TITLE and BLANK, PR_TITLE and COMMIT_MESSAGES, COMMIT_OR_PR_TITLE and COMMIT_MESSAGES.\r\n```\r\n\r\nWould it be possible to update the app to account for these new settings please? :)","comments":[{"id":"IC_kwDOADYVqs59bgOn","author":{"login":"JackPGreen"},"authorAssociation":"NONE","body":"This is an undocumented behaviour of the GitHub API.\r\n\r\nIf you want to set the `squash_merge_commit_message ` property, you must also set the `squash_merge_commit_title` property to a validatable value **in the same request**, irrespective of the current value of `squash_merge_commit_title`","createdAt":"2024-05-10T10:27:30Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/2890#issuecomment-2104361895","viewerDidAuthor":false}],"createdAt":"2024-01-31T22:48:30Z","number":2890,"state":"OPEN","title":"squash_merge_commit_message settings do not work any longer","url":"https://github.com/PyGithub/PyGithub/issues/2890"},{"author":{"id":"MDQ6VXNlcjUwMDkzNTY=","is_bot":false,"login":"jonapich","name":"Jonathan Piché"},"body":"This: https://github.com/PyGithub/PyGithub/blob/34c4642eb1fae2d754cfeb30874515cb1a19f5e1/github/Workflow.py#L137\r\n\r\nThe Github API simply doesn't support SHAs there: it's limited to branches and tags.\r\n\r\nThe REST API documentation also mentions branches and tags: https://docs.github.com/en/rest/actions/workflows?apiVersion=2022-11-28#create-a-workflow-dispatch-event--parameters\r\n\r\n","comments":[{"id":"IC_kwDOADYVqs5x82Vf","author":{"login":"EnricoMi"},"authorAssociation":"COLLABORATOR","body":"You are right. Would you like to create a PR to fix this?","createdAt":"2024-01-26T09:57:31Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/2881#issuecomment-1911776607","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs54jlV0","author":{"login":"laysauchoa"},"authorAssociation":"NONE","body":"Hi @EnricoMi would that fix it? https://github.com/PyGithub/PyGithub/pull/2931 Thank you in advance!","createdAt":"2024-03-27T11:57:51Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/2881#issuecomment-2022593908","viewerDidAuthor":false}],"createdAt":"2024-01-22T15:43:11Z","number":2881,"state":"OPEN","title":"Workflow.create_dispatch(): Arguments support \"ref: Commit\" but API does not","url":"https://github.com/PyGithub/PyGithub/issues/2881"},{"author":{"id":"MDQ6VXNlcjcxNzM0ODI3","is_bot":false,"login":"Jediweirdo","name":""},"body":"I'm trying to access a Tag's message (essentially the image below)\r\n![image](https://github.com/PyGithub/PyGithub/assets/71734827/37e55a1d-fede-47da-bbe1-06a2475f6e41)\r\nThis tag was created using `create_git_tag()` and `create_git_ref()`. However, I'm not able to find a way to get it after hours of trying. The closest I've ever been is getting to the Tag object, but there's no way to see the message from there. \r\nHere's what I've tried:\r\n- `get_git_tag(sha_of_linked_commit)`  # Dished out a 404\r\n- `get_git_refs()`, isolating the ref tied to the tag, then attempting to access it like that # Another 404\r\n- `get_git_tags()` doesn't exist, and just something I did out of desperation\r\n- Pretty much every property in Tag that I could think of\r\n- Pretty much every property in Commit that I could think of\r\n- Pretty much every property in GitCommit that I could think of\r\n\r\nSorry if this has a very easy answer that I'm missing/did wrong, as I'm new to using PyGithub and am an adept coder at best. Looking forward to any responses!\r\n\r\nedit: fixed a confusing typo","comments":[{"id":"IC_kwDOADYVqs5wPdQJ","author":{"login":"EnricoMi"},"authorAssociation":"COLLABORATOR","body":"Interesting question. There is a difference between a Github tag and a Git tag: https://docs.github.com/en/rest/git/tags?apiVersion=2022-11-28#about-git-tags\r\n\r\nCreating a tag as you did returns a `GitTag` instance that has a SHA, which is different to the respective commit's sha. `get_git_tag` only works with the `GitTag`'s SHA, not the commit's SHA. The Github API does not seem to provide a way to retrieve that SHA from the tag, there is only create and get, but no way to list. The respective git ref does not mention the Github tag SHA.","createdAt":"2024-01-09T14:02:04Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/2869#issuecomment-1883100169","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs5wPekO","author":{"login":"EnricoMi"},"authorAssociation":"COLLABORATOR","body":"If you find a sequence of Github API calls that work four you, then I can check if PyGithub implements that. You can use the example CURL commands from the docs without the `-H \"Authorization: Bearer <YOUR-TOKEN>\"` against the PyGithub repo.\r\n\r\nhttps://docs.github.com/en/rest/git/tags?apiVersion=2022-11-28#about-git-tags","createdAt":"2024-01-09T14:03:56Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/2869#issuecomment-1883105550","viewerDidAuthor":false}],"createdAt":"2024-01-09T10:13:37Z","number":2869,"state":"OPEN","title":"Unable to Get a Tag's Message ","url":"https://github.com/PyGithub/PyGithub/issues/2869"},{"author":{"id":"MDQ6VXNlcjE2MTAyNzk0","is_bot":false,"login":"Hermios","name":""},"body":"Hi\r\nWhen using the function create_repo_from_template from AuthenticatedUser, the option \"include_all_branches\" is not handled\r\nPlease add an argument to handle it\r\n\r\nThanks","comments":[{"id":"IC_kwDOADYVqs5wqBpE","author":{"login":"janssonoskar"},"authorAssociation":"CONTRIBUTOR","body":"@EnricoMi Hi, can I jump on this? Have a pull request ready https://github.com/PyGithub/PyGithub/pull/2871","createdAt":"2024-01-12T22:29:10Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"HOORAY","users":{"totalCount":1}}],"url":"https://github.com/PyGithub/PyGithub/issues/2867#issuecomment-1890064964","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs5wwFPH","author":{"login":"janssonoskar"},"authorAssociation":"CONTRIBUTOR","body":"This has now been merged in https://github.com/PyGithub/PyGithub/pull/2871, and can be closed","createdAt":"2024-01-15T09:22:13Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/2867#issuecomment-1891652551","viewerDidAuthor":false}],"createdAt":"2024-01-02T16:13:05Z","number":2867,"state":"OPEN","title":"Missing some options when creating repo from template ","url":"https://github.com/PyGithub/PyGithub/issues/2867"},{"author":{"id":"MDQ6VXNlcjEzMjM3MDg=","is_bot":false,"login":"JLLeitschuh","name":"Jonathan Leitschuh"},"body":"I was recently working on a project where I was pulling quite a bit of data from GitHub to generate statistics around thousands of pull requests generated.\r\n\r\nIn this case, I wanted intercept that response and cache it so that, when I inevitably had a bug in my code I could use the PyGitHub API to re-try pulling that exact same data again, but process it differently. I wanted to be able to do this without hitting the rate-limiter a second time.\r\n\r\nThus, I decided to use `requests-cache` to intercept the response and enable this.\r\n\r\nhttps://requests-cache.readthedocs.io/en/stable/index.html\r\n\r\nHowever, since PyGitHub doesn't expose an API to change the `session` instance, I had to use the patch solution to patch the `Session` object. However, this is less than ideal in a multithreaded application.","comments":[{"id":"IC_kwDOADYVqs5vAFki","author":{"login":"EnricoMi"},"authorAssociation":"COLLABORATOR","body":"I guess getting access to the `Session` instance that is used by the `Requester` is sufficient, rather then providing an instance as a `github.Github` constructor argument.","createdAt":"2023-12-19T08:06:43Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/2865#issuecomment-1862293794","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs5vJD1K","author":{"login":"JLLeitschuh"},"authorAssociation":"COLLABORATOR","body":"Likely. One other thing I'm thinking about too is that the cache requester wouldn't need a delay before each request if the response is cached. But requests that don't hit the cache will still need a delay. I don't know if there's an easy way to make this work with this library and the current structure of PyGithub ","createdAt":"2023-12-20T15:14:07Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/2865#issuecomment-1864645962","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs6PiVoj","author":{"login":"pythoninthegrass"},"authorAssociation":"NONE","body":"Not super granular and modest performance gains, but I was able to install requests-cache by itself and saw it shave off 15-20 seconds per run.\r\n\r\n```py\r\n#!/usr/bin/env python\r\n\r\nimport requests_cache\r\nfrom decouple import config\r\nfrom github import Github\r\nfrom pathlib import Path\r\n\r\n# environment variables\r\nCSV_PATH = config('CSV_PATH', default='csv')\r\nTTL = config('TTL', default=3600)\r\n\r\n# create csv directory if it doesn't exist\r\nPath(CSV_PATH).mkdir(parents=True, exist_ok=True)\r\n\r\n# cache requests for n seconds\r\nrequests_cache.install_cache('github_cache', backend='sqlite', expire_after=TTL)\r\n```","createdAt":"2024-10-11T21:29:00Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/2865#issuecomment-2408143395","viewerDidAuthor":false}],"createdAt":"2023-12-19T00:28:24Z","number":2865,"state":"OPEN","title":"Support custom Requests Session Instances","url":"https://github.com/PyGithub/PyGithub/issues/2865"},{"author":{"id":"MDQ6VXNlcjc3MDM0OA==","is_bot":false,"login":"koliyo","name":"Nils Hjelte"},"body":"This API is not available in the SDK?\r\n\r\nhttps://docs.github.com/en/rest/activity/watching?apiVersion=2022-11-28#set-a-repository-subscription","comments":[{"id":"IC_kwDOADYVqs5vGaUA","author":{"login":"EnricoMi"},"authorAssociation":"COLLABORATOR","body":"See \"/repos/{owner}/{repo}/subscription\" in https://pygithub.readthedocs.io/en/stable/apis.html\r\n\r\nhttps://pygithub.readthedocs.io/en/stable/github_objects/AuthenticatedUser.html#github.AuthenticatedUser.AuthenticatedUser.add_to_watched","createdAt":"2023-12-20T07:02:50Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/2864#issuecomment-1863951616","viewerDidAuthor":false}],"createdAt":"2023-12-18T13:03:48Z","number":2864,"state":"OPEN","title":"Subscription API not exposed","url":"https://github.com/PyGithub/PyGithub/issues/2864"},{"author":{"id":"U_kgDOBnQ1SQ","is_bot":false,"login":"brendan-snyk","name":"Brendan S"},"body":"Hello, \r\nI'm going a full organization get_members() and it's returning all the users. The problem is, i'm trying to tie the 'login' (their github username) over to email, specifically their corporate email address. However, most of our members are returning an empty email field. Despite showing in the GIthub Web UI. \r\n\r\nAny ideas here?","comments":[{"id":"IC_kwDOADYVqs5uibBC","author":{"login":"brendan-snyk"},"authorAssociation":"NONE","body":"My code is as simple as:\r\n```\r\nfrom github import Github\r\naccess_token = <redacted>\r\n\r\n# Initialize GitHub\r\ng = Github(access_token)\r\n\r\n# Name of the organization\r\norg_name = 'test'\r\n\r\n# Get the organization\r\norg = g.get_organization(org_name)\r\n\r\n# List all teams in the organization\r\nmembers = org.get_members()\r\nfor member in members:\r\n        print(f\"- {member.login}\")\r\n        print(f\"- {member.email}\")\r\n```","createdAt":"2023-12-13T18:42:03Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/2861#issuecomment-1854517314","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs5u5ZDE","author":{"login":"gjabouley-invn"},"authorAssociation":"CONTRIBUTOR","body":"Hello\r\n\r\nin order to get the mail from API, user needs to configure its email address as __public__.\r\n\r\nin https://github.com/settings/profile\r\n![image](https://github.com/PyGithub/PyGithub/assets/47566129/7fe5eed3-b46e-4e87-8ac7-452c1d340445)\r\n\r\nNeeds to select in the drop down list the corporate email address, then hit save button\r\n\r\nthen you can access email using API","createdAt":"2023-12-18T13:43:53Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/2861#issuecomment-1860538564","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs5u5hLI","author":{"login":"brendan-snyk"},"authorAssociation":"NONE","body":"I understand what you are saying there, however, if we do this:\r\n```\r\nurl = \"https://api.github.com/graphql\"\r\nh = {\"Authorization\": \"bearer \" + token}\r\n    ext = 'externalIdentities(first:1, userName: \"' + email + '\") {'\r\n    q1 = \"\"\"\r\n    query{\r\n    organization(login: \"snyk\") {\r\n     samlIdentityProvider {\r\n\"\"\"\r\n    q2 = \"\"\"\r\n         edges {\r\n           node {\r\n             user {\r\n               login\r\n             }\r\n           }\r\n         }\r\n       }\r\n     }\r\n   }\r\n\r\n }\r\n\"\"\"\r\n    final = q1 + ext + q2\r\n    r = requests.post(url, json={\"query\": final}, headers=h).json()\r\n    edges = safeget(\r\n        r, \"data\", \"organization\", \"samlIdentityProvider\", \"externalIdentities\", \"edges\"\r\n    )\r\n```\r\n\r\nIt indeed works. Can the non-GraphQL endpoint match the data returned by GraphQL endpoint?","createdAt":"2023-12-18T13:58:04Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/2861#issuecomment-1860571848","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs5u5tck","author":{"login":"gjabouley-invn"},"authorAssociation":"CONTRIBUTOR","body":"i'm not GraphQL fluent, but it looks like you are reading data from the `samlIdentityProvider` endpoint.\r\nIt might be different from the public email address API data accessed when calling `member.email`","createdAt":"2023-12-18T14:18:00Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/2861#issuecomment-1860622116","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs578K1G","author":{"login":"Arlington1985"},"authorAssociation":"NONE","body":"I am running the following code snippet, it doesn't get me any member\r\n```\r\nfrom github import Github\r\nimport os\r\n\r\ngithub = Github(\r\n    base_url=\"https://GITHUB_ENDPOINT/api/v3\",\r\n    login_or_token=os.environ[\"GITHUB_TOKEN\"],\r\n)\r\n\r\norganization=github.get_organization(\"MYORG\")\r\n\r\nmembers=[]\r\n# List all teams in the organization\r\nmembers = organization.get_members()\r\nfor member in members:\r\n        print(f\"- {member.login}\")\r\n        print(f\"- {member.email}\")\r\n```\r\n\r\nBut running with GH CLI returns\r\n```\r\ngh api \\                            \r\n  -H \"Accept: application/vnd.github+json\" \\\r\n  -H \"X-GitHub-Api-Version: 2022-11-28\" \\\r\n  /orgs/MYORG/members\r\n```","createdAt":"2024-04-26T13:11:45Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/2861#issuecomment-2079370566","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs58G-_o","author":{"login":"gjabouley-invn"},"authorAssociation":"CONTRIBUTOR","body":"Your snippet works fine, using an access token with following permission: `admin:org, repo, user, workflow`\r\nI just removed the `base_url=\"https://GITHUB_ENDPOINT/api/v3\",` line","createdAt":"2024-04-29T09:01:06Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/2861#issuecomment-2082205672","viewerDidAuthor":false}],"createdAt":"2023-12-13T18:40:55Z","number":2861,"state":"OPEN","title":"get_members() isn't returning emails for all users, despite showing up in the GIthub UI","url":"https://github.com/PyGithub/PyGithub/issues/2861"},{"author":{"id":"U_kgDOCSI8xw","is_bot":false,"login":"Starburst10","name":""},"body":"I am working on a project and want to merge Crunchbase data with Github API data, so I am trying to them by matching the company website. Any ideas? Thanks!","comments":[],"createdAt":"2023-12-08T14:18:26Z","number":2856,"state":"OPEN","title":"Is it possible to view >1,000 user organization accounts and their websites?","url":"https://github.com/PyGithub/PyGithub/issues/2856"},{"author":{"id":"MDQ6VXNlcjc2Nzc3OTM2","is_bot":false,"login":"jellejurre","name":"JelleJurre"},"body":"This useful endpoint is missing from PyGithub :(","comments":[],"createdAt":"2023-11-29T10:45:41Z","number":2850,"state":"OPEN","title":"Support `/orgs/{org}/audit-log` endpoint","url":"https://github.com/PyGithub/PyGithub/issues/2850"},{"author":{"id":"MDQ6VXNlcjM3Mzg0MTI=","is_bot":false,"login":"samwyndham","name":"Sam Wyndham"},"body":"Hi,\r\n\r\nI'm looking for a way to get the workflow run jobs for a `specific run attempt`. GitHubs API is:\r\n\r\nhttps://docs.github.com/en/rest/actions/workflow-jobs?apiVersion=2022-11-28#list-jobs-for-a-workflow-run-attempt\r\n\r\nAm I correct this is not currently possible in `PyGithub`?\r\n\r\nI see we can do the following to get all jobs but I don't think there is a way to filter those jobs by run attempt. \r\n\r\n```python\r\njobs = Github(auth=auth).get_repo(\"owner/repo\").get_workflow_run(123).jobs(\"all\")\r\n```\r\n\r\nThank you!\r\n\r\n(Edited because I misunderstood the GitHub API)","comments":[],"createdAt":"2023-11-23T14:51:46Z","number":2847,"state":"OPEN","title":"Is it possible to get workflow run for a specific `run attempt`?","url":"https://github.com/PyGithub/PyGithub/issues/2847"},{"author":{"id":"MDQ6VXNlcjgwOTAxMTA=","is_bot":false,"login":"kebaldwi","name":"Keith B"},"body":"","comments":[],"createdAt":"2023-11-19T22:54:42Z","number":2839,"state":"OPEN","title":"pip install is it deprecated","url":"https://github.com/PyGithub/PyGithub/issues/2839"},{"author":{"id":"MDQ6VXNlcjUzNTc0MDYy","is_bot":false,"login":"AndrewJDawes","name":"Andrew Dawes"},"body":"**Methods called on `Secret` and `Variable` model methods are not requesting the correct GitHub REST API endpoint URLs. Invoking these methods causes 404 errors.**\r\n\r\n- For `Variable`, there is a bug that appends additional incorrect parts to the variable's REST API endpoint URL, resulting in 404 errors for `delete` (HTTP `DELETE`) and `edit` (HTTP `PATCH`).\r\n  - Example:\r\n    - Expected: `/repos/{owner}/{repo}/actions/variables/{name}`\r\n    - Actual: `/repos/{owner}/{repo}/actions/variables/{name}/actions/variables/{name}`\r\n- For both `Variable` and `Secret`, fetching a `PaginatedList` of either from the `Repository` model's `get_variables` or `get_secrets` methods fails to correctly set the `_url` attribute on the paginated list of models. Therefore, calling such methods will also fail.\r\n\r\nBelow are some examples for how to reproduce the unexpected behavior. Please substitute `\"AndrewJDawes/PyGithub\"` with the owner/name of a repository to which you have access.\r\n\r\n```python\r\n# Setup\r\nrepo = self.g.get_repo(\"AndrewJDawes/PyGithub\")\r\nvariable = repo.create_variable(\"VARIABLE_NAME\", \"VARIABLE_VALUE\")\r\nrepo = self.g.get_repo(\"AndrewJDawes/PyGithub\")\r\nvariable = repo.get_variable(\"VARIABLE_NAME\")\r\n\r\n\r\n# Issue\r\nvariable.delete() # github.GithubException.UnknownObjectException: 404 {\"message\": \"Not Found\", \"documentation_url\": \"https://docs.github.com/rest\"}\r\n```\r\n\r\n```python\r\nrepo = self.g.get_repo(\"AndrewJDawes/PyGithub\")\r\nrepo.create_variable(\"VARIABLE_ONE_NAME\", \"VARIABLE_ONE_VALUE\")\r\nrepo.create_variable(\"VARIABLE_TWO_NAME\", \"VARIABLE_TWO_VALUE\")\r\nrepo = self.g.get_repo(\"AndrewJDawes/PyGithub\")\r\nvariables = repo.get_variables()\r\nfor variable in variables:\r\n    if variable.name in [\"VARIABLE_ONE_NAME\", \"VARIABLE_TWO_NAME\"] and variable.value in [\"VARIABLE_ONE_VALUE\", \"VARIABLE_TWO_VALUE\"]:\r\n        variable.delete() # Fails to delete Variable\r\n```\r\n\r\n```python\r\n  repo = self.g.get_repo(\"AndrewJDawes/PyGithub\")\r\n  repo.create_secret(\"SECRET_ONE_NAME\", \"SECRET_ONE_VALUE\")\r\n  repo.create_secret(\"SECRET_TWO_NAME\", \"SECRET_TWO_VALUE\")\r\n  repo = self.g.get_repo(\"AndrewJDawes/PyGithub\")\r\n  secrets = repo.get_secrets()\r\n  for secret in secrets:\r\n      if secret.name in [\"SECRET_ONE_NAME\", \"SECRET_TWO_NAME\"]:\r\n          secret.delete() # AttributeError: 'NoneType' object has no attribute 'startswith'\r\n```\r\n","comments":[{"id":"IC_kwDOADYVqs5sV2NA","author":{"login":"AndrewJDawes"},"authorAssociation":"CONTRIBUTOR","body":"Related: #2815","createdAt":"2023-11-18T22:34:30Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/2834#issuecomment-1817666368","viewerDidAuthor":false}],"createdAt":"2023-11-18T22:30:14Z","number":2834,"state":"OPEN","title":"404 and other errors when calling `delete()` method on `Github.Secret.Secret` and `GitHub.Variable.Variable`","url":"https://github.com/PyGithub/PyGithub/issues/2834"},{"author":{"id":"MDQ6VXNlcjI4Nzc3ODAy","is_bot":false,"login":"deven298","name":"Deven Patel"},"body":"I am writing a python script to get the discussion posts on a repo to build a GPT. However, I dont see the support to get the posts from discussions tab of the github repo. Can you please provide me with any sources that could help me?","comments":[],"createdAt":"2023-11-15T17:28:13Z","number":2817,"state":"OPEN","title":"How can I get posts from discussions tab of the repo?","url":"https://github.com/PyGithub/PyGithub/issues/2817"},{"author":{"id":"MDQ6VXNlcjEyNjcyMDI3","is_bot":false,"login":"owenlamont","name":"Owen Lamont"},"body":"I was running the search_repositories function a few times (just 10 or so minutes apart) like this:\r\n\r\n```python\r\ng = Github(auth=auth)\r\nquery = \"language:python\"\r\nresult = g.search_repositories(query, sort=\"stars\", order=\"desc\")\r\nrepo_list = list(result)\r\n```\r\n\r\nSo I'm searching Python repositories in descending order of stars... but I noticed I got inconsistent results on consecutive runs. For example sometimes the results returned Flask and FastAPI in the top ten results (which is expected) but other times those repositories were completely absent from the results.\r\n\r\nSearching on descending order of stars should give very consistent results for the top repos (that have wide margins between their star counts) but its dropping repos that I know should be in the results.","comments":[{"id":"IC_kwDOADYVqs5rMNxE","author":{"login":"owenlamont"},"authorAssociation":"NONE","body":"Forgot to mention I'm running pygithub 2.1.1 on WIndows, with the conda-forge install.\r\n\r\nI haven't checked whether this inconsistency comes from the GitHub Rest API itself or is caused by the pygithub logic","createdAt":"2023-11-07T11:59:17Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/2812#issuecomment-1798364228","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs5rMcZS","author":{"login":"owenlamont"},"authorAssociation":"NONE","body":"After reading the RestAPI docs some more I see a search with overly broad criteria that[ times out will return incomplete results and set a incomplete_results property to true](https://docs.github.com/en/rest/search/search?apiVersion=2022-11-28#timeouts-and-incomplete-results). I'm guessing that is what happens in my case but does PyGithub expose that incomplete results property in some way?\r\n\r\nHaving non-deterministic search results is a pretty nasty gotcha - when I experimented with tighter searches (just small range of star limits) that completed much faster I found I did get consistent results then.","createdAt":"2023-11-07T12:41:01Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/2812#issuecomment-1798424146","viewerDidAuthor":false}],"createdAt":"2023-11-07T11:57:39Z","number":2812,"state":"OPEN","title":"Inconsistent results when running search_repositories and sorting by descending stars","url":"https://github.com/PyGithub/PyGithub/issues/2812"},{"author":{"id":"U_kgDOBcnf6A","is_bot":false,"login":"niodice","name":"Nick Iodice"},"body":"The API in GitHub will return attributes about the runner the job was executed on: https://docs.github.com/en/rest/actions/workflow-jobs?apiVersion=2022-11-28#list-jobs-for-a-workflow-run-attempt. Specifically of interest to me are:\r\n- `runner_id`\r\n- `runner_name` (the most important to me)\r\n- `runner_group_id`\r\n- `runner_group_name`\r\n\r\nI _think_ these could be exposed through the `WorkflowJob` object: https://github.com/PyGithub/PyGithub/blob/dc37d5c1852a1c2f7083118adeda22760d575420/github/WorkflowJob.py","comments":[],"createdAt":"2023-11-02T19:17:57Z","number":2809,"state":"OPEN","title":"Support for `runner_*` properties in `WorkflowJob` type","url":"https://github.com/PyGithub/PyGithub/issues/2809"},{"author":{"id":"MDQ6VXNlcjI4ODQ0MDM0","is_bot":false,"login":"mavaras","name":"Mario Varas"},"body":"Hi everyone.\r\n\r\nI see PyGithub does not have support for calling this API endpoint [1] to approve/reject a manual job execution in a workflow run. Would it be possible to include this functionality in WorkflowRun class or anywhere else? Or maybe I'm a bit wrong and PyGithub indeed allows to do this process.\r\n\r\nBasically what I want to do is to trigger a job which is waiting for manual review in a workflow run pipeline.\r\n\r\nThanks in advance.\r\n\r\n[1] [Review pending deployments for a workflow run](https://docs.github.com/en/rest/actions/workflow-runs?apiVersion=2022-11-28#review-pending-deployments-for-a-workflow-run)","comments":[{"id":"IC_kwDOADYVqs5sf8WH","author":{"login":"clowtown"},"authorAssociation":"NONE","body":"I have a local contribution to submit for fetching the pending deployments, but I totally overlooked the body arguments for approving/rejecting. I will try to get my PR raised in the next week as a start. My need to was to be aware, not to approve/revoke.","createdAt":"2023-11-21T06:26:29Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/2808#issuecomment-1820312967","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs52FoVW","author":{"login":"RobKelley06"},"authorAssociation":"NONE","body":"@clowtown Was this ever implemented? I can't find it in the code.","createdAt":"2024-03-06T15:51:32Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/2808#issuecomment-1981187414","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs6cnPgn","author":{"login":"wvidana"},"authorAssociation":"NONE","body":"Came here looking for the same... Looks like for this specific API call we are gonna have to use a raw http request","createdAt":"2025-01-31T14:50:08Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/2808#issuecomment-2627532839","viewerDidAuthor":false}],"createdAt":"2023-11-02T15:32:57Z","number":2808,"state":"OPEN","title":"Add support for Review pending deployments for a workflow run","url":"https://github.com/PyGithub/PyGithub/issues/2808"},{"author":{"id":"U_kgDOBmdo3Q","is_bot":false,"login":"sfc-gh-hpathak","name":"Harsh Pathak"},"body":"GitHub allows changing the scope of permissions for an app while generating an access token for an app.   [API](https://github.com/PyGithub/PyGithub/blob/main/github/GithubIntegration.py#L197)\r\n\r\nNote that this takes `repositories` as the key also so we can scope down the access token to only specific repositories. This, however, is not supported in PyGithub today.  This is because the code below adds the permissions `str` directly to the `permissions` key and sends it as the body.\r\n\r\n[code](https://github.com/PyGithub/PyGithub/blob/main/github/GithubIntegration.py#L197) \r\n\r\nIt would be great if we can specify the repo list also as expected by the Github API","comments":[],"createdAt":"2023-11-02T05:50:38Z","number":2807,"state":"OPEN","title":"Add support for repositories in app access token creation","url":"https://github.com/PyGithub/PyGithub/issues/2807"},{"author":{"id":"MDQ6VXNlcjMzODMzMTY3","is_bot":false,"login":"rbreslin18","name":"Rodney Breslin"},"body":"It should be possible to get the disabled flag for a repository. \r\n\r\nIt is possible to get this with the Rest API but it appears it is not possible to determine if a repo is disabled via PyGithub.","comments":[],"createdAt":"2023-10-27T16:57:55Z","number":2802,"state":"OPEN","title":"Allow the Option to get Disabled Status of a Repository","url":"https://github.com/PyGithub/PyGithub/issues/2802"},{"author":{"id":"MDQ6VXNlcjI1NDIyNzg1","is_bot":false,"login":"Crain-32","name":"Crain"},"body":"The following would be useful to have.\r\n\r\n```python\r\nRepository.generate_release_notes(\r\n  tag: str, \r\n  previous_tag_name: Opt[str],\r\n  target_commitish: Opt[str] = NotSet, \r\n  configuration_file_path: Opt[str] = NotSet\r\n) -> SomeGitObject\r\n```\r\ncalling\r\n`POST /repos/{owner}/{repo}/releases/generate-notes`\r\n\r\nGenerating Release notes without generating a release is useful for pushing them to other locations. You might want to trigger a Github Action off the creation of a Pre-Release, and then generate the notes to hydrate the release. Or you might have 3 releases, delete the second one, and then have to rehydrate the third one to include all the information, etc.\r\n","comments":[],"createdAt":"2023-10-13T19:29:38Z","number":2794,"state":"OPEN","title":"Provide Generate Release Notes Function","url":"https://github.com/PyGithub/PyGithub/issues/2794"},{"author":{"id":"MDQ6VXNlcjMwNzU5NTcx","is_bot":false,"login":"Kallinteris-Andreas","name":"Kallinteris Andreas"},"body":"I get all the tags of a repo with `repo.get_tags()`, but the tags are not listed chronologically\r\n\r\n```py\r\nfrom github import Github\r\ng = Github()\r\nrepo = g.get_repo(\"InfinityMods/Ascension\")\r\ntags = list(repo.get_tags())\r\n... How do i get the latest tag here\r\n```\r\n\r\nI have tried using `latest_tag = tags[0]` but it does not give the chronologically latest tag (instead it appears to give the alphabetically latest release) ","comments":[],"createdAt":"2023-10-11T09:38:05Z","number":2791,"state":"OPEN","title":"How can I get the latest tag of a repo (or the list tags chronologically)","url":"https://github.com/PyGithub/PyGithub/issues/2791"},{"author":{"id":"MDQ6VXNlcjQzNTI5NTE=","is_bot":false,"login":"gczuczy","name":"Gergely Czuczy"},"body":"Hello,\r\n\r\nCould you please add a section in the examples on how to connect a PullRequest to a Project? The documentation doesn't pop anything up on this, but this is possible on github. And this is useful for organizational projects especially in some workflows.\r\n","comments":[],"createdAt":"2023-10-11T08:14:32Z","number":2790,"state":"OPEN","title":"Pull requests  to projects","url":"https://github.com/PyGithub/PyGithub/issues/2790"},{"author":{"id":"MDQ6VXNlcjQ4MTAwNTAw","is_bot":false,"login":"AleksandraAleksandrova","name":"Aleksandra Aleksandrova "},"body":"I have Github App installed on my **private** testing repository.\r\nI am trying to get the actual **git diff content** of a pull request (not just the url).\r\nIf I access the diff endpoint in my browser, I get the expected output, so the endpoint, which pr.diff_url provides is correct. Important note is that when I access it from the browser, there is a token parameter added.\r\n\r\nhere is my authentication process: \r\n``` python\r\nauth = github.Auth.AppAuth(app_id, app_key)\r\ngi = github.GithubIntegration(auth=auth)\r\ninstallation_id = vars.private_repo_installation_id\r\ntry:\r\n    installation = gi.get_app_installation(installation_id)\r\nexcept Exception as e:\r\n    print(\"Installation not found.\")\r\n    exit()\r\ng = installation.get_github_for_installation()\r\nrepo = g.get_repo(<repo-name>)\r\npr = repo.get_pull(<pr-number>)\r\n``` \r\n\r\nthen, using the requests library:\r\n``` python\r\nresponse = requests.get(pr.diff_url)\r\nif response.status_code == 200:\r\n    diff_content = response.text\r\nelse:\r\n    print(f\"Failed to fetch diff content. Status code: {response.status_code}\")\r\n```\r\n\r\nFor public repos, it works fine, but for private repositories, I get **status code 404**. \r\nI assumed it was the lack of authentication (although the status code is 404, not 403 or 401)\r\nso I added:\r\n```python\r\nheaders = {\"Authorization\": f\"token {gi.get_access_token(installation_id)}\"}\r\n```\r\nand later in the request:\r\n```python\r\nresponse = requests.get(pr.diff_url, headers=headers)\r\n```\r\n\r\nyet the 404 persists. \r\n\r\nbut I am unsure how to use it, couldn't find any examples in the documentation. The following code still encounters 404 error:\r\n```python\r\ntoken = gi.get_access_token(installation_id)\r\ntoken = token.token\r\nurl = pr.diff_url + '?token=' + token\r\nresponse = requests.get(url)\r\n```\r\n","comments":[{"id":"IC_kwDOADYVqs5n0NCY","author":{"login":"EnricoMi"},"authorAssociation":"COLLABORATOR","body":"I'd suspect the HTML urls use different authentication than the API urls. Looks like the API URL of the PR supports what you want: https://docs.github.com/en/rest/pulls/pulls?apiVersion=2022-11-28#custom-media-types-for-pull-requests\r\n\r\nSo you should request pr.url with `Accept: application/vnd.github.diff` header.","createdAt":"2023-09-30T10:44:05Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":2}}],"url":"https://github.com/PyGithub/PyGithub/issues/2768#issuecomment-1741738136","viewerDidAuthor":false}],"createdAt":"2023-09-27T08:46:49Z","number":2768,"state":"OPEN","title":"404 Git diff of pull request","url":"https://github.com/PyGithub/PyGithub/issues/2768"},{"author":{"id":"MDQ6VXNlcjk4MjA3","is_bot":false,"login":"jwodder","name":"John T. Wodder II"},"body":"The `Repository.create_label()` method should support being called without a `color` argument.  The GitHub API accepts label creation requests that do not specify a color; the resulting labels are assigned random colors.","comments":[{"id":"IC_kwDOADYVqs5oCnx1","author":{"login":"amnuts"},"authorAssociation":"CONTRIBUTOR","body":"Definitely the case for the 2022-11-28 version of the REST API?\r\n\r\nLooking at what `Repository.create_label()` calls, https://docs.github.com/en/rest/issues/labels?apiVersion=2022-11-28#create-a-label, it states:\r\n\r\n> Creates a label for the specified repository with the given name and color. The name and color parameters are required.\r\n\r\nUnless you were seeing it somewhere else that it's optional?\r\n","createdAt":"2023-10-03T18:36:30Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/2765#issuecomment-1745517685","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs5oCpD0","author":{"login":"jwodder"},"authorAssociation":"CONTRIBUTOR","body":"Despite what the API docs say, GitHub will accept a request to create a label that omits the \"color\" field, though it seems that the color will then always be set to some fixed grey value rather than being randomized.","createdAt":"2023-10-03T18:40:23Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":1}}],"url":"https://github.com/PyGithub/PyGithub/issues/2765#issuecomment-1745522932","viewerDidAuthor":false}],"createdAt":"2023-09-24T17:18:04Z","number":2765,"state":"OPEN","title":"`Repository.create_label()` should allow `color` to be unspecified","url":"https://github.com/PyGithub/PyGithub/issues/2765"},{"author":{"id":"MDQ6VXNlcjgyMjMzMDYy","is_bot":false,"login":"jorge-morse","name":"Jorge Torres"},"body":"# Context\r\n\r\nI am trying to build some automation using PyGithub and a Github App to authenticate to our organization.\r\nThe token I can get has an expiration of 1 hour.\r\n\r\nThe idea of my workflow is to do the following steps:\r\n1. Get a token from Github App\r\n2. Create pull request\r\n3. Notify reviewers\r\n4. Wait for PR to be merged with a flexible timeout to allow reviewers time to review.\r\n5. Once PR is merged, do more steps\r\n\r\nThe problem arises in 4 if the timeout exceeds 1 hour.\r\n\r\n# Problem\r\n\r\nIn the scenario above I noticed that even after the authentication token has expired, calling `pr.is_merged()` returns `False`.\r\n\r\nLooking at the code the behavior I was seeing makes sense:\r\n```\r\n    def is_merged(self) -> bool:\r\n        \"\"\"\r\n        :calls: `GET /repos/{owner}/{repo}/pulls/{number}/merge <https://docs.github.com/en/rest/reference/pulls>`_\r\n        \"\"\"\r\n        status, headers, data = self._requester.requestJson(\"GET\", f\"{self.url}/merge\")\r\n        return status == 204\r\n```\r\nsince the status of the request with expired token would be 401.\r\n\r\nI see two issues with this:\r\n1. False negatives - a PR could have been merged but `is_merged` returns False. \r\n2. Consumer is not notified in any way that their authentication has expired.\r\n\r\nThis also differs from other methods that I have been using like `pr.get_commits().get_page(0)` or `pr.get_labels().get_page(0)` which fail with the expected `github.BadCredentialsException` as soon as the token expires.\r\n\r\nI also tested with a token that has no access to my organization, but in that case an expected 403 was raised which seems to be handled by `github.GithubRetry`.\r\n\r\n# Steps to Reproduce\r\n\r\n1. Create a Github Token on your account with `repo` access\r\n2. Use token to create a client and get a pull request `pr`\r\n3. Remove Github token from your account\r\n4 . Run `pr.is_merged` .\r\n\r\nFor example:\r\n```\r\nimport github\r\ngithub_client = github.Github(\"<YOUR TOKEN>\")\r\n\r\nupstream_repo = github_client.get_repo(\"PyGithub/PyGithub\")\r\npr = upstream_repo.get_pull(2757)\r\npr.is_merged()\r\nFalse\r\npr.get_commits().get_page(0)\r\n[Commit(sha=\"7569ac6c33e3682fa42ddf7aee1640198461a557\"), Commit(sha=\"626a0435d063b12f9a9501a282e7371fe8783494\")]\r\n#\r\n# Remove token from account\r\n#\r\npr.is_merged()\r\nFalse\r\npr.get_commits().get_page(0)\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \".../site-packages/github/PaginatedList.py\", line 258, in get_page\r\n    headers, data = self.__requester.requestJsonAndCheck(\r\n  File \".../site-packages/github/Requester.py\", line 442, in requestJsonAndCheck\r\n    return self.__check(\r\n  File \".../site-packages/github/Requester.py\", line 487, in __check\r\n    raise self.__createException(status, responseHeaders, data)\r\ngithub.GithubException.BadCredentialsException: 401 {\"message\": \"Bad credentials\", \"documentation_url\": \"https://docs.github.com/rest\"}\r\n```\r\n\r\n# Workaround\r\n\r\nI call `pr.get_commits().get_page(0)` as well to ensure I can catch the token expiration scenario and handle it.","comments":[{"id":"IC_kwDOADYVqs5mqn8x","author":{"login":"EnricoMi"},"authorAssociation":"COLLABORATOR","body":"Excellent finding, I think all that is needed here is changing `requestJson` into `requestJsonAndCheck`. This issue might exist in many places.","createdAt":"2023-09-17T10:51:24Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/2760#issuecomment-1722449713","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs5mvEid","author":{"login":"jorge-morse"},"authorAssociation":"NONE","body":"I thought that could work too but then I saw the API returns 404 if branch has not been merged https://docs.github.com/en/rest/pulls/pulls?apiVersion=2022-11-28#check-if-a-pull-request-has-been-merged--status-codes and that would cause the `check` logic in `requestJsonAndCheck` to raise an `UnknownObjectException`.\r\n\r\n\r\n","createdAt":"2023-09-18T14:55:58Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/2760#issuecomment-1723615389","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs5nK-JM","author":{"login":"bauergeorg"},"authorAssociation":"NONE","body":"> Excellent finding, I think all that is needed here is changing `requestJson` into `requestJsonAndCheck`. This issue might exist in many places.\r\n\r\nIt's possible that my problem (https://github.com/PyGithub/PyGithub/issues/2759) caused by the same... The pull request (https://github.com/PyGithub/PyGithub/issues/2759) can be helpful, too.\r\n\r\n\r\n","createdAt":"2023-09-22T07:21:14Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/2760#issuecomment-1730929228","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs5nXm_A","author":{"login":"EnricoMi"},"authorAssociation":"COLLABORATOR","body":"Well, any non 204 response may cause a false-negative response of any method that uses `requestJson` and checks for `status == 204`, may it be an eventual-consitency 404 or an authentication issue.","createdAt":"2023-09-25T18:14:44Z","includesCreatedEdit":true,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/2760#issuecomment-1734242240","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs5wdf2e","author":{"login":"mohamed-ali-halloul"},"authorAssociation":"NONE","body":"Hello i want to work In this issue","createdAt":"2024-01-11T10:12:09Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/2760#issuecomment-1886780830","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs5wgx3Q","author":{"login":"EnricoMi"},"authorAssociation":"COLLABORATOR","body":"@jorge-delphix how do you create the Github App token in the first place? There might be some help to avoid the `BadCredentialsException` all together.","createdAt":"2024-01-11T17:31:55Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/2760#issuecomment-1887641040","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs5whJt0","author":{"login":"jorge-morse"},"authorAssociation":"NONE","body":"The code I was working on runs on Jenkins so we generate the Github App token via the github-branch-source-plugin. The expiration the plugin sets for the token is 1 hour, so that's why I was hitting this scenario in longer than 1 hour workfows.\r\n\r\nIn other workflows we use an installation token https://docs.github.com/en/apps/creating-github-apps/authenticating-with-a-github-app/authenticating-as-a-github-app-installation#generating-an-installation-access-token but I think it also has a 1 hr expiration.\r\n\r\n","createdAt":"2024-01-11T18:32:27Z","includesCreatedEdit":true,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/2760#issuecomment-1887738740","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs5whMud","author":{"login":"EnricoMi"},"authorAssociation":"COLLABORATOR","body":"Using the `AppAuthenticationAuth`, the token would be refreshed for you, but this obviously requires the private key and installation_id: https://pygithub.readthedocs.io/en/stable/examples/Authentication.html#app-installation-authentication","createdAt":"2024-01-11T18:41:10Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/2760#issuecomment-1887751069","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs5whoX0","author":{"login":"jorge-morse"},"authorAssociation":"NONE","body":"Ah yeah that would work and that covers the scenario that I needed it for. I essentially wanted the error to be raised so I could implement the token refresh on my side. Good to know I could do it via pygithub instead.\r\n\r\n","createdAt":"2024-01-11T19:52:51Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"HOORAY","users":{"totalCount":1}}],"url":"https://github.com/PyGithub/PyGithub/issues/2760#issuecomment-1887864308","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs5wh9XV","author":{"login":"EnricoMi"},"authorAssociation":"COLLABORATOR","body":"I'll keep this issue open for the general issue of `status == 204`.","createdAt":"2024-01-11T20:58:15Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/2760#issuecomment-1887950293","viewerDidAuthor":false}],"createdAt":"2023-09-15T21:26:01Z","number":2760,"state":"OPEN","title":"Methods checking for 204 status handle 404 incorrectly","url":"https://github.com/PyGithub/PyGithub/issues/2760"},{"author":{"id":"MDQ6VXNlcjc5MDc3NTY1","is_bot":false,"login":"bauergeorg","name":"Georg Bauer"},"body":"In my case a CI uinit-test has problems with 'fast' calls.\r\n\r\nI create a branch with REST API (PyGithub) and check if the branch exists. I delete the created branch and check if the branch is deleted. Here is an extract:\r\n\r\n```python\r\n## create branch ##\r\n# get sha of base branch\r\nref_main = repo.get_git_ref('heads/'+'main')\r\nsha_main = ref_main.raw_data['object']['sha']\r\n\r\n# create branch\r\nref_create = repo.create_git_ref(ref='refs/heads/'+branch_name, sha=sha_main)\r\nsha_ref_create = ref_create.raw_data['object']['sha']\r\n\r\n# check\r\nassert sha_main == sha_ref_create, sha_ref_create\r\nref_check = repo.get_git_ref('heads/'+branch_name)\r\nassert sha_main == ref_check.raw_data['object']['sha'], ref_check.raw_data['object']['sha']\r\n\r\n## delete branch ##\r\nref_delete = repo.get_git_ref('heads/'+branch_name)\r\n# delete\r\nref_delete.delete()\r\n\r\n# check\r\nrefs_check = repo.get_git_refs()\r\nassert branch_name not in refs_check, refs_check\r\n```\r\nI run code above multiply times. In must runs it will work wonderfull. In some cases I get a message like this:\r\n```Traceback (most recent call last):\r\n  File \"c:/repository_git/ee-pipeline-mngt/test.py\", line 216, in <module>\r\n    test(token='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', author=args.author)\r\n  File \"c:/repository_git/ee-pipeline-mngt/test.py\", line 42, in test\r\n    ref_check = repo.get_git_ref('heads/'+branch_name)\r\n  File \"C:\\Program Files\\Python37\\lib\\site-packages\\github\\Repository.py\", line 2352, in get_git_ref\r\n    \"GET\", f\"{self.url}{prefix}{ref}\"\r\n  File \"C:\\Program Files\\Python37\\lib\\site-packages\\github\\Requester.py\", line 355, in requestJsonAndCheck\r\n    verb, url, parameters, headers, input, self.__customConnection(url)\r\n  File \"C:\\Program Files\\Python37\\lib\\site-packages\\github\\Requester.py\", line 378, in __check\r\n    raise self.__createException(status, responseHeaders, output)\r\ngithub.GithubException.UnknownObjectException: 404 {\"message\": \"Not Found\", \"documentation_url\": \"https://docs.github.com/rest/git/refs#get-all-references-in-a-namespace\"}\r\n```\r\n\r\nIf I check my test-repository in case of an creash with an external git client the branch exists. To add `repo.update()` won't be helpful.\r\n\r\nGreetings an thanks!\r\n\r\nGeorg","comments":[{"id":"IC_kwDOADYVqs5nN1JL","author":{"login":"jorge-morse"},"authorAssociation":"NONE","body":"I think you are facing an issue due to the eventual consistency of Github i.e. takes some time for the newly created branch to propagate throughout so it can be read consistently. We have faced similar in some of our workflows and the only solution we found is to retry. Given the \"eventual\" nature of the consistency, a future call should return the expected result.","createdAt":"2023-09-22T16:10:34Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/2759#issuecomment-1731678795","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs5nXf7S","author":{"login":"EnricoMi"},"authorAssociation":"COLLABORATOR","body":"Yes, that is probably a [eventual-consistency](https://en.wikipedia.org/wiki/Eventual_consistency)-issue where the ref has been created but not yet propagated to `repo.get_git_ref`.\r\n\r\nYou should retry your `repo.get_git_ref` either in user code, or by using PyGithub's retry logic (version `2.0.0rc0` and above). By default, PyGithub retries all 5xx error codes plus some rate-limit related 403 errors.\r\n\r\nIn general, retrying 404 errors is not a wise thing to do, but if you are certain that all requested objects exist, you could tell PyGithub to retry any 404 as well.\r\n\r\nHere is some example code how to do this:\r\n```python\r\nimport github\r\nretry = github.GithubRetry(total=10, backoff_factor=0.1, status_forcelist=list(range(500, 600)) + [404])\r\ng = github.Github(retry=retry)\r\ng.get_repo(\"not/there\")\r\n```\r\n\r\nIn this example, the requested repo does not exist and the request is retried.\r\n\r\nEnable logging:\r\n```python\r\nimport logging\r\nlogging.basicConfig(level=logging.DEBUG, format='%(asctime)s %(name)-12s %(levelname)-8s %(message)s')\r\n```\r\n```\r\n2023-09-25 19:40:14.303 urllib3.connectionpool DEBUG    Starting new HTTPS connection (1): api.github.com:443\r\n2023-09-25 19:40:14.630 urllib3.connectionpool DEBUG    https://api.github.com:443 \"GET /repos/not/there HTTP/1.1\" 404 108\r\n2023-09-25 19:40:14.631 urllib3.util.retry DEBUG    Incremented Retry for (url='/repos/not/there'): GithubRetry(total=9, connect=None, read=None, redirect=None, status=None)\r\n2023-09-25 19:40:14.631 urllib3.connectionpool DEBUG    Retry: /repos/not/there\r\n2023-09-25 19:40:14.662 urllib3.connectionpool DEBUG    https://api.github.com:443 \"GET /repos/not/there HTTP/1.1\" 404 108\r\n2023-09-25 19:40:14.662 urllib3.util.retry DEBUG    Incremented Retry for (url='/repos/not/there'): GithubRetry(total=8, connect=None, read=None, redirect=None, status=None)\r\n2023-09-25 19:40:14.863 urllib3.connectionpool DEBUG    Retry: /repos/not/there\r\n2023-09-25 19:40:15.012 urllib3.connectionpool DEBUG    https://api.github.com:443 \"GET /repos/not/there HTTP/1.1\" 404 108\r\n2023-09-25 19:40:15.013 urllib3.util.retry DEBUG    Incremented Retry for (url='/repos/not/there'): GithubRetry(total=7, connect=None, read=None, redirect=None, status=None)\r\n2023-09-25 19:40:15.413 urllib3.connectionpool DEBUG    Retry: /repos/not/there\r\n2023-09-25 19:40:15.449 urllib3.connectionpool DEBUG    https://api.github.com:443 \"GET /repos/not/there HTTP/1.1\" 404 108\r\n2023-09-25 19:40:15.449 urllib3.util.retry DEBUG    Incremented Retry for (url='/repos/not/there'): GithubRetry(total=6, connect=None, read=None, redirect=None, status=None)\r\n2023-09-25 19:40:16.251 urllib3.connectionpool DEBUG    Retry: /repos/not/there\r\n2023-09-25 19:40:16.284 urllib3.connectionpool DEBUG    https://api.github.com:443 \"GET /repos/not/there HTTP/1.1\" 404 108\r\n2023-09-25 19:40:16.285 urllib3.util.retry DEBUG    Incremented Retry for (url='/repos/not/there'): GithubRetry(total=5, connect=None, read=None, redirect=None, status=None)\r\n2023-09-25 19:40:17.887 urllib3.connectionpool DEBUG    Retry: /repos/not/there\r\n2023-09-25 19:40:17.921 urllib3.connectionpool DEBUG    https://api.github.com:443 \"GET /repos/not/there HTTP/1.1\" 404 108\r\n2023-09-25 19:40:17.922 urllib3.util.retry DEBUG    Incremented Retry for (url='/repos/not/there'): GithubRetry(total=4, connect=None, read=None, redirect=None, status=None)\r\n2023-09-25 19:40:21.125 urllib3.connectionpool DEBUG    Retry: /repos/not/there\r\n2023-09-25 19:40:21.159 urllib3.connectionpool DEBUG    https://api.github.com:443 \"GET /repos/not/there HTTP/1.1\" 404 108\r\n2023-09-25 19:40:21.160 urllib3.util.retry DEBUG    Incremented Retry for (url='/repos/not/there'): GithubRetry(total=3, connect=None, read=None, redirect=None, status=None)\r\n2023-09-25 19:40:27.563 urllib3.connectionpool DEBUG    Retry: /repos/not/there\r\n2023-09-25 19:40:27.596 urllib3.connectionpool DEBUG    https://api.github.com:443 \"GET /repos/not/there HTTP/1.1\" 404 108\r\n2023-09-25 19:40:27.596 urllib3.util.retry DEBUG    Incremented Retry for (url='/repos/not/there'): GithubRetry(total=2, connect=None, read=None, redirect=None, status=None)\r\n2023-09-25 19:40:40.410 urllib3.connectionpool DEBUG    Retry: /repos/not/there\r\n2023-09-25 19:40:40.446 urllib3.connectionpool DEBUG    https://api.github.com:443 \"GET /repos/not/there HTTP/1.1\" 404 108\r\n2023-09-25 19:40:40.447 urllib3.util.retry DEBUG    Incremented Retry for (url='/repos/not/there'): GithubRetry(total=1, connect=None, read=None, redirect=None, status=None)\r\n2023-09-25 19:41:06.073 urllib3.connectionpool DEBUG    Retry: /repos/not/there\r\n2023-09-25 19:41:06.241 urllib3.connectionpool DEBUG    https://api.github.com:443 \"GET /repos/not/there HTTP/1.1\" 404 108\r\n2023-09-25 19:41:06.241 urllib3.util.retry DEBUG    Incremented Retry for (url='/repos/not/there'): GithubRetry(total=0, connect=None, read=None, redirect=None, status=None)\r\n2023-09-25 19:41:57.489 urllib3.connectionpool DEBUG    Retry: /repos/not/there\r\n2023-09-25 19:41:57.660 urllib3.connectionpool DEBUG    https://api.github.com:443 \"GET /repos/not/there HTTP/1.1\" 404 108\r\n```\r\nYou can see exponential backoff (increasing delay between retries) and eventually, it fails because the repo is still not there:\r\n```\r\nrequests.exceptions.RetryError: HTTPSConnectionPool(host='api.github.com', port=443): Max retries exceeded with url: /repos/not/there (Caused by ResponseError('too many 404 error responses'))\r\n```","createdAt":"2023-09-25T17:53:48Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/2759#issuecomment-1734213330","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs5oDGjV","author":{"login":"amnuts"},"authorAssociation":"CONTRIBUTOR","body":"That is a very handy example, @EnricoMi!  I was just about to post up a new issue asking if it PyGitHub any kind of retry, rate-based cool down, or something like that, because I'm also running into issues like the OP.\r\n\r\nShould a combination of what you have here and what you put in the 2.1.0.post0 release log be used to cover all bases?  Something like:\r\n\r\n```python\r\ng = github.Github(\r\n    seconds_between_requests=0.25,\r\n    seconds_between_writes=1\r\n    retry=github.GithubRetry(total=10, backoff_factor=0.1, status_forcelist=list(range(500, 600)) + [404])\r\n)\r\n```\r\n\r\nMaybe consider putting an example on https://pygithub.readthedocs.io/en/stable/index.html or something?","createdAt":"2023-10-03T20:04:42Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/2759#issuecomment-1745643733","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs5pZVoZ","author":{"login":"bauergeorg"},"authorAssociation":"NONE","body":"@EnricoMi thank you so much. It works like a charm! I've used your example and add my own retry management arround.\r\n\r\nIt is possible to change the retry handling of the class during runtime?\r\n\r\nI want to combine it with the expected result. E.g. I want to check if a branch exists or not. I will add a variable `expected_result` to my function. If the `expected_result=True`, the `status_forcelist=list(range(500, 600))` and if the `expected_result=False` the `status_forcelist=list(range(500, 600)) + [404])`.","createdAt":"2023-10-18T11:27:42Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/2759#issuecomment-1768249881","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs5py8MG","author":{"login":"amnuts"},"authorAssociation":"CONTRIBUTOR","body":"Is there a potential issue here with using the retry and the get_contents function?\r\n\r\nIt seems like the way to check if a file exists is to use the repo.get_contents and capture the exception.  But with the retry, it'll not throw the exception, or possibly a different exception, but it'll still go for as long as the retry.\r\n\r\nSo is there a better way to check if a file exists in a repo?  Or possibly be able to disable and enable the retry on demand?\r\n\r\nRight now I'm working around the issue with sending my own requests fetch to the api, but that feels like defeating the point of using pygithub a little.","createdAt":"2023-10-23T11:11:21Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"ROCKET","users":{"totalCount":1}}],"url":"https://github.com/PyGithub/PyGithub/issues/2759#issuecomment-1774961414","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs5pzMYd","author":{"login":"bauergeorg"},"authorAssociation":"NONE","body":"@amnuts Thanks for your comment. I doing the same: Working around get_contents function!","createdAt":"2023-10-23T11:53:48Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":1}}],"url":"https://github.com/PyGithub/PyGithub/issues/2759#issuecomment-1775027741","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs6OM0H0","author":{"login":"EnricoMi"},"authorAssociation":"COLLABORATOR","body":"So what would be useful is a method on `GitRef` (`ref_create`) that waits for the object to be created (wait until the 404 disappears). That method could modify the retry that it uses and adds the 404 for this sole purpose.\r\n\r\nI never came across such a consistency issue. I wonder if this would be useful for all PyGithub objects.","createdAt":"2024-10-01T13:00:48Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/2759#issuecomment-2385723892","viewerDidAuthor":false}],"createdAt":"2023-09-15T11:25:43Z","number":2759,"state":"OPEN","title":"404 on get_git_ref() in case of fast calls","url":"https://github.com/PyGithub/PyGithub/issues/2759"},{"author":{"id":"MDQ6VXNlcjM5NTY3NDU=","is_bot":false,"login":"thejcannon","name":"Josh Cannon"},"body":"See https://docs.github.com/en/rest/git/tags?apiVersion=2022-11-28#get-a-tag for the API endpoint","comments":[{"id":"IC_kwDOADYVqs5mlz9n","author":{"login":"bauergeorg"},"authorAssociation":"NONE","body":"Try `repo.get_git_ref('tags/'+your_tag_name)`. See [code](https://github.com/PyGithub/PyGithub/blob/main/github/Repository.py#L2662-L2673) for more details.","createdAt":"2023-09-15T12:22:55Z","includesCreatedEdit":true,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"EYES","users":{"totalCount":1}}],"url":"https://github.com/PyGithub/PyGithub/issues/2752#issuecomment-1721188199","viewerDidAuthor":false}],"createdAt":"2023-09-08T02:17:11Z","number":2752,"state":"OPEN","title":"`github.Repository.Repository` is missing `get_tag(tag)`","url":"https://github.com/PyGithub/PyGithub/issues/2752"},{"author":{"id":"U_kgDOBrZWdw","is_bot":false,"login":"JacekLakis-TomTom","name":""},"body":"I am using Github client with AppInstallationAuth to retrieve private repository, and I can successfully do it. However, after waiting 5 minutes and trying again, I am receiving \"Connection aborted.\" message, another try also works successfully.\r\n\r\nMaybe token isn't properly refreshed?\r\n\r\n#### To reproduce \r\n\r\nThis is working as expected:\r\n<details>\r\n  <summary>See working code</summary>\r\n\r\n```python\r\n>>> import logging\r\n>>> from datetime import datetime\r\n>>> from github import Github\r\n>>> from github.Auth import AppAuth\r\n>>>\r\n>>> logging.getLogger().setLevel(logging.DEBUG)\r\n>>> logging.getLogger().addHandler(logging.StreamHandler())\r\n>>>\r\n>>> github_app_id: int = <app-id>\r\n>>> github_app_installation_id: int = <app-installation-id>\r\n>>> key = '''\r\n... -----BEGIN RSA PRIVATE KEY-----\r\n...      [ ... ]\r\n... -----END RSA PRIVATE KEY-----\r\n... '''\r\n>>>\r\n>>> app_installation_auth = AppAuth(github_app_id, key).get_installation_auth(github_app_installation_id)\r\n>>> g = Github(auth=app_installation_auth)\r\n>>> g.get_repo(\"myprivate/repository\")\r\nStarting new HTTPS connection (1): api.github.com:443\r\nhttps://api.github.com:443 \"POST /app/installations/<app-installation-id>/access_tokens HTTP/1.1\" 201 175\r\nStarting new HTTPS connection (1): api.github.com:443\r\nhttps://api.github.com:443 \"GET /repos/myprivate/repository HTTP/1.1\" 200 None\r\nRepository(full_name=\"myprivate/repository\")\r\n>>> datetime.utcnow()\r\ndatetime.datetime(2023, 9, 7, 11, 10, 8, 747464)\r\n```\r\n</details>\r\n\r\nAfter waiting 5 minutes and calling `get_repo()` once again, I am receiving an error:\r\n\r\n<details>\r\n  <summary>See stacktrace</summary>\r\n\r\n```python\r\n>>> g.get_repo(\"myprivate/repository\")         \r\nTraceback (most recent call last):                                                                                                                                                     \r\n  File \"/home/workdir/venv/lib/python3.10/site-packages/urllib3/connectionpool.py\", line 714, in urlopen                                                       \r\n    httplib_response = self._make_request(                                                                                                                                             \r\n  File \"/home/workdir/venv/lib/python3.10/site-packages/urllib3/connectionpool.py\", line 466, in _make_request                   \r\n    six.raise_from(e, None)                                                                                                                                                            \r\n  File \"<string>\", line 3, in raise_from                                                                                                                                               \r\n  File \"/home/workdir/venv/lib/python3.10/site-packages/urllib3/connectionpool.py\", line 461, in _make_request                   \r\n    httplib_response = conn.getresponse()                                                                                                                                              \r\n  File \"/usr/lib/python3.10/http/client.py\", line 1375, in getresponse                                                                                                                                                                                                                                                                                                                                                                    \r\n    response.begin()                                                                                                                                                                   \r\n  File \"/usr/lib/python3.10/http/client.py\", line 318, in begin                                                                                                                                                                                                                                                                                                                                                                               version, status, reason = self._read_status()                                                         \r\n  File \"/usr/lib/python3.10/http/client.py\", line 287, in _read_status                                                                                                                 \r\n    raise RemoteDisconnected(\"Remote end closed connection without\"                                                                                                                    \r\nhttp.client.RemoteDisconnected: Remote end closed connection without response                                                                                                          \r\n                                                                                                                                                                                                                                                                                                                                                                                                                                          \r\nDuring handling of the above exception, another exception occurred:                                                                                                                                                   \r\n                                                                                                                                                                                                                                                                                                                                                                                                                                          Traceback (most recent call last):                                                                        \r\n  File \"/home/workdir/venv/lib/python3.10/site-packages/requests/adapters.py\", line 486, in send                                 \r\n    resp = conn.urlopen(                                                                                                                                                                                                                                                                                                                                                                                                                  \r\n  File \"/home/workdir/venv/lib/python3.10/site-packages/urllib3/connectionpool.py\", line 798, in urlopen                         \r\n    retries = retries.increment(                                                                                                                                                       \r\n  File \"/home/workdir/venv/lib/python3.10/site-packages/urllib3/util/retry.py\", line 550, in increment                                                          \r\n    raise six.reraise(type(error), error, _stacktrace)                                                                                                                                                                \r\n  File \"/home/workdir/venv/lib/python3.10/site-packages/urllib3/packages/six.py\", line 769, in reraise                                                         \r\n    raise value.with_traceback(tb)                                                                        \r\n  File \"/home/workdir/venv/lib/python3.10/site-packages/urllib3/connectionpool.py\", line 714, in urlopen                                                       \r\n    httplib_response = self._make_request(                                                                \r\n  File \"/home/workdir/venv/lib/python3.10/site-packages/urllib3/connectionpool.py\", line 466, in _make_request                                                 \r\n    six.raise_from(e, None)                                                                               \r\n  File \"<string>\", line 3, in raise_from                                                                  \r\n  File \"/home/workdir/venv/lib/python3.10/site-packages/urllib3/connectionpool.py\", line 461, in _make_request                                                 \r\n    httplib_response = conn.getresponse()                                                                 \r\n  File \"/usr/lib/python3.10/http/client.py\", line 1375, in getresponse                                    \r\n    response.begin()                                                                                      \r\n  File \"/usr/lib/python3.10/http/client.py\", line 318, in begin                                           \r\n    version, status, reason = self._read_status()                                                         \r\n  File \"/usr/lib/python3.10/http/client.py\", line 287, in _read_status                                    \r\n    raise RemoteDisconnected(\"Remote end closed connection without\"                                       \r\nurllib3.exceptions.ProtocolError: ('Connection aborted.', RemoteDisconnected('Remote end closed connection without response'))                                                                                       \r\n\r\nDuring handling of the above exception, another exception occurred:                                       \r\n\r\nTraceback (most recent call last):                                                                        \r\n  File \"<stdin>\", line 1, in <module>                                                                     \r\n  File \"/home/workdir/venv/lib/python3.10/site-packages/github/MainClass.py\", line 363, in get_repo                                                            \r\n    headers, data = self.__requester.requestJsonAndCheck(\"GET\", url)                                      \r\n  File \"/home/workdir/venv/lib/python3.10/site-packages/github/Requester.py\", line 443, in requestJsonAndCheck                                                 \r\n    *self.requestJson(                                                                                    \r\n  File \"/home/workdir/venv/lib/python3.10/site-packages/github/Requester.py\", line 580, in requestJson                                                         \r\n    return self.__requestEncode(cnx, verb, url, parameters, headers, input, encode)                                                                                                                                  \r\n  File \"/home/workdir/venv/lib/python3.10/site-packages/github/Requester.py\", line 685, in __requestEncode                                                     \r\n    status, responseHeaders, output = self.__requestRaw(                                                  \r\n  File \"/home/workdir/venv/lib/python3.10/site-packages/github/Requester.py\", line 723, in __requestRaw                                                        \r\n    response = cnx.getresponse()                                                                          \r\n  File \"/home/workdir/venv/lib/python3.10/site-packages/github/Requester.py\", line 164, in getresponse                                                         \r\n    r = verb(                                                                                             \r\n  File \"/home/workdir/venv/lib/python3.10/site-packages/requests/sessions.py\", line 602, in get                                                                \r\n    return self.request(\"GET\", url, **kwargs)                                                             \r\n  File \"/home/workdir/venv/lib/python3.10/site-packages/requests/sessions.py\", line 589, in request                                                            \r\n    resp = self.send(prep, **send_kwargs)                                                                 \r\n  File \"/home/workdir/venv/lib/python3.10/site-packages/requests/sessions.py\", line 703, in send                                                               \r\n    r = adapter.send(request, **kwargs)                                                                   \r\n  File \"/home/workdir/venv/lib/python3.10/site-packages/requests/adapters.py\", line 501, in send                                                               \r\n    raise ConnectionError(err, request=request)                                                           \r\nrequests.exceptions.ConnectionError: ('Connection aborted.', RemoteDisconnected('Remote end closed connection without response'))                                                                                    \r\n```\r\n\r\n</details>\r\n\r\n\r\nAnother attempt works successfully. As a workaround, I am passing `retry` to constructor:\r\n<details>\r\n  <summary>See workaround</summary>\r\n\r\n```python\r\n>>> g = Github(auth=app_installation_auth, retry=2)\r\n>>> g.get_repo(\"myprivate/repository\")\r\nConverted retries value: 2 -> Retry(total=2, connect=None, read=None, redirect=None, status=None)\r\nStarting new HTTPS connection (1): api.github.com:443\r\nhttps://api.github.com:443 \"GET /repos/myprivate/repository HTTP/1.1\" 200 None\r\nRepository(full_name=\"myprivate/repository\")\r\n>>> # Wait 5 minutes\r\n>>> g.get_repo(\"h\")\r\nIncremented Retry for (url='/repos/myprivate/repository'): Retry(total=1, connect=None, read=None, redirect=None, status=None)\r\nRetrying (Retry(total=1, connect=None, read=None, redirect=None, status=None)) after connection broken by 'ProtocolError('Connection aborted.', RemoteDisconnected('Remote end closed connection without response'))': /repos/myprivate/repository\r\nStarting new HTTPS connection (2): api.github.com:443\r\nhttps://api.github.com:443 \"GET /repos/myprivate/repository HTTP/1.1\" 200 None\r\nRepository(full_name=\"myprivate/repository\")\r\n```\r\n</details>\r\n\r\n#### Expected outcome\r\nI am able to read the repository without retrying.\r\n\r\n#### Versions\r\n```\r\npygithub==1.59.1\r\n```","comments":[{"id":"IC_kwDOADYVqs5nX4gL","author":{"login":"EnricoMi"},"authorAssociation":"COLLABORATOR","body":"Can you try version `pygithub==2.0.1rc0`, please? Can you check the expiration of the token?\r\n\r\n    g._Github__requester._Requester__auth._AppInstallationAuth__installation_authorization.expires_at","createdAt":"2023-09-25T19:08:15Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/2750#issuecomment-1734313995","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs5neTaO","author":{"login":"EnricoMi"},"authorAssociation":"COLLABORATOR","body":"I can confirm this behaviour (after 1 hour in my case) for 1.59.1, though token refresh works just fine, the subsequent call to the API with the new token fails due to `Connection aborted`, which is either a problem with the connection pool, or with the remote server. A problem with the token would cause some authentication error.\r\n\r\n```\r\n2023-09-26 19:30:32,238.238 urllib3.connectionpool DEBUG    Resetting dropped connection: api.github.com\r\n2023-09-26 19:30:32,684.684 urllib3.connectionpool DEBUG    https://api.github.com:443 \"POST /app/installations/36541767/access_tokens HTTP/1.1\" 201 231\r\nTraceback (most recent call last):\r\n  File \"/home/enrico/Work/git/venv-3.8/lib/python3.8/site-packages/urllib3/connectionpool.py\", line 714, in urlopen\r\n    httplib_response = self._make_request(\r\n  File \"/home/enrico/Work/git/venv-3.8/lib/python3.8/site-packages/urllib3/connectionpool.py\", line 466, in _make_request\r\n    six.raise_from(e, None)\r\n  File \"<string>\", line 3, in raise_from\r\n  File \"/home/enrico/Work/git/venv-3.8/lib/python3.8/site-packages/urllib3/connectionpool.py\", line 461, in _make_request\r\n    httplib_response = conn.getresponse()\r\n  File \"/usr/lib/python3.8/http/client.py\", line 1348, in getresponse\r\n    response.begin()\r\n  File \"/usr/lib/python3.8/http/client.py\", line 316, in begin\r\n    version, status, reason = self._read_status()\r\n  File \"/usr/lib/python3.8/http/client.py\", line 277, in _read_status\r\n    line = str(self.fp.readline(_MAXLINE + 1), \"iso-8859-1\")\r\n  File \"/usr/lib/python3.8/socket.py\", line 669, in readinto\r\n    return self._sock.recv_into(b)\r\n  File \"/usr/lib/python3.8/ssl.py\", line 1274, in recv_into\r\n    return self.read(nbytes, buffer)\r\n  File \"/usr/lib/python3.8/ssl.py\", line 1132, in read\r\n    return self._sslobj.read(len, buffer)\r\nConnectionResetError: [Errno 104] Connection reset by peer\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n  File \"/home/enrico/Work/git/venv-3.8/lib/python3.8/site-packages/requests/adapters.py\", line 486, in send\r\n    resp = conn.urlopen(\r\n  File \"/home/enrico/Work/git/venv-3.8/lib/python3.8/site-packages/urllib3/connectionpool.py\", line 798, in urlopen\r\n    retries = retries.increment(\r\n  File \"/home/enrico/Work/git/venv-3.8/lib/python3.8/site-packages/urllib3/util/retry.py\", line 550, in increment\r\n    raise six.reraise(type(error), error, _stacktrace)\r\n  File \"/home/enrico/Work/git/venv-3.8/lib/python3.8/site-packages/urllib3/packages/six.py\", line 769, in reraise\r\n    raise value.with_traceback(tb)\r\n  File \"/home/enrico/Work/git/venv-3.8/lib/python3.8/site-packages/urllib3/connectionpool.py\", line 714, in urlopen\r\n    httplib_response = self._make_request(\r\n  File \"/home/enrico/Work/git/venv-3.8/lib/python3.8/site-packages/urllib3/connectionpool.py\", line 466, in _make_request\r\n    six.raise_from(e, None)\r\n  File \"<string>\", line 3, in raise_from\r\n  File \"/home/enrico/Work/git/venv-3.8/lib/python3.8/site-packages/urllib3/connectionpool.py\", line 461, in _make_request\r\n    httplib_response = conn.getresponse()\r\n  File \"/usr/lib/python3.8/http/client.py\", line 1348, in getresponse\r\n    response.begin()\r\n  File \"/usr/lib/python3.8/http/client.py\", line 316, in begin\r\n    version, status, reason = self._read_status()\r\n  File \"/usr/lib/python3.8/http/client.py\", line 277, in _read_status\r\n    line = str(self.fp.readline(_MAXLINE + 1), \"iso-8859-1\")\r\n  File \"/usr/lib/python3.8/socket.py\", line 669, in readinto\r\n    return self._sock.recv_into(b)\r\n  File \"/usr/lib/python3.8/ssl.py\", line 1274, in recv_into\r\n    return self.read(nbytes, buffer)\r\n  File \"/usr/lib/python3.8/ssl.py\", line 1132, in read\r\n    return self._sslobj.read(len, buffer)\r\nurllib3.exceptions.ProtocolError: ('Connection aborted.', ConnectionResetError(104, 'Connection reset by peer'))\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"/home/enrico/Work/git/venv-3.8/lib/python3.8/site-packages/github/MainClass.py\", line 289, in get_user\r\n    headers, data = self.__requester.requestJsonAndCheck(\r\n  File \"/home/enrico/Work/git/venv-3.8/lib/python3.8/site-packages/github/Requester.py\", line 443, in requestJsonAndCheck\r\n    *self.requestJson(\r\n  File \"/home/enrico/Work/git/venv-3.8/lib/python3.8/site-packages/github/Requester.py\", line 580, in requestJson\r\n    return self.__requestEncode(cnx, verb, url, parameters, headers, input, encode)\r\n  File \"/home/enrico/Work/git/venv-3.8/lib/python3.8/site-packages/github/Requester.py\", line 685, in __requestEncode\r\n    status, responseHeaders, output = self.__requestRaw(\r\n  File \"/home/enrico/Work/git/venv-3.8/lib/python3.8/site-packages/github/Requester.py\", line 723, in __requestRaw\r\n    response = cnx.getresponse()\r\n  File \"/home/enrico/Work/git/venv-3.8/lib/python3.8/site-packages/github/Requester.py\", line 164, in getresponse\r\n    r = verb(\r\n  File \"/home/enrico/Work/git/venv-3.8/lib/python3.8/site-packages/requests/sessions.py\", line 602, in get\r\n    return self.request(\"GET\", url, **kwargs)\r\n  File \"/home/enrico/Work/git/venv-3.8/lib/python3.8/site-packages/requests/sessions.py\", line 589, in request\r\n    resp = self.send(prep, **send_kwargs)\r\n  File \"/home/enrico/Work/git/venv-3.8/lib/python3.8/site-packages/requests/sessions.py\", line 703, in send\r\n    r = adapter.send(request, **kwargs)\r\n  File \"/home/enrico/Work/git/venv-3.8/lib/python3.8/site-packages/requests/adapters.py\", line 501, in send\r\n    raise ConnectionError(err, request=request)\r\nrequests.exceptions.ConnectionError: ('Connection aborted.', ConnectionResetError(104, 'Connection reset by peer'))\r\n```","createdAt":"2023-09-26T17:39:15Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/2750#issuecomment-1735997070","viewerDidAuthor":false}],"createdAt":"2023-09-07T11:40:30Z","number":2750,"state":"OPEN","title":"\"Connection aborted.\" after 5 minutes when reading private repository via AppInstallationAuth","url":"https://github.com/PyGithub/PyGithub/issues/2750"},{"author":{"is_bot":true,"login":"app/"},"body":"We use Pull Request templates and I need to specify an alternative PR template when I open a PR from a script.\r\n\r\nAs far as I can tell from the code (https://github.com/PyGithub/PyGithub/blob/13cbd1b5722587607ddbda3105cad2c24a0baae3/github/Repository.py#L1382) there is no way to pass through the `template` parameter.\r\n\r\nCould you please update the API to support this parameter?\r\n\r\nDocumentation of the API: https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/using-query-parameters-to-create-a-pull-request","comments":[],"createdAt":"2023-08-31T02:17:12Z","number":2741,"state":"OPEN","title":"Please add support for Pull Request templates","url":"https://github.com/PyGithub/PyGithub/issues/2741"},{"author":{"id":"MDQ6VXNlcjI4OTQxMDc=","is_bot":false,"login":"IAmHughes","name":"Thomas Hughes"},"body":"I am working on automation that takes in a GitHub Webhook Payload and then takes actions based on that.\r\n\r\nThe payload is for a PR event, and that payload contains all of the information needed for the PR object, Repo object, Organization Object, Enterprise Object, and User object (user that opened the PR or took the action such as closed/re-opened/etc).\r\n\r\nHowever, with the way the SDK seems to be, I cannot \"new up\" a PR object for example from this data, and instead need to do a GET request to the API to get the PR, even though I have the contents needed in the webhook.\r\n\r\nCan we find a way to leverage JSON webhook payloads to new up objects instead of having to do additional GET calls?","comments":[{"id":"IC_kwDOADYVqs5lQzse","author":{"login":"EnricoMi"},"authorAssociation":"COLLABORATOR","body":"Related: #2334","createdAt":"2023-08-30T10:29:09Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/2736#issuecomment-1698904862","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs5mXCQY","author":{"login":"EnricoMi"},"authorAssociation":"COLLABORATOR","body":"Would you say that the approach of #2746 works for you?","createdAt":"2023-09-13T09:53:34Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/2736#issuecomment-1717314584","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs5mYbZ2","author":{"login":"EnricoMi"},"authorAssociation":"COLLABORATOR","body":"This is an example (ignore the `retry=None`) of how to access a comment given repo and issue and comment id (only comment is fetched from API):\r\nhttps://github.com/PyGithub/PyGithub/blob/1df1587d4133975fb121c31d881405cd7dd1da71/tests/Lazy.py#L50-L58","createdAt":"2023-09-13T13:52:20Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/2736#issuecomment-1717679734","viewerDidAuthor":false}],"createdAt":"2023-08-21T14:52:25Z","number":2736,"state":"OPEN","title":"Overrides for Objects to remove need for excessive GET calls when leveraging Webhooks?","url":"https://github.com/PyGithub/PyGithub/issues/2736"},{"author":{"id":"MDQ6VXNlcjIzMTMzMDg4","is_bot":false,"login":"Dufran","name":"oleksandr.korol"},"body":"Is there any method to get dependency-graph for repo?","comments":[{"id":"IC_kwDOADYVqs5tUWz_","author":{"login":"d33bs"},"authorAssociation":"NONE","body":"Wanted to upvote this feature! I didn't see that there was a way to do this yet within PyGithub. In reading through the [GitHub documentation surrounding SBOM requests](https://docs.github.com/en/rest/dependency-graph/sboms?apiVersion=2022-11-28) I developed the following Python snippet which could be used as a reference for future work. Sharing along just in case it's helpful in the meantime. Very open to improvements and would love to eventually leverage this capability within PyGithub!\r\n\r\nSidenote: I noticed that some but not all repositories I tested this with appear to return 404's for the SBOM request. I'm unsure why, but wanted to make mention just in case. Perhaps there is a related \"generate SBOM\" in addition to \"get existing SBOM\" type of request (or maybe GitHub generates these periodically behind the scenes)?\r\n\r\n```python\r\nfrom typing import Dict, Optional\r\n\r\nimport requests\r\n\r\ntoken = \"github_token_goes_here\"\r\n\r\ndef get_github_repo_sbom(full_name: str) -> Optional[Dict[str, str]]:\r\n    \"\"\"\r\n    Gathers GitHub Software Bill of Materials (SBOM) data\r\n    given a full_name (org/repo_name).\r\n\r\n    See here for more information:\r\n    https://docs.github.com/en/rest/dependency-graph/sboms\r\n    \"\"\"\r\n\r\n    try:\r\n        # attempt to receive sbom for a repo\r\n        response = requests.get(\r\n            f\"https://api.github.com/repos/{full_name}/dependency-graph/sbom\",\r\n            headers={\r\n                \"Accept\": \"application/vnd.github+json\",\r\n                \"Authorization\": f\"Bearer {token}\",\r\n                \"X-GitHub-Api-Version\": \"2022-11-28\",\r\n            },\r\n            timeout=10,\r\n        )\r\n        response.raise_for_status()\r\n\r\n        # return the result json\r\n        return response.json()\r\n\r\n    except requests.exceptions.RequestException as err:\r\n        print(\"Experienced SBOM request error: \", err)\r\n        return None\r\n```","createdAt":"2023-11-30T15:57:26Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/2730#issuecomment-1834052863","viewerDidAuthor":false}],"createdAt":"2023-08-18T13:47:15Z","number":2730,"state":"OPEN","title":"Method for getting dependency-graph/sbom","url":"https://github.com/PyGithub/PyGithub/issues/2730"},{"author":{"id":"MDQ6VXNlcjI4OTQxMDc=","is_bot":false,"login":"IAmHughes","name":"Thomas Hughes"},"body":"There are a number of [beta endpoints for GitHub Copilot for Business](https://docs.github.com/en/enterprise-cloud@latest/rest/copilot/copilot-for-business?apiVersion=2022-11-28) available now.\r\n\r\nWe'd like to leverage PyGitHub to interact with these endpoints.","comments":[{"id":"IC_kwDOADYVqs6BEihz","author":{"login":"AnkeshThakur"},"authorAssociation":"NONE","body":"Is there any update on it? I see that there was PR for it but its closed now - https://github.com/PyGithub/PyGithub/pull/2738\r\n\r\nIt would be really great if these apis become part of this library. Otherwise ad-hoc work is needed all the time.","createdAt":"2024-06-13T11:58:49Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/2723#issuecomment-2165450867","viewerDidAuthor":false}],"createdAt":"2023-08-16T16:33:58Z","number":2723,"state":"OPEN","title":"GitHub Copilot for Business (GHEC) Endpoints","url":"https://github.com/PyGithub/PyGithub/issues/2723"},{"author":{"id":"MDQ6VXNlcjY5MzYyMzMy","is_bot":false,"login":"aclarknexient","name":"Anthony Jarvis-Clark"},"body":"Github recently released a new feature called rulesets:\r\n\r\nhttps://docs.github.com/en/repositories/configuring-branches-and-merges-in-your-repository/managing-rulesets/about-rulesets\r\n\r\nRulesets are available in the REST and GraphQL APIs:\r\n* https://docs.github.com/en/rest/repos/rules?apiVersion=2022-11-28#get-all-repository-rulesets\r\n* https://docs.github.com/en/graphql/reference/mutations#createrepositoryruleset\r\n\r\nIt's still a new feature but at some point in the future I'd like to add it to our automation scripts.\r\n\r\nI haven't yet looked at the source of PyGithub to see how difficult it would be for me to add this. I'm not an expert Python coder but I can copy and paste REST API calls and edit names, so I _may_ be able to add this if no one else is able to. I didn't see any PRs or other Issues that mention rulesets. I hope it's OK that I created this ticket.","comments":[{"id":"IC_kwDOADYVqs5z6yGJ","author":{"login":"sfc-gh-hpathak"},"authorAssociation":"NONE","body":"Yeah. This is GA now. Would be great to have this, I might look into it when free. ","createdAt":"2024-02-14T22:13:57Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/2718#issuecomment-1944789385","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs6DWpQy","author":{"login":"mgagnon-wrk"},"authorAssociation":"NONE","body":"+1 for this. We require rulesets for specific functionality that the old branch protection rules cannot provide. Now we are forced to look at alternative libraries.","createdAt":"2024-07-02T16:20:41Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/2718#issuecomment-2203751474","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs6MuBfn","author":{"login":"timor-raiman"},"authorAssociation":"NONE","body":"+1 This would support enabling and configuring mergequeue","createdAt":"2024-09-19T12:38:14Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/2718#issuecomment-2360874983","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs6MuQDf","author":{"login":"EnricoMi"},"authorAssociation":"COLLABORATOR","body":"That should be straightforward to implement. Happy to review this! Any volunteers?","createdAt":"2024-09-19T13:05:10Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/2718#issuecomment-2360934623","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs6YKAER","author":{"login":"wyardley"},"authorAssociation":"CONTRIBUTOR","body":"I will see if I've got time; in the meantime, now that `requester` objects are public, does anyone have an example of using that to work with these?","createdAt":"2024-12-19T04:37:39Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/2718#issuecomment-2552758545","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs6YKQQl","author":{"login":"wyardley"},"authorAssociation":"CONTRIBUTOR","body":"Ended up with something like this\r\n```python\r\n                url = repo.url + f\"/rules/branches/{DEFAULT_BRANCH}\"\r\n                response = branch.requester.requestJsonAndCheck(\"GET\", url)\r\n\r\n                pr_params = [x[\"parameters\"] for x in response[1] if x[\"type\"] == \"pull_request\"][0]\r\n                if pr_params:\r\n                    num_required = pr_params[\"required_approving_review_count\"]\r\n                    if int(num_required) > 0:\r\n                        [...]\r\n                else:\r\n                    [...]\r\n```","createdAt":"2024-12-19T05:33:36Z","includesCreatedEdit":true,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/2718#issuecomment-2552824869","viewerDidAuthor":false}],"createdAt":"2023-08-14T13:53:31Z","number":2718,"state":"OPEN","title":"Feature Request: Github Branch Rulesets","url":"https://github.com/PyGithub/PyGithub/issues/2718"},{"author":{"id":"U_kgDOB5NfpA","is_bot":false,"login":"het28052001","name":"Het Shah"},"body":"Hello GitHub Community,\r\n\r\nI hope this message finds you well. I am currently working on a project where I need to retrieve the creation time of branches in a GitHub repository using the PyGitHub library. While I have been able to gather a lot of useful information through the library, I haven't been able to find a direct method to access the creation time of a branch.\r\n\r\nI have already explored the PyGitHub documentation and forums, but I'm unable to locate any explicit guidance regarding this specific aspect. Could anyone kindly guide me on how to retrieve the creation time of a branch programmatically using PyGitHub or any related tools? I would greatly appreciate it if someone could provide me with the syntax or any example code that accomplishes this.\r\n\r\n\r\n\r\n","comments":[],"createdAt":"2023-08-14T05:40:47Z","number":2717,"state":"OPEN","title":"Inquiry about Retrieving Branch Creation Time using PyGitHub","url":"https://github.com/PyGithub/PyGithub/issues/2717"},{"author":{"is_bot":true,"login":"app/"},"body":"Even though I have given the token all repositories access and “Administration” read-write. \r\n \r\ngithub.GithubException.GithubException: 403 {\"message\": \"Resource not accessible by personal access token\", \"documentation_url\": \"https://docs.github.com/rest/teams/teams#list-teams\"}\r\n\r\nI have tried classic token as well. Big blocker for me","comments":[{"id":"IC_kwDOADYVqs5jw6rI","author":{"login":""},"authorAssociation":"NONE","body":"It can fetch the teams list, but cannot iterate over it. \r\n\r\norg = g.get_organization(ORG)\r\n        print (\"Creating team - %s\" % \"data_team\")\r\n        teams = org.get_teams()\r\n        for t in teams: <throws error>\r\n           ","createdAt":"2023-08-10T19:11:40Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/2713#issuecomment-1673767624","viewerDidAuthor":false}],"createdAt":"2023-08-10T19:05:29Z","number":2713,"state":"OPEN","title":"Can’t manage teams with find grained personal access token","url":"https://github.com/PyGithub/PyGithub/issues/2713"},{"author":{"id":"MDQ6VXNlcjM5ODAzODEw","is_bot":false,"login":"alexdotc","name":"Alex Chavkin"},"body":"`Repository.update_file()` does the PUT to update content as per the GH API documentation, but then does a separate GET to try and retrieve the updated content (at least, I presume this was the intention), since Github doesn't return that in it's response. It looks like the URL used to retrieve the GET (just \"url\" in the API response) is not SHA-speciifc, so the content can sometimes be old, depending on how quickly Github's backend/storage gets updated. In my testing, this can sometimes be quite awhile (10+ seconds with a file that is around 300K). Because the updated content SHA returned by the PUT is not checked against the content SHA returned by the GET, no exception is raised.\r\n\r\nMy 2 proposed solutions would be:\r\n\r\n1. Use a URL in the GET that references the SHA returned by the PUT, instead of a generic URL that only references the file/branch. It looks like multiple URLs are returned by the API, one of which might be a better choice.\r\n2. Forego returning content completely in `update_file()`, since the API doesn't return this and it doesn't really make much sense, since any call to `update_file()` requires the content that would be updated in the first place.\r\n\r\nIf either of these sound good or if there are any alternative suggestions, I'd be more than happy to submit a PR.","comments":[],"createdAt":"2023-08-08T15:51:05Z","number":2709,"state":"OPEN","title":"Reposity.update_file() mismatched content with content SHA","url":"https://github.com/PyGithub/PyGithub/issues/2709"},{"author":{"id":"MDQ6VXNlcjg1NDQxMTA=","is_bot":false,"login":"AnderUstarroz","name":"Ander"},"body":"\r\nThe function [get_workflow_runs()](https://github.com/PyGithub/PyGithub/blob/48d2009c8141e3e32def3db35ecf7d91ce1e687a/github/Repository.py#L3221-L3228) is missing several important [params from the API](https://docs.github.com/en/rest/actions/workflow-runs?apiVersion=2022-11-28#list-workflow-runs-for-a-workflow). The following params are currently missing:\r\n\r\n- `per_page` (integer): The number of results per page, defaults to 30 (max 100). \r\n- `page` (integer): Page number of the results to fetch, default 1.\r\n- `created` (string): Returns workflow runs created within the given date-time range. For more information on the syntax, see \"[Understanding the search syntax.](https://docs.github.com/search-github/getting-started-with-searching-on-github/understanding-the-search-syntax#query-for-dates)\" (**datetime would be awesome here as mentioned by** @trim21 )\r\n- `check_suite_id` (integer): Returns workflow runs with the check_suite_id that you specify.\r\n ","comments":[],"createdAt":"2023-07-31T06:14:27Z","number":2705,"state":"OPEN","title":"Add missing params on get_workflow_runs() ","url":"https://github.com/PyGithub/PyGithub/issues/2705"},{"author":{"id":"MDQ6VXNlcjk0ODc0NTM=","is_bot":false,"login":"scsi050","name":""},"body":"Creating a autolink for a repo [accepts 2 arguments](https://pygithub.readthedocs.io/en/latest/github_objects/Repository.html?highlight=autolink#github.Repository.Repository.create_autolink) ('key_prefix' and 'url_template') but it doesn't accept alphanumeric as the GitHub UI and API does. \r\n\r\n```create_autolink(key_prefix, url_template)```\r\n\r\nI need to set alphanumeric=False  so it is numeric only.\r\n\r\npygithub v1.59.0\r\n","comments":[{"id":"IC_kwDOADYVqs5nirgw","author":{"login":"tomviner"},"authorAssociation":"NONE","body":"This was merged in https://github.com/PyGithub/PyGithub/pull/2630 (not yet released)","createdAt":"2023-09-27T10:38:27Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/2701#issuecomment-1737144368","viewerDidAuthor":false}],"createdAt":"2023-07-26T22:20:24Z","number":2701,"state":"OPEN","title":"repo.create_autolink() alphanumeric","url":"https://github.com/PyGithub/PyGithub/issues/2701"},{"author":{"id":"MDQ6VXNlcjcxMjYwMTcz","is_bot":false,"login":"AndyLuo1029","name":"Luo Juntao"},"body":"When I tried to use `Organization.get_members()` and `Organization.get_public_members()` to fetch `totalCount` data I want, these two methods returns `404` error code no matter which organization I was trying to access. But the [corresponding GitHub REST API ](https://docs.github.com/en/rest/orgs/members?apiVersion=2022-11-28#list-organization-members)works fine.\r\n\r\nHere is my code:\r\n\r\n> from github import Github, GithubException, RateLimitExceededException\r\n   g = Github(\"MY_TOKEN\")\r\n   repo = g.get_repo(\"apple/swift\")\r\n   org = repo.organization\r\n   print(org.get_members().totalCount)\r\n   print(org.get_public_members().totalCount)\r\n\r\n[Here](https://api.github.com/orgs/apple/members) is the corresponding GitHub REST API which works fine.\r\n\r\nPlease fix it, thanks!\r\n\r\n","comments":[],"createdAt":"2023-07-26T09:30:54Z","number":2699,"state":"OPEN","title":"[Bug] Organization.get_members() and Organization.get_public_members() return 404","url":"https://github.com/PyGithub/PyGithub/issues/2699"},{"author":{"id":"MDQ6VXNlcjQ0NzAwMjY5","is_bot":false,"login":"EnricoMi","name":"Enrico Minack"},"body":"Now that we embed typing in our `py` files, the `scripts/add_attribute.py` file should be updated.\r\n\r\nhttps://github.com/PyGithub/PyGithub/blob/main/scripts/add_attribute.py","comments":[{"id":"IC_kwDOADYVqs5hfd_E","author":{"login":"EnricoMi"},"authorAssociation":"COLLABORATOR","body":"@trim21 can you take a look, please?","createdAt":"2023-07-14T10:16:48Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/2627#issuecomment-1635639236","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs5hfgZL","author":{"login":"trim21"},"authorAssociation":"CONTRIBUTOR","body":"> @trim21 can you take a look, please?\r\n\r\nhttps://github.com/PyGithub/PyGithub/pull/2607\r\n\r\n> scripts/add_attribute.py maybe broken, I'll fix it after https://github.com/PyGithub/PyGithub/pull/2609 is merged.","createdAt":"2023-07-14T10:23:26Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/2627#issuecomment-1635649099","viewerDidAuthor":false}],"createdAt":"2023-07-14T10:16:25Z","number":2627,"state":"OPEN","title":"Extend `add_attribute.py` script with typing","url":"https://github.com/PyGithub/PyGithub/issues/2627"},{"author":{"id":"MDQ6VXNlcjgwNjcyMjU=","is_bot":false,"login":"bonelli","name":"Federico Bonelli"},"body":"Hi there,\r\nthe GitHub API supports the concept of closingIssuesReferences (see https://docs.github.com/en/graphql/reference/objects#pullrequest) which is the way to link an issue to be closed automatically when a PR fixes it.\r\n\r\nIs it possible to implement it in the PyGithub library as well? ","comments":[{"id":"IC_kwDOADYVqs5fmjjV","author":{"login":"EnricoMi"},"authorAssociation":"COLLABORATOR","body":"Looks like this project has never called into the GraphQL API, and the REST API does not seem to provide this feature yet.","createdAt":"2023-06-23T08:44:44Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/2567#issuecomment-1603942613","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs5t2WU8","author":{"login":"EnricoMi"},"authorAssociation":"COLLABORATOR","body":"PyGithub now has its first GraphQL call, see https://github.com/PyGithub/PyGithub/commit/232df79a2947dc96363bdc6f51a6f446ff2b241f#diff-90017b18548bd848900b7cffd7fe86a610dc20e5d228663dfb429a47cdf65a20R767-R772 for reference.","createdAt":"2023-12-06T14:10:12Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/2567#issuecomment-1842963772","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs6WCfC7","author":{"login":"xmo-odoo"},"authorAssociation":"CONTRIBUTOR","body":"Other features which are as far as I know only accessible via the graphql API:\r\n\r\n- [`Issue.closedByPullRequestsReferences`](https://docs.github.com/en/graphql/reference/objects#:~:text=list%20of%20open%20pull%20requests%20referenced%20from%20this%20issue.) (the other side of `closingIssuesReferences`)\r\n- [`markPullRequestAsReadyForReview`](https://docs.github.com/en/graphql/reference/mutations#markpullrequestreadyforreview) (unset draft status)\r\n- [`convertPullRequestToDraft`](https://docs.github.com/en/graphql/reference/mutations#convertpullrequesttodraft) (set draft status)","createdAt":"2024-12-04T12:37:33Z","includesCreatedEdit":true,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/2567#issuecomment-2517233851","viewerDidAuthor":false}],"createdAt":"2023-06-22T21:20:50Z","number":2567,"state":"OPEN","title":"Support GraphQL closingIssuesReferences","url":"https://github.com/PyGithub/PyGithub/issues/2567"},{"author":{"id":"U_kgDOBrzR-A","is_bot":false,"login":"muellerst-hg","name":"Steffen Müller (HG)"},"body":"`organization.cancel_invitation()` takes `invitee` as argument, however the underlying Github API epects an `invitation.id`. So the method header is a bit misleading:\r\n\r\n``` python\r\n def cancel_invitation(self, invitee):\r\n        \"\"\"\r\n        :calls: `DELETE /orgs/{org}/invitations/{invitation_id} <https://docs.github.com/en/rest/reference/orgs#cancel-an-organization-invitation>`_\r\n        :param invitee: :class:`github.NamedUser.NamedUser`\r\n        :rtype: None\r\n        \"\"\"\r\n        assert isinstance(invitee, github.NamedUser.NamedUser), invitee\r\n        status, headers, data = self._requester.requestJson(\r\n            \"DELETE\", f\"{self.url}/invitations/{invitee.id}\"\r\n        )\r\n        return status == 204\r\n```\r\n\r\nInstead of `invitee` the argument should be named `invitation`. All the other parts of the method as well as the tests use `invitation`\r\nSee https://github.com/PyGithub/PyGithub/commit/53fb49882f34c63ef2437460a9bb64b91e94cec3\r\n\r\nIt took me some time to realize, that the following is not working, even though `user` and `invitation` / `invitee` are both of type `NamedUser`. But the `user` has a different id than the `invitation`\r\n``` python\r\n# DOES NOT WORK\r\nuser = github.get_user('octocat')\r\norg = github.get_organization('github')\r\norg.cancel_invitation(user)\r\n```\r\n\r\nExample implementation which works:\r\n``` python\r\n# WORKS\r\nuser = github.get_user('octocat')\r\norg = github.get_organization('github')\r\nfor invitation in org.invitations():\r\n    if user.login == invitation.login:\r\n        org.cancel_invitation(invitation)\r\n```\r\n\r\nIn the end I wonder, what was the intention to name it `invitee`?","comments":[{"id":"IC_kwDOADYVqs5gA832","author":{"login":"EnricoMi"},"authorAssociation":"COLLABORATOR","body":"Let's check with the author: @jsimpso ","createdAt":"2023-06-28T06:45:52Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/2564#issuecomment-1610862070","viewerDidAuthor":false}],"createdAt":"2023-06-21T16:36:27Z","number":2564,"state":"OPEN","title":"Organization.cancel_invitation() argument should be invitation instead of invitee","url":"https://github.com/PyGithub/PyGithub/issues/2564"},{"author":{"id":"MDQ6VXNlcjI5MjM5MTQ5","is_bot":false,"login":"phipz","name":""},"body":"Hi all,\r\n\r\nI've encountered a strange behaviour for PaginatedList.totalCount. The counter seems to max at 30.000 - no matter the actual number of events. \r\n\r\nIn my case this is observed for get_repo().get_issue_comments() and get_repo().get_issue_events() \r\n\r\n<img width=\"679\" alt=\"image\" src=\"https://github.com/PyGithub/PyGithub/assets/29239149/9d7c2e21-ccfb-4cca-8ee3-8cfa75a5811f\">\r\n\r\nDoes this happen for anyone else? Is this a GitHub API restriction? Is there a way around?\r\n\r\nCheers!","comments":[{"id":"IC_kwDOADYVqs5fVI4E","author":{"login":"EnricoMi"},"authorAssociation":"COLLABORATOR","body":"I'd assume this is a limitation / bug in the Github REST API as this projects simply takes that value from the response JSON.\r\n\r\n@SIGUSRBACON what do you think?","createdAt":"2023-06-20T19:22:13Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/2558#issuecomment-1599376900","viewerDidAuthor":false}],"createdAt":"2023-06-20T10:57:55Z","number":2558,"state":"OPEN","title":"`PaginatedList.totalCount` shows maximum of 30.000 objects","url":"https://github.com/PyGithub/PyGithub/issues/2558"},{"author":{"id":"MDQ6VXNlcjQzMzI4Mzg=","is_bot":false,"login":"SIGUSRBACON","name":"Andrew Boyce-Lewis"},"body":"I was writing some code today that relied heavily on `get_repos()` and `repo.get_collaborators()` and found that the pagination behavior for these two functions differs. The Docs for both [get_repos](https://pygithub.readthedocs.io/en/latest/github.html?highlight=get_repos#github.MainClass.Github.get_repos) and [repo.get_collaborators](https://pygithub.readthedocs.io/en/latest/utilities.html#github.PaginatedList.PaginatedList) show the return type to be a [github.PaginatedList.PaginatedList](https://pygithub.readthedocs.io/en/latest/utilities.html#github.PaginatedList.PaginatedList). \r\n\r\nThe API Docs for both [get_repos](https://docs.github.com/en/rest/repos/repos?apiVersion=2022-11-28#list-organization-repositories) and [get_collaborators](https://docs.github.com/en/rest/repos/repos?apiVersion=2022-11-28) list a `per_page integer` of 100 and a `Default` of 30.\r\n\r\nHowever, when called against an org with 11,000+ repos and a repo with 3,000+ collaborators, `get_repos()` seems to return all 11K and `get_collaborators()` only returns large but random sized chunks (160-700 observed). \r\n\r\nThis is definitely a nit, but its also one that I'm happy to help track down :-) It may also be a GitHub API bug, in which case I'd be happy to help track that down on our side. \r\n\r\nUnfortunately, I don't have any debug logs, as I already completed the task I was working on. I could probably cobble together a test org/repo if y'all think those logs would be helpful. \r\n\r\nIs this something that anyone else has noticed? \r\n\r\nThanks!","comments":[{"id":"IC_kwDOADYVqs5fRLlI","author":{"login":"EnricoMi"},"authorAssociation":"COLLABORATOR","body":"Thanks for reaching out!\r\n\r\nI would suspect that the Github API is responding in a best-effort way on getting those collaborators. It should be easy to issue the required API calls without PyGithub and see if the response provides all 3k+ collaborators or just a sample.\r\n\r\nI do not have push access to a repository that large, so I cannot investigate myself.\r\n\r\nBut the behaviour looks similar for contributors. Looking at a repo with 1.9k contributors, I can only fetch the first 329 contributors. Page 1 with `per_page=1` notes last page is page 329:\r\n\r\n    https://api.github.com/repos/apache/spark/contributors?per_page=1\r\n\r\nReturned headers include\r\n\r\n    link: <https://api.github.com/repositories/17165658/contributors?per_page=1&page=2>; rel=\"next\", <https://api.github.com/repositories/17165658/contributors?per_page=1&page=329>; rel=\"last\"\r\n\r\nHence, there are only 329 contributors.","createdAt":"2023-06-20T08:25:36Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/2551#issuecomment-1598339400","viewerDidAuthor":false}],"createdAt":"2023-06-09T20:29:14Z","number":2551,"state":"OPEN","title":"Inconsistent pagination behavior between `get_repos()` and `repo.get_collaborators()`","url":"https://github.com/PyGithub/PyGithub/issues/2551"},{"author":{"id":"MDQ6VXNlcjMxODkyMzA4","is_bot":false,"login":"jmgreg31","name":"Jonathan Greg"},"body":"Add support for listing the branches of a head commit: https://docs.github.com/en/rest/commits/commits?apiVersion=2022-11-28#list-branches-for-head-commit","comments":[],"createdAt":"2023-05-26T05:11:55Z","number":2536,"state":"OPEN","title":"Enhancement: add support for list commit head branches","url":"https://github.com/PyGithub/PyGithub/issues/2536"},{"author":{"id":"MDQ6VXNlcjE3Nzk2ODE=","is_bot":false,"login":"jgopel","name":"Jonathan Gopel"},"body":"Reproduction:\r\n```python\r\nrepo = Github(...).get_repo(\"abcd\")\r\nrepo.get_milestone(1234).edit(\r\n  title=new_title,\r\n  # due_on=None,  # This fails on an assert on type of `due_on`\r\n  # due_on=NotSet,  # Doesn't update (also not a great pattern, if I've understood the docs correctly)\r\n)\r\n```","comments":[],"createdAt":"2023-05-18T15:49:47Z","number":2533,"state":"OPEN","title":"Not possible to clear `due_on` on milestones","url":"https://github.com/PyGithub/PyGithub/issues/2533"},{"author":{"id":"MDQ6VXNlcjg2NjY1ODA5","is_bot":false,"login":"fus-kus","name":"Fosco"},"body":"As the title says, the create_repo_from_template method merged with PR #2090 Is missing from the AuthenticatedUser.pyi\r\nthis is causing some typechecking issues for me ","comments":[{"id":"IC_kwDOADYVqs5fmail","author":{"login":"EnricoMi"},"authorAssociation":"COLLABORATOR","body":"Would you like to create a pull request to add this to the `pyi` file?","createdAt":"2023-06-23T08:15:05Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/2532#issuecomment-1603905701","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs5gJlGP","author":{"login":"fus-kus"},"authorAssociation":"NONE","body":"Done https://github.com/PyGithub/PyGithub/pull/2582","createdAt":"2023-06-29T12:49:08Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/2532#issuecomment-1613123983","viewerDidAuthor":false}],"createdAt":"2023-05-17T13:41:34Z","number":2532,"state":"OPEN","title":"AuthenticatedUser.create_repo_from_template is missing from AuthenticatedUser.pyi","url":"https://github.com/PyGithub/PyGithub/issues/2532"},{"author":{"id":"MDQ6VXNlcjMxOTA2MTM3","is_bot":false,"login":"ramyij","name":"Ramy Jaber"},"body":"The `commit.files` object has an attribute `raw_url`, but the url returned is not the actual raw URL, so I cannot get that file from Python. \r\n\r\n```\r\n>>> f.raw_data['raw_url']\r\n'https://github.com/user/repo/raw/f632224c1116casdftrh359815c7e5c27cf957/filepath.yml'\r\n```\r\n\r\nwhen i open the link in a browser, it redirects to the raw URL (https://raw.githubusercontent.com/....) but this does not help in downloading the file from python.\r\n\r\nIs there a way to download a file from a commit? ","comments":[{"id":"IC_kwDOADYVqs5gkDVT","author":{"login":"EnricoMi"},"authorAssociation":"COLLABORATOR","body":"@mcauley-penney @theCapypara @antoineKorbit can you help?","createdAt":"2023-07-04T11:22:25Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/2518#issuecomment-1620063571","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs5jAa1O","author":{"login":"EdmundGoodman"},"authorAssociation":"NONE","body":"You can do this by using the `requests` library (which is a dependency of `PyGithub`, so you don't need to install anything extra).\r\n\r\nA sample script using data from this repository (as the link in the issue is dead) might be:\r\n\r\n```python\r\nfrom github import Github\r\nimport requests\r\n\r\ngithub_api = Github()\r\nrepo = github_api.get_repo(\"PyGithub/PyGithub\")\r\ncommit = repo.get_commit(sha=\"48d2009c8141e3e32def3db35ecf7d91ce1e687a\")\r\nraw_url = commit.files[0].raw_data[\"raw_url\"]\r\nyaml_file = requests.get(raw_url).text\r\nprint(yaml_file)\r\n```\r\n\r\nSo in your case, you just need:\r\n\r\n```python\r\nyaml_file = requests.get(f.raw_data['raw_url']).text\r\n```","createdAt":"2023-08-01T20:36:03Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/2518#issuecomment-1661054286","viewerDidAuthor":false}],"createdAt":"2023-05-08T19:05:16Z","number":2518,"state":"OPEN","title":"How do i download a file from a commit?","url":"https://github.com/PyGithub/PyGithub/issues/2518"},{"author":{"id":"MDQ6VXNlcjI0OTAzMDgz","is_bot":false,"login":"Kyl-Bempah","name":"Kyl Bempah"},"body":"When importing your module my team ran into the following traceback error:\r\n\r\n```\r\nFile \"/home/travis/virtualenv/python3.8.13/lib/python3.8/site-packages/github/__init__.py\", line 58, in <module>\r\n    from github.GithubIntegration import GithubIntegration\r\n  File \"/home/travis/virtualenv/python3.8.13/lib/python3.8/site-packages/github/GithubIntegration.py\", line 11, in <module>\r\n    from github.Requester import Requester\r\n  File \"/home/travis/virtualenv/python3.8.13/lib/python3.8/site-packages/github/Requester.py\", line 64, in <module>\r\n    import requests\r\n  File \"/home/travis/virtualenv/python3.8.13/lib/python3.8/site-packages/requests/__init__.py\", line 43, in <module>\r\n    import urllib3\r\n  File \"/home/travis/virtualenv/python3.8.13/lib/python3.8/site-packages/urllib3/__init__.py\", line 38, in <module>\r\n    raise ImportError(\r\nImportError: urllib3 v2.0 only supports OpenSSL 1.1.1+, currently the 'ssl' module is compiled with OpenSSL 1.0.2g  1 Mar 2016. See: https://github.com/urllib3/urllib3/issues/2168\r\n```\r\n\r\nI believe it's coming from your usage of the requests library and is reflected in their own issue https://github.com/psf/requests/issues/6432, just thought you should be aware.","comments":[{"id":"IC_kwDOADYVqs5baA1f","author":{"login":"nateprewitt"},"authorAssociation":"NONE","body":"To be clear, this is environment specific. OpenSSL 1.0.2 has been out of support since January 2020. If you're on a platform maintaining paid extended support like RHEL, you'll likely want to add a pin in your own code. This shouldn't be made unilaterally at the PyGithub or Requests layer.","createdAt":"2023-05-03T18:58:01Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/2515#issuecomment-1533545823","viewerDidAuthor":false}],"createdAt":"2023-05-03T18:34:14Z","number":2515,"state":"OPEN","title":"Upstream Dependency Breakage","url":"https://github.com/PyGithub/PyGithub/issues/2515"},{"author":{"id":"MDQ6VXNlcjQ2MDkwMzM1","is_bot":false,"login":"lorenzschreyer","name":"Lorenz Schreyer"},"body":"github.WorkflowRun.WorkflowRun should have a method: `get_raw_log()`\r\n\r\nThis should call _Download workflow run logs_ according to https://docs.github.com/en/rest/actions/workflow-runs?apiVersion=2022-11-28#download-workflow-run-logs\r\nResponse is a link that expires after 1 minute.\r\n\r\nA simple GET Request to this link with the provided authentication credentials should return the raw log.\r\n\r\nDid i miss anything?","comments":[{"id":"IC_kwDOADYVqs5bOn12","author":{"login":"mingjun97"},"authorAssociation":"NONE","body":"A workaround for you to (use private function):\r\n\r\n```python\r\n    wf:WorkflowRun.WorkflowRun = list(repo.get_workflow_runs())[-1]\r\n    print(wf._requester.requestJson(\"GET\", wf.logs_url))\r\n```\r\n\r\nWhich the `repo` is the repo you want to fetch from. This is used for fetching the last workflow runs log.","createdAt":"2023-05-01T23:28:37Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":1}}],"url":"https://github.com/PyGithub/PyGithub/issues/2510#issuecomment-1530559862","viewerDidAuthor":false}],"createdAt":"2023-04-24T21:04:39Z","number":2510,"state":"OPEN","title":"missing method for getting an action log","url":"https://github.com/PyGithub/PyGithub/issues/2510"},{"author":{"id":"MDQ6VXNlcjgzMDQ0NTE3","is_bot":false,"login":"yz-chime","name":"Yunfan Zhong"},"body":"Our repos usually have auto merge enabled ([doc](https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/incorporating-changes-from-a-pull-request/automatically-merging-a-pull-request)). We are also trying a new [merge queue](https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/incorporating-changes-from-a-pull-request/merging-a-pull-request-with-a-merge-queue) mechanism in beta.\r\nIt seems the web UI button sends a POST request to `https://github.com/<repo>/pull/<pr_number>/auto_merge_requests` with parameter `do: squash` or `do: group`.\r\nI didn't find PyGithub documentation mentioning these merge methods, nor `auto_merge_requests` string in the project. Are they supported right now?","comments":[{"id":"IC_kwDOADYVqs6Zgbl8","author":{"login":"sparrowt"},"authorAssociation":"NONE","body":"#2816 adds `enable_automerge` and `disable_automerge` to `PullRequest` which is in PyGithub==2.2.0\r\n\r\nAFAICS this repo doesn't yet have any support for merge queues (e.g. viewing them, or checking if a PR is in the queue etc.) but that should probably be a separate issue on this repo.","createdAt":"2025-01-07T14:24:17Z","includesCreatedEdit":true,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/2503#issuecomment-2575415676","viewerDidAuthor":false}],"createdAt":"2023-04-20T19:03:25Z","number":2503,"state":"OPEN","title":"Does PyGithub support auto-merge?","url":"https://github.com/PyGithub/PyGithub/issues/2503"},{"author":{"id":"MDQ6VXNlcjg0Mzc0MDc3","is_bot":false,"login":"lumynou5","name":"Lumynous"},"body":"I read the documents of PyGithub and GitHub.\r\n[Getting a reference](https://docs.github.com/en/rest/git/refs?apiVersion=2022-11-28#get-a-reference) should return 404 as the requested reference doesn't exist, and PyGithub will raise `UnknownObjectException`. However, it seems not working.\r\n\r\nThe following code runs `edit` though there isn't a tag called `v1`.\r\n```py\r\ntry:\r\n    repo.get_git_ref('tags/v1').edit(sha)\r\nexcept UnknownObjectException:\r\n    repo.create_git_ref('refs/tags/v1', sha)\r\n```","comments":[],"createdAt":"2023-04-17T07:17:55Z","number":2499,"state":"OPEN","title":"GET-ing non-existent tag doesn't raise `UnknownObjectException`","url":"https://github.com/PyGithub/PyGithub/issues/2499"},{"author":{"id":"MDQ6VXNlcjg5MTM5MTgy","is_bot":false,"login":"arnauav","name":""},"body":"\nissue_type: bq_export\n\nBIGQUERY CONFIGURATION\nbq_project: replace_by_your_project_name\nbq_dataset: replace_by_your_dataset_name\nbq_table: replace_by_your_table_name\n\nSNOWFLAKE CONFIGURATION\nsnf_database: replace_by_your_snowflake_database\nsnf_table: replace_by_your_snowflake_table\n\nEXTRACTOR CONFIGURATION\ntable_fields: ALL_COLUMNS\n","comments":[],"createdAt":"2023-04-12T15:09:40Z","number":2496,"state":"OPEN","title":"This is a test issue","url":"https://github.com/PyGithub/PyGithub/issues/2496"},{"author":{"id":"MDQ6VXNlcjg5ODk0NDI3","is_bot":false,"login":"Abe410","name":"Muhammad Abdullah Hashmi"},"body":"Hi\r\n\r\nI am using Pygithub to get data about repos in my database, and midway through the script I got the following error:\r\n\r\n```\r\n ('Connection aborted.', RemoteDisconnected('Remote end closed connection without response'))\r\n[2023-04-04, 22:10:12 UTC] {subprocess.py:93} INFO - HTTPSConnectionPool(host='api.github.com', port=443): Max retries exceeded with url: /rate_limit (Caused by NewConnectionError('<urllib3.connection.HTTPSConnection object at 0x7f7e76da97e0>: Failed to establish a new connection: [Errno 111] Connection refused'))\r\n[2023-04-04, 22:10:12 UTC] {subprocess.py:93} INFO - Some other exception\r\n[2023-04-04, 22:10:12 UTC] {subprocess.py:93} INFO - Minato\r\n[2023-04-04, 22:10:12 UTC] {subprocess.py:93} INFO - Traceback (most recent call last):\r\n[2023-04-04, 22:10:12 UTC] {subprocess.py:93} INFO -     conn = connection.create_connection(\r\n[2023-04-04, 22:10:12 UTC] {subprocess.py:93} INFO -     raise err\r\n[2023-04-04, 22:10:12 UTC] {subprocess.py:93} INFO -     sock.connect(sa)\r\n[2023-04-04, 22:10:12 UTC] {subprocess.py:93} INFO - ConnectionRefusedError: [Errno 111] Connection refused\r\n```\r\n\r\nI am guessing that the API endpoint was down at that point and this is why this error came up? Or did I retry it multiple times?\r\n\r\nOr is there some other reason?","comments":[{"id":"IC_kwDOADYVqs5Z2QOK","author":{"login":"juanpflores"},"authorAssociation":"NONE","body":"The error message indicates that the error was caused by a ConnectionRefusedError, which suggests that the GitHub API server may have been down or not accepting connections at the time the Python script was attempting to connect. There was an [outage](https://www.githubstatus.com/history) last week that might have affected your ability to connect using the API.\r\n\r\nTo resolve this error, you can try again later when the API server is available or check if there are any issues with your network connectivity.","createdAt":"2023-04-13T17:58:50Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/2492#issuecomment-1507394442","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs5aB3MK","author":{"login":"alibaraneser"},"authorAssociation":"NONE","body":"Hi @juanpflores,\r\n\r\nI looked the github status, it specified **\"issue has been resolved\"**\r\n\r\n![image](https://user-images.githubusercontent.com/13967102/232329937-da24f53d-15bf-44e3-a5cf-2de9a38861ee.png)\r\n\r\nBut same result, same error :( ","createdAt":"2023-04-16T17:26:57Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/2492#issuecomment-1510437642","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs5aCkuY","author":{"login":"juanpflores"},"authorAssociation":"NONE","body":"I would need to have a little more context about your specific code to fully understand what might have triggered the warning. At this point, I think you reached the API limits with your script or the process takes too long and the API gets disconnected. ","createdAt":"2023-04-17T03:02:59Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/2492#issuecomment-1510624152","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs5aq8u4","author":{"login":"EnricoMi"},"authorAssociation":"COLLABORATOR","body":"If you are behind a proxy, you might have to add proxy settings for your Python code to work: #2426\r\n\r\nIf you have seen this work once, than this is really down to github being unable to accept your connection.\r\n\r\nYou can configure retries via the `retry` argument:\r\n\r\n```python\r\ngh = Github(retry=10)\r\n```\r\n\r\nYou can configure more complex retry logic as follows:\r\n\r\n```python\r\nfrom urllib3.util import Retry\r\n\r\ngh = Github(retry=Retry(10))\r\n```\r\n\r\nSee https://urllib3.readthedocs.io/en/stable/reference/urllib3.util.html#urllib3.util.Retry for all available options.","createdAt":"2023-04-25T06:15:10Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/2492#issuecomment-1521208248","viewerDidAuthor":false}],"createdAt":"2023-04-05T21:37:09Z","number":2492,"state":"OPEN","title":"ConnectionRefusedError when calling Github API with Pygithub","url":"https://github.com/PyGithub/PyGithub/issues/2492"},{"author":{"id":"U_kgDOBfTXsA","is_bot":false,"login":"Pat-re","name":"Pat Ford"},"body":"Hi All;\r\n I'm trying to do the following search using pyGitHub. The search I'm trying to replicate is, \" https://github.com/search?p=1&q=disp_service&type=Code \".\r\n\r\nThanks","comments":[{"id":"IC_kwDOADYVqs5fmdPU","author":{"login":"EnricoMi"},"authorAssociation":"COLLABORATOR","body":"Have you tried `github.Github.search_code(\"disp_service\")`?","createdAt":"2023-06-23T08:25:04Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/2488#issuecomment-1603916756","viewerDidAuthor":false}],"createdAt":"2023-04-05T12:19:36Z","number":2488,"state":"OPEN","title":"Searching for string in code","url":"https://github.com/PyGithub/PyGithub/issues/2488"},{"author":{"id":"MDQ6VXNlcjM0MzA2MTA=","is_bot":false,"login":"atulsingh0","name":"Atul S"},"body":"I am trying to mock github file for out python test cases as per below code - \r\n\r\n```\r\ndef first_file():\r\n    \"\"\"\r\n    Returns the contents of the first file found in the git repo\r\n    using mocked data\r\n    \"\"\"\r\n    values = b\"\"\"\r\nthis is a test file one\r\n    \"\"\"\r\n    contents1 = ContentFile.ContentFile\r\n    contents1.path = \"first.txt\"\r\n    contents1.decoded_content = values\r\n    contents1.sha = \"mock_sha\"\r\n    return contents1\r\n\r\ndef second_file():\r\n    \"\"\"\r\n    Returns the contents of the second file found in the git repo\r\n    using mocked data\r\n    \"\"\"\r\n    values = b\"\"\"\r\nthis is a test file two which holds data more than first one\r\n    \"\"\"\r\n    contents2 = ContentFile.ContentFile\r\n    contents2.path = \"second.txt\"\r\n    contents2.decoded_content = values\r\n    contents2.sha = \"mock_sha\"\r\n    return contents2\r\n```\r\n\r\nBut when mocking, both files have the second_file data which I assume due to class ContentFile.ContentFile. \r\nI know this is not an issue but did not find any example on the documentation around mocking the data hence, asking here. ","comments":[],"createdAt":"2023-03-28T18:49:48Z","number":2478,"state":"OPEN","title":"Mocking multiple Testfile with Pygithub","url":"https://github.com/PyGithub/PyGithub/issues/2478"},{"author":{"id":"MDQ6VXNlcjc5NjUxODE=","is_bot":false,"login":"anantzoid","name":"Anant Gupta"},"body":"I'm trying to create a pull request to a repo in privately hosted github but it's not able to set the URL correctly:\r\n\r\n```\r\ng = Github(base_url=\"https://<private-github>.com/api/v3\", login_or_token=\"<token>\")\r\nrepo = g.get_repo(\"org/repo\")\r\npr = repo.create_pull(title=\"Test PR\", body=\"Test body\", head=\"new\", base=\"main\")\r\n```\r\nGives me the following error:\r\n```\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"/Users/ag/miniconda3/envs/py38/lib/python3.8/site-packages/github/Repository.py\", line 1400, in create_pull\r\n    return self.__create_pull_1(*args, **kwds)\r\n  File \"/Users/ag/miniconda3/envs/py38/lib/python3.8/site-packages/github/Repository.py\", line 1431, in __create_pull_1\r\n    return self.__create_pull(\r\n  File \"/Users/ag/miniconda3/envs/py38/lib/python3.8/site-packages/github/Repository.py\", line 1444, in __create_pull\r\n    headers, data = self._requester.requestJsonAndCheck(\r\n  File \"/Users/ag/miniconda3/envs/py38/lib/python3.8/site-packages/github/Requester.py\", line 401, in requestJsonAndCheck\r\n    *self.requestJson(\r\n  File \"/Users/ag/miniconda3/envs/py38/lib/python3.8/site-packages/github/Requester.py\", line 501, in requestJson\r\n    return self.__requestEncode(cnx, verb, url, parameters, headers, input, encode)\r\n  File \"/Users/ag/miniconda3/envs/py38/lib/python3.8/site-packages/github/Requester.py\", line 566, in __requestEncode\r\n    url = self.__makeAbsoluteUrl(url)\r\n  File \"/Users/ag/miniconda3/envs/py38/lib/python3.8/site-packages/github/Requester.py\", line 640, in __makeAbsoluteUrl\r\n    assert o.hostname in [\r\nAssertionError: None\r\n\r\n```\r\n\r\nI checked the `self._url` value in `__makeAbsoluteUrl` function and it's set to `None/pulls`. I noticed the same error on calling any other function, like `repo.get_branches()`.\r\n\r\nAny advise will be appreciated.","comments":[{"id":"IC_kwDOADYVqs5YW5BC","author":{"login":"EnricoMi"},"authorAssociation":"COLLABORATOR","body":"Which version of pygithub are you using?","createdAt":"2023-03-24T07:57:38Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/2470#issuecomment-1482395714","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs5Zdl9z","author":{"login":"anantzoid"},"authorAssociation":"NONE","body":"Hi @EnricoMi\r\nI'm using the latest version v1.58.0","createdAt":"2023-04-08T16:43:35Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/2470#issuecomment-1500929907","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs5ZekI4","author":{"login":"EnricoMi"},"authorAssociation":"COLLABORATOR","body":"Can you confirm this error also exists for v1.57?","createdAt":"2023-04-09T18:14:39Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/2470#issuecomment-1501184568","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs5fmmDz","author":{"login":"EnricoMi"},"authorAssociation":"COLLABORATOR","body":"Are you sure the value that you use for `<private-github>` is a proper domain?","createdAt":"2023-06-23T08:53:00Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/2470#issuecomment-1603952883","viewerDidAuthor":false}],"createdAt":"2023-03-21T21:00:58Z","number":2470,"state":"OPEN","title":"URL is none repos for private domain","url":"https://github.com/PyGithub/PyGithub/issues/2470"},{"author":{"id":"MDQ6VXNlcjM4MTE3MDM=","is_bot":false,"login":"anovis","name":"Austen"},"body":"adding support for  organization variables `/orgs/{org}/actions/variables`\r\n\r\nhttps://docs.github.com/en/rest/actions/variables?apiVersion=2022-11-28#about-variables-in-github-actions","comments":[],"createdAt":"2023-03-21T14:49:38Z","number":2469,"state":"OPEN","title":"Support for organization variables","url":"https://github.com/PyGithub/PyGithub/issues/2469"},{"author":{"id":"MDQ6VXNlcjI0ODY5NjE=","is_bot":false,"login":"DaanHoogland","name":"dahn"},"body":"I'd like to get all commits that were closed on a certaing milestone. the argument does not exist. Is this supposed to work in another way?\r\nex:\r\n`changes = repo.get_commits(milestone=some_milestone)`","comments":[],"createdAt":"2023-03-21T13:24:36Z","number":2467,"state":"OPEN","title":"milestone argument for Repository.get_commits(...)","url":"https://github.com/PyGithub/PyGithub/issues/2467"},{"author":{"id":"MDQ6VXNlcjc1NzExNTg=","is_bot":false,"login":"xmo-odoo","name":""},"body":"I don't know what the exact scope of pygithub is e.g. if it tries to wrap GH operations into safety when they're underspecified or wonky, but I want to report an issue which I've noticed happens from time to time in github: the API is not globally consistent.\r\n\r\nUsually operations run quite quickly and when a change is performed through the API it's immediately visible through the same, however from time to time that is not the case, events (webhooks) can trigger before the operation has returned, and changes can take some time to propagate.\r\n\r\nAround repositories, two of the more frustrating issues are:\r\n\r\n- The creation of a repository can take time to propagate and be visible after the `create_repo` call has returned, I've not logged the worst delays but at least several seconds, I think having some sort of backoff and only returning from `create_repo` when the repository is \"externally visible\" (a HEAD request on the repo's url returns a 200) would be a good idea.\r\n- Even after the repository is visible, there are background setup processes which run, and can prevent the repository's deletion until they are done running, usually this is not an issue as there are interactions with the repository inbetween, but in some cases it can be a problem, IME in the case where ongoing processing blocks deletion the API returns a 403, so `delete` can just retry (with some sleeping) until either the deletion succeeds, or it fails with a 404 (as from time to time the github api will return errors but still go through, though I've mostly observed that when creating PRs).","comments":[],"createdAt":"2023-03-17T08:39:32Z","number":2457,"state":"OPEN","title":"Safer repository creation and deletion","url":"https://github.com/PyGithub/PyGithub/issues/2457"},{"author":{"id":"MDQ6VXNlcjc0NDI2ODMz","is_bot":false,"login":"KimoyoKun","name":"WatashiWaKimoDesu"},"body":"I believe this library used to provide an error when the file the user was trying to access was too large to be returned.\r\nNow, instead, it returns empty content and eventually shows an AssertionError about some unsupported encoding of \"none\" (decoded_content property). \r\n\r\n```\r\nfrom github import Github\r\n\r\ng = Github()\r\nrepo = g.get_repo(...)\r\nfile_content = repo.get_contents(...)\r\ndecoded_content = file_content.decoded_content.decode()\r\n\r\n# File \"...\\lib\\site-packages\\github\\ContentFile.py\", line 59, in decoded_content\r\n#     assert self.encoding == \"base64\", f\"unsupported encoding: {self.encoding}\"\r\n# AssertionError: unsupported encoding: none\r\n```\r\n\r\nI didn't expect my file to eventually become so heavy, and this error is pretty confusing. It would be worthwhile to change it.","comments":[],"createdAt":"2023-02-22T20:34:06Z","number":2433,"state":"OPEN","title":"Unsupported encoding error (large files)","url":"https://github.com/PyGithub/PyGithub/issues/2433"},{"author":{"id":"MDQ6VXNlcjk4MjA3","is_bot":false,"login":"jwodder","name":"John T. Wodder II"},"body":"When querying issues from GitHub's REST API, pull requests are counted as issues, and the recommended way to tell whether an issue is a pull request is to consult its `pull_request` field.  However, it seems that GitHub omits this field entirely on non-PR issues; as a result, when accessing the `pull_request` property on an `Issue` instance, PyGithub makes an API request to try to fill in the field.  This is wasteful and slows things down.  It would be better if the `Issue` class always treated a missing `pull_request` field as `None` without having to make an API request to confirm it.","comments":[{"id":"IC_kwDOADYVqs5Z3uza","author":{"login":"juanpflores"},"authorAssociation":"NONE","body":"I have ran into the same issue ","createdAt":"2023-04-14T01:01:01Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/2423#issuecomment-1507781850","viewerDidAuthor":false}],"createdAt":"2023-02-16T15:00:15Z","number":2423,"state":"OPEN","title":"Don't make a request to populate a missing `Issue.pull_request` field","url":"https://github.com/PyGithub/PyGithub/issues/2423"},{"author":{"id":"MDQ6VXNlcjg4ODg1MzE=","is_bot":false,"login":"mhoeger","name":"Marie Hoeger"},"body":"When the rate limit is exceeded using by making too many PRs, the `RateLimitExceededException` is not raised, instead it is a `GithubException`. I would expect that it would be the rate limit exception, given it's a 403 and gives the rate limit exceeded exception:\r\n```\r\n403 {\"documentation_url\": \"https://docs.github.com/en/free-pro-team@latest/rest/overview/resources-in-the-rest-api#secondary-rate-limits\", \"message\": \"You have exceeded a secondary rate limit. Please wait a few minutes before you try again.\"}\r\n``` \r\n\r\nExample code:\r\n```py\r\ndef create_branch(repo, branch_name):\r\n    sb = repo.get_branch(repo.default_branch)\r\n    repo.create_git_ref(ref='refs/heads/' + branch_name, sha=sb.commit.sha)\r\n\r\ndef exceed():\r\n    for i in range(100):\r\n        repo = g.get_repo(\"mhoeger/test\")\r\n        branch = f\"mhoeger/test-branch-{time.time()}\"\r\n        create_branch(repo, branch)\r\n        repo.create_file(\"test.txt\", \"TEST!\", \"hi\", branch)\r\n        repo.create_pull(\"testing\", \"test\", repo.default_branch, branch)\r\n```","comments":[{"id":"IC_kwDOADYVqs5VY_fm","author":{"login":"EnricoMi"},"authorAssociation":"COLLABORATOR","body":"Which version of PyGitHub are you using?","createdAt":"2023-02-16T07:00:34Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/2422#issuecomment-1432614886","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs5Vf7bZ","author":{"login":"EnricoMi"},"authorAssociation":"COLLABORATOR","body":"Can you please provide the full stack trace, that would help to pin point the location that rose the `GithubException`.","createdAt":"2023-02-17T10:22:10Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/2422#issuecomment-1434433241","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs5WCIRP","author":{"login":"EnricoMi"},"authorAssociation":"COLLABORATOR","body":"@mhoeger ","createdAt":"2023-02-24T10:08:16Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/2422#issuecomment-1443398735","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs5WFHB5","author":{"login":"Thunderforge"},"authorAssociation":"NONE","body":"I'm running into this too (while creating lots of issues) using PyGithub 1.57. Here is a full stack trace:\r\n\r\n```\r\nFile \"~/Dev/Github/main.py\", line 97, in submit_issues\r\n    issue = GITHUB_REPO.create_issue(\r\n  File \"~/Dev/Github/venv/lib/python3.10/site-packages/github/Repository.py\", line 1260, in create_issue\r\n    headers, data = self._requester.requestJsonAndCheck(\r\n  File \"~/Dev/Github/venv/lib/python3.10/site-packages/github/Requester.py\", line 353, in requestJsonAndCheck\r\n    return self.__check(\r\n  File \"~/Dev/Github/venv/lib/python3.10/site-packages/github/Requester.py\", line 378, in __check\r\n    raise self.__createException(status, responseHeaders, output)\r\ngithub.GithubException.GithubException: 403 {\"message\": \"You have exceeded a secondary rate limit and have been temporarily blocked from content creation. Please retry your request again later.\", \"documentation_url\": \"https://docs.github.com/rest/overview/resources-in-the-rest-api#secondary-rate-limits\"}\r\n```\r\nOf note, the existing `GithubException` provides no info about when it's okay to try again.","createdAt":"2023-02-24T18:14:47Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/2422#issuecomment-1444180089","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs5WIaRL","author":{"login":"EnricoMi"},"authorAssociation":"COLLABORATOR","body":"@Thunderforge this is a similar but different error. A fix has been proposed here: #2127.\r\n@william-richard would you like to amend your PR according to my comments? I am happy to approve it.\r\n@mhoeger your error message should raise a `RateLimitExceededException`, it is not clear why this is not happening. Answering my questions above would help to understand this issue.","createdAt":"2023-02-25T10:00:28Z","includesCreatedEdit":true,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/2422#issuecomment-1445045323","viewerDidAuthor":false}],"createdAt":"2023-02-15T20:17:29Z","number":2422,"state":"OPEN","title":"RateLimitExceededException not raised when rate limit exceeds via making many PRs","url":"https://github.com/PyGithub/PyGithub/issues/2422"},{"author":{"id":"MDQ6VXNlcjM5NTA5Ng==","is_bot":false,"login":"paulocoutinhox","name":"Paulo Coutinho"},"body":"Hi,\r\n\r\nGithub let you return the README in HTML format passing header \"Accept: application/vnd.github.html\".\r\n\r\nHow can i do it with this library?\r\n\r\nThanks.","comments":[],"createdAt":"2023-02-10T19:48:49Z","number":2418,"state":"OPEN","title":"How to get HTML content of README?","url":"https://github.com/PyGithub/PyGithub/issues/2418"},{"author":{"id":"MDQ6VXNlcjY1MDYwOTE=","is_bot":false,"login":"saargrin","name":"Saar"},"body":"when executing \r\nworkflow.create_dispatch with dispatch_inputs parameters, only \"False\" is returned when there are issues with formatting or input names\r\n\r\nin Workflow.py , create_dispatch function\r\n\r\n        status, _, _ = self._requester.requestJson(\r\n            \"POST\", f\"{self.url}/dispatches\", input={\"ref\": ref, \"inputs\": inputs}\r\n        )\r\n        return status == 204\r\n\r\nthis should at least print the real error code , that would be a lot more informative ","comments":[{"id":"IC_kwDOADYVqs5ZmJ0g","author":{"login":"gleb-boushev-effem"},"authorAssociation":"NONE","body":"actually, it should also return in success case (at the very least) created run id, because how else am I supposed to track it?\r\n\r\nUPD: actually, I've just tested it and Github API does return NOTHING on success, empty body, only HTTP 204 and some headers. so its not possible to return run ID. jesus christ, thats some bad design decision by somebody","createdAt":"2023-04-11T11:42:46Z","includesCreatedEdit":true,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":2}}],"url":"https://github.com/PyGithub/PyGithub/issues/2416#issuecomment-1503173920","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs59PC_5","author":{"login":"dblanchette"},"authorAssociation":"CONTRIBUTOR","body":"I did a PR for when it fails, to at least have the response: https://github.com/PyGithub/PyGithub/pull/2966","createdAt":"2024-05-08T17:47:58Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/2416#issuecomment-2101096441","viewerDidAuthor":false}],"createdAt":"2023-02-08T15:11:51Z","number":2416,"state":"OPEN","title":"when running workflow.create_dispatch , the class returns \"False\" without any explanation ","url":"https://github.com/PyGithub/PyGithub/issues/2416"},{"author":{"id":"MDQ6VXNlcjg1NTc5NTc=","is_bot":false,"login":"kostrahb","name":"Vojtěch Kletečka"},"body":"We want to be able to create standardized repositories in my company and we have rules that each repository needs some branch protection rules e.g. on `release/*` set up. How to add branch protection rule on these nonexistent branches (containing asterisk) with this library?","comments":[{"id":"IC_kwDOADYVqs5w6y1r","author":{"login":"treee111"},"authorAssociation":"CONTRIBUTOR","body":"Hi @kostrahb, this is not possible as of now. We had the same thing a long time ago.\r\nWe do like this actually: manually created wildcard branch protection like `release/*` as \"fallback\" and creating a new branch protection for each branch when existing, like `release/v1.0.0` and updating the branch protection like we need for this branch.\r\nDeletion has also be done manually but it's no problem to only delete them once a while.","createdAt":"2024-01-16T20:26:02Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/2415#issuecomment-1894460779","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs6YD_hP","author":{"login":"Alexander-Shukaev"},"authorAssociation":"NONE","body":"Looking forward to this, seems like GItHub API documents that for wildcards GraphQL should be used...","createdAt":"2024-12-18T12:22:25Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/2415#issuecomment-2551183439","viewerDidAuthor":false}],"createdAt":"2023-02-08T15:08:46Z","number":2415,"state":"OPEN","title":"How to add branch protection rule on nonexistent branches?","url":"https://github.com/PyGithub/PyGithub/issues/2415"},{"author":{"id":"U_kgDOBpv0Tw","is_bot":false,"login":"thowbik-dustan","name":""},"body":"I couldn't create \".github\" directory using PyGithub's \"create_file\" function. Is this a restriction for creating special folders ??\r\nOr is there any other functions to **Create** workflow files ","comments":[{"id":"IC_kwDOADYVqs5WrC31","author":{"login":"jeremy-kaltenbach"},"authorAssociation":"NONE","body":"Any updates on this? I am working on building a script to add a workflow file to multiple repos and am running into the same issue. I think you may be right that the GitHub API does not allow creating files within the .github folder, but I have not found any documentation confirming that. I also tried calling the API directly via cURL and kept getting a `404: Resource not found` error.","createdAt":"2023-03-03T21:01:55Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/2414#issuecomment-1454124533","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs5WrKJL","author":{"login":"jeremy-kaltenbach"},"authorAssociation":"NONE","body":"Nevermind, I figured out my issue. My personal access token did not include the `workflow` scope. After updating my token, it worked for me.","createdAt":"2023-03-03T21:30:41Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/2414#issuecomment-1454154315","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs6Wknt4","author":{"login":"ollixx"},"authorAssociation":"NONE","body":"Thanks a lot! You saved my day with that hint.","createdAt":"2024-12-08T15:30:55Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/2414#issuecomment-2526182264","viewerDidAuthor":false}],"createdAt":"2023-02-08T10:25:26Z","number":2414,"state":"OPEN","title":"Couldn't create \".github\" directory ","url":"https://github.com/PyGithub/PyGithub/issues/2414"},{"author":{"id":"U_kgDOBjhF3w","is_bot":false,"login":"sagarnavale","name":""},"body":"The GPGKEYS list is available in Go library  but it is not available in python library . Is there any other method similar to this which we can use ? ","comments":[],"createdAt":"2023-02-08T04:40:59Z","number":2413,"state":"OPEN","title":"GPG keys list method not available","url":"https://github.com/PyGithub/PyGithub/issues/2413"},{"author":{"id":"MDQ6VXNlcjY3MTU3NzU4","is_bot":false,"login":"melihsunbul","name":"Melih Sünbül"},"body":"Hi,\r\n\r\nI realized that crete_repo_from_template feature which is merged in #2090 does not exist in v1.57. \r\n\r\nIn addition, even if it is included in v1.56, its signature is missing in .pyi files.\r\n\r\nThank you for your attention in advance.\r\n\r\n","comments":[],"createdAt":"2023-02-05T13:35:49Z","number":2412,"state":"OPEN","title":"create_repo_from_template doesn't exist in the latest version (1.57)","url":"https://github.com/PyGithub/PyGithub/issues/2412"},{"author":{"id":"MDQ6VXNlcjEyMTEwNDA0","is_bot":false,"login":"nigellh","name":""},"body":"Is this LGPL or GPL\r\n\r\nsee https://github.com/PyGithub/PyGithub/blob/master/COPYING\r\n\r\nYou have a COPYING.LESSER file but in the above one it shows\r\n\r\n![image](https://user-images.githubusercontent.com/12110404/216646101-3295b2f5-be7d-4f90-ab6a-ca10d89f56b9.png)\r\n\r\nYou will also find it reported as LGPL in a number of repos. If it is Dual or either or, but could do with being a little clearer","comments":[],"createdAt":"2023-02-03T15:47:29Z","number":2410,"state":"OPEN","title":"License inconsistency","url":"https://github.com/PyGithub/PyGithub/issues/2410"},{"author":{"id":"MDQ6VXNlcjQ3Mzg0NDU=","is_bot":false,"login":"Loki-Afro","name":"Phillip"},"body":"I searched quite a bit in the existing issue but did not found anything regarding https://docs.github.com/en/rest/packages yet\r\n\r\nwould appreciate support for github packages a lot\r\n\r\nmy use case: delete 5000+ packages","comments":[{"id":"IC_kwDOADYVqs5UJPEV","author":{"login":"RobPasMue"},"authorAssociation":"CONTRIBUTOR","body":"This would be a very interesting feature indeed. I am under similar circumstances. It would be great to access the available packages of a certain repository/organization and delete all \"dangling\" images for example.","createdAt":"2023-02-01T09:09:46Z","includesCreatedEdit":true,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/2407#issuecomment-1411707157","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs5UKIqD","author":{"login":"Loki-Afro"},"authorAssociation":"NONE","body":"@RobPasMue just for completeness, ended up using a different lib since i dunno if this is still maintained\r\nhttps://github.com/fastai/ghapi\r\n \r\nthere i implemented something like this:\r\n\r\n```\r\nfrom ghapi.all import GhApi\r\nfrom ghapi.core import print_summary\r\nfrom ghapi.page import paged\r\nfrom datetime import datetime, timedelta\r\n\r\norg_str = '...'\r\n\r\npackage_strs = ['...'']\r\n\r\napi = GhApi(debug=print_summary)\r\ndelete_before_date = datetime.now() - timedelta(days=60)\r\n\r\nfor package_str in package_strs:\r\n    paged_packages = paged(api.packages.get_all_package_versions_for_package_owned_by_org, org=org_str,\r\n                           package_name=package_str, package_type='container', state='active', per_page=100)\r\n\r\n    for page in paged_packages:\r\n        for package in page:\r\n            if datetime.fromisoformat(package.created_at).timestamp() < delete_before_date.timestamp():\r\n                print(package.created_at)\r\n                api.packages.delete_package_version_for_org(org=org_str, package_name=package_str,\r\n                                                            package_type='container', package_version_id=package['id'])\r\n\r\n```\r\n\r\nworks quite nicely, token is submitted via env var","createdAt":"2023-02-01T12:01:28Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"HEART","users":{"totalCount":3}}],"url":"https://github.com/PyGithub/PyGithub/issues/2407#issuecomment-1411943043","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs5UKcBI","author":{"login":"RobPasMue"},"authorAssociation":"CONTRIBUTOR","body":"Awesome, thanks for the tip @Loki-Afro!! ","createdAt":"2023-02-01T13:02:44Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/2407#issuecomment-1412022344","viewerDidAuthor":false}],"createdAt":"2023-01-30T16:14:02Z","number":2407,"state":"OPEN","title":"implement packages api","url":"https://github.com/PyGithub/PyGithub/issues/2407"},{"author":{"id":"MDQ6VXNlcjIxMTkyMTI=","is_bot":false,"login":"jsoref","name":"Josh Soref"},"body":"These links https://github.com/search?q=repo%3APyGithub%2FPyGithub+rest+%22repos%23traffic%22&type=code should be updated...\r\n\r\nThe current documentation link is: https://docs.github.com/en/rest/metrics/traffic?apiVersion=2022-11-28\r\n","comments":[],"createdAt":"2023-01-22T21:20:47Z","number":2401,"state":"OPEN","title":"traffic rest api documentation refs are stale","url":"https://github.com/PyGithub/PyGithub/issues/2401"},{"author":{"id":"MDQ6VXNlcjExNDgyMDY=","is_bot":false,"login":"Raboo","name":"Elias Abacioglu"},"body":"Hi\r\n\r\nI would like to see a way to use https://docs.github.com/en/rest/teams/teams?apiVersion=2022-11-28#remove-a-repository-from-a-team. i.e. `DELETE /organizations/{org_id}/team/{team_id}/repos/{owner}/{repo}`.\r\n\r\nFor instance this could be implemented with the method `update_team_repository` by setting permission `None` for example.\r\n\r\nExample code could look like this.\r\n\r\n```python\r\nteam = org.get_team_by_slug(team_slug)\r\nrepo = org.get_repo(repo_name)\r\nteam.update_team_repository(repo, None)\r\nprint(f\"Successfully removed team {team_slug} from {repo_name}.\")\r\n```\r\n\r\nAnd in using `None` as permission, have update_team_repository send a DELETE request to Github API.","comments":[],"createdAt":"2023-01-20T11:14:37Z","number":2399,"state":"OPEN","title":"Feature request: DELETE /organizations/{org_id}/team/{team_id}/repos/{owner}/{repo}","url":"https://github.com/PyGithub/PyGithub/issues/2399"},{"author":{"id":"MDQ6VXNlcjMwMjU1Mzc=","is_bot":false,"login":"Felixoid","name":"Mikhail f. Shiryaev"},"body":"Hello. It looks like something is wrong with the credentials of the mentioned attribute.\r\n\r\nHere's the reproducing case:\r\n\r\n```\r\nIn [32]: from github import Github\r\n\r\nIn [33]: gh = Github(getpass.getpass(), per_page=100)\r\nPassword: \r\n\r\nIn [34]: repo = gh.get_repo(\"ClickHouse/ClickHouse\")\r\n\r\nIn [35]: repo.organization\r\nOut[35]: Organization(login=\"ClickHouse\")\r\n\r\nIn [36]: repo.organization.get_teams()\r\nOut[36]: <github.PaginatedList.PaginatedList at 0x7f7ca69cdf90>\r\n\r\nIn [37]: list(Out[36])\r\n---------------------------------------------------------------------------\r\nUnknownObjectException                    Traceback (most recent call last)\r\nCell In[37], line 1\r\n----> 1 list(Out[36])\r\n\r\nFile /usr/lib/python3.10/site-packages/github/PaginatedList.py:56, in PaginatedListBase.__iter__(self)\r\n     54 yield from self.__elements\r\n     55 while self._couldGrow():\r\n---> 56     newElements = self._grow()\r\n     57     yield from newElements\r\n\r\nFile /usr/lib/python3.10/site-packages/github/PaginatedList.py:67, in PaginatedListBase._grow(self)\r\n     66 def _grow(self):\r\n---> 67     newElements = self._fetchNextPage()\r\n     68     self.__elements += newElements\r\n     69     return newElements\r\n\r\nFile /usr/lib/python3.10/site-packages/github/PaginatedList.py:201, in PaginatedList._fetchNextPage(self)\r\n    200 def _fetchNextPage(self):\r\n--> 201     headers, data = self.__requester.requestJsonAndCheck(\r\n    202         \"GET\", self.__nextUrl, parameters=self.__nextParams, headers=self.__headers\r\n    203     )\r\n    204     data = data if data else []\r\n    206     self.__nextUrl = None\r\n\r\nFile /usr/lib/python3.10/site-packages/github/Requester.py:353, in Requester.requestJsonAndCheck(self, verb, url, parameters, headers, input)\r\n    352 def requestJsonAndCheck(self, verb, url, parameters=None, headers=None, input=None):\r\n--> 353     return self.__check(\r\n    354         *self.requestJson(\r\n    355             verb, url, parameters, headers, input, self.__customConnection(url)\r\n    356         )\r\n    357     )\r\n\r\nFile /usr/lib/python3.10/site-packages/github/Requester.py:378, in Requester.__check(self, status, responseHeaders, output)\r\n    376 output = self.__structuredFromJson(output)\r\n    377 if status >= 400:\r\n--> 378     raise self.__createException(status, responseHeaders, output)\r\n    379 return responseHeaders, output\r\n\r\nUnknownObjectException: 404 {\"message\": \"Not Found\", \"documentation_url\": \"https://docs.github.com/rest\"}\r\n\r\nIn [38]: org = gh.get_organization(repo.organization.login)\r\n\r\nIn [39]: teams = list(org.get_teams())\r\n\r\nIn [40]: teams[1]\r\nOut[40]: Team(name=\"****\", id=00000000)\r\n```\r\n\r\nThe library version is 1.57","comments":[{"id":"IC_kwDOADYVqs5SEDyY","author":{"login":"moha-gh"},"authorAssociation":"NONE","body":"We've observed a problem that might be related: When using `repo.organization`, calls to `get_team_by_slug()` fail with a 404 as well. \"Direct\" calls are OK:\r\n\r\n```\r\norg = g.get_organization('foo')\r\nrepo = org.get_repo('bar')\r\n\r\n*** Reports 404 ***\r\nrepo.organization.get_team_by_slug('abc')\r\n\r\n*** Works ***\r\norg.get_team_by_slug('abc')\r\n```\r\n\r\n(Library version is 1.57 here as well)","createdAt":"2023-01-10T06:33:43Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/2395#issuecomment-1376795800","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs5SLDhO","author":{"login":"Felixoid"},"authorAssociation":"CONTRIBUTOR","body":"It looks to me like a github API issue:\r\n\r\n```\r\nIn [26]: repo.organization.get_teams()[0]\r\n> /home/felixoid/Space/Felixoid/github/PyGithub/PyGithub/github/Requester.py(354)requestJsonAndCheck()\r\n-> return self.__check(\r\n(Pdb) args\r\nself = <github.Requester.Requester object at 0x7f155fed7f70>\r\nverb = 'GET'\r\nurl = 'https://api.github.com/users/ClickHouse/teams'\r\nparameters = {'per_page': 100}\r\nheaders = None\r\ninput = None\r\n\r\n......\r\n\r\nIn [27]: repo.organization.url\r\nOut[27]: 'https://api.github.com/users/ClickHouse'\r\n```\r\n\r\nIt returns the organization with URL `/users/USERNAME`\r\n\r\nLooks like a terrible issue\r\n\r\n## upd\r\n\r\nHere's an ugly hack to fix the `repo.organization`:\r\n\r\n```\r\nIn [13]: repo.organization._url.value = repo.organization.url.replace('/users/', '/orgs/', 1)\r\n\r\nIn [14]: repo.organization.url\r\nOut[14]: 'https://api.github.com/orgs/ClickHouse'\r\n\r\nIn [15]: repo.organization.get_teams()[0]\r\nOut[15]: Team(name=\"NAME\", id=123456)\r\n```","createdAt":"2023-01-11T11:46:57Z","includesCreatedEdit":true,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/2395#issuecomment-1378629710","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs5Se-7V","author":{"login":"Felixoid"},"authorAssociation":"CONTRIBUTOR","body":"Just received the response from GH support.\r\n\r\nThey say that the URL reflects the [documentation](https://docs.github.com/en/rest/repos/repos?apiVersion=2022-11-28#get-a-repository) and it won't be fixed.","createdAt":"2023-01-16T10:49:36Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/2395#issuecomment-1383853781","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs5sA5bH","author":{"login":"Felixoid"},"authorAssociation":"CONTRIBUTOR","body":"After the recent update (to version 2.0 I believe) it's broken\r\n\r\nHere's a new way to get it fixed:\r\n\r\n```\r\nrepo.organization._url = repo._makeStringAttribute(\r\n    repo.organization.url.replace(\"/users/\", \"/orgs/\", 1)\r\n)\r\n```","createdAt":"2023-11-15T10:20:03Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":2}}],"url":"https://github.com/PyGithub/PyGithub/issues/2395#issuecomment-1812174535","viewerDidAuthor":false}],"createdAt":"2023-01-04T13:55:24Z","number":2395,"state":"OPEN","title":"The `organization` attribute of github.Repository.Repository can't request teams","url":"https://github.com/PyGithub/PyGithub/issues/2395"},{"author":{"id":"U_kgDOBzsj9w","is_bot":false,"login":"Mumtahinahzia","name":""},"body":"sc = pyspa.get_spa(target_id = 78, max_stage = 6, a_matrix_file_path ='A_matrix_template.csv', infosheet_file_path='Infosheet_template.csv', thresholds_file_path='Thresholds_template.csv')\r\n\r\nHello, I want to run this code in python which I already did successfully. But I need to make a do loop where I can set the code that can target all target ID one by one and gives the result at once. In this code, I have to run the code for one ID at a time. Please help me in this regard\r\n\r\n","comments":[],"createdAt":"2022-12-23T20:04:15Z","number":2388,"state":"OPEN","title":"Structural Path analysis running in Pyspa","url":"https://github.com/PyGithub/PyGithub/issues/2388"},{"author":{"id":"MDQ6VXNlcjMwMjU1Mzc=","is_bot":false,"login":"Felixoid","name":"Mikhail f. Shiryaev"},"body":"Hello, it's the same error faced in https://github.com/PyGithub/PyGithub/discussions/2264\r\n\r\nHere's the minimal reproducing case:\r\n\r\n```\r\n$ dd if=/dev/zero of=/tmp/asset bs=10M count=10                \r\n10+0 records in\r\n10+0 records out\r\n104857600 bytes (105 MB, 100 MiB) copied, 0,0326497 s, 3,2 GB/s\r\n$ cat repro.py \r\nfrom getpass import getpass\r\nfrom pathlib import Path\r\n\r\nfrom github import Github\r\nfrom github.GithubException import GithubException\r\n\r\ngh = Github(getpass(), per_page=100)\r\nrelease = gh.get_repo(\"Felixoid/ClickHouse\").get_release(\"v22.9.2.7-stable\")\r\n\r\n\r\ndef upload_asset(release, path):\r\n    try:\r\n        release.upload_asset(str(path))\r\n    except GithubException as e:\r\n        if (\r\n            \"message\" in e.data\r\n            and e.data[\"message\"] == \"Validation Failed\"\r\n            and [\r\n                True\r\n                for err in e.data[\"errors\"]\r\n                if err[\"code\"] == \"already_exists\"  # type: ignore\r\n            ]\r\n        ):\r\n            print(\"exception\")\r\n\r\n\r\nfor i in range(15):\r\n    upload_asset(release, Path(\"/tmp/asset\"))\r\n$ python repro.py \r\nPassword:\r\n \r\nTraceback (most recent call last):\r\n  File \"/usr/lib/python3.10/site-packages/urllib3/connectionpool.py\", line 703, in urlopen\r\n    httplib_response = self._make_request(\r\n  File \"/usr/lib/python3.10/site-packages/urllib3/connectionpool.py\", line 398, in _make_request\r\n    conn.request(method, url, **httplib_request_kw)\r\n  File \"/usr/lib/python3.10/site-packages/urllib3/connection.py\", line 239, in request\r\n    super(HTTPConnection, self).request(method, url, body=body, headers=headers)\r\n  File \"/usr/lib/python3.10/http/client.py\", line 1282, in request\r\n    self._send_request(method, url, body, headers, encode_chunked)\r\n  File \"/usr/lib/python3.10/http/client.py\", line 1328, in _send_request\r\n    self.endheaders(body, encode_chunked=encode_chunked)\r\n  File \"/usr/lib/python3.10/http/client.py\", line 1277, in endheaders\r\n    self._send_output(message_body, encode_chunked=encode_chunked)\r\n  File \"/usr/lib/python3.10/http/client.py\", line 1076, in _send_output\r\n    self.send(chunk)\r\n  File \"/usr/lib/python3.10/http/client.py\", line 998, in send\r\n    self.sock.sendall(data)\r\n  File \"/usr/lib/python3.10/ssl.py\", line 1237, in sendall\r\n    v = self.send(byte_view[count:])\r\n  File \"/usr/lib/python3.10/ssl.py\", line 1206, in send\r\n    return self._sslobj.write(data)\r\nssl.SSLEOFError: EOF occurred in violation of protocol (_ssl.c:2396)\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n  File \"/usr/lib/python3.10/site-packages/requests/adapters.py\", line 489, in send\r\n    resp = conn.urlopen(\r\n  File \"/usr/lib/python3.10/site-packages/urllib3/connectionpool.py\", line 787, in urlopen\r\n    retries = retries.increment(\r\n  File \"/usr/lib/python3.10/site-packages/urllib3/util/retry.py\", line 592, in increment\r\n    raise MaxRetryError(_pool, url, error or ResponseError(cause))\r\nurllib3.exceptions.MaxRetryError: HTTPSConnectionPool(host='uploads.github.com', port=443): Max retries exceeded with url: /repos/Felixoid/ClickHouse/releases/86328273/assets?label=&name=asset (Caused by SSLError(SSLEOFError(8, 'EOF occurred in violation of protocol (_ssl.c:2396)')))\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n  File \"/home/felixoid/Space/Felixoid/github/ClickHouse/clickhouse-repos-manager/repro.py\", line 24, in <module>\r\n    upload_asset(release, Path(\"/tmp/asset\"))\r\n  File \"/home/felixoid/Space/Felixoid/github/ClickHouse/clickhouse-repos-manager/repro.py\", line 13, in upload_asset\r\n    release.upload_asset(str(path))\r\n  File \"/usr/lib/python3.10/site-packages/github/GitRelease.py\", line 256, in upload_asset\r\n    resp_headers, data = self._requester.requestBlobAndCheck(\r\n  File \"/usr/lib/python3.10/site-packages/github/Requester.py\", line 370, in requestBlobAndCheck\r\n    *self.requestBlob(\r\n  File \"/usr/lib/python3.10/site-packages/github/Requester.py\", line 490, in requestBlob\r\n    return self.__requestEncode(cnx, verb, url, parameters, headers, input, encode)\r\n  File \"/usr/lib/python3.10/site-packages/github/Requester.py\", line 528, in __requestEncode\r\n    status, responseHeaders, output = self.__requestRaw(\r\n  File \"/usr/lib/python3.10/site-packages/github/Requester.py\", line 555, in __requestRaw\r\n    response = cnx.getresponse()\r\n  File \"/usr/lib/python3.10/site-packages/github/Requester.py\", line 127, in getresponse\r\n    r = verb(\r\n  File \"/usr/lib/python3.10/site-packages/requests/sessions.py\", line 635, in post\r\n    return self.request(\"POST\", url, data=data, json=json, **kwargs)\r\n  File \"/usr/lib/python3.10/site-packages/requests/sessions.py\", line 587, in request\r\n    resp = self.send(prep, **send_kwargs)\r\n  File \"/usr/lib/python3.10/site-packages/requests/sessions.py\", line 701, in send\r\n    r = adapter.send(request, **kwargs)\r\n  File \"/usr/lib/python3.10/site-packages/requests/adapters.py\", line 563, in send\r\n    raise SSLError(e, request=request)\r\nrequests.exceptions.SSLError: HTTPSConnectionPool(host='uploads.github.com', port=443): Max retries exceeded with url: /repos/Felixoid/ClickHouse/releases/86328273/assets?label=&name=asset (Caused by SSLError(SSLEOFError(8, 'EOF occurred in violation of protocol (_ssl.c:2396)')))\r\n$ pacman -Q python-pygithub \r\npython-pygithub 1.57-1\r\n```\r\n\r\nHere's the release I use https://github.com/Felixoid/ClickHouse/releases/tag/v22.9.2.7-stable\r\n\r\n### upd 1\r\nIt looks like the asset size affects the result. 10M does the same, but 1M actually works","comments":[{"id":"IC_kwDOADYVqs5Q61t2","author":{"login":"Felixoid"},"authorAssociation":"CONTRIBUTOR","body":"Today I've dug a bit deeper, and I've found about `gh-cli`, that it doesn't fail.\r\n\r\nWhen I've executed it with `mitmproxy` as HTTPS proxy, it succeeds because of an additional request to the API in advance:\r\n\r\n```\r\n> SSL_CERT_FILE=~/.mitmproxy/mitmproxy-ca-cert.cer HTTPS_PROXY=192.168.2.197:8080 gh release -R Felixoid/ClickHouse upload v22.9.2.7-stable /tmp/asset2\r\nasset under the same name already exists: [asset2]\r\n```\r\n\r\n![image](https://user-images.githubusercontent.com/3025537/208426769-218c0804-a68f-4f04-807f-f65e12893891.png)\r\n\r\nIt looks like a good workaround. Sadly, it requires additional requests spent.","createdAt":"2022-12-19T12:32:24Z","includesCreatedEdit":true,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/2385#issuecomment-1357601654","viewerDidAuthor":false}],"createdAt":"2022-12-16T15:51:45Z","number":2385,"state":"OPEN","title":"SSLEOFERROR on sending the same big asset second time","url":"https://github.com/PyGithub/PyGithub/issues/2385"},{"author":{"id":"U_kgDOBye7xg","is_bot":false,"login":"kbr-scylla","name":"Kamil Braun"},"body":"Importing the `github` module gives an error; the error comes from `deprecated` -> `wrapt`, which uses `inspect.formatargspec`, which was deprecated since Python 3.5 and removed in Python 3.11.\r\n```\r\n    import github\r\nenv/lib64/python3.11/site-packages/github/__init__.py:56: in <module>\r\n    from github.MainClass import Github, GithubIntegration\r\nenv/lib64/python3.11/site-packages/github/MainClass.py:59: in <module>\r\n    import github.Event\r\nenv/lib64/python3.11/site-packages/github/Event.py:32: in <module>\r\n    import github.NamedUser\r\nenv/lib64/python3.11/site-packages/github/NamedUser.py:44: in <module>\r\n    import github.Organization\r\nenv/lib64/python3.11/site-packages/github/Organization.py:50: in <module>\r\n    import github.Repository\r\nenv/lib64/python3.11/site-packages/github/Repository.py:93: in <module>\r\n    from deprecated import deprecated\r\nenv/lib64/python3.11/site-packages/deprecated/__init__.py:15: in <module>\r\n    from deprecated.classic import deprecated\r\nenv/lib64/python3.11/site-packages/deprecated/classic.py:15: in <module>\r\n    import wrapt\r\nenv/lib64/python3.11/site-packages/wrapt/__init__.py:10: in <module>\r\n    from .decorators import (adapter_factory, AdapterFactory, decorator,\r\nenv/lib64/python3.11/site-packages/wrapt/decorators.py:34: in <module>\r\n    from inspect import ismethod, isclass, formatargspec\r\nE   ImportError: cannot import name 'formatargspec' from 'inspect' (/usr/lib64/python3.11/inspect.py)\r\n```","comments":[{"id":"IC_kwDOADYVqs5QBptS","author":{"login":"kbr-scylla"},"authorAssociation":"NONE","body":"There is an open PR in the deprecated library for 3.11 support:\r\nhttps://github.com/tantale/deprecated/pull/58\r\n\r\nI guess that is a blocker.","createdAt":"2022-12-08T11:52:20Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/2377#issuecomment-1342610258","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs5ScMTF","author":{"login":"hugovk"},"authorAssociation":"CONTRIBUTOR","body":"https://github.com/tantale/deprecated/pull/58 isn't a blocker: it doesn't make any code changes for 3.11 other than adding a Trove classifier to advertise support. The other changes are to test 3.11.\r\n\r\nHowever, as you note, Deprecated depends on wrapt, which added support for Python 3.11 in wrapt 1.14.0: https://wrapt.readthedocs.io/en/latest/changes.html#version-1-14-0\r\n\r\nSo Deprecated should really require wrapt >= 1.14.0 for Python 3.11. I'll update that PR.\r\n\r\nIn the meantime you can manually update wrapt:\r\n\r\n`python -m pip install \"wrapt>=1.14.0\"`\r\n\r\nIn any case, this is a Deprecated issue rather than a PyGithub one.","createdAt":"2023-01-15T11:11:13Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/2377#issuecomment-1383122117","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs5ScMYk","author":{"login":"hugovk"},"authorAssociation":"CONTRIBUTOR","body":"> So Deprecated should really require wrapt >= 1.14.0 for Python 3.11. I'll update that PR.\r\n\r\nGood news, this is already done in a newer PR which includes mine: https://github.com/tantale/deprecated/pull/59","createdAt":"2023-01-15T11:13:20Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":1}}],"url":"https://github.com/PyGithub/PyGithub/issues/2377#issuecomment-1383122468","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs5SeaDm","author":{"login":"kbr-scylla"},"authorAssociation":"NONE","body":"Great, thanks.","createdAt":"2023-01-16T09:07:27Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/2377#issuecomment-1383702758","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs5Vl0I1","author":{"login":"EnricoMi"},"authorAssociation":"COLLABORATOR","body":"Looks like Python 3.11 support has been released: https://github.com/PyGithub/PyGithub/pull/2332\r\n\r\nI think this can be closed.","createdAt":"2023-02-19T12:30:05Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":1}}],"url":"https://github.com/PyGithub/PyGithub/issues/2377#issuecomment-1435976245","viewerDidAuthor":false}],"createdAt":"2022-12-08T11:51:30Z","number":2377,"state":"OPEN","title":"Support for Python 3.11","url":"https://github.com/PyGithub/PyGithub/issues/2377"},{"author":{"id":"U_kgDOBgGBWQ","is_bot":false,"login":"niro-lightspin","name":"Nir Ostrovski"},"body":"The full error: `github.GithubException.GithubException: 403 {\"message\": \"Resource not accessible by integration\", \"documentation_url\": \"https://docs.github.com/rest/reference/repos#list-repositories-for-the-authenticated-user\"}`","comments":[{"id":"IC_kwDOADYVqs5TUZpF","author":{"login":"yozachar"},"authorAssociation":"NONE","body":"I see the same error here: https://github.com/athul/waka-readme/issues/114. Workflow run [output](https://github.com/zychen20/zychen20/actions/runs/3963544624/jobs/6791489868).\r\n\r\n[Source](https://github.com/athul/waka-readme/blob/ce472c9c93ac37a60d16251c513b4108a0308ac5/main.py#L406-L411)\r\n\r\n```py\r\n...\r\n        gh_repo.update_file(\r\n            path=readme_file.path,\r\n            message=wk_i.commit_message,\r\n            content=new_content,\r\n            sha=readme_file.sha\r\n        )\r\n...\r\n```\r\n\r\nDid any API change?","createdAt":"2023-01-20T02:39:21Z","includesCreatedEdit":true,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/2372#issuecomment-1397856837","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs5TaPaD","author":{"login":"yozachar"},"authorAssociation":"NONE","body":"My use case got fixed this https://github.com/athul/waka-readme/issues/114#issuecomment-1398053158 way.","createdAt":"2023-01-22T02:24:35Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/2372#issuecomment-1399387779","viewerDidAuthor":false}],"createdAt":"2022-12-06T06:44:35Z","number":2372,"state":"OPEN","title":"List repositories accessible to the app installation returns \"Resource not accessible by integration\"","url":"https://github.com/PyGithub/PyGithub/issues/2372"},{"author":{"id":"MDQ6VXNlcjExNDQ3NTI4","is_bot":false,"login":"rvillane","name":"Mario Rodriguez Villanea"},"body":"GitHub just announced changes in how GitHub REST API versioning is going to work [1], a new `X-GitHub-Api-Version` HTTP header was announced to manage a calendar-based version.  Would be nice that PyGithub library can manage this new header.\r\n\r\n[1] https://github.blog/2022-11-28-to-infinity-and-beyond-enabling-the-future-of-githubs-rest-api-with-api-versioning/","comments":[],"createdAt":"2022-11-28T22:56:40Z","number":2369,"state":"OPEN","title":"[Feature Request] Add support for X-GitHub-Api-Version HTTP header","url":"https://github.com/PyGithub/PyGithub/issues/2369"},{"author":{"id":"MDQ6VXNlcjgyNDEwNTIw","is_bot":false,"login":"trent-abc","name":""},"body":"Bug Report\r\n\r\n\r\nWhen a workflow is created in the `.github/workflows` directory with a filename, this permanently the name by which the [get_workflow](https://pygithub.readthedocs.io/en/latest/github_objects/Repository.html#github.Repository.Repository.get_workflow) api refers to it.  If the filename is changed and pushed upstream (i.e. changing the extension from yaml to yml) the get_workflow will not find the new filename, it will continue to look for \"my_original_workflow.yaml\".  The most frustrating part of this bug is that it's looking for the \"filename\" not the \"name\".  both the new filename as well as the workflow name (which can be retrieved from the [get_workflows](https://pygithub.readthedocs.io/en/latest/github_objects/Repository.html#github.Repository.Repository.get_workflows) api ) result in a 404 not found error.\r\n\r\nI think the api should query the workflow `name` as it suggests that it does in the documentation\r\n\r\nSteps to reproduce:\r\n\r\nCreate a function, main.py\r\n```\r\nimport os\r\nfrom github import Github\r\n\r\ndef list_workflows(gh_pat=None):\r\n    token = os.getenv(\"MY_GITHUB_TOKEN\", default=gh_pat)\r\n    g = Github(token)\r\n    repo_name = \"Organization/my_repo\"\r\n    workflows = g.get_repo(repo_name).get_workflows()\r\n    workflow_list = []\r\n    for workflow in workflows:\r\n        workflow_list.append(workflow.name)\r\n    return workflow_list\r\n\r\nprint(list_workflows())\r\n```\r\n\r\nCall it and get the expected result\r\n```\r\n['main', 'my_other_workflow']\r\n```\r\n\r\nCreate a function, gatherer.py\r\n```\r\nimport os\r\nfrom github import Github\r\n\r\ndef gather(statuses=[\"completed\"], conclusions=[\"success\", \"failure\"]):\r\n    token = os.getenv(\"MY_GITHUB_TOKEN\")\r\n    g = Github(token)\r\n    #wf_name = \"my_other_workflow.yaml\"\r\n    wf_name = \"my_other_workflow\"\r\n    repo_name = \"Organization/my_repo\"\r\n    logs = []\r\n\r\n    runs = [\r\n        r\r\n        for r in g.get_repo(repo_name).get_workflow(wf_name).get_runs()\r\n        if r.status in statuses\r\n    ]\r\n    return runs\r\n\r\nprint(gather())\r\n```\r\n\r\nCall it and get a 404\r\n```\r\nTraceback (most recent call last):\r\n  File \"/Users/me/gatherer.py\", line 19, in <module>\r\n    print(gather())\r\n  File \"/Users/me/gatherer.py\", line 14, in gather\r\n    for r in g.get_repo(repo_name).get_workflow(wf_name).get_runs()\r\n  File \"/Users/me/.conda/lib/python3.9/site-packages/github/Repository.py\", line 3032, in get_workflow\r\n    headers, data = self._requester.requestJsonAndCheck(\r\n  File \"/Users/me/.conda/lib/python3.9/site-packages/github/Requester.py\", line 317, in requestJsonAndCheck\r\n    return self.__check(\r\n  File \"/Users/me/.conda/lib/python3.9/site-packages/github/Requester.py\", line 342, in __check\r\n    raise self.__createException(status, responseHeaders, output)\r\ngithub.GithubException.UnknownObjectException: 404 {\"message\": \"Not Found\", \"documentation_url\": \"https://docs.github.com/rest/reference/actions#get-a-workflow\"}\r\n```\r\n\r\n","comments":[{"id":"IC_kwDOADYVqs5OvBRz","author":{"login":"ahoneiser"},"authorAssociation":"NONE","body":"[docs](https://docs.github.com/en/rest/actions/workflows#get-a-workflow) say:\r\n\r\n> You can replace `workflow_id` with the workflow file name. For example, you could use `main.yaml`.\r\n\r\n[Repository.py](https://github.com/PyGithub/PyGithub/blob/7902351d4fa501dc108dbf3724e93831d922f582/github/Repository.py#L3190-L3196)'s params reflect this.\r\n\r\nGuess this should rather be a [feedback request](https://support.github.com/request)?","createdAt":"2022-11-19T19:06:19Z","includesCreatedEdit":true,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/2361#issuecomment-1320948851","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs5O0rbc","author":{"login":"trent-abc"},"authorAssociation":"NONE","body":"Again, the issue I have is not only that it doesn't use the \"workflow name\", but that if the filename is changed to \"main.yml\" from \"main.yaml\" it will not return a result for \"main.yml\".  The filename has changed but querying the new filename results in a 404, while the old filename, no longer present in the repository returns 200.","createdAt":"2022-11-21T17:44:37Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/2361#issuecomment-1322432220","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs5PoadA","author":{"login":"ahoneiser"},"authorAssociation":"NONE","body":"sorry @trent-abc, can't reproduce ..\r\n\r\nused this to test:\r\n\r\n```python\r\nimport os\r\nimport sys\r\n\r\nimport click\r\nfrom github import Github\r\nfrom github.GithubException import UnknownObjectException\r\n\r\n\r\nclass GhClient:\r\n    __client = None\r\n\r\n    def __init__(self):\r\n        token = os.getenv(\"GITHUB_TOKEN\")\r\n\r\n        if token:\r\n            self.__client = Github(token)\r\n\r\n        else:\r\n            self.__client = Github()\r\n\r\n    def get_workflows(self, repo):\r\n        return self.__client.get_repo(repo).get_workflows()\r\n\r\n    def get_workflow(self, repo, workflow):\r\n        return self.__client.get_repo(repo).get_workflow(workflow)\r\n\r\n\r\n@click.command()\r\n@click.argument(\"org\")\r\n@click.argument(\"repo\")\r\n@click.argument(\"workflow\")\r\ndef list_workflow(org, repo, workflow):\r\n    client = GhClient()\r\n\r\n    try:\r\n        workflow = client.get_workflow(f\"{org}/{repo}\", workflow)\r\n        print(f\"{workflow.name} ({workflow.id}, {workflow.path})\")\r\n\r\n    except UnknownObjectException as err:\r\n        status = err.status\r\n        msg = err.data.get(\"message\")\r\n\r\n        print(f\"{status}: {msg}\", file=sys.stderr)\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    list_workflow()\r\n```\r\n\r\nWorks with a `workflow_id` or a path name, just as explained by the docs. When I rename a workflow, old id or path gets me a 404, except for when Workflow runs are still available, GitHub keeps the Workflow Data in this case, of course.\r\n\r\nCan you provide a more specific example? Are you getting the 200 because you've got Workflow Runs kept that are associated with the old path / id? Is your code using a name or a non-existant path / id when the 404 is returned?","createdAt":"2022-12-03T00:58:49Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/2361#issuecomment-1335994176","viewerDidAuthor":false}],"createdAt":"2022-11-17T23:44:43Z","number":2361,"state":"OPEN","title":"Bug Report, get_workflows relies on filename instead of workflow name","url":"https://github.com/PyGithub/PyGithub/issues/2361"},{"author":{"id":"U_kgDOBqN38Q","is_bot":false,"login":"ruben-chainalysis","name":"Rubén Cabrera"},"body":"[MainClass.GithubIntegration.get_installation()](https://github.com/PyGithub/PyGithub/blob/f1faf941ecac3619fb410904727ced182b4e4fe1/github/MainClass.py#L862) requires a `repo` and an `owner`, but [the GitHub API has an endpoint where we can just pass the `org`](https://docs.github.com/en/rest/apps/apps#get-an-organization-installation-for-the-authenticated-app). The response schemas are the same.\r\n\r\nThis would be useful when creating an org wide app where a mention of an arbitrary repo installation doesn't make much sense. \r\n\r\nI can create a PR if this seems something worth adding. ","comments":[{"id":"IC_kwDOADYVqs5Ppj0D","author":{"login":"urosjarc"},"authorAssociation":"NONE","body":"Sign me up brother!!!\r\n\r\n","createdAt":"2022-12-04T01:20:52Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/2358#issuecomment-1336294659","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs5PpkNB","author":{"login":"urosjarc"},"authorAssociation":"NONE","body":"@ruben-chainalysis This is my setup... And it works.\r\n```\r\nclass GithubVcs:\r\n\tdef __init__(self, app_id: str, private_key_path: str, organization: str):\r\n\t\tself.organization = organization\r\n\t\tself.github: Github | None = None\r\n\t\twith open(private_key_path) as f:\r\n\t\t\tself.github_integration = GithubIntegration(\r\n\t\t\t\tintegration_id=app_id,\r\n\t\t\t\tprivate_key=f.read())\r\n\r\n\tdef init(self):\r\n\t\tbody = requests.get(f\"https://api.github.com/orgs/{self.organization}/installation\", headers={\r\n\t\t\t\"Authorization\": f\"Bearer {self.github_integration.create_jwt(9*60)}\"\r\n\t\t}).json()\r\n\t\taccess = self.github_integration.get_access_token(installation_id=body.get('id', None))\r\n\t\tself.github = Github(login_or_token=access.token)\r\n\tdef get_repos(self, page: int):\r\n\t\tprint(self.github.get_repos().get_page(page))\r\n```","createdAt":"2022-12-04T01:32:37Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":1}}],"url":"https://github.com/PyGithub/PyGithub/issues/2358#issuecomment-1336296257","viewerDidAuthor":false}],"createdAt":"2022-11-15T10:17:37Z","number":2358,"state":"OPEN","title":"Get an organization installation","url":"https://github.com/PyGithub/PyGithub/issues/2358"},{"author":{"id":"MDQ6VXNlcjEwNDgxODU=","is_bot":false,"login":"rcstanciu","name":"Rares Stanciu"},"body":"Source:\r\nhttps://pygithub.readthedocs.io/en/latest/github_objects/Repository.html#github.Repository.Repository.create_issue\r\n\r\nThe docs specify that the function receives a list of `github.Label.Label`, but the code also allows passing in a list of strings (a.k.a. the label names).\r\n\r\nhttps://github.com/PyGithub/PyGithub/blob/7902351d4fa501dc108dbf3724e93831d922f582/github/Repository.py#L1257-L1261\r\n\r\nWe should update the docs to reflect that, as it allows the user to skip fetching the issue labels via `repository.get_label` and save some API calls.","comments":[{"id":"IC_kwDOADYVqs5Oz7Nn","author":{"login":"ryzheboka"},"authorAssociation":"NONE","body":"Hi @rcstanciu , can I work on this issue? ","createdAt":"2022-11-21T15:27:34Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/2355#issuecomment-1322234727","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs5O0MKP","author":{"login":"rcstanciu"},"authorAssociation":"NONE","body":"> Hi @rcstanciu , can I work on this issue?\r\n\r\nSure thing, thank you! ","createdAt":"2022-11-21T16:14:27Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/2355#issuecomment-1322304143","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs5O0su0","author":{"login":"ryzheboka"},"authorAssociation":"NONE","body":"I only found one place where repository.create_issue is mentioned in the documentation. The PR is there :)","createdAt":"2022-11-21T17:49:36Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/2355#issuecomment-1322437556","viewerDidAuthor":false}],"createdAt":"2022-11-11T12:34:05Z","number":2355,"state":"OPEN","title":"Update docs on repository.create_issue function","url":"https://github.com/PyGithub/PyGithub/issues/2355"},{"author":{"id":"MDQ6VXNlcjU5MTY2NDg5","is_bot":false,"login":"jmreddy2106","name":"Jagan Mohan Reddy Danda"},"body":"Hi team, can I fetch Dependency graph of the repo using PyGitHub? Currently, I'm able to fetch using GraphQL API. However, to fetch the metadata of entire repo, I found it is difficult to parse the GraphQL API. ","comments":[{"id":"IC_kwDOADYVqs5NXG8l","author":{"login":"s-t-e-v-e-n-k"},"authorAssociation":"COLLABORATOR","body":"Dependency graphs are via the GraphQL API, which this library does not support. Sorry.","createdAt":"2022-11-01T01:43:36Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/2347#issuecomment-1297903397","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs5t2YSQ","author":{"login":"EnricoMi"},"authorAssociation":"COLLABORATOR","body":"PyGithub now has its first GraphQL call, see https://github.com/PyGithub/PyGithub/commit/232df79a2947dc96363bdc6f51a6f446ff2b241f#diff-90017b18548bd848900b7cffd7fe86a610dc20e5d228663dfb429a47cdf65a20R767-R772 for reference.","createdAt":"2023-12-06T14:14:44Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/2347#issuecomment-1842971792","viewerDidAuthor":false}],"createdAt":"2022-10-31T19:56:46Z","number":2347,"state":"OPEN","title":"Dependency Graph ","url":"https://github.com/PyGithub/PyGithub/issues/2347"},{"author":{"id":"MDQ6VXNlcjEwMzY2ODE3","is_bot":false,"login":"itsmeow","name":"itsmeow"},"body":"According to the github spec if a file is larger than 1MB, only raw types are supported. This causes the get_contents to throw an assertion error because the encoding is \"none\".\r\n\r\nhttps://docs.github.com/en/rest/repos/contents#get-repository-content\r\n\r\nThe get_contents method should support this case and properly return decoded_content.\r\n\r\nPossibly related to #1059","comments":[{"id":"IC_kwDOADYVqs5fqLnr","author":{"login":"antoniodesenvolvedor"},"authorAssociation":"NONE","body":"I am having the same error, I can't access the content of files larger than 1MB.\r\n\r\nHaving an option to try the raw content approach while retrieving files would be great.\r\n\r\nOther possible related issues\r\nhttps://github.com/PyGithub/PyGithub/issues/2433\r\nhttps://github.com/PyGithub/PyGithub/issues/576\r\n\r\nRef:\r\nhttps://docs.github.com/en/rest/repos/contents?apiVersion=2022-11-28\r\nhttps://github.blog/changelog/2022-05-03-increased-file-size-limit-when-retrieving-file-contents-via-rest-api/\r\n","createdAt":"2023-06-23T20:14:29Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/2345#issuecomment-1604893163","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs5tZaBB","author":{"login":"Spuckwaffel"},"authorAssociation":"NONE","body":"Late comment, however, this has been mentioned in #661 and the fix for this is getting the content via ``get_git_blob``.\r\n```python\r\nblob = repo.get_git_blob(file.sha)\r\nb64 = base64.b64decode(blob.content)\r\nreturn b64.decode(\"utf8\")\r\n```\r\nIt will return the raw decoded content in utf-8.","createdAt":"2023-12-01T02:59:07Z","includesCreatedEdit":true,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/2345#issuecomment-1835376705","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs5teWan","author":{"login":"EnricoMi"},"authorAssociation":"COLLABORATOR","body":"Someone volunteering to create a pull request?","createdAt":"2023-12-01T19:42:27Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/2345#issuecomment-1836672679","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs6YoXA_","author":{"login":"topherbuckley"},"authorAssociation":"NONE","body":"> Late comment, however, this has been mentioned in #661 and the fix for this is getting the content via `get_git_blob`.\r\n> \r\n> ```python\r\n> blob = repo.get_git_blob(file.sha)\r\n> b64 = base64.b64decode(blob.content)\r\n> return b64.decode(\"utf8\")\r\n> ```\r\n> \r\n> It will return the raw decoded content in utf-8.\r\n\r\nIf you are trying to download and use a text file in memory, this is fine, but for as everything is not utf-8 text, and I want to be able to download and write **any** abitrary file to disk. One can just download the blob and write the binary to disk. My helper function is below for reference:\r\n\r\n```python\r\nimport base64\r\nimport os\r\nfrom pathlib import Path\r\n\r\nfrom github import Github\r\n\r\n\r\ndef download(local_file_path: Path, github_repo: str, github_path: str, branch_name: str, token: str=None):\r\n    \"\"\"\r\n    Checks if a file exists locally or in a specific branch of a GitHub repository and downloads it if necessary.\r\n    :param local_file_path: The path to the file on the local system.\r\n    :param github_repo: The GitHub repository in the form \"owner/repo\".\r\n    :param github_path: The path to the file in the GitHub repo.\r\n    :param branch_name: The branch name to fetch the file from.\r\n    :param token: Optional GitHub token for authentication (if private repo or to avoid rate limits).\r\n    :return: True if the file exists (locally or downloaded), False otherwise.\r\n    \"\"\"\r\n    # Check if the file exists locally\r\n    if os.path.exists(local_file_path):\r\n        print(f\"File found locally: {local_file_path}\")\r\n        return True\r\n\r\n    # Authenticate with GitHub\r\n    g = Github(token) if token else Github()\r\n    repo = g.get_repo(github_repo)\r\n\r\n    try:\r\n        # Get the file content from the specified branch\r\n        file_content = repo.get_contents(github_path, ref=branch_name)\r\n        with open(local_file_path, \"wb\") as f:\r\n            sha = file_content.sha\r\n            blob = repo.get_git_blob(sha)\r\n            blob_bytes = base64.b64decode(blob.content)\r\n            f.write(blob_bytes)\r\n        print(f\"File downloaded from branch '{branch_name}' on GitHub to: {local_file_path}\")\r\n        return True\r\n    except Exception as e:\r\n        print(f\"File not found on branch '{branch_name}' in GitHub repo: {github_repo}/{github_path}\")\r\n        print(f\"Error: {e}\")\r\n        return False\r\n```\r\n\r\nIt baffles me how such a basic function is so complex. Thinking just to use curl for future implementations. ","createdAt":"2024-12-24T06:24:41Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/2345#issuecomment-2560716863","viewerDidAuthor":false}],"createdAt":"2022-10-28T14:18:54Z","number":2345,"state":"OPEN","title":"get_contents has no large file support","url":"https://github.com/PyGithub/PyGithub/issues/2345"},{"author":{"id":"MDQ6VXNlcjMyOTgyMg==","is_bot":false,"login":"Julian","name":"Julian Berman"},"body":"```\r\n⊙  venv/bin/python -c 'from github import Github; print(Github().get_repo(\"json-schema-org/JSON-Schema-Test-Suite\").get_contents(\"tests/\"))'\r\nTraceback (most recent call last):\r\n  File \"<string>\", line 1, in <module>\r\n  File \"/Users/julian/Development/bowtie/venv/lib/python3.11/site-packages/github/Repository.py\", line 1854, in get_contents\r\n    return github.ContentFile.ContentFile(\r\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"/Users/julian/Development/bowtie/venv/lib/python3.11/site-packages/github/GithubObject.py\", line 283, in __init__\r\n    super().__init__(requester, headers, attributes, completed)\r\n  File \"/Users/julian/Development/bowtie/venv/lib/python3.11/site-packages/github/GithubObject.py\", line 84, in __init__\r\n    self._storeAndUseAttributes(headers, attributes)\r\n  File \"/Users/julian/Development/bowtie/venv/lib/python3.11/site-packages/github/GithubObject.py\", line 96, in _storeAndUseAttributes\r\n    self._useAttributes(attributes)\r\n  File \"/Users/julian/Development/bowtie/venv/lib/python3.11/site-packages/github/ContentFile.py\", line 191, in _useAttributes\r\n    if \"content\" in attributes:  # pragma no branch\r\n       ^^^^^^^^^^^^^^^^^^^^^^^\r\nTypeError: argument of type 'NoneType' is not iterable\r\n```\r\n\r\nThis is similar to #1059 (which was autoclosed for staleness EDIT: no seems that had a PR merged, but the issue persists.).","comments":[{"id":"IC_kwDOADYVqs5OY2EA","author":{"login":"NielsKorschinsky"},"authorAssociation":"NONE","body":"I can confirm this.\r\nI also got such an error, however it might be because the dir did not exist.","createdAt":"2022-11-15T10:52:47Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/2343#issuecomment-1315135744","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs5n8sX_","author":{"login":"ChristopherJHart"},"authorAssociation":"NONE","body":"For future reference to others - this traceback only seems to appear if the filepath passed into `get_contents()` has a trailing backslash (`/`).\r\n\r\nIn other words, instead of calling the following:\r\n```python\r\ncontents = github_repository.get_contents(\"foo/\")\r\n```\r\nCall the following:\r\n```python\r\ncontents = github_repository.get_contents(\"foo\")\r\n```","createdAt":"2023-10-03T00:19:36Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/2343#issuecomment-1743963647","viewerDidAuthor":false}],"createdAt":"2022-10-25T22:52:58Z","number":2343,"state":"OPEN","title":"get_contents raises an obscure exception when asking for contents of something which is a directory","url":"https://github.com/PyGithub/PyGithub/issues/2343"},{"author":{"id":"MDQ6VXNlcjI1NjYxNzIy","is_bot":false,"login":"thburghout","name":"Thomas Burghout"},"body":"Thank you for this great project!\r\n\r\nI found that the `get_runs` function of `Workflow` has missing parameters.\r\nhttps://github.com/PyGithub/PyGithub/blob/master/github/Workflow.py#L134\r\n\r\nSpecifically, I needed the `head_sha` (string, and maybe `GithubObject.Commit`?) query parameter as documented at https://docs.github.com/en/rest/actions/workflow-runs#list-workflow-runs-for-a-repository .  However, also note that the `created` (string representing datetime range), `exclude_pull_requests` (boolean) and `check_suite` (integer or `GithubObject.CheckSuite`) are missing.\r\n\r\nIs there a workaround possible such that I can access the underlying client?","comments":[],"createdAt":"2022-10-19T11:47:15Z","number":2337,"state":"OPEN","title":"Missing head_sha parameter in Workflow.get_runs()","url":"https://github.com/PyGithub/PyGithub/issues/2337"},{"author":{"id":"MDQ6VXNlcjI1MjA2OTcy","is_bot":false,"login":"Andr3dre","name":"Andre Bernardo"},"body":"Perhaps this has been covered but I would like to know if its possible to add topics with the use of PyGithub to all repos in an organization. I am unable to find much documentation around this, any help in pointing me to the right direction would be greatly appreciated.  ","comments":[],"createdAt":"2022-10-17T19:23:23Z","number":2336,"state":"OPEN","title":"Adding github topics to all repositories in an organization ","url":"https://github.com/PyGithub/PyGithub/issues/2336"},{"author":{"id":"MDQ6VXNlcjMwMjIzNDA0","is_bot":false,"login":"elliotwutingfeng","name":"Wu Tingfeng"},"body":"Currently the [github.Repository.Repository.create_git_commit](https://pygithub.readthedocs.io/en/latest/github_objects/Repository.html#github.Repository.Repository.create_git_commit) method does not support signing commits, though it is [supported](https://docs.github.com/en/rest/git/commits#create-a-commit--parameters) (GPG) in the GitHub API.","comments":[{"id":"IC_kwDOADYVqs5ZWuAU","author":{"login":"alaa-ledger"},"authorAssociation":"NONE","body":"bumping this because this is the only thing preventing me from properly using this lovely module! Being able to sign commits using it would be very helpful.","createdAt":"2023-04-06T14:10:33Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":5}}],"url":"https://github.com/PyGithub/PyGithub/issues/2325#issuecomment-1499127828","viewerDidAuthor":false}],"createdAt":"2022-10-07T03:09:51Z","number":2325,"state":"OPEN","title":"Feature request: Signing commits","url":"https://github.com/PyGithub/PyGithub/issues/2325"},{"author":{"id":"MDQ6VXNlcjMyMjQzMzI=","is_bot":false,"login":"prassanna-ravishankar","name":"Prassanna Ravishankar"},"body":"The documentation on get_organization[ here ](https://pygithub.readthedocs.io/en/latest/github.html#github.MainClass.Github.get_organization) accepts a `login` parameter. I think it should be `organization_name` instead. ","comments":[{"id":"IC_kwDOADYVqs5PUzAx","author":{"login":"ADITYADAS1999"},"authorAssociation":"NONE","body":"hi [prassanna-ravishankar](https://github.com/prassanna-ravishankar) this issue is still open to work?","createdAt":"2022-11-29T15:45:54Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/2323#issuecomment-1330851889","viewerDidAuthor":false}],"createdAt":"2022-10-04T21:24:17Z","number":2323,"state":"OPEN","title":"The documentation for get_organization may be incorrect.","url":"https://github.com/PyGithub/PyGithub/issues/2323"},{"author":{"id":"MDQ6VXNlcjcwNTk1Nzc2","is_bot":false,"login":"MaxOrtGit","name":"Max Ortman"},"body":"When I try to get the decoded_content on my windows computer it runs fine, and it used to run fine on the server but ever since I updated it I get this error when calling decoded_content on my aws server:\r\n```\r\nTraceback (most recent call last):\r\n  File \"/home/ubuntu/.cache/pypoetry/virtualenvs/vct-predictions-bot-sfowNqXl-py3.8/lib/python3.8/site-packages/discord/client.py\", line 382, in _run_event\r\n    await coro(*args, **kwargs)\r\n  File \"vctpb/main.py\", line 214, in on_ready\r\n    save_savedata_from_github()\r\n  File \"/home/ubuntu/VCT-Predictions-Bot/vctpb/vctpb/savedata.py\", line 163, in save_savedata_from_github\r\n    f.write(content.decoded_content)\r\n  File \"/home/ubuntu/.cache/pypoetry/virtualenvs/vct-predictions-bot-sfowNqXl-py3.8/lib/python3.8/site-packages/github/ContentFile.py\", line 59, in decoded_content\r\n    assert self.encoding == \"base64\", f\"unsupported encoding: {self.encoding}\"\r\nAssertionError: unsupported encoding: none\r\n```","comments":[{"id":"IC_kwDOADYVqs5KxE5D","author":{"login":"MaxOrtGit"},"authorAssociation":"NONE","body":"a soulution i found was putting \r\n`content._encoding.value = \"base64\"`\r\nabove content.decoded_content","createdAt":"2022-09-22T01:01:11Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/2312#issuecomment-1254379075","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs5QG6lO","author":{"login":"etorth"},"authorAssociation":"NONE","body":"This is very annoying, I use PyGithub to save diaries on github by a plugin: PyGithubDiary.\r\nBut when the diary text file gets larger this error always get triggered.","createdAt":"2022-12-09T08:16:22Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/2312#issuecomment-1343990094","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs5QG6-T","author":{"login":"etorth"},"authorAssociation":"NONE","body":"To my experience for small text files it never trigger, only big text files (~1MBytes) it triggers.","createdAt":"2022-12-09T08:18:09Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/2312#issuecomment-1343991699","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs5QMbnm","author":{"login":"etorth"},"authorAssociation":"NONE","body":"For those who has trouble with this problem, check a solution here:\r\n\r\nhttps://github.com/etorth/PyGithubDiary/blob/8a24682f0f65007c2387f0a765049a2fc07c2f2d/python3/PyGithubDiary.py#L99","createdAt":"2022-12-11T02:12:31Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"HEART","users":{"totalCount":1}}],"url":"https://github.com/PyGithub/PyGithub/issues/2312#issuecomment-1345436134","viewerDidAuthor":false}],"createdAt":"2022-09-22T00:28:18Z","number":2312,"state":"OPEN","title":"getting AssertionError: unsupported encoding: none only on aws","url":"https://github.com/PyGithub/PyGithub/issues/2312"},{"author":{"id":"MDQ6VXNlcjkwNjg5NzQy","is_bot":false,"login":"slopez-lmes","name":"Sergio López López"},"body":"Hello, \r\n\r\nAccording to the Github documentation (https://docs.github.com/en/rest/repos/repos),  when you execute GET of an organization's repositories it returns a list of objects. Each object is a repository and has several fields with information. One of them is the topics:\r\n\r\n{\r\n    \"id\": 1296269,\r\n        ...\r\n    \"full_name\": \"octocat/Hello-World\",\r\n        ...\r\n    \"is_template\": false,\r\n    **\"topics\":** [\r\n      \"octocat\",\r\n      \"atom\",\r\n      \"electron\",\r\n      \"api\"\r\n    ],\r\n    \"has_issues\": true,\r\n        ...\r\n    \"template_repository\": null\r\n}\r\n\r\nHowever, this information is not given when using this API, but forces you to make a get_topics() call, so for large volumes of repositories, it increases the number of calls to Github.\r\n\r\nIs there any solution for this, could you add this field?\r\n\r\nGreetings and thanks in advance\r\n","comments":[{"id":"IC_kwDOADYVqs5MX5sJ","author":{"login":"pliniodng"},"authorAssociation":"NONE","body":"Seems like this was present before `v1.52.0`, but for some reason was removed.\r\n\r\nHere is the PR that removed it: https://github.com/PyGithub/PyGithub/pull/1505.\r\n\r\n@s-t-e-v-e-n-k, could we have this property re-added? It seems counter productive having to call the API for `get_topics()` since the information is already present on the API response for `list_repos()`.","createdAt":"2022-10-17T18:59:24Z","includesCreatedEdit":true,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/2308#issuecomment-1281334025","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs5NAphD","author":{"login":"pliniodng"},"authorAssociation":"NONE","body":"@slopez-lmes Seems like the `topcis` property on the `Repository` object was added back on the latest release (1.56.0). I could not find the exact commit that did that, but if you check the [tag](https://github.com/PyGithub/PyGithub/blob/v1.55/github/Repository.py) for version `1.55.0` there is no property, while the property is [back](https://github.com/PyGithub/PyGithub/blob/v1.56/github/Repository.py) on version `1.56.0`.\r\n\r\nAlso, there is no entry on the CHANGELOG mentioning that, which is a shame.","createdAt":"2022-10-26T13:13:25Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/2308#issuecomment-1292015683","viewerDidAuthor":false}],"createdAt":"2022-09-14T14:51:14Z","number":2308,"state":"OPEN","title":"List of repositories of an organization with topics information.","url":"https://github.com/PyGithub/PyGithub/issues/2308"},{"author":{"id":"U_kgDOBXtgIA","is_bot":false,"login":"giomilan","name":""},"body":"is there a way to get the asset api URL from the browser download URL? \r\n\r\ne.g one of my releases hase the following asset url: \r\n 'https://github.com/owner/repo/releases/download/v4.20.5/asset-v4.20.5.tar.gz'\r\n\r\nI've managed to know (only cause it's the latest release so i could use \"g.get_repo(repository).get_latest_release().get_assets()[0]\") the API url:\r\n'https://api.github.com/repos/owner/repo/releases/assets/76676344'\r\n\r\nso 76676344 is the asset ID.\r\n\r\nhow can i get this string for any asset from the browser URL?\r\n\r\nthank you","comments":[],"createdAt":"2022-09-07T16:37:14Z","number":2302,"state":"OPEN","title":"get asset api URL from browser download URL ","url":"https://github.com/PyGithub/PyGithub/issues/2302"},{"author":{"id":"MDQ6VXNlcjU3NjQ2NTk2","is_bot":false,"login":"metalshanked","name":""},"body":"I seem to be getting the below error when using PyGithub with Python 3.10.x (same error on Win 10 and Debian Linux Buster)\r\n\r\nI tried setting the proxies to \"\"/None using one of the contributors yet to be merged code but that did not help either.\r\n\r\nNote: it works fine if i switch to Python 3.9 or lower\r\n```\r\nCaused by SSLError(SSLError(1, '[SSL: WRONG_SIGNATURE_TYPE] wrong signature type (_ssl.c:997)'\r\n```","comments":[{"id":"IC_kwDOADYVqs5KQ3RN","author":{"login":"metalshanked"},"authorAssociation":"NONE","body":"@Kojina1 - the below so link helped me\r\nhttps://stackoverflow.com/questions/61631955/python-requests-ssl-error-during-requests\r\n\r\nSo basically you add your own custom TLSAdapter class which sets DEFAULT@SECLEVEL=1\r\n","createdAt":"2022-09-13T20:42:32Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":1}}],"url":"https://github.com/PyGithub/PyGithub/issues/2300#issuecomment-1245934669","viewerDidAuthor":false}],"createdAt":"2022-09-02T03:13:56Z","number":2300,"state":"OPEN","title":"SSL Issue with Python 3.10.x","url":"https://github.com/PyGithub/PyGithub/issues/2300"},{"author":{"id":"MDQ6VXNlcjU5MjU1MDU4","is_bot":false,"login":"rekerok","name":"Sergey Vitkovski"},"body":"When requested\r\n```python\r\ng = github.Github(\"token\")\r\nfor i in g.search_code(\"language:html\").:\r\n    print(i.html_url)\r\n```\r\nI want to be given 10 PaginatedList instances as a result.\r\nHow can I do this?\r\nDuring normal processing, I get the error `github.Github Exception.RateLimitExceededException: 403`","comments":[{"id":"IC_kwDOADYVqs5ZiTcQ","author":{"login":"lawndoc"},"authorAssociation":"NONE","body":"I'm also getting seemingly spontaneous `RateLimitExceededException`s when iterating over the `PaginatedList`. Did you figure out what was causing it or any sort of workaround?","createdAt":"2023-04-10T18:40:12Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/2296#issuecomment-1502164752","viewerDidAuthor":false}],"createdAt":"2022-08-29T10:50:04Z","number":2296,"state":"OPEN","title":"A certain number in the search_code()","url":"https://github.com/PyGithub/PyGithub/issues/2296"},{"author":{"id":"MDQ6VXNlcjE4NDAwODA=","is_bot":false,"login":"puiseux","name":"puiseux"},"body":"Hello,\r\n\r\nthe following code :\r\n```\r\nfrom github import Github\r\nclient = Github(my_key)\r\nugs = ogc.get_user('nymtech').get_starred()\r\nprint('nb_get_starred =',ugs.totalCount)\r\nfor s in ugs : print(type(s))\r\nprint('that\\'s all')\r\n```\r\n\r\ngives the answer\r\n\r\n```\r\nnb_get_starred = 0\r\nthat's all\r\n```\r\n\r\nwhile the url `https://api.github.com/users/nym/starred` gives a very long page beginning with\r\n```\r\n[\r\n  {\r\n    \"id\": 231103153,\r\n    \"node_id\": \"MDEwOlJlcG9zaXRvcnkyMzExMDMxNTM=\",\r\n    \"name\": \"Delta-X-3D-Printed-Parts\",\r\n    \"full_name\": \"deltaxrobot/Delta-X-3D-Printed-Parts\",\r\n    \"private\": false,\r\n    \"owner\": {\r\n      \"login\": \"deltaxrobot\",\r\n      \"id\": 59392400,\r\n      \"node_id\": \"MDQ6VXNlcjU5MzkyNDAw\",\r\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/59392400?v=4\",\r\n      \"gravatar_id\": \"\",\r\n      \"url\": \"https://api.github.com/users/deltaxrobot\",\r\n      \"html_url\": \"https://github.com/deltaxrobot\",\r\n      \"followers_url\": \"https://api.github.com/users/deltaxrobot/followers\",\r\n      \"following_url\": \"https://api.github.com/users/deltaxrobot/following{/other_user}\",\r\n      \"gists_url\": \"https://api.github.com/users/deltaxrobot/gists{/gist_id}\",\r\n      \"starred_url\": \"https://api.github.com/users/deltaxrobot/starred{/owner}{/repo}\",\r\n      \"subscriptions_url\": \"https://api.github.com/users/deltaxrobot/subscriptions\",\r\n      \"organizations_url\": \"https://api.github.com/users/deltaxrobot/orgs\",\r\n      \"repos_url\": \"https://api.github.com/users/deltaxrobot/repos\",\r\n      \"events_url\": \"https://api.github.com/users/deltaxrobot/events{/privacy}\",\r\n      \"received_events_url\": \"https://api.github.com/users/deltaxrobot/received_events\",\r\n      \"type\": \"User\",\r\n      \"site_admin\": false\r\n    }, \r\nand so on...\r\n```","comments":[],"createdAt":"2022-08-24T06:48:27Z","number":2295,"state":"OPEN","title":"NamedUser.get_starred() does not do expected job","url":"https://github.com/PyGithub/PyGithub/issues/2295"},{"author":{"id":"MDQ6VXNlcjE4NDAwODA=","is_bot":false,"login":"puiseux","name":"puiseux"},"body":"Trying to execute those lines : \r\n```\r\nfrom github import Github\r\n\r\ngc = Github()\r\nrepos = gc.get_user(login='near').get_repos()\r\nrepo = repos[65]\r\nprint(repo)\r\nopen_pulls = repo.get_pulls(state='open')\r\nprint('open_pulls OK')\r\nstats_commit_activity = repo.get_stats_commit_activity()\r\nprint('stats_commit_activity OK')\r\n```\r\n**The display is  :** \r\n\r\n```\r\nRepository(full_name=\"near/near-docusaurus-styles\")\r\nopen_pulls OK\r\n```\r\n\r\nAnd then, frozen screen, during a lot of time, (15 mn at least ...). \r\nIf I'm patient enough, I obtain finally an answer talking about Exception and  recursivity...","comments":[{"id":"IC_kwDOADYVqs5Iv92f","author":{"login":"puiseux"},"authorAssociation":"NONE","body":"Here is the error Message :\r\n```\r\nTraceback (most recent call last):\r\n  File \"/Users/puiseux/GitHub/crypto/scripts/testthread.py\", line 29, in testRepo\r\n    sca = repo.get_stats_commit_activity()\r\n  File \"/Users/puiseux/opt/miniconda3/lib/python3.9/site-packages/github/Repository.py\", line 2951, in get_stats_commit_activity\r\n    headers, data = self._requester.requestJsonAndCheck(\r\n  File \"/Users/puiseux/opt/miniconda3/lib/python3.9/site-packages/github/Requester.py\", line 354, in requestJsonAndCheck\r\n    *self.requestJson(\r\n  File \"/Users/puiseux/opt/miniconda3/lib/python3.9/site-packages/github/Requester.py\", line 454, in requestJson\r\n    return self.__requestEncode(cnx, verb, url, parameters, headers, input, encode)\r\n  File \"/Users/puiseux/opt/miniconda3/lib/python3.9/site-packages/github/Requester.py\", line 528, in __requestEncode\r\n    status, responseHeaders, output = self.__requestRaw(\r\n  File \"/Users/puiseux/opt/miniconda3/lib/python3.9/site-packages/github/Requester.py\", line 572, in __requestRaw\r\n    return self.__requestRaw(original_cnx, verb, url, requestHeaders, input)\r\n  File \"/Users/puiseux/opt/miniconda3/lib/python3.9/site-packages/github/Requester.py\", line 572, in __requestRaw\r\n    return self.__requestRaw(original_cnx, verb, url, requestHeaders, input)\r\n  File \"/Users/puiseux/opt/miniconda3/lib/python3.9/site-packages/github/Requester.py\", line 572, in __requestRaw\r\n    return self.__requestRaw(original_cnx, verb, url, requestHeaders, input)\r\n  [Previous line repeated 968 more times]\r\n  File \"/Users/puiseux/opt/miniconda3/lib/python3.9/site-packages/github/Requester.py\", line 555, in __requestRaw\r\n    response = cnx.getresponse()\r\n  File \"/Users/puiseux/opt/miniconda3/lib/python3.9/site-packages/github/Requester.py\", line 127, in getresponse\r\n    r = verb(\r\n  File \"/Users/puiseux/opt/miniconda3/lib/python3.9/site-packages/requests/sessions.py\", line 542, in get\r\n    return self.request('GET', url, **kwargs)\r\n  File \"/Users/puiseux/opt/miniconda3/lib/python3.9/site-packages/requests/sessions.py\", line 529, in request\r\n    resp = self.send(prep, **send_kwargs)\r\n  File \"/Users/puiseux/opt/miniconda3/lib/python3.9/site-packages/requests/sessions.py\", line 645, in send\r\n    r = adapter.send(request, **kwargs)\r\n  File \"/Users/puiseux/opt/miniconda3/lib/python3.9/site-packages/requests/adapters.py\", line 440, in send\r\n    resp = conn.urlopen(\r\n  File \"/Users/puiseux/opt/miniconda3/lib/python3.9/site-packages/urllib3/connectionpool.py\", line 703, in urlopen\r\n    httplib_response = self._make_request(\r\n  File \"/Users/puiseux/opt/miniconda3/lib/python3.9/site-packages/urllib3/connectionpool.py\", line 449, in _make_request\r\n    six.raise_from(e, None)\r\n  File \"<string>\", line 3, in raise_from\r\n  File \"/Users/puiseux/opt/miniconda3/lib/python3.9/site-packages/urllib3/connectionpool.py\", line 444, in _make_request\r\n    httplib_response = conn.getresponse()\r\n  File \"/Users/puiseux/opt/miniconda3/lib/python3.9/http/client.py\", line 1377, in getresponse\r\n    response.begin()\r\n  File \"/Users/puiseux/opt/miniconda3/lib/python3.9/http/client.py\", line 339, in begin\r\n    self.headers = self.msg = parse_headers(self.fp)\r\n  File \"/Users/puiseux/opt/miniconda3/lib/python3.9/http/client.py\", line 238, in parse_headers\r\n    return email.parser.Parser(_class=_class).parsestr(hstring)\r\n  File \"/Users/puiseux/opt/miniconda3/lib/python3.9/email/parser.py\", line 67, in parsestr\r\n    return self.parse(StringIO(text), headersonly=headersonly)\r\n  File \"/Users/puiseux/opt/miniconda3/lib/python3.9/email/parser.py\", line 56, in parse\r\n    feedparser.feed(data)\r\n  File \"/Users/puiseux/opt/miniconda3/lib/python3.9/email/feedparser.py\", line 176, in feed\r\n    self._call_parse()\r\n  File \"/Users/puiseux/opt/miniconda3/lib/python3.9/email/feedparser.py\", line 180, in _call_parse\r\n    self._parse()\r\n  File \"/Users/puiseux/opt/miniconda3/lib/python3.9/email/feedparser.py\", line 295, in _parsegen\r\n    if self._cur.get_content_maintype() == 'message':\r\n  File \"/Users/puiseux/opt/miniconda3/lib/python3.9/email/message.py\", line 594, in get_content_maintype\r\n    ctype = self.get_content_type()\r\n  File \"/Users/puiseux/opt/miniconda3/lib/python3.9/email/message.py\", line 578, in get_content_type\r\n    value = self.get('content-type', missing)\r\n  File \"/Users/puiseux/opt/miniconda3/lib/python3.9/email/message.py\", line 471, in get\r\n    return self.policy.header_fetch_parse(k, v)\r\n  File \"/Users/puiseux/opt/miniconda3/lib/python3.9/email/_policybase.py\", line 316, in header_fetch_parse\r\n    return self._sanitize_header(name, value)\r\n  File \"/Users/puiseux/opt/miniconda3/lib/python3.9/email/_policybase.py\", line 287, in _sanitize_header\r\n    if _has_surrogates(value):\r\n  File \"/Users/puiseux/opt/miniconda3/lib/python3.9/email/utils.py\", line 57, in _has_surrogates\r\n    s.encode()\r\nRecursionError: maximum recursion depth exceeded while calling a Python object\r\n\r\n```","createdAt":"2022-08-19T10:51:33Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/2294#issuecomment-1220533663","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs5Nn0Uz","author":{"login":""},"authorAssociation":"NONE","body":"```py\r\nfrom github import Github\r\nimport time\r\n\r\nstart = time.time()\r\nprint(Github().get_user(login='near').get_repos()[65])\r\nend  = time.time()\r\nprint(f\"{(end-start).__round__()} s\")\r\n```\r\n\r\n(same code as yours but only the used vars )\r\n\r\n![image](https://user-images.githubusercontent.com/115389864/199763351-ec4bfe02-15b8-4989-b9e0-23f3c8274ca0.png)\r\n@puiseux \r\n","createdAt":"2022-11-03T15:27:57Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/2294#issuecomment-1302283571","viewerDidAuthor":false}],"createdAt":"2022-08-19T08:38:26Z","number":2294,"state":"OPEN","title":"fail to explore some very simple repositories like near/near-docusaurus-styles","url":"https://github.com/PyGithub/PyGithub/issues/2294"},{"author":{"id":"MDQ6VXNlcjEyNTEwNQ==","is_bot":false,"login":"tekumara","name":"Oliver Mannion"},"body":"This causes type checkers to fail:\r\n\r\neg:\r\n```python\r\n        self._repo = self._org.create_repo(\r\n            name=self.repo_name,\r\n            team_id=self._project_team.id,\r\n            has_wiki=False,\r\n            has_projects=False,\r\n            allow_merge_commit=False,\r\n            allow_rebase_merge=False,\r\n            delete_branch_on_merge=True,\r\n        )\r\n```\r\n        \r\n```\r\nerror: No parameter named \"delete_branch_on_merge\" \r\n```\r\n\r\npygithub 1.55","comments":[],"createdAt":"2022-08-14T06:38:37Z","number":2291,"state":"OPEN","title":"Organisation.pyi is missing delete_branch_on_merge argument","url":"https://github.com/PyGithub/PyGithub/issues/2291"},{"author":{"id":"MDQ6VXNlcjMwOTEyMzEx","is_bot":false,"login":"tzzh","name":""},"body":"Getting `AttributeError: 'Organization' object has no attribute 'get_public_key'` when running\r\n```python\r\ng = Github(token)\r\norg = g.get_organization(org_name)\r\npublic_key = org.get_public_key()\r\n```\r\nalthough it should be working if I am reading the docs correctly https://pygithub.readthedocs.io/en/latest/github_objects/Organization.html#github.Organization.Organization.get_public_key ?\r\n","comments":[{"id":"IC_kwDOADYVqs5Ja2ol","author":{"login":"c-p-b"},"authorAssociation":"NONE","body":"It looks like this is because the code was committed since the last PyPi release. https://github.com/PyGithub/PyGithub/blame/8d1397af2fa198d957ebc501dedf443dc7bbe0a1/github/Organization.py reveals that it was added 11 months ago, but the last PyPi release was over 11 months ago.","createdAt":"2022-08-30T14:49:49Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/2289#issuecomment-1231776293","viewerDidAuthor":false}],"createdAt":"2022-08-11T09:38:31Z","number":2289,"state":"OPEN","title":"Can't get public key for org","url":"https://github.com/PyGithub/PyGithub/issues/2289"},{"author":{"id":"MDQ6VXNlcjg5MTYxMjY=","is_bot":false,"login":"Shreyanand","name":"Shrey"},"body":"I'm trying to use Github(<token>).get_user(<username>).get_events(). I get events that date back a week and I'm interested in fetching events that occurred at some point in the last year. Is there a way to add dates and achieve this using the API? ","comments":[],"createdAt":"2022-08-05T21:58:22Z","number":2287,"state":"OPEN","title":"Get events by date for a user ","url":"https://github.com/PyGithub/PyGithub/issues/2287"},{"author":{"id":"U_kgDOBa7NNg","is_bot":false,"login":"krzysztof3-wisniewski","name":"Krzysztof Wisniewski"},"body":"When using Repository.get_commits() with parameters since and until, both of those are formatted with \r\n```\r\n.strftime(\"%Y-%m-%dT%H:%M:%SZ\")\r\n```\r\nWhich leads to timezone unaware querries. Thus, when making request with non local machine, you may end up with unexpected results, as GH may use different timezone than you though will be used, Also, this causes code to behave differently on testing machine and on final machine.\r\n\r\n[Solution would be to use .isoformat() instead, as it applies ISO8601 formatting which is (AFAIK) fully supported by GH API.](https://docs.github.com/en/rest/overview/resources-in-the-rest-api#explicitly-providing-an-iso-8601-timestamp-with-timezone-information).\r\n\r\nI haven't found any notice in documentation about how to solve this problem, thus as a workaround I have crafted custom datetime class, which always returns `isoformat()` from `strfrime()`, for myself to cure problem for now.","comments":[{"id":"IC_kwDOADYVqs5HeoF5","author":{"login":"wesleyrezant"},"authorAssociation":"NONE","body":"which codes can be used for Annual,Sick and Family Responsibility Leave.","createdAt":"2022-07-29T12:18:38Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_DOWN","users":{"totalCount":1}}],"url":"https://github.com/PyGithub/PyGithub/issues/2282#issuecomment-1199210873","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs5HjFVd","author":{"login":"Argmaster"},"authorAssociation":"NONE","body":"> which codes can be used for Annual,Sick and Family Responsibility Leave.\r\n\r\nSorry, but what do you mean?\r\n\r\n","createdAt":"2022-07-31T08:40:43Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/2282#issuecomment-1200379229","viewerDidAuthor":false}],"createdAt":"2022-07-28T09:50:30Z","number":2282,"state":"OPEN","title":"Timezone in datetime objects is ignored in querries.","url":"https://github.com/PyGithub/PyGithub/issues/2282"},{"author":{"id":"MDQ6VXNlcjc5MDM5Njg2","is_bot":false,"login":"GabrieleT0","name":"Gabriele Tuozzo"},"body":"Hi!, I get the follow error message when try to update a file in the repository: \r\ngithub.GithubException.GithubException: 422 {\"message\": \"Invalid request.\\n\\n\\\"sha\\\" wasn't supplied.\", \"documentation_url\": \"https://docs.github.com/rest/reference/repos#create-or-update-file-contents\"}.\r\nI attach a screenshot of the code\r\n![Immagine 2022-07-27 100640](https://user-images.githubusercontent.com/79039686/181195772-bd1c7185-f831-40c6-b52d-0fe5bd246a9a.png)\r\n.","comments":[{"id":"IC_kwDOADYVqs5HU4AV","author":{"login":"marcorosa"},"authorAssociation":"NONE","body":"I can't reproduce your error. I tried the same operations with a test repository of mine and I manage to both create a new file and update it. So I'm not sure the bug is in `PyGithub` here but it could be in your code.\r\n\r\nThe block you posted is cut and the stacktrace is missing, but I assume the error is raised at line 627 by `update_file`, correct?\r\nTry shrinking that blob and update one file manually, and verify if the error is still raised.","createdAt":"2022-07-27T12:18:33Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/2281#issuecomment-1196654613","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs5HZJ0-","author":{"login":"GabrieleT0"},"authorAssociation":"NONE","body":"Yes, the error is raised at line 627. The code is cutted becuase this is a method in a class, the only things that I've cutted for this method is the instruction to instantiate the github object (with token). I tried to update using the github REST API directly (using requests in Python) and everything seems to work fine.","createdAt":"2022-07-28T07:35:18Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/2281#issuecomment-1197776190","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs5HmLs3","author":{"login":"marcorosa"},"authorAssociation":"NONE","body":"Try and do the same call with GitPython instead of using the script above, and post the possible error raised, if any. \r\nIs it only one particular file that raises the exception or immediately the first attempt of update? I can print all the sha from every file in that folder. \r\nPay attention also to API rate limits: there are more than 2k files (so in your script above you make more than 2k calls) ","createdAt":"2022-08-01T13:17:31Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/2281#issuecomment-1201191735","viewerDidAuthor":false}],"createdAt":"2022-07-27T08:08:39Z","number":2281,"state":"OPEN","title":"GithubException 422 when try to update a file in the Github repository.","url":"https://github.com/PyGithub/PyGithub/issues/2281"},{"author":{"id":"MDQ6VXNlcjUzNDE5NDAx","is_bot":false,"login":"rynmx","name":"ryana"},"body":"This issue is raised upstream from athul/waka-readme#83.\r\nPlease note that reading contents from symbolic links using `get_readme()` works just fine. It's the path that's the issue (like when you want to get the path and update the readme.)\r\n\r\n### Current Workaround\r\nUse `get_contents(path)` to reference to the actual readme file.\r\n\r\n### Current Behavior\r\n`get_readme().path()` returns `\"README.md\"` instead of the actual readme location.\r\n\r\n### Expected Result\r\n`get_readme().path()` returns the location of the actual readme location.\r\n\r\n","comments":[],"createdAt":"2022-07-27T02:44:49Z","number":2280,"state":"OPEN","title":"`get_readme().path()` does not return the path of the actual readme when using a symbolic link","url":"https://github.com/PyGithub/PyGithub/issues/2280"},{"author":{"id":"MDQ6VXNlcjI2NjMwNg==","is_bot":false,"login":"kenorb","name":"Rafal W."},"body":"I've run:\r\n\r\n```\r\nfor run in repo.get_workflow_runs():\r\n    print(run)\r\n```\r\n\r\nbut I don't see a `name` attribute in [docs page](https://pygithub.readthedocs.io/en/latest/github_objects/WorkflowRun.html).\r\n\r\nIt's part of the response as per [GitHub API docs](https://docs.github.com/en/rest/actions/workflow-runs#list-workflow-runs-for-a-repository).\r\n\r\nRelated: GH-2270.\r\n\r\n## Workaround\r\n\r\n```\r\nfor run in repo.get_workflow_runs(status=\"success\"):\r\n    print(run.raw_data['name'])\r\n```","comments":[],"createdAt":"2022-07-20T15:48:50Z","number":2276,"state":"OPEN","title":"Add name attribute for WorkflowRun","url":"https://github.com/PyGithub/PyGithub/issues/2276"},{"author":{"id":"MDQ6VXNlcjcyNjkwMzEz","is_bot":false,"login":"10tanmay100","name":"Tanmay Chakraborty"},"body":"![Screenshot 2022-07-10 161322](https://user-images.githubusercontent.com/72690313/178141528-4d124caf-e0c1-46ad-957c-518fa0018fe8.png)\r\n","comments":[{"id":"IC_kwDOADYVqs5GUa1H","author":{"login":"NicholasKawikaWhite"},"authorAssociation":"NONE","body":"Does a file with the same name already exist in the repository, I was having the same issue when trying to create a file with the name of an existing one. If this is the case you can try to use the `repo.update_file('df.csv', 'committing files', *content*, *file.sha* )` function. \r\n\r\nTo get the sha for the file you are updating, you can call `contents = repo.get_contents('filename', 'branch')`. Then pass `contents.sha` into the 4th argument of the update_file() function.\r\n\r\nIn addition, I don't know if the `/` is needed before the filename, this may also be causing the issue.","createdAt":"2022-07-10T16:21:30Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/2272#issuecomment-1179757895","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs5GUbHU","author":{"login":"10tanmay100"},"authorAssociation":"NONE","body":"hey @NicholasKawikaWhite I don't have any same named file in my repo and i have tried without `/`\r\n also but same error is showing and you can check my repo also link:https://github.com/10tanmay100/data-project\r\n![Screenshot 2022-07-10 215919](https://user-images.githubusercontent.com/72690313/178153410-fff57f6e-8b1e-48de-87b7-c268ef820dd6.png)\r\n","createdAt":"2022-07-10T16:29:40Z","includesCreatedEdit":true,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/2272#issuecomment-1179759060","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs5GUde1","author":{"login":"NicholasKawikaWhite"},"authorAssociation":"NONE","body":"In that case, have you confirmed that you are actually getting logged into your GitHub account on line 3? You may want to try to use an access token. I am also fairly new to this, but when I switched to an access token, it seemed to clear up the issue. \r\n\r\nYou can set this up by simply removing lines 2 & 3 and replacing them with \r\n```\r\ng = Github('your access token here') \r\n```\r\nTo get your access token [https://docs.github.com/en/enterprise-server@3.4/authentication/keeping-your-account-and-data-secure/creating-a-personal-access-token](url)","createdAt":"2022-07-10T17:33:53Z","includesCreatedEdit":true,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/2272#issuecomment-1179768757","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs5GWGVM","author":{"login":"10tanmay100"},"authorAssociation":"NONE","body":"I tried with the token previously same issue i am facing. Yes I checked the line 3.I tested that it is working perfectly and for your convenience I tried using token also but the same error is showing. Can you please my same code in  your notebook? and how thing comes?\r\n![Screenshot 2022-07-11 152550](https://user-images.githubusercontent.com/72690313/178239430-14a2f424-0305-4632-ba17-57d765168181.png)\r\n","createdAt":"2022-07-11T09:58:03Z","includesCreatedEdit":true,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/2272#issuecomment-1180198220","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs5G39ft","author":{"login":"marcorosa"},"authorAssociation":"NONE","body":"The issue is not related to PyGithub, but it's in the call you make in the last cell ([8] in the first picture you posted, [6] in the last one):\r\nthe third argument of `repo.create_file` can't be a pandas `DataFrame`, so you break the assertion you see in the stacktrace.\r\n\r\nYou can fix it like this:\r\n```\r\nrepo.create_file('df.csv', 'committing files', df.to_string(), branch='main')\r\n```\r\n","createdAt":"2022-07-19T13:45:43Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/2272#issuecomment-1189074925","viewerDidAuthor":false}],"createdAt":"2022-07-10T10:43:39Z","number":2272,"state":"OPEN","title":"Getting AssertionError while creating file in github","url":"https://github.com/PyGithub/PyGithub/issues/2272"},{"author":{"id":"MDQ6VXNlcjg3NDEwMDA4","is_bot":false,"login":"NicholasKawikaWhite","name":"Nicholas White"},"body":"I am trying to upload mp3 files via PyGitHub, specifically, I am trying to update a file. When I try to run the program, I get the following error\r\n```\r\nException has occurred: ConnectionError\r\n('Connection aborted.', TimeoutError('The write operation timed out'))\r\n```\r\nThis, however, does not occur when I am on faster internet connections(~15 to 16 Mbs) upload speed. On these faster connections, the files are uploaded successfully. The files are only 5 MB, and I currently only have about 3 Mbs upload speed, so if there is a workaround, it would be greatly appreciated. Maybe increase the timeout or something of that nature. Thanks","comments":[{"id":"IC_kwDOADYVqs5HFFGa","author":{"login":"marcorosa"},"authorAssociation":"NONE","body":"There is already a `timeout` parameter that you can set when you instantiate a `Github` object. The default value is 15 seconds. Can you try setting it at a higher value and verify if the exception still raises?\r\n\r\n[reference here](https://github.com/PyGithub/PyGithub/blob/master/github/MainClass.py#L101)","createdAt":"2022-07-22T12:18:19Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"HEART","users":{"totalCount":1}}],"url":"https://github.com/PyGithub/PyGithub/issues/2271#issuecomment-1192513946","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs5Q0Rfo","author":{"login":"abubelinha"},"authorAssociation":"NONE","body":"Thank you so much @marcorosa \r\nI was having this error today when uploading 30 MB sized CSV file.\r\nI can confirm error disappeared after setting `timeout=60`.\r\n\r\n@abubelinha ","createdAt":"2022-12-17T00:41:29Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/2271#issuecomment-1355880424","viewerDidAuthor":false}],"createdAt":"2022-07-09T21:47:35Z","number":2271,"state":"OPEN","title":"Upload Timeout Error","url":"https://github.com/PyGithub/PyGithub/issues/2271"},{"author":{"id":"MDQ6VXNlcjEyODYwODM5","is_bot":false,"login":"itaiperi","name":"Itai Peri"},"body":"Hey,\r\nI think there are some missing parameters from list methods.\r\nFor example, this API endpoint: `https://docs.github.com/en/rest/actions/workflow-runs#list-workflow-runs`\r\nWhich is covered by the `Workflow.get_runs()` method, supports the following parameters which are not covered in the method definition: `created, exclude_pull_requests, check_suite_id`, and it also holds for getting workflow runs through `Repository.get_workflow_runs()`. I haven't checked, but it might be that similar params are missing from other places.","comments":[],"createdAt":"2022-07-09T20:26:52Z","number":2270,"state":"OPEN","title":"Missing parameters from `list` methods","url":"https://github.com/PyGithub/PyGithub/issues/2270"},{"author":{"id":"MDQ6VXNlcjIwMjI0OTU0","is_bot":false,"login":"gdams","name":"George Adams"},"body":"Hi there I've noted that the repository API (https://pygithub.readthedocs.io/en/latest/github_objects/Repository.html) seems to be missing certain GitHub apis such as `use_squash_pr_title_as_default`. Is there an easy way to add these?","comments":[],"createdAt":"2022-07-06T17:28:29Z","number":2267,"state":"OPEN","title":"use_squash_pr_title_as_default missing from repo edit","url":"https://github.com/PyGithub/PyGithub/issues/2267"},{"author":{"id":"MDQ6VXNlcjkwNDQzNjEx","is_bot":false,"login":"wqy21","name":""},"body":"**Goal:** get issues in PyGithub whose titles contain >.     \r\nI write the code as follows.   \r\n**Result:** However, it returns some issues whose titles do not contain >. \r\n  \r\n**Here is the code:**     \r\n```\r\nfrom github import Github\r\n\r\ng = Github(my_access_token)\r\n\r\nquarystring = '>'\r\nqualifiers_dict = {'repo': 'PyGithub/PyGithub', 'in': 'title', 'state': 'open'}\r\n\r\nresults = g.search_issues(quarystring, **qualifiers_dict)\r\n\r\nissue_number_list = []\r\nfor i in results:\r\n    issue_number_list.append(i.number)\r\n\r\nprint(issue_number_list)\r\n```\r\n**Here is the result:**\r\n```\r\n[503, 580, 983, 739, 852, 1298, 1655, 1750, 1717, 1768, 1309, 1461, 2095, 1448, 2194, 1373, 2126, 2199, 2200, 2202, 2037, 2034, 2069, 2214, 2181, 2225, 1702, 1839, 1477, 2070, 2214, 1917, 2219, 1702, 2204, 2140, 2213, 2220, 2221, 2094, 2222, 1939, 2182, 2228, 2191, 2192, 1718, 2224, 2225, 2181, 2252, 2198, 2253, 1989, 2067, 2237, 2240, 2238, 2239, 2170, 2252, 2178, 2192, 2258, 2259, 2249, 2239, 2260, 2253, 2254, 2261, 2170, 516, 2197, 2262, 423, 1538, 725, 1753, 828, 2196, 2137, 2201, 1676, 2052, 2207, 2190, 2218, 1784, 1976, 2152, 2066, 2161, 1996, 2226, 2189, 2183, 2223, 2227, 2172, 2062, 2193, 2231, 2235, 2243, 2245, 2244, 1791, 1831, 2211, 2248, 1986, 2241, 2256, 2090, 2265]\r\n```\r\n","comments":[{"id":"IC_kwDOADYVqs5HFHue","author":{"login":"marcorosa"},"authorAssociation":"NONE","body":"I just tried your code, and you're right some of the results have nothing to do with the presence of `>`, but that's also how GitHub itself behaves: I manually did the same search on Github's UI and I get the exact same results of the script with PyGithub.","createdAt":"2022-07-22T12:31:27Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/2266#issuecomment-1192524702","viewerDidAuthor":false}],"createdAt":"2022-07-06T05:58:07Z","number":2266,"state":"OPEN","title":"search_issues() returns error results when the quary str is '>'","url":"https://github.com/PyGithub/PyGithub/issues/2266"},{"author":{"id":"MDQ6VXNlcjEyMTY5MjY5","is_bot":false,"login":"atulkpatel","name":""},"body":"I've tried the following;\r\n```\r\ncommit = org.get_repo(\"my-repo\").get_commit(sha=\"c2144da718afdbc343115e995f585d6d58c7ec6bd\")\r\nprint(commit.author)\r\nprint(commit.committer)\r\nprint(commit.last_modified)\r\n```\r\n\r\nWhich returns the details of the commit, however,  can not find how to fetch the commit message.\r\nI thought it might be;\r\n\r\n```\r\nprint(commit.get_comments())\r\n```\r\n\r\nBut that doesn't retrieve the commit message.\r\n\r\nDoes anyone know if it's possible?\r\n\r\nthanks in advance!\r\n","comments":[{"id":"IC_kwDOADYVqs5KS-_5","author":{"login":"hpsony94"},"authorAssociation":"NONE","body":"@atulkpatel \r\nyou can try this\r\n```\r\nprint(commit.commit.message)\r\n```\r\n\r\nRef: https://pygithub.readthedocs.io/en/latest/github_objects/GitCommit.html#github.GitCommit.GitCommit","createdAt":"2022-09-14T09:28:25Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":1}}],"url":"https://github.com/PyGithub/PyGithub/issues/2261#issuecomment-1246490617","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs5x53ei","author":{"login":"munisameera"},"authorAssociation":"NONE","body":"Is there a way we can fetch commit description as well. commit.commit.message gives commit title but looking if there's a way to get description as well.","createdAt":"2024-01-25T21:06:18Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/2261#issuecomment-1910994850","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs5x82K0","author":{"login":"EnricoMi"},"authorAssociation":"COLLABORATOR","body":"Are you sure the commit your are looking at has a multi-line message? The first line is used as the title, all lines are the message.\r\n\r\nHere is an example:\r\n```python\r\nimport github\r\ngh = github.Github()\r\nrepo = gh.get_repo(\"PyGithub/PyGithub\")\r\ncommit = repo.get_commit(\"e47c153bad20306add8585d36b89e71610ce01df\")\r\nprint(commit.commit.message)\r\n```\r\n\r\nProvides the multi-line commit message: e47c153bad20306add8585d36b89e71610ce01df\r\n```\r\nAdd missing branch protection fields (#2873)\r\n\r\nCo-authored-by: jodelasur <34933233+jodelasur@users.noreply.github.com>\r\nCo-authored-by: Terence Ho <mail.teho@gmail.com>\r\nCo-authored-by: harry-unlikelyai <83275520+harry-unlikelyai@users.noreply.github.com>\r\n```","createdAt":"2024-01-26T09:56:58Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/2261#issuecomment-1911775924","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs5x_Iet","author":{"login":"munisameera"},"authorAssociation":"NONE","body":"Sorry, I meant PR description.\r\nTo elaborate my use case, I am looking for the Jira Issue ID in the PR associated with a commit sha.\r\nMy team follows this process of adding the Jira ID in the PR description (and not in the commit message), so I was wondering if there is way to get the PR number from commit sha using PyGithub","createdAt":"2024-01-26T16:53:22Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/2261#issuecomment-1912375213","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs5yC0uE","author":{"login":"EnricoMi"},"authorAssociation":"COLLABORATOR","body":"Try `Commit.get_pulls` to get associated pull requests, then `PullRequest.body`:\r\n\r\n    import github\r\n    gh = github.Github()\r\n    repo = gh.get_repo(\"PyGithub/PyGithub\")\r\n    commit = repo.get_commit(\"e47c153bad20306add8585d36b89e71610ce01df\")\r\n    for pull in commit.get_pulls():\r\n        print(pull.body)","createdAt":"2024-01-27T21:39:11Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":2}}],"url":"https://github.com/PyGithub/PyGithub/issues/2261#issuecomment-1913342852","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs5yEAli","author":{"login":"munisameera"},"authorAssociation":"NONE","body":"Great, that woirks! thank you!","createdAt":"2024-01-28T16:33:53Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/2261#issuecomment-1913653602","viewerDidAuthor":false}],"createdAt":"2022-06-17T19:35:08Z","number":2261,"state":"OPEN","title":"How can you retrieve the description of a pull request associated with a commit?","url":"https://github.com/PyGithub/PyGithub/issues/2261"},{"author":{"id":"MDQ6VXNlcjg3MTg0Mw==","is_bot":false,"login":"don4of4","name":"Don Scott"},"body":"It looks like while there is a `invitiations()` iterable on the Organization, the associated failed invitations is not available: https://docs.github.com/en/rest/orgs/members#list-failed-organization-invitations\r\n\r\nThis is important because these failed invites are not automatically resent or deleted -- creating some annoying workflow when you are trying to keep a user actively invited.\r\n\r\n","comments":[],"createdAt":"2022-06-16T02:55:20Z","number":2258,"state":"OPEN","title":"Failed Invitations List","url":"https://github.com/PyGithub/PyGithub/issues/2258"},{"author":{"id":"MDQ6VXNlcjQwMTM1NTU=","is_bot":false,"login":"iskode","name":"Ismaël Koné"},"body":"Calling get_stats_contributors on some repositories fails with max recursion error and it takes 35 minutes consistently (many trials) before raising this error. \r\nI'm using the pygithub v1.55 (latest stable version from my knowledge).\r\nBelow is a step by step instruction to reproduce the error:\r\n\r\n```\r\nfrom github import Github\r\ngh = Github(token)\r\nrepo_name = \"digit-soft/laravel-i18n\"\r\nrepo = gh.get_repo(repo_name)\r\nresponse = repo.get_stats_contributors()\r\n# takes 35 minutes before raising max recursion error\r\n```\r\nFollowing are some other repositories that raise this error:\r\n`repo_names=[\"Dan0sz/ResourceHints-magento2\", \"kos-v/yii2-jquery-fix-clone\", \"ElaineKoo/weather\"]`\r\n\r\nA general hint I've got while inspecting few github repos of these projects is that they are kind of no more maintained.\r\nCan you help address this issue as I have script that processes a list of repositories ? So this slows down (if not kills) my work.\r\nOr at least, is there any check I can do with the API so that I can anticipate such behavior and consequently skip these repositories?\r\n\r\nThank you so much for your dedication to help us !\r\n","comments":[{"id":"IC_kwDOADYVqs5E24-Z","author":{"login":"nikozoe"},"authorAssociation":"NONE","body":"I'm having the same problem. When using the GitHub rest API directly via curl get request, the request returns an empty json. So my guess is, that it is a problem with the GitHub API itself. However, it would be good if pygithub would handle this differently. \r\nExample:\r\n```curl -H \"Accept: application/vnd.github.v3+json\" -H \"Authorization: token MYTOKEN\" https://api.github.com/repos/PicciMario/iPhone-Backup-Analyzer-2/stats/contributors```\r\nThe HTTP status code is 202. This might be related to #1862 and #1108","createdAt":"2022-06-14T14:10:33Z","includesCreatedEdit":true,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/2254#issuecomment-1155239833","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs588qE3","author":{"login":"simon-weber"},"authorAssociation":"NONE","body":"The easiest workaround I've found is to set [Consts.PROCESSING_202_WAIT_TIME](https://github.com/PyGithub/PyGithub/blob/6013610503709cf03e1517d66d403562f1b43f57/github/Consts.py#L59) to something like None, which will throw a TypeError when pygithub tries to sleep after a 202. Then you can handle retries on your own.\r\n\r\nIf the maintainers are interested I could work on a PR to make the retries configurable.","createdAt":"2024-05-06T15:15:01Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/2254#issuecomment-2096275767","viewerDidAuthor":false}],"createdAt":"2022-06-12T17:45:28Z","number":2254,"state":"OPEN","title":"get_stats_contributors raises a max recursion error that takes 35 minutes !","url":"https://github.com/PyGithub/PyGithub/issues/2254"},{"author":{"id":"MDQ6VXNlcjYzNTM5Mjg=","is_bot":false,"login":"jkfran","name":"Francisco Jiménez Cabrera"},"body":"I noticed this when using PyGitHub and searching about it I saw this comment as well in another issue:\r\n\r\n---\r\nReading the Github API docs about search, I also notice that `incomplete_results` is missing as part of the search-results processin in PyGithub. Probably including that value might also already help out with detecting if search results might be (in)complete.\r\n\r\n_Originally posted by @mfonville in https://github.com/PyGithub/PyGithub/issues/824#issuecomment-399421378_\r\n\r\n---\r\n\r\nI would love to have this property.","comments":[],"createdAt":"2022-06-11T23:35:44Z","number":2253,"state":"OPEN","title":"`incomplete_results` is missing as part of the search-results","url":"https://github.com/PyGithub/PyGithub/issues/2253"},{"author":{"id":"MDQ6VXNlcjczMTA2MTE0","is_bot":false,"login":"hehoffmann","name":"Henning Hoffmann"},"body":"I'm not sure if there is an existing solution and I can't find it, but I would like to load files from an old version of a particular repo. Currently I can only load the latest version of the file from master. So another parameter in repo.get_contents( ) for a version tag would be great.\r\n\r\nFor example, I would like to load the license file of version v1.53 (https://github.com/PyGithub/PyGithub/blob/v1.53/COPYING) instead of the one from the master (https://github.com/PyGithub/PyGithub/blob/master/COPYING).\r\n`repo.get_contents(path=\"COPYING\", tag=\"v1.53\")`","comments":[],"createdAt":"2022-06-09T20:07:48Z","number":2252,"state":"OPEN","title":"repo.get_contents( ) with tag/release parameter","url":"https://github.com/PyGithub/PyGithub/issues/2252"},{"author":{"id":"MDQ6VXNlcjUzOTc2MDAz","is_bot":false,"login":"abhishek2x","name":"Abhishek Srivastava"},"body":"Here are two things that I want to do:\r\n\r\n* Edit existing file. (For eg: update the version in package.json)\r\n* Create a PR with that update","comments":[{"id":"IC_kwDOADYVqs5HFLlE","author":{"login":"marcorosa"},"authorAssociation":"NONE","body":"These features are already existing, did you experience any issue/bug? ","createdAt":"2022-07-22T12:50:25Z","includesCreatedEdit":true,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/2247#issuecomment-1192540484","viewerDidAuthor":false}],"createdAt":"2022-05-31T19:48:51Z","number":2247,"state":"OPEN","title":"Edit an existing file of remote repo and create a PR","url":"https://github.com/PyGithub/PyGithub/issues/2247"},{"author":{"id":"MDQ6VXNlcjczNzEwMTM5","is_bot":false,"login":"shaering-vdev","name":"Steve Haering Cadmus"},"body":"Trying to automate seat management with Python...the URL for editing seats is https://github.com/organizations/{orgName}/settings/billing/remove_seats, I've spooled through the Github REST API documentation and found references to viewing plans / used seats / available seats usable via the API, or via PyGithub, but a way to edit the plan is eluding me.  \r\n\r\nI tried mimicking Chrome's behavior with the Requests library, it seems like it should work, but it doesn't.  \r\n\r\nIs there any way to do this with PyGithub, or does anyone know of a way to do it programmatically in general?\r\n\r\nThanks!","comments":[],"createdAt":"2022-05-24T16:37:27Z","number":2240,"state":"OPEN","title":"Add / Remove license seats?","url":"https://github.com/PyGithub/PyGithub/issues/2240"},{"author":{"id":"MDQ6VXNlcjEzOTI1ODMw","is_bot":false,"login":"Pradhvan","name":"Pradhvan"},"body":"[Tag](https://pygithub.readthedocs.io/en/latest/github_objects/Tag.html?highlight=tag#github.Tag.Tag.name) class is missing section in the [Examples](https://pygithub.readthedocs.io/en/latest/examples.html)\r\n\r\n","comments":[{"id":"IC_kwDOADYVqs5DmsjB","author":{"login":"Pradhvan"},"authorAssociation":"NONE","body":"I was recently working with the library and found there are no examples related to Tag class like how to create a tag and how to check other tags. \r\n\r\nNow that I have created tags with the library, I can create an example in the Examples section. \r\n","createdAt":"2022-05-23T06:03:48Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/2238#issuecomment-1134217409","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs5PGoks","author":{"login":"tarurar"},"authorAssociation":"NONE","body":"I have also a question. There are two classes defined:\r\n\r\n- [GitTag](https://github.com/PyGithub/PyGithub/blob/master/github/GitTag.py)\r\n- [Tag](https://github.com/PyGithub/PyGithub/blob/master/github/Tag.py)\r\n\r\nWhich one should we use and was is the difference?","createdAt":"2022-11-25T08:12:20Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/2238#issuecomment-1327139116","viewerDidAuthor":false}],"createdAt":"2022-05-23T06:01:34Z","number":2238,"state":"OPEN","title":"Examples missing Tag class ","url":"https://github.com/PyGithub/PyGithub/issues/2238"},{"author":{"id":"MDQ6VXNlcjU5NjIzNDkw","is_bot":false,"login":"timmc-edx","name":"Tim McCormack"},"body":"There's a very useful `update` method on objects such as PullRequest that allow re-fetching the state. It would be great if this could be documented!\r\n\r\n(I recently used it to implement a wait-for-mergeable loop. Without a call to `update`, I would never know the status had changed, or I would have to recreate the PullRequest object repeatedly.)","comments":[],"createdAt":"2022-05-17T14:00:06Z","number":2237,"state":"OPEN","title":"Document the `update` method","url":"https://github.com/PyGithub/PyGithub/issues/2237"},{"author":{"id":"MDQ6VXNlcjI5NDU0Mjk5","is_bot":false,"login":"dayananda30","name":"Dayananda DR"},"body":"  I have a script which checks for open PRs and checking some content file in other repository. Script works for most of the times (99.9%) but it fails sometimes with below error details. \r\n  \r\n  There is no issues with the PAT since script works for most of the times.\r\n  \r\n  File \"check_merge_request.py\", line 21, in <module>\r\n    result = is_valid_merge_request(gl, jira, repo, os.environ['GITHUB_REPOSITORY'], ref)\r\n  File \"merge_request.py\", line 207, in is_valid_merge_request\r\n    project = gl.get_repo('<org>/<repo>')\r\n  File \"/usr/local/lib/python3.8/dist-packages/github/MainClass.py\", line 330, in get_repo\r\n    headers, data = self.__requester.requestJsonAndCheck(\"GET\", url)\r\n  File \"/usr/local/lib/python3.8/dist-packages/github/Requester.py\", line 353, in requestJsonAndCheck\r\n    return self.__check(\r\n  File \"/usr/local/lib/python3.8/dist-packages/github/Requester.py\", line 378, in __check\r\n    raise self.__createException(status, responseHeaders, output)\r\ngithub.GithubException.UnknownObjectException: 404 {\"message\": \"Not Found\", \"documentation_url\": \"https://docs.github.com/rest/reference/repos#get-a-repository\"}","comments":[{"id":"IC_kwDOADYVqs5DYy_c","author":{"login":"mcauley-penney"},"authorAssociation":"NONE","body":"`github.GithubException.UnknownObjectException` seems to be used to indicate when an item that you're attempting to access via the REST API is inaccessible. For example, when trying to get an issue as a PR that isn't a PR, e.g. `issue_obj.as_pull_request()`. The error message and traceback indicate that you're attempting to get a repo that doesn't exist, is private, or has some other quality that makes it inaccessible.\r\n\r\n","createdAt":"2022-05-18T21:35:19Z","includesCreatedEdit":true,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/2234#issuecomment-1130573788","viewerDidAuthor":false}],"createdAt":"2022-05-10T11:11:41Z","number":2234,"state":"OPEN","title":"[Intermittent Issue] - Getting github.GithubException.UnknownObjectException intermittently but it works for most of the times. ","url":"https://github.com/PyGithub/PyGithub/issues/2234"},{"author":{"id":"MDQ6VXNlcjQxNjUyOTU5","is_bot":false,"login":"duaaz","name":"Duaa Zaheer"},"body":"I want to get a list of closed prs in order from the ones most recent closed to the oldest ones closed. However, the PyGithub documentation doesn't show what options I have available for the parameters (specifically the variables for \"sorted\"). How might I go about doing this?","comments":[{"id":"IC_kwDOADYVqs5DYmGd","author":{"login":"mcauley-penney"},"authorAssociation":"NONE","body":"Looking at [github/Repository.py](https://github.com/PyGithub/PyGithub/blob/master/github/Repository.py), the `get_pulls()` [docstring](https://github.com/PyGithub/PyGithub/blob/001970d4a828017f704f6744a5775b4207a6523c/github/Repository.py#L2791-L2799) references the GET request discussed on [this page](https://docs.github.com/en/rest/pulls/pulls#list-pull-requests=) in the REST API docs, under the heading \"List pull requests\". The URL next to the GET request in the docstring doesn't seem to point directly to it. The GitHub REST API docs will be more informative about parameters than the PyGithub docs, they're the same given that PyGithub implements those HTTP requests under the hood.\r\n\r\nYour method call to get closed PRs in descending order would look something like:\r\n```python\r\n        pulls_paginated_list = repo.get_pulls(state=\"closed\", sort=\"updated\", direction=\"desc\")\r\n```","createdAt":"2022-05-18T20:45:53Z","includesCreatedEdit":true,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/2233#issuecomment-1130520989","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs5YDXSU","author":{"login":"BrahmaTejaD"},"authorAssociation":"NONE","body":"Is there any parameter with draft so that I can pull the PR's only if draft is false?\r\n","createdAt":"2023-03-21T04:49:24Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/2233#issuecomment-1477276820","viewerDidAuthor":false}],"createdAt":"2022-05-09T21:58:01Z","number":2233,"state":"OPEN","title":"Parameters for repository.get_pulls?","url":"https://github.com/PyGithub/PyGithub/issues/2233"},{"author":{"id":"MDQ6VXNlcjE5NDk3NTcx","is_bot":false,"login":"prince14322","name":"PRINCE KUMAR"},"body":"Hi,\r\nCan anyone please help me fetch repositories created on a particular date/month/year or within a range of dates?\r\nI have tried the following but it does not give proper results:\r\n\r\n1. using \"query\"\r\n`\r\ng = Github(TOKEN)\r\nrepositories = g.search_repositories(query='since:2018')\r\n`\r\n\r\n2. using \"since\"\r\n`\r\ng = Github(TOKEN)\r\nr = g.get_repos(since=2021)\r\n`\r\n\r\nI want to crawl all the public repo for a particular year but since the requests are limited to 1000 thus I am trying to break my search query into smaller queries.\r\n\r\nAny help/pointer would be appreciated.\r\nThanks in advance.","comments":[],"createdAt":"2022-05-03T13:29:01Z","number":2230,"state":"OPEN","title":"Get Repositories for a specific date/month/year or within a range of dates","url":"https://github.com/PyGithub/PyGithub/issues/2230"},{"author":{"id":"MDQ6VXNlcjY4NTc5MDQ=","is_bot":false,"login":"Ravineesh","name":"Ravineesh"},"body":"I'm looking for a way to get all repositories for a particular search. For eg. in the below image, the result is obtained through advanced search options ( stars>499 and language: Python) which results in `9018` repositories.\r\n\r\nI've tried to achieve the same through the `search_repositories` method but I'm getting a list of `1020` repositories. I know that `search_repositories` uses the GitHub Search API which provides up to 1,000 results for each search. But is there any workaround to get all the results?\r\n\r\n![image](https://user-images.githubusercontent.com/6857904/166137500-ba56d18b-4028-4876-bdfc-9acc030498cf.png)\r\n","comments":[],"createdAt":"2022-05-01T08:12:41Z","number":2228,"state":"OPEN","title":"Search all repositories with a specific query","url":"https://github.com/PyGithub/PyGithub/issues/2228"},{"author":{"id":"MDQ6VXNlcjc5MDc3NTY1","is_bot":false,"login":"bauergeorg","name":"Georg Bauer"},"body":"Hi folks,\r\n\r\nI hava a problem to get all workflow runs filtered by a branch name:\r\n\r\nhere is my example code using PyGithub (use REST API):\r\n```python\r\nmngt = pipeline_mngt(token, author=author)\r\nrepo = mngt.get_repo('ee-sandbox-update-stick')\r\nruns = repo.get_workflow_runs(branch='develop')\r\nfor run in runs:\r\n    print('+++')\r\n    print(run.run_number)\r\n    print(run.id)\r\n    print(run.status)\r\n    print(run.conclusion)\r\n    print(run.head_sha)\r\n```\r\n\r\nThe output is:\r\n```\r\n+++\r\n13\r\n1828041376\r\ncompleted\r\nsuccess\r\nb1f54b4f0a35e0ee5d92a0996f707b988022fe0e\r\n+++\r\n10\r\n1695475854\r\ncompleted\r\nsuccess\r\n7f029451901408ec771108f0a5f0826309475031\r\n+++\r\n9\r\n1556550806\r\ncompleted\r\nsuccess\r\nbbd5adda4c67bebda00caecdc17e96f2fe6fb222\r\n+++\r\n4\r\n1549799780\r\ncompleted\r\nsuccess\r\nfedce555f7012a9b6d5c254ad0f0d4e52dfe339c\r\n+++\r\n2\r\n1364676337\r\ncompleted\r\nsuccess\r\na49eaa62982ae12b34892d14e84f18e2814da98b\r\n+++\r\n1\r\n1364639635\r\ncompleted\r\nsuccess\r\n9b48bd72929de7c3e8a7135062ce16789e49a0f0\r\n```\r\n\r\nWhen I take a look on the github homepage I get a bit more runs that are at the branch develop!\r\nHere is an extract of a special tool from https://github.com/NewestUser/github-workflow-dashboard\r\n![image](https://user-images.githubusercontent.com/79077565/164709020-24d353d4-96d6-4dbf-8269-9d08699f6123.png)\r\n\r\nThe runs with number 16 and 14 are not in the PyGithub-call.\r\n\r\n**Why? Is this a REST API error?**\r\n","comments":[{"id":"IC_kwDOADYVqs5B85ld","author":{"login":"bauergeorg"},"authorAssociation":"NONE","body":"This might be a REST API bug! I try to get detailed information with [gh api](https://cli.github.com/)\r\n\r\n<img width=\"1920\" alt=\"image\" src=\"https://user-images.githubusercontent.com/79077565/164717644-b591e089-5a18-46d7-b08d-8da5b9cbe749.png\">\r\n\r\nIf I try to filter with \"branch\" wrong data is displayed. Green marked runs will not be displayed :(","createdAt":"2022-04-22T12:51:37Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/2225#issuecomment-1106483549","viewerDidAuthor":false}],"createdAt":"2022-04-22T11:51:51Z","number":2225,"state":"OPEN","title":"Repository.get_workflow_runs() branch-filter will not work","url":"https://github.com/PyGithub/PyGithub/issues/2225"},{"author":{"id":"U_kgDOBbcXBA","is_bot":false,"login":"zavbala","name":"Jeremy Zabala"},"body":"Hello!\r\n\r\nDo I need to create OAuth / GitHubApp to post to other repos?\r\nWith my personal access token is enough?\r\nIs the module dead?\r\n\r\nOr is an issue related with the module? I mean, I see a lot of issues related!\r\n\r\n```Python\r\nimport json\r\nimport re\r\n\r\nfrom github import Github\r\nfrom glom import glom\r\nfrom notion_client import Client\r\n\r\nfrom src.utils import strings\r\n\r\noctocat = Github(\"personal_access_token\")\r\nnotion = Client(auth=\"notion_key\")\r\n\r\nsvgporn = octocat.get_repo(\"gilbarbara/logos\")\r\n\r\n.....\r\n\r\ndef add_new_logo():\r\n    logo, desc, source = get_logo_from_notion()\r\n\r\n....\r\n\r\n    if not logo_exists:\r\n        label = svgporn.get_label(\"request\")\r\n        name, link = logo.split(\"-\")\r\n\r\n        body = f\"\"\" \r\n        [{name}]({link})\r\n\r\n        {desc}\r\n\r\n        [Logo]({source})\r\n         \"\"\"\r\n\r\n        return svgporn.create_issue(\r\n            title=f\"Add {name}\", labels=[label], body=body, assignees=[\"gilbarbara\"]\r\n        )\r\n\r\n```\r\nI get this message\r\n\r\n```\r\ngithub.GithubException.UnknownObjectException: 404 {\"message\": \"Not Found\", \"documentation_url\": \"https://docs.github.com/rest/reference/issues#create-an-issue\"}\r\n```","comments":[{"id":"IC_kwDOADYVqs5bHzdn","author":{"login":"ayadcodes"},"authorAssociation":"NONE","body":"@zavbala have you find the source of error? i've got the same","createdAt":"2023-04-29T12:02:00Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/2224#issuecomment-1528772455","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs5bH0YW","author":{"login":"ayadcodes"},"authorAssociation":"NONE","body":"ok i've figured it out, the problem was the \"SCOPE\" of the app, need write permissions","createdAt":"2023-04-29T12:21:55Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":1}}],"url":"https://github.com/PyGithub/PyGithub/issues/2224#issuecomment-1528776214","viewerDidAuthor":false}],"createdAt":"2022-04-20T20:50:45Z","number":2224,"state":"OPEN","title":"404 Error when I try to create an Issue","url":"https://github.com/PyGithub/PyGithub/issues/2224"},{"author":{"id":"MDQ6VXNlcjUxNDI2OTgy","is_bot":false,"login":"lanpengyou125","name":"jinpeng lan"},"body":"I'm trying to explore the commits in repositories using PyGithub, but I fail to get the information of the committer and author'slocal time.\r\n\r\nI want to get the local time or the timezone of committer and author through certain repositories' commits. I get the UTC in commits, but i want to explore the committer and author's local time. Can i get it by PyGithub?  \r\nI am looking for your reply, thanks!!","comments":[],"createdAt":"2022-04-20T13:32:17Z","number":2222,"state":"OPEN","title":"I'm trying to explore the commits in repositories using PyGithub, but I fail to get the information of the committer and author'slocal time.","url":"https://github.com/PyGithub/PyGithub/issues/2222"},{"author":{"id":"MDQ6VXNlcjEyOTI2NTE5","is_bot":false,"login":"lindycoder","name":"Martin Roy"},"body":"Hello!\r\n\r\nI just noticed that the method `get_oauth_application` (defined [here](https://github.com/PyGithub/PyGithub/blob/master/github/MainClass.py#L765)) is missing a declaration in the [type declaration](https://github.com/PyGithub/PyGithub/blob/master/github/MainClass.pyi#L29).\r\n\r\nBy the way, [get_app](https://github.com/PyGithub/PyGithub/blob/master/github/MainClass.py#L773) also seems to be missing.\r\n\r\nThank you very much.","comments":[],"createdAt":"2022-04-19T20:19:28Z","number":2221,"state":"OPEN","title":"Github class' get_oauth_application is missing typing","url":"https://github.com/PyGithub/PyGithub/issues/2221"},{"author":{"id":"MDQ6VXNlcjIzMDA0MDA0","is_bot":false,"login":"ikamensh","name":"Ilya Kamen"},"body":"Following fails:\r\n```python\r\nfrom github import Github\r\n\r\n# Github Enterprise with custom hostname\r\ng = Github(\r\n    base_url=\"https://github.boschdevcloud.com/api/v3\",\r\n    login_or_token=\"MY_TOKEN\",\r\n)\r\n\r\nu = g.get_user()\r\nprint(u)  # AuthenticatedUser(login=None)\r\n\r\nfor repo in u.get_repos():  # socket.gaierror: [Errno 8] nodename nor servname provided, or not known\r\n    print(repo.name)\r\n```\r\n\r\nI'm not understanding why this fails; but even if I'm doing something wrong error message could be improved.","comments":[{"id":"IC_kwDOADYVqs5BvPkt","author":{"login":"ikamensh"},"authorAssociation":"NONE","body":"I've verified that my token has full repo permissions and user permissions.","createdAt":"2022-04-19T17:24:57Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/2220#issuecomment-1102903597","viewerDidAuthor":false}],"createdAt":"2022-04-19T17:18:58Z","number":2220,"state":"OPEN","title":"Demo example fails","url":"https://github.com/PyGithub/PyGithub/issues/2220"},{"author":{"id":"MDQ6VXNlcjUzMjMzNDE3","is_bot":false,"login":"calebw3","name":"Caleb"},"body":"test body","comments":[{"id":"IC_kwDOADYVqs5Kthau","author":{"login":"snim2"},"authorAssociation":"CONTRIBUTOR","body":"This issue could be closed","createdAt":"2022-09-21T09:30:16Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":1}}],"url":"https://github.com/PyGithub/PyGithub/issues/2219#issuecomment-1253447342","viewerDidAuthor":false}],"createdAt":"2022-04-17T22:38:17Z","number":2219,"state":"OPEN","title":"test","url":"https://github.com/PyGithub/PyGithub/issues/2219"},{"author":{"id":"MDQ6VXNlcjcwODMxMDYx","is_bot":false,"login":"MaskDuck","name":"MaskDuck"},"body":"hi, i want to approve and run a workflow from a pr. how can i do that?","comments":[],"createdAt":"2022-04-09T10:44:06Z","number":2216,"state":"OPEN","title":"how to approve a wworkflow","url":"https://github.com/PyGithub/PyGithub/issues/2216"},{"author":{"id":"MDQ6VXNlcjc5MDc3NTY1","is_bot":false,"login":"bauergeorg","name":"Georg Bauer"},"body":"Hi,\r\n\r\nI have a function to replace files. Using git tree and git blob. Now we want to use git lfs server. But I don't know how to communicate with git lfs server.\r\nCan somebody help me?\r\n\r\n```python\r\ndef replace_file(self, repo, repo_file_name, source_file_path, ref_name=None, target_path=''):\r\n  ''' Replace a file in a git repository. \r\n  \r\n  Parameter:\r\n      repo: Repository with type 'Github.get_repo()' or as str.\r\n      repo_file_name (old): e.g. test-123-20211021.txt\r\n      source_file_path (new): e.g. C:\\\\repository_git\\\\action-package-deploy\\\\download\\\\test-123-20211022.txt\r\n      ref_name: Branch name like 'main' or 'develop'. If None = default branch\r\n      target_path: e.g. deploy, if '' (default) main folder of repository\r\n  '''\r\n  \r\n  # input management\r\n  if isinstance(repo, str):\r\n      repo = self.get_repo(repo)\r\n  \r\n  # take handle ref\r\n  local_ref_name, local_ref_type = self._handle_ref(repo, ref_name)\r\n  #print(\"::DEBUG:: ref_name = {}\".format(ref_name))               # DEBUG INFO!\r\n  #print(\"::DEBUG:: local_ref_name = {}\".format(local_ref_name))   # DEBUG INFO!\r\n  #print(\"::DEBUG:: local_ref_type = {}\".format(local_ref_type))   # DEBUG INFO!\r\n  \r\n  print(\"Replace file '{}' with '{}' at repository '{}' on branch '{}'.\".format(repo_file_name, os.path.basename(source_file_path), repo.name, local_ref_name))\r\n  \r\n  # read for help: https://github.com/PyGithub/PyGithub/issues/1628 and\r\n  # https://stackoverflow.com/questions/55786299/delete-multiple-files-from-github-api and\r\n  # https://stackoverflow.com/questions/23637961/how-do-i-mark-a-file-as-deleted-in-a-tree-using-the-github-api\r\n  # in case of a binary file a workaround is done:\r\n  # >>>>>>> https://github.com/PyGithub/PyGithub/issues/863\r\n  \r\n  # set old and new path\r\n  if target_path == '':\r\n      new_path = os.path.basename(source_file_path)\r\n      old_path = repo_file_name\r\n  else:\r\n      new_path = target_path + '/' + os.path.basename(source_file_path)\r\n      old_path = target_path + '/' + repo_file_name\r\n  \r\n  # Step 1: get sha of branch in repo\r\n  # API:\r\n  # >>> GET /repos/:owner/:REPO/branches/master\r\n  #\r\n  # >>> $PARENT_SHA = {commit.sha}\r\n  repo_sha = self.get_git_ref_sha(repo, local_ref_name)\r\n          \r\n  # Step 2: create a blob with file content and get target sha\r\n  # API:\r\n  # >>> $TARGET_SHA = {commit.sha}\r\n  print(\"Read file '{}' ...\".format(source_file_path))\r\n  data = base64.b64encode(open(source_file_path, 'rb').read())\r\n  \r\n  # check file size without using GIT LFS\r\n  if os.path.getsize(source_file_path) > 100000000:\r\n      raise Exception(\"File size limit reached! File '{}' is larger than 100MB.\".format(source_file_path))\r\n  \r\n  print('Create blob with content ...')\r\n  blob = repo.create_git_blob(content=data.decode(\"utf-8\"), encoding='base64')\r\n  blob_sha = blob.sha\r\n  # post_parameters = {'content': bytes(data), 'encoding': 'utf-8',}\r\n  # headers, data = repo._requester.requestJson(\"POST\", f\"{repo.url}/git/blobs\", input=post_parameters)\r\n  \r\n  # Step 3: create a git tree to update the reference\r\n  # API:\r\n  # >>> POST /repos/:owner/:REPO/git/trees\r\n  # >>> {\r\n  # >>>   \"base_tree\": $BASE_SHA,\r\n  # >>>   \"tree\": [\r\n  # >>>       {\r\n  # >>>           \"path\": \"path/to/file\",\r\n  # >>>           \"mode\": \"100644\", \r\n  # >>>           \"type\": \"commit\",\r\n  # >>>           \"sha\": $TARGET_SHA\r\n  # >>>       }\r\n  # >>>   ]\r\n  # >>> }\r\n  #\r\n  # >>> $TREE_SHA = {sha}\r\n  base_tree = repo.get_git_tree(repo_sha, recursive = True)\r\n  # add new element\r\n  elem1 = InputGitTreeElement(path=new_path, mode='100644', type='blob', sha=blob_sha)\r\n  # delete old element\r\n  elem2 = InputGitTreeElement(path=old_path, mode='100644', type='blob', sha=None)\r\n  tree = repo.create_git_tree([elem1, elem2], base_tree)\r\n  \r\n  # Step 4: Commit the tree\r\n  # API:\r\n  # >>> POST /repos/:owner/:REPO/git/commits\r\n  # >>> {\r\n  # >>>   \"message\": \"<your commit message>\",\r\n  # >>>   \"tree\": $TREE_SHA,\r\n  # >>>   \"parents\": [$PARENT_SHA]\r\n  # >>> }\r\n  msg = \"Update file: '{}' -> '{}'.\".format(repo_file_name, os.path.basename(source_file_path))\r\n  parents = [repo.get_git_commit(repo_sha)]\r\n  print(\"Create commit with messsage '{}'\".format(msg))\r\n  commit = repo.create_git_commit(msg, tree, parents, author = self.author, committer = self.author)\r\n  \r\n  # Step 5: Update branch to point to your new commit\r\n  # API:\r\n  # >>> PATCH /repos/:owner/:REPO/git/refs/heads/master\r\n  # >>> {\r\n  # >>>   \"sha\": $COMMIT_SHA\r\n  # >>> }\r\n  if local_ref_type in ['branch', 'tag-branch', 'default']:\r\n      reference = repo.get_git_ref('heads/'+local_ref_name)\r\n  else:\r\n      reference = repo.get_git_ref('tags/'+local_ref_name)      \r\n  reference.edit(commit.sha, force=True)\r\n  \r\n  # set return value (or overwrite vaue of first changed repo)                       \r\n  return commit.sha\r\n```","comments":[],"createdAt":"2022-04-08T14:15:24Z","number":2215,"state":"OPEN","title":"How to replace a git lfs file","url":"https://github.com/PyGithub/PyGithub/issues/2215"},{"author":{"id":"U_kgDOBgKONQ","is_bot":false,"login":"kamalananda777","name":""},"body":"AttributeError:  'Organization' object has no attribute 'cancel_invitation'","comments":[],"createdAt":"2022-04-08T12:45:57Z","number":2214,"state":"OPEN","title":"missing cancel_invitation in Organization class","url":"https://github.com/PyGithub/PyGithub/issues/2214"},{"author":{"id":"U_kgDOBb_yCg","is_bot":false,"login":"kunj-thakor","name":"Kunj Thakor"},"body":" HTTPSConnectionPool(host='myusername', port=443): Max retries exceeded with url: /api/v3/user/repos (Caused by NewConnectionError('<urllib3.connection.HTTPSConnection object at 0x0000022944D2F5E0>: Failed to establish a new connection: [Errno 11001] getaddrinfo failed'))","comments":[{"id":"IC_kwDOADYVqs5aq9Wi","author":{"login":"EnricoMi"},"authorAssociation":"COLLABORATOR","body":"This is down to github not being able to serve the current load of connections. You could add retries, but if this never connects, then you should troubleshoot your internet connection (e.g. proxy settings: #2426).\r\n\r\nYou can configure retries via the `retry` argument:\r\n\r\n```python\r\ngh = Github(retry=10)\r\n```\r\n\r\nYou can configure more complex retry logic as follows:\r\n\r\n```python\r\nfrom urllib3.util import Retry\r\n\r\ngh = Github(retry=Retry(10))\r\n```\r\n\r\nSee https://urllib3.readthedocs.io/en/stable/reference/urllib3.util.html#urllib3.util.Retry for all available options.","createdAt":"2023-04-25T06:18:21Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/2213#issuecomment-1521210786","viewerDidAuthor":false}],"createdAt":"2022-04-08T08:55:18Z","number":2213,"state":"OPEN","title":"How to Fix this ConnectionError","url":"https://github.com/PyGithub/PyGithub/issues/2213"},{"author":{"id":"MDQ6VXNlcjQ1OTE4NzA0","is_bot":false,"login":"99Kies","name":"FengFeng"},"body":"How do I obtain details from a Pull Request?\r\nsuch as `comments`.\r\n![image](https://user-images.githubusercontent.com/45918704/159167413-1c79d1da-e086-4877-8268-d99b9ba230aa.png)\r\n","comments":[{"id":"IC_kwDOADYVqs4_-LTu","author":{"login":"99Kies"},"authorAssociation":"NONE","body":"this is my code.\r\n```python\r\nrepo = g.get_repo(\"xxx/xxxx\")\r\nfor i in repo.get_pulls():\r\n    pprint(i)\r\n    pprint(i.body)\r\n    pprint(i.comments)\r\n```\r\nbut it can't get comments body.","createdAt":"2022-03-20T14:33:15Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/2204#issuecomment-1073263854","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs5Aj6Ap","author":{"login":"ewindels"},"authorAssociation":"NONE","body":"You can access the comments with _get_comments()_ (https://pygithub.readthedocs.io/en/latest/github_objects/PullRequest.html#github.PullRequest.PullRequest.get_comments) for review comments and _get_issue_comments()_ for all other comments (https://pygithub.readthedocs.io/en/latest/github_objects/PullRequest.html#github.PullRequest.PullRequest.get_issue_comments)\r\n\r\nExample with your code:\r\n\r\n\r\n```python\r\n# inside loop, i is your PullRequest object\r\nfor comment in i.get_issue_comments():\r\n    print(comment.body)\r\nfor review_comment in i.get_comments():\r\n    print(review_comment.body)\r\n```","createdAt":"2022-03-30T13:40:03Z","includesCreatedEdit":true,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/2204#issuecomment-1083154473","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs5po8AI","author":{"login":"watreyoung"},"authorAssociation":"NONE","body":"> You can access the comments with _get_comments()_ (https://pygithub.readthedocs.io/en/latest/github_objects/PullRequest.html#github.PullRequest.PullRequest.get_comments) for review comments and _get_issue_comments()_ for all other comments (https://pygithub.readthedocs.io/en/latest/github_objects/PullRequest.html#github.PullRequest.PullRequest.get_issue_comments)\r\n> \r\n> Example with your code:\r\n> \r\n> ```python\r\n> # inside loop, i is your PullRequest object\r\n> for comment in i.get_issue_comments():\r\n>     print(comment.body)\r\n> for review_comment in i.get_comments():\r\n>     print(review_comment.body)\r\n> ```\r\n\r\nIt works. In fact, the results of `get_issue_comments()` are the same as the results that converts the pull into an issue by `as_issue()`  and call `get_comments()`.\r\nIn the docs, `get_comments()` and `get_review_comments` return the same results.\r\n![image](https://github.com/PyGithub/PyGithub/assets/49915237/58c05a66-deaf-4234-adbf-45b804978b97)\r\nThere is an another funciton that can return the review comment:`get_review_comments()`\r\n\r\n\r\n","createdAt":"2023-10-20T08:52:29Z","includesCreatedEdit":true,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/2204#issuecomment-1772339208","viewerDidAuthor":false}],"createdAt":"2022-03-20T14:31:37Z","number":2204,"state":"OPEN","title":"How do I obtain details from a Pull Request?","url":"https://github.com/PyGithub/PyGithub/issues/2204"},{"author":{"id":"MDQ6VXNlcjI5MjM5MTQ5","is_bot":false,"login":"phipz","name":""},"body":"I am confused about the difference of the ._rawData and the .raw_data attributes of GitubObjects.\r\n\r\nWhile the ._rawData attributes returns stored data instantaneously, the .raw_data attribute tries to redownload the content - even though it is allready in the memory.\r\n\r\nLet me provide a minimal example:\r\n\r\n```\r\nfom github import Github\r\n\r\ng = Github(GitHubToken, per_page=1000)\r\nrepo = g.get_repo(\"PyGithub/PyGithub\")\r\nissues = repo.get_issues()\r\n\r\n#Download Issues to memory\r\nissues_list = []\r\nfor issue in issues:\r\n\tissues_list.append(issue)\r\n\r\n## BLOCK NETWORK ACCESS of PYTHON\r\n\r\nissues_list[0]._rawData \r\n# WORKS\r\n\r\nissues_list[0].raw_data\r\n# ERROR -> Failed to establish a new connection\r\n```","comments":[{"id":"IC_kwDOADYVqs5Ggzma","author":{"login":"Felixoid"},"authorAssociation":"CONTRIBUTOR","body":"Hello, I faced the same issue. The main problem here, as I see `.raw_data` spends one additional API request instead of reusing the existing object.\r\n\r\n<details><summary>Here the example of my case</summary>\r\n\r\n```\r\nIn [336]: api_prs = gh.search_issues('', sort=\"created\", type='pr', repo='ClickHouse/ClickHouse', updated=\"2022-05-02..2022-05-03\")\r\n\r\nIn [337]: gh.get_rate_limit().raw_data\r\nOut[337]: \r\n{'core': {'limit': 5000, 'used': 6, 'remaining': 4994, 'reset': 1657708420},\r\n 'search': {'limit': 30, 'used': 2, 'remaining': 28, 'reset': 1657705138},\r\n 'graphql': {'limit': 5000, 'used': 0, 'remaining': 5000, 'reset': 1657708682},\r\n 'integration_manifest': {'limit': 5000,\r\n  'used': 0,\r\n  'remaining': 5000,\r\n  'reset': 1657708682},\r\n 'source_import': {'limit': 100,\r\n  'used': 0,\r\n  'remaining': 100,\r\n  'reset': 1657705142},\r\n 'code_scanning_upload': {'limit': 1000,\r\n  'used': 0,\r\n  'remaining': 1000,\r\n  'reset': 1657708682},\r\n 'actions_runner_registration': {'limit': 10000,\r\n  'used': 0,\r\n  'remaining': 10000,\r\n  'reset': 1657708682},\r\n 'scim': {'limit': 15000, 'used': 0, 'remaining': 15000, 'reset': 1657708682},\r\n 'dependency_snapshots': {'limit': 100,\r\n  'used': 0,\r\n  'remaining': 100,\r\n  'reset': 1657705142}}\r\n\r\nIn [338]: api_prs[1]._rawData\r\nOut[338]: \r\n{'url': 'https://api.github.com/repos/ClickHouse/ClickHouse/issues/36881',\r\n 'repository_url': 'https://api.github.com/repos/ClickHouse/ClickHouse',\r\n 'labels_url': 'https://api.github.com/repos/ClickHouse/ClickHouse/issues/36881/labels{/name}',\r\n 'comments_url': 'https://api.github.com/repos/ClickHouse/ClickHouse/issues/36881/comments',\r\n 'events_url': 'https://api.github.com/repos/ClickHouse/ClickHouse/issues/36881/events',\r\n 'html_url': 'https://github.com/ClickHouse/ClickHouse/pull/36881',\r\n 'id': 1224375411,\r\n 'node_id': 'PR_kwDOA5dJV843PeWA',\r\n 'number': 36881,\r\n 'title': 'update docs for time window functions',\r\n 'user': {'login': 'serxa',\r\n  'id': 1014716,\r\n  'node_id': 'MDQ6VXNlcjEwMTQ3MTY=',\r\n  'avatar_url': 'https://avatars.githubusercontent.com/u/1014716?v=4',\r\n  'gravatar_id': '',\r\n  'url': 'https://api.github.com/users/serxa',\r\n  'html_url': 'https://github.com/serxa',\r\n  'followers_url': 'https://api.github.com/users/serxa/followers',\r\n  'following_url': 'https://api.github.com/users/serxa/following{/other_user}',\r\n  'gists_url': 'https://api.github.com/users/serxa/gists{/gist_id}',\r\n  'starred_url': 'https://api.github.com/users/serxa/starred{/owner}{/repo}',\r\n  'subscriptions_url': 'https://api.github.com/users/serxa/subscriptions',\r\n  'organizations_url': 'https://api.github.com/users/serxa/orgs',\r\n  'repos_url': 'https://api.github.com/users/serxa/repos',\r\n  'events_url': 'https://api.github.com/users/serxa/events{/privacy}',\r\n  'received_events_url': 'https://api.github.com/users/serxa/received_events',\r\n  'type': 'User',\r\n  'site_admin': False},\r\n 'labels': [{'id': 1310920248,\r\n   'node_id': 'MDU6TGFiZWwxMzEwOTIwMjQ4',\r\n   'url': 'https://api.github.com/repos/ClickHouse/ClickHouse/labels/pr-documentation',\r\n   'name': 'pr-documentation',\r\n   'color': '007700',\r\n   'default': False,\r\n   'description': 'Documentation PRs for the specific code PR'}],\r\n 'state': 'closed',\r\n 'locked': False,\r\n 'assignee': None,\r\n 'assignees': [],\r\n 'milestone': None,\r\n 'comments': 0,\r\n 'created_at': '2022-05-03T17:13:34Z',\r\n 'updated_at': '2022-05-03T18:11:12Z',\r\n 'closed_at': '2022-05-03T18:11:11Z',\r\n 'author_association': 'MEMBER',\r\n 'active_lock_reason': None,\r\n 'draft': False,\r\n 'pull_request': {'url': 'https://api.github.com/repos/ClickHouse/ClickHouse/pulls/36881',\r\n  'html_url': 'https://github.com/ClickHouse/ClickHouse/pull/36881',\r\n  'diff_url': 'https://github.com/ClickHouse/ClickHouse/pull/36881.diff',\r\n  'patch_url': 'https://github.com/ClickHouse/ClickHouse/pull/36881.patch',\r\n  'merged_at': '2022-05-03T18:11:11Z'},\r\n 'body': '### Changelog category (leave one):\\r\\n- Documentation (changelog entry is not required)\\r\\n\\r\\n\\r\\n### Changelog entry (a user-readable short description of the changes that goes to CHANGELOG.md):\\r\\n...\\r\\n\\r\\n\\r\\n> Information about CI checks: https://clickhouse.com/docs/en/development/continuous-integration/\\r\\n',\r\n 'reactions': {'url': 'https://api.github.com/repos/ClickHouse/ClickHouse/issues/36881/reactions',\r\n  'total_count': 0,\r\n  '+1': 0,\r\n  '-1': 0,\r\n  'laugh': 0,\r\n  'hooray': 0,\r\n  'confused': 0,\r\n  'heart': 0,\r\n  'rocket': 0,\r\n  'eyes': 0},\r\n 'timeline_url': 'https://api.github.com/repos/ClickHouse/ClickHouse/issues/36881/timeline',\r\n 'performed_via_github_app': None,\r\n 'state_reason': None,\r\n 'score': 1.0}\r\n\r\nIn [339]: gh.get_rate_limit().raw_data\r\nOut[339]: \r\n{'core': {'limit': 5000, 'used': 6, 'remaining': 4994, 'reset': 1657708420},\r\n 'search': {'limit': 30, 'used': 2, 'remaining': 28, 'reset': 1657705138},\r\n 'graphql': {'limit': 5000, 'used': 0, 'remaining': 5000, 'reset': 1657708697},\r\n 'integration_manifest': {'limit': 5000,\r\n  'used': 0,\r\n  'remaining': 5000,\r\n  'reset': 1657708697},\r\n 'source_import': {'limit': 100,\r\n  'used': 0,\r\n  'remaining': 100,\r\n  'reset': 1657705157},\r\n 'code_scanning_upload': {'limit': 1000,\r\n  'used': 0,\r\n  'remaining': 1000,\r\n  'reset': 1657708697},\r\n 'actions_runner_registration': {'limit': 10000,\r\n  'used': 0,\r\n  'remaining': 10000,\r\n  'reset': 1657708697},\r\n 'scim': {'limit': 15000, 'used': 0, 'remaining': 15000, 'reset': 1657708697},\r\n 'dependency_snapshots': {'limit': 100,\r\n  'used': 0,\r\n  'remaining': 100,\r\n  'reset': 1657705157}}\r\n\r\nIn [340]: api_prs[1].raw_data\r\nOut[340]: \r\n{'url': 'https://api.github.com/repos/ClickHouse/ClickHouse/issues/36881',\r\n 'repository_url': 'https://api.github.com/repos/ClickHouse/ClickHouse',\r\n 'labels_url': 'https://api.github.com/repos/ClickHouse/ClickHouse/issues/36881/labels{/name}',\r\n 'comments_url': 'https://api.github.com/repos/ClickHouse/ClickHouse/issues/36881/comments',\r\n 'events_url': 'https://api.github.com/repos/ClickHouse/ClickHouse/issues/36881/events',\r\n 'html_url': 'https://github.com/ClickHouse/ClickHouse/pull/36881',\r\n 'id': 1224375411,\r\n 'node_id': 'PR_kwDOA5dJV843PeWA',\r\n 'number': 36881,\r\n 'title': 'update docs for time window functions',\r\n 'user': {'login': 'serxa',\r\n  'id': 1014716,\r\n  'node_id': 'MDQ6VXNlcjEwMTQ3MTY=',\r\n  'avatar_url': 'https://avatars.githubusercontent.com/u/1014716?v=4',\r\n  'gravatar_id': '',\r\n  'url': 'https://api.github.com/users/serxa',\r\n  'html_url': 'https://github.com/serxa',\r\n  'followers_url': 'https://api.github.com/users/serxa/followers',\r\n  'following_url': 'https://api.github.com/users/serxa/following{/other_user}',\r\n  'gists_url': 'https://api.github.com/users/serxa/gists{/gist_id}',\r\n  'starred_url': 'https://api.github.com/users/serxa/starred{/owner}{/repo}',\r\n  'subscriptions_url': 'https://api.github.com/users/serxa/subscriptions',\r\n  'organizations_url': 'https://api.github.com/users/serxa/orgs',\r\n  'repos_url': 'https://api.github.com/users/serxa/repos',\r\n  'events_url': 'https://api.github.com/users/serxa/events{/privacy}',\r\n  'received_events_url': 'https://api.github.com/users/serxa/received_events',\r\n  'type': 'User',\r\n  'site_admin': False},\r\n 'labels': [{'id': 1310920248,\r\n   'node_id': 'MDU6TGFiZWwxMzEwOTIwMjQ4',\r\n   'url': 'https://api.github.com/repos/ClickHouse/ClickHouse/labels/pr-documentation',\r\n   'name': 'pr-documentation',\r\n   'color': '007700',\r\n   'default': False,\r\n   'description': 'Documentation PRs for the specific code PR'}],\r\n 'state': 'closed',\r\n 'locked': False,\r\n 'assignee': None,\r\n 'assignees': [],\r\n 'milestone': None,\r\n 'comments': 0,\r\n 'created_at': '2022-05-03T17:13:34Z',\r\n 'updated_at': '2022-05-03T18:11:12Z',\r\n 'closed_at': '2022-05-03T18:11:11Z',\r\n 'author_association': 'MEMBER',\r\n 'active_lock_reason': None,\r\n 'draft': False,\r\n 'pull_request': {'url': 'https://api.github.com/repos/ClickHouse/ClickHouse/pulls/36881',\r\n  'html_url': 'https://github.com/ClickHouse/ClickHouse/pull/36881',\r\n  'diff_url': 'https://github.com/ClickHouse/ClickHouse/pull/36881.diff',\r\n  'patch_url': 'https://github.com/ClickHouse/ClickHouse/pull/36881.patch',\r\n  'merged_at': '2022-05-03T18:11:11Z'},\r\n 'body': '### Changelog category (leave one):\\r\\n- Documentation (changelog entry is not required)\\r\\n\\r\\n\\r\\n### Changelog entry (a user-readable short description of the changes that goes to CHANGELOG.md):\\r\\n...\\r\\n\\r\\n\\r\\n> Information about CI checks: https://clickhouse.com/docs/en/development/continuous-integration/\\r\\n',\r\n 'closed_by': {'login': 'serxa',\r\n  'id': 1014716,\r\n  'node_id': 'MDQ6VXNlcjEwMTQ3MTY=',\r\n  'avatar_url': 'https://avatars.githubusercontent.com/u/1014716?v=4',\r\n  'gravatar_id': '',\r\n  'url': 'https://api.github.com/users/serxa',\r\n  'html_url': 'https://github.com/serxa',\r\n  'followers_url': 'https://api.github.com/users/serxa/followers',\r\n  'following_url': 'https://api.github.com/users/serxa/following{/other_user}',\r\n  'gists_url': 'https://api.github.com/users/serxa/gists{/gist_id}',\r\n  'starred_url': 'https://api.github.com/users/serxa/starred{/owner}{/repo}',\r\n  'subscriptions_url': 'https://api.github.com/users/serxa/subscriptions',\r\n  'organizations_url': 'https://api.github.com/users/serxa/orgs',\r\n  'repos_url': 'https://api.github.com/users/serxa/repos',\r\n  'events_url': 'https://api.github.com/users/serxa/events{/privacy}',\r\n  'received_events_url': 'https://api.github.com/users/serxa/received_events',\r\n  'type': 'User',\r\n  'site_admin': False},\r\n 'reactions': {'url': 'https://api.github.com/repos/ClickHouse/ClickHouse/issues/36881/reactions',\r\n  'total_count': 0,\r\n  '+1': 0,\r\n  '-1': 0,\r\n  'laugh': 0,\r\n  'hooray': 0,\r\n  'confused': 0,\r\n  'heart': 0,\r\n  'rocket': 0,\r\n  'eyes': 0},\r\n 'timeline_url': 'https://api.github.com/repos/ClickHouse/ClickHouse/issues/36881/timeline',\r\n 'performed_via_github_app': None,\r\n 'state_reason': None}\r\n\r\nIn [341]: gh.get_rate_limit().raw_data\r\nOut[341]: \r\n{'core': {'limit': 5000, 'used': 7, 'remaining': 4993, 'reset': 1657708420},\r\n 'search': {'limit': 30, 'used': 2, 'remaining': 28, 'reset': 1657705138},\r\n 'graphql': {'limit': 5000, 'used': 0, 'remaining': 5000, 'reset': 1657708710},\r\n 'integration_manifest': {'limit': 5000,\r\n  'used': 0,\r\n  'remaining': 5000,\r\n  'reset': 1657708710},\r\n 'source_import': {'limit': 100,\r\n  'used': 0,\r\n  'remaining': 100,\r\n  'reset': 1657705170},\r\n 'code_scanning_upload': {'limit': 1000,\r\n  'used': 0,\r\n  'remaining': 1000,\r\n  'reset': 1657708710},\r\n 'actions_runner_registration': {'limit': 10000,\r\n  'used': 0,\r\n  'remaining': 10000,\r\n  'reset': 1657708710},\r\n 'scim': {'limit': 15000, 'used': 0, 'remaining': 15000, 'reset': 1657708710},\r\n 'dependency_snapshots': {'limit': 100,\r\n  'used': 0,\r\n  'remaining': 100,\r\n  'reset': 1657705170}}\r\n```\r\n\r\n</details>\r\n\r\nThe Objects in `raw_data` and `_rawData` are slightly different, `raw_data` has an additional `'closed_by'`, but it's not the problem for my case.\r\n\r\nHow can I avoid spending hundreds and thousands API requests per program launch w/o accessing a protected attribute `_rawData`?","createdAt":"2022-07-13T09:43:38Z","includesCreatedEdit":true,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/2202#issuecomment-1183005082","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs5GhMfs","author":{"login":"Felixoid"},"authorAssociation":"CONTRIBUTOR","body":"Excuse me, dear @jacquev6, @adamtheturtle, and @sfdye (mentioning you since activity on GH).\r\n\r\nDon't you consider the mentioned fact that accessing `.raw_data` spends additional API requests and affects rate limit an issue?","createdAt":"2022-07-13T11:31:48Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":1}},{"content":"CONFUSED","users":{"totalCount":1}}],"url":"https://github.com/PyGithub/PyGithub/issues/2202#issuecomment-1183107052","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs5GlFG4","author":{"login":"Felixoid"},"authorAssociation":"CONTRIBUTOR","body":"I assume, because of that one can't get `gh.search_issues(...).repository`, it spends request too.\r\n\r\nAny thoughts, please?","createdAt":"2022-07-14T08:00:31Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"CONFUSED","users":{"totalCount":1}}],"url":"https://github.com/PyGithub/PyGithub/issues/2202#issuecomment-1184125368","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs5HzBkJ","author":{"login":"Felixoid"},"authorAssociation":"CONTRIBUTOR","body":"This issue forced me to write our own wrapper around the annoying issue, so we spend magnitude fewer requests than it could be https://github.com/ClickHouse/ClickHouse/blob/469b7e7/tests/ci/github_helper.py#L102\r\n\r\nIt as well uses local caching. It as well helps to reduce the number of requests many times.","createdAt":"2022-08-03T22:46:40Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/2202#issuecomment-1204558089","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs5ladlU","author":{"login":"EnricoMi"},"authorAssociation":"COLLABORATOR","body":"I agree, it is surprising that `raw_data` for completable objects with `completed==False` triggers a request. Changing this would be quite some breaking change. We could make `_rawData` available via `current_raw_data`. And we should make clear in the API documentation that behaviour of `raw_data`.","createdAt":"2023-08-31T17:09:32Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":3}}],"url":"https://github.com/PyGithub/PyGithub/issues/2202#issuecomment-1701435732","viewerDidAuthor":false}],"createdAt":"2022-03-09T12:32:58Z","number":2202,"state":"OPEN","title":"._rawData vs. .raw_data - Lazy Loading","url":"https://github.com/PyGithub/PyGithub/issues/2202"},{"author":{"id":"MDQ6VXNlcjYwODc5NzY=","is_bot":false,"login":"pjames5","name":"Peter James"},"body":"Hello!\r\n\r\nI made some recent updates to application that uses `Repository.get_contents()` and ran into some typing issues with a recent `mypy` update. \r\n\r\nMy proposal is to modify the return type of `Repository.get_contents()` to be `List[github.ContentFile.ContentFile]` instead of `Union[github.ContentFile.ContentFile, List[github.ContentFile.ContentFile], None]`. This would help to clean up the `mypy` issues and make the API clearer.\r\n\r\nSomething like this:\r\n\r\n```\r\n        if isinstance(data, list):\r\n            return [\r\n                # Lazy completion only makes sense for files. See discussion\r\n                # here: https://github.com/jacquev6/PyGithub/issues/140#issuecomment-13481130\r\n                github.ContentFile.ContentFile(\r\n                    self._requester, headers, item, completed=(item[\"type\"] != \"file\")\r\n                )\r\n                for item in data\r\n            ]\r\n        return [\r\n            github.ContentFile.ContentFile(\r\n                self._requester, headers, data, completed=True\r\n            )\r\n        ]\r\n```\r\n\r\nI'm happy to open a PR with this change or discuss further. Thanks!","comments":[],"createdAt":"2022-03-08T16:00:39Z","number":2199,"state":"OPEN","title":"Modify Repository.get_contents() to always return List[github.ContentFile.ContentFile]","url":"https://github.com/PyGithub/PyGithub/issues/2199"},{"author":{"id":"MDQ6VXNlcjgzOTkyMDc=","is_bot":false,"login":"underrobyn","name":"Robyn"},"body":"I would like to be able to sort a list of Repository classes like so:\r\n\r\n```python\r\ng = Github(getenv('GITHUB_TOKEN'))\r\norg = g.get_organization(getenv('GITHUB_ORG_NAME'))\r\n\r\nfor repo in org.get_repos():\r\n    repo_list.append(repo)\r\n\r\nrepo_list.sort()\r\n```\r\n\r\nDoing so results in an error as the Repository class does not implement comparison methods.\r\n\r\n> The class must define one of \\_\\_lt\\_\\_(), \\_\\_le\\_\\_(), \\_\\_gt\\_\\_(), or \\_\\_ge\\_\\_(). In addition, the class should supply an \\_\\_eq\\_\\_() method.\r\n\r\nSource: https://stackoverflow.com/a/7152650\r\n\r\nFor the built-in sort method, only \\_\\_lt\\_\\_() must be implemented.\r\n\r\nI propose the name of the repository should be used for sorting.","comments":[],"createdAt":"2022-03-03T19:53:12Z","number":2194,"state":"OPEN","title":"[Feature] Make Repository class sortable","url":"https://github.com/PyGithub/PyGithub/issues/2194"},{"author":{"id":"MDQ6VXNlcjYwMTMzNzg=","is_bot":false,"login":"ocket8888","name":"ocket8888"},"body":"Checking this code:\r\n```python3\r\nfrom github.GithubObject import NotSet\r\n```\r\nwith Pyright version 1.1.225 fails with the error \"NotSet\" is unknown import symbol.\r\n\r\nThe definition of `NotSet` from `GithubObject.py` is\r\n\r\n```python3\r\nclass _NotSetType:\r\n    def __repr__(self):\r\n        return \"NotSet\"\r\n\r\n    value = None\r\n\r\n\r\nNotSet = _NotSetType()\r\n```\r\n\r\nA typing that would fix this unknown import problem is\r\n\r\n```python3\r\nfrom typing import Final\r\n\r\nclass _NotSetType:\r\n    def __repr__(self):\r\n        return \"NotSet\"\r\n\r\n    value = None\r\n\r\n\r\nNotSet:  Final = _NotSetType()\r\n```\r\n\r\nHowever, that doesn't allow me to use `NotSet` as a type, like:\r\n\r\n```python3\r\nfrom typing import Union\r\nfrom github.GithubObject import NotSet\r\n\r\ndef print_something(a: Union[str, NotSet]) -> None:\r\n    if a is NotSet:\r\n        print(a.value)\r\n    else:\r\n        print(a)\r\n```\r\n\r\nWhich fails with the error `Expected class type but received \"_NotSetType\"`.","comments":[{"id":"IC_kwDOADYVqs5Ca1G2","author":{"login":"stale"},"authorAssociation":"NONE","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","createdAt":"2022-05-01T20:30:45Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/2192#issuecomment-1114329526","viewerDidAuthor":false}],"createdAt":"2022-03-02T19:54:02Z","number":2192,"state":"OPEN","title":"NotSet is unknown import symbol","url":"https://github.com/PyGithub/PyGithub/issues/2192"},{"author":{"id":"MDQ6VXNlcjQzNTA4NDky","is_bot":false,"login":"centuryhopper","name":""},"body":"Hello there!\r\n\r\nI tried to run my script in a virtual miniconda environment but I am getting errors. I tried to install that package shown in the error message but it didn't work. How can I fix this? Thank you!\r\n\r\nHere's the error message:\r\n```\r\nTraceback (most recent call last):\r\n  File \"C:\\Users\\User1\\Documents\\GitHub\\GitHubAutomationWindows\\automate_github.py\", line 1, in <module>\r\n    from github import Github\r\n  File \"C:\\CondaStuff\\miniconda3\\envs\\venv\\lib\\site-packages\\github\\__init__.py\", line 56, in <module>\r\n    from github.MainClass import Github, GithubIntegration\r\n  File \"C:\\CondaStuff\\miniconda3\\envs\\venv\\lib\\site-packages\\github\\MainClass.py\", line 59, in <module>\r\n    import github.Event\r\n  File \"C:\\CondaStuff\\miniconda3\\envs\\venv\\lib\\site-packages\\github\\Event.py\", line 32, in <module>\r\n    import github.NamedUser\r\n  File \"C:\\CondaStuff\\miniconda3\\envs\\venv\\lib\\site-packages\\github\\NamedUser.py\", line 44, in <module>\r\n    import github.Organization\r\n  File \"C:\\CondaStuff\\miniconda3\\envs\\venv\\lib\\site-packages\\github\\Organization.py\", line 50, in <module>\r\n    import github.Repository\r\n  File \"C:\\CondaStuff\\miniconda3\\envs\\venv\\lib\\site-packages\\github\\Repository.py\", line 125, in <module>\r\n    import github.PublicKey\r\n  File \"C:\\CondaStuff\\miniconda3\\envs\\venv\\lib\\site-packages\\github\\PublicKey.py\", line 34, in <module>\r\n    from nacl import encoding, public\r\n  File \"C:\\CondaStuff\\miniconda3\\envs\\venv\\lib\\site-packages\\nacl\\public.py\", line 17, in <module>\r\n    import nacl.bindings\r\n  File \"C:\\CondaStuff\\miniconda3\\envs\\venv\\lib\\site-packages\\nacl\\bindings\\__init__.py\", line 17, in <module>\r\n    from nacl.bindings.crypto_aead import (\r\n  File \"C:\\CondaStuff\\miniconda3\\envs\\venv\\lib\\site-packages\\nacl\\bindings\\crypto_aead.py\", line 18, in <module>\r\n    from nacl._sodium import ffi, lib\r\nModuleNotFoundError: No module named '_cffi_backend'\r\n\r\n```","comments":[{"id":"IC_kwDOADYVqs5CZgBc","author":{"login":"stale"},"authorAssociation":"NONE","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","createdAt":"2022-04-30T12:30:43Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/2191#issuecomment-1113981020","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs5HjGW2","author":{"login":"Argmaster"},"authorAssociation":"NONE","body":"This is not looking like PyGithub specific issue. Check [this question](https://stackoverflow.com/questions/34370962/no-module-named-cffi-backend) on stack overflow, If you haven't yet.","createdAt":"2022-07-31T09:06:45Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/2191#issuecomment-1200383414","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs5HjMyC","author":{"login":"yoni-placer"},"authorAssociation":"NONE","body":"Happen to me too: It works locally but fails on Jenkins.\r\nAny advice?","createdAt":"2022-07-31T11:55:05Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/2191#issuecomment-1200409730","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs5HjPgS","author":{"login":"yoni-placer"},"authorAssociation":"NONE","body":"My case solution:\r\n```\r\napt-get update\r\napt-get install libffi-dev","createdAt":"2022-07-31T13:02:05Z","includesCreatedEdit":true,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/2191#issuecomment-1200420882","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs5HuZbL","author":{"login":"ArthurVernon-TPG"},"authorAssociation":"NONE","body":"I hit this problem recently when including version 1.55 of PyGitHub into an application I was deploying to AWS Lambda. For some reason the _cffi_backend was not getting bundled in with the application. I tried things like importing cffi explicitly in my app.py file... nothing with that version seemed to work.\r\nI then reverted to PyGitHub version 1.54.1 and the problem went away (by not having the dependency chain in place)\r\n\r\n```bash\r\npipdeptree --reverse --packages cffi                                                                                     \r\ncffi==1.15.1\r\n  - cryptography==37.0.4 [requires: cffi>=1.12]\r\n    - moto==3.1.16 [requires: cryptography>=3.3.1]\r\n  - PyNaCl==1.5.0 [requires: cffi>=1.4.1]\r\n    - PyGithub==1.55 [requires: pynacl>=1.4.0]\r\n```\r\nDependencies for the earlier version did not include PyNaCl, so the application worked as expected.\r\n```bash\r\npipdeptree --packages PyGitHub \r\nPyGithub==1.54.1\r\n  - deprecated [required: Any, installed: 1.2.13]\r\n    - wrapt [required: >=1.10,<2, installed: 1.14.1]\r\n  - pyjwt [required: <2.0, installed: 1.7.1]\r\n  - requests [required: >=2.14.0, installed: 2.28.1]\r\n    - certifi [required: >=2017.4.17, installed: 2022.6.15]\r\n    - charset-normalizer [required: >=2,<3, installed: 2.1.0]\r\n    - idna [required: >=2.5,<4, installed: 3.3]\r\n    - urllib3 [required: >=1.21.1,<1.27, installed: 1.26.11]\r\n```\r\nI feel the problem is the build on one platform with the native interface does not port properly over to different target environments, ie you need a build for the specific environment you are targeting...\r\n\r\nSo the down side seems to be that (with the latest version) code portability is an issue.","createdAt":"2022-08-03T00:23:49Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":2}}],"url":"https://github.com/PyGithub/PyGithub/issues/2191#issuecomment-1203345099","viewerDidAuthor":false}],"createdAt":"2022-03-01T04:33:48Z","number":2191,"state":"OPEN","title":"getting errors when running script in a virtual environment","url":"https://github.com/PyGithub/PyGithub/issues/2191"},{"author":{"id":"MDQ6VXNlcjM1MzI4MjQ=","is_bot":false,"login":"fselmo","name":"felipe"},"body":"Running into issues trying to get a github repo by version with tag (`string`) value.\r\n\r\nhttps://github.com/PyGithub/PyGithub/blob/001970d4a828017f704f6744a5775b4207a6523c/github/Repository.py#L3084\r\n\r\nI'm pretty sure the above line needs to be `/releases/tag/{id}` not `/releases/tags/{id}`, as the latter url results in a `404 - Not Found`. Didn't look too hard at how the tests are written and why they pass but this seems like a bug.","comments":[{"id":"IC_kwDOADYVqs5CSu-_","author":{"login":"stale"},"authorAssociation":"NONE","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","createdAt":"2022-04-28T13:30:45Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/2182#issuecomment-1112207295","viewerDidAuthor":false}],"createdAt":"2022-02-22T01:53:11Z","number":2182,"state":"OPEN","title":"Issue getting a github repo by version","url":"https://github.com/PyGithub/PyGithub/issues/2182"},{"author":{"id":"MDQ6VXNlcjQ2NzU4ODY0","is_bot":false,"login":"mittal-umang","name":"Umang Mittal"},"body":"Currently there is no update git refs method in Repository.py which leads to commits not being associated to any branch on Github.\r\n\r\nthis request cannot be executed. https://docs.github.com/en/enterprise-server@2.22/rest/reference/git#update-a-reference","comments":[{"id":"IC_kwDOADYVqs5B5YX0","author":{"login":"rynkk"},"authorAssociation":"NONE","body":"Any chance of getting the pull request reviewed and merged?","createdAt":"2022-04-21T18:06:59Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/2181#issuecomment-1105561076","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs5vWmSr","author":{"login":"anilkumarmyla"},"authorAssociation":"NONE","body":"I landed on this exact issue when searching Repository class for updating a git ref and couldn't find a method. Then I did a code search for all PATCH apis and found one in GitRef.edit method that does exactly that. So this issue can be closed","createdAt":"2023-12-23T03:59:55Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/2181#issuecomment-1868194987","viewerDidAuthor":false}],"createdAt":"2022-02-21T23:15:54Z","number":2181,"state":"OPEN","title":"feat: no update git refs method","url":"https://github.com/PyGithub/PyGithub/issues/2181"},{"author":{"id":"MDQ6VXNlcjQ0NzAwMjY5","is_bot":false,"login":"EnricoMi","name":"Enrico Minack"},"body":"Over the last months, I have seen many very good pull requests from the community that fix blocking bugs or add new features, as well as many questions around issues using this library. This project is actively being used by [25k (public) Github repositories](https://github.com/PyGithub/PyGithub/network/dependents?package_id=UGFja2FnZS01MjQ4NDg2OQ%3D%3D).\r\n\r\nUnfortunately, this projects seems to be under-equipped with active maintainers. While the [MAINTAINERS](https://github.com/PyGithub/PyGithub/blob/master/MAINTAINERS) file lists six maintainers, there is only one lonely soul left driving this project. Blocking issues are mounting, ready pull requests are not reviewed, approved or merged, users getting annoyed by the lack of response while Github API is actively developing away from this Python implementation.\r\n\r\nThis is not sustainable.\r\n\r\nEveryone knows and appreciates that this is open-source software and maintainers are putting their free time into this project. But this is no excuse to not improve the situation.\r\n\r\n## How can the community help?\r\n\r\n💡 I want to collect things that the community can do to revive this project. Please leave your ideas of supporting this project below.\r\n\r\n### Things the community can do:\r\n- try hard to minimize the time effort for maintainers:\r\n  - try to investigate the issues yourself, create bug fixes and pull requests\r\n  - try to do the same for other users that don't or can't do it\r\n  - review others' pull requests so that they are more likely to get approved\r\n  - answer other users' question\r\n  - *ideally, maintainers only have to approve and merge pull requests,\r\n    as well as cut releases or give broad guidance on design decisions*\r\n- individuals backed by companies that use this Python package should consider to invest\r\n  some of their work time in contributing back to this open-source software project\r\n- experienced users can help new users getting started\r\n- watch all activities:\r\n  ![image](https://user-images.githubusercontent.com/44700269/154294600-fd1b3183-82df-4136-8001-ef09e2adb98a.png)\r\n- support maintainer or contributors financially\r\n  ![image](https://user-images.githubusercontent.com/44700269/154294202-7c43c439-3b62-494d-83c5-e49c3c5c6775.png)\r\n\r\n### Things maintainers can do:\r\n- make the base of maintainers broader, **pass maintainer rights over to active contributors**\r\n- delegate code reviews to community members that have contributed or code reviewed before\r\n  - invite them directly to specific issues or pull requests\r\n- get completed pull requests merged and released\r\n- focus on on-boarding new maintainers and code reviewers rather than fixing bugs\r\n\r\n## Who volunteers?\r\n\r\nPlease leave a comment below if you volunteer for any of these roles:\r\n- maintainer (a few hours per week would revive this project)\r\n- code reviewer\r\n  - get pull requests into a good shape so that maintainers have to spend less time and are more likely to approve\r\n- experienced user\r\n  - answer questions and resolve issues related to usage of the library, not bugs or new features","comments":[{"id":"IC_kwDOADYVqs5DY6mA","author":{"login":"mcauley-penney"},"authorAssociation":"NONE","body":"I'm a decently experienced user and I'd be willing to be assigned questions","createdAt":"2022-05-18T22:09:32Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/2178#issuecomment-1130604928","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs5E1hLZ","author":{"login":"theCapypara"},"authorAssociation":"CONTRIBUTOR","body":"Hi! I would also be ready to help, I'm not super familiar with this project yet, aside from some minor work for adding autolink references (#2016), but I would still like to help out however I can.\r\n\r\nCan any of the active maintainers say something about the future of this project? Does Github itself have maybe in interest in helping maintaining this project?","createdAt":"2022-06-14T08:31:57Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/2178#issuecomment-1154880217","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs5LOFwI","author":{"login":"EnricoMi"},"authorAssociation":"COLLABORATOR","body":"This project is so actively been used, so many questions, issues and open pull requests. But no attempt is done by the maintainers to open it up to the community.\r\n\r\n[MAINTAINERS](https://github.com/PyGithub/PyGithub/blob/master/MAINTAINERS), please mark this project as dead so the community is not wasting more time here.\r\n\r\nCommunity, feel free to fork this repository, get all the good work merged and released there. Post your maintained fork here: https://github.com/PyGithub/PyGithub/discussions/2205","createdAt":"2022-09-29T09:01:53Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/2178#issuecomment-1261984776","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs5LR8v3","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"Copying my answer from #2320\r\n\r\nNo, this project is not dead. Simply put, the maintainers are busy with their lives. If any of you want to get this project moving, consider joining the team or sponsoring via Github sponsors.\r\n\r\nHowever I can get the PR review going when I have some free time towards the end of the year. In particular which ones would like to have first and released to PyPI? Let me know so I can prioritize.","createdAt":"2022-09-30T01:22:23Z","includesCreatedEdit":true,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":1}}],"url":"https://github.com/PyGithub/PyGithub/issues/2178#issuecomment-1262996471","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs5LSqoW","author":{"login":"EnricoMi"},"authorAssociation":"COLLABORATOR","body":"### Lets use reactions on issue and pull request _descriptions_ for prioritization\r\n\r\nHere is a dashboard of top issues and PRs: #3050\r\n\r\nThe community should go to their most wanted pull requests and use the emoji button\r\non **the pull request description** to add a :+1::\r\n![grafik](https://user-images.githubusercontent.com/44700269/193209089-69daccec-0089-4bb5-a44a-5fa52ecf8fc0.png)\r\n![grafik](https://user-images.githubusercontent.com/44700269/193209893-c322e27e-76df-43fd-874c-b00234afeec4.png)\r\n","createdAt":"2022-09-30T06:59:56Z","includesCreatedEdit":true,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":1}}],"url":"https://github.com/PyGithub/PyGithub/issues/2178#issuecomment-1263184406","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs5LTCFw","author":{"login":"lelegard"},"authorAssociation":"NONE","body":"Hi @sfdye, following up on #2320,\r\n\r\n> No, this project is not dead. Simply put, the maintainers are busy with their lives. If any of you want to get this project moving, consider joining the team or sponsoring via Github sponsors.\r\n\r\nAs users of PyGithub, we are all Github users and, consequently, open source developers and we perfectly understand the dilemma between open source projects and life.\r\n\r\nJoining the team definitely makes sense for those who are experienced Python developers. However, some users probably manage GitHub projects in another language and only have basic Python practice to write automation scripts, without the required Python track record to be accepted in the PyPI community. I consider myself as one of those.\r\n\r\nCompanies using professional GitHub accounts should definitely sponsor the project. Honestly, GitHub itself should sponsor or even take over the project. Your project is a support layer for _their_ API, just like GitHub desktop, GitHub mobile app, GitHub CLI which are now maintained by GitHub.","createdAt":"2022-09-30T08:36:04Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"HEART","users":{"totalCount":7}}],"url":"https://github.com/PyGithub/PyGithub/issues/2178#issuecomment-1263280496","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs5MG-Jk","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"I will be on vacation from today, but before I go, let me kick off the cadence by fixing the failing CI in #2330. This should unblock the review of many PR because previously the CI failures are almost all related to the dependency issues which I have fixed now. Once you update your branch from master, your build should hopefully be green.","createdAt":"2022-10-13T00:56:13Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"ROCKET","users":{"totalCount":3}}],"url":"https://github.com/PyGithub/PyGithub/issues/2178#issuecomment-1276895844","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs5MHBrf","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"Also I just released [v1.56](https://pypi.org/project/PyGithub/#history)","createdAt":"2022-10-13T01:25:57Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"HOORAY","users":{"totalCount":9}}],"url":"https://github.com/PyGithub/PyGithub/issues/2178#issuecomment-1276910303","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs5gCM6G","author":{"login":"trim21"},"authorAssociation":"CONTRIBUTOR","body":"I'd like to become a maintainer to help review and merge pr ","createdAt":"2023-06-28T10:54:54Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/2178#issuecomment-1611189894","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs5gKEIo","author":{"login":"EnricoMi"},"authorAssociation":"COLLABORATOR","body":"@mcauley-penney @theCapypara please watch this project (at least issues and discussions), pick questions as you like:\r\n![image](https://github.com/PyGithub/PyGithub/assets/44700269/0b53151a-f199-4c4b-83f1-910f5133d714)\r\n\r\nSee you around!","createdAt":"2023-06-29T14:09:37Z","includesCreatedEdit":true,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":1}}],"url":"https://github.com/PyGithub/PyGithub/issues/2178#issuecomment-1613251112","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs5q34oo","author":{"login":"lucasgonze"},"authorAssociation":"NONE","body":"I think the answer is that yes, it is dead. It is so dead that the founders can't be bothered to archive it or pass control to new maintainers.\r\n\r\nI'm putting this in a comment to warn others who may be trying to figure this out. Woe is me. Do not do as I have done - scaffold a bunch of PyGithub code and then find out that it is way behind the actual API.","createdAt":"2023-11-03T20:10:27Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":4}}],"url":"https://github.com/PyGithub/PyGithub/issues/2178#issuecomment-1793034792","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs50UTFP","author":{"login":"tomups"},"authorAssociation":"NONE","body":"@lucasgonze I have seen @EnricoMi has released a new version 3 weeks ago. So not dead?\r\n\r\nBut @EnricoMi is the claim that PyGithub is way behind the actual github API warranted? I was planning to start using PyGithub in a new project. ","createdAt":"2024-02-18T23:11:22Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/2178#issuecomment-1951478095","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs50Wm5z","author":{"login":"EnricoMi"},"authorAssociation":"COLLABORATOR","body":"PyGithub is and always will be behind the Github API as (maybe countless) Github developers move the API forward and PyGithub follows. The speed to catch up is determined by\r\n1) the community adopting features\r\n2) maintainers reviewing, merging and releasing\r\n\r\nRight now, PyGithub has only one active maintainer, so current pace could be improved by\r\n1) having the community do more reviews to reduce effort for maintainers\r\n2) volunteer as a maintainer to govern code quality, shape design and improve overall architecture\r\n\r\nDedicating one hour per day would greatly move this project forward, even one hour per week would be a boost.","createdAt":"2024-02-19T09:53:58Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":6}}],"url":"https://github.com/PyGithub/PyGithub/issues/2178#issuecomment-1952083571","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs57OlLV","author":{"login":"devstein"},"authorAssociation":"NONE","body":"If helpful, I built [Dosu](https://dosu.dev/) to help with community support on issues and discussion. It doesn't replace a maintainer though, only makes information more accessible to the community","createdAt":"2024-04-20T00:23:41Z","includesCreatedEdit":true,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_DOWN","users":{"totalCount":7}}],"url":"https://github.com/PyGithub/PyGithub/issues/2178#issuecomment-2067419861","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs6ts3Hf","author":{"login":"MarkForesta"},"authorAssociation":"NONE","body":"@EnricoMi I can review a few PRs if it will help. I have used the library quite extensively at work and feel comfortable being a first look for any of the easy ones. ","createdAt":"2025-05-27T21:51:10Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/2178#issuecomment-2914218463","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs6vb5WQ","author":{"login":"EnricoMi"},"authorAssociation":"COLLABORATOR","body":"@MarkForesta that would certainly help! A good start would be to review\n- pull requests for top issues: https://github.com/PyGithub/PyGithub/issues/3050\n- top pull requests: https://github.com/PyGithub/PyGithub/issues/3050\n- [recently updated pull requests](https://github.com/PyGithub/PyGithub/pulls?q=is%3Apr+is%3Aopen+sort%3Aupdated-desc)","createdAt":"2025-06-05T08:55:52Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/2178#issuecomment-2943325584","viewerDidAuthor":false}],"createdAt":"2022-02-16T14:49:30Z","number":2178,"state":"OPEN","title":"Is the PyGithub project dead? How can the community help?","url":"https://github.com/PyGithub/PyGithub/issues/2178"},{"author":{"id":"MDQ6VXNlcjIzMjExOTky","is_bot":false,"login":"alextsakpinis","name":"Alexandros Tsakpinis"},"body":"Hello community,\r\nI am using the `search_code` function to find repositories which used a specific term in a file. When iterating over the result within a for loop and just printing the current counter to see how far the loop goes, the program does **not** reach `result.totalCount` as expected. It stops more or less randomly somewhere before. \r\n\r\n```\r\nquery = \"\\\"known_third_party = \\\"kedro\\\"\\\" in:file language:toml\"\r\ncounter = 0\r\nresult = github.search_code(query)\r\nprint(str(result.totalCount))\r\nfor code in result:\r\n    counter += 1\r\n    print(counter, code.repository.clone_url)\r\n    time.sleep(1)\r\n```\r\n\r\nExecuting the above code three times in a row, the totalCount was always 340, but the program stopped at 280, 311 and 318.\r\n\r\nCan you please help me with that? Why does the loop not reach the last item?\r\n\r\n\r\nThanks a lot for your help!\r\n\r\nWith best regards,\r\nAlex\r\n\r\n\r\n","comments":[{"id":"IC_kwDOADYVqs49ubqQ","author":{"login":"DSoko2"},"authorAssociation":"NONE","body":"I am facing the same issue. So far I observed two causes:\r\n\r\n- Github API response: The response for a result page sometimes contains less items than the page should contain. E.g., if per_page is set to 30, sometimes a request for an intermediate page returns less items. The paginated list implementation ignores that fact and assumes the page is complete. Repeating the same request manually shows that sometimes the full page is returned, and sometimes subsets of different length. Strangely, even if the page is not completely returned, the incomplete_results header is false.\r\n- If the iterator's next call is called inside some custom logic to retry on rate limit exceeded errors, a RateLimitExceededException breaks (completes?) the iterator, i.e., repeating next(iterator) after a RateLimitExceededException always raises StopIteration.\r\n\r\nI am not sure how to solve this issues idiomatically, perhaps a maintainer can help us?","createdAt":"2022-02-10T22:10:37Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/2166#issuecomment-1035582096","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs49unFz","author":{"login":"EnricoMi"},"authorAssociation":"COLLABORATOR","body":"Well, the first issue is merely on GitHub's side. Please raise an issue with them.\r\n\r\nI agree that the second issue should be handled by the custom logic correctly. Can you provide a pointer to the code, please?","createdAt":"2022-02-10T23:14:01Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/2166#issuecomment-1035628915","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs49utB0","author":{"login":"DSoko2"},"authorAssociation":"NONE","body":"Definitely, the first problem should be fixed at GitHub; however, providing an abstraction with wrong behavior prevents the use of PyGitHub... I would appreciate if the implementation would (have an option to) transparently retry loading incomplete pages. Alternatively at least an exception should be thrown if such a known abstraction breaking result is returned by GitHub. This would improve the robustness of the PaginatedList and would allow users to notice when things go wrong.\r\n\r\nRegarding the second problem: The iterator is generated here. If `self._grow` threw an Exception, calling `__next__` on the same iterator always raises StopIteration. I would expect that it retries `self._grow`.\r\nhttps://github.com/PyGithub/PyGithub/blob/001970d4a828017f704f6744a5775b4207a6523c/github/PaginatedList.py#L53-L57\r\n\r\n---\r\n\r\nTo everyone else having the problem, as a workaround for this issue I ended up using such method:\r\n\r\n```python\r\ndef fetch_paginated_list(list):\r\n    result = []\r\n    page_size = list._PaginatedList__requester.per_page\r\n    pages = (list.totalCount - 1) // page_size + 1\r\n    for page in range(0, pages):\r\n        # Retry loading page until all elements have been returned\r\n        while len(result) < min((page+1) * page_size, list.totalCount):\r\n            # if required due to weird condition: https://github.com/PyGithub/PyGithub/blob/001970d4a828017f704f6744a5775b4207a6523c/github/PaginatedList.py#L242\r\n            elements = list.get_page(-1 if page == 0 else page)\r\n            if len(elements) == page_size or page == pages-1 and len(elements) == list.totalCount % page_size:\r\n                result.extend(elements)\r\n    return result\r\n\r\nresult = fetch_paginated_list(github.search_code(query))\r\n```\r\nIt loads all pages, transparently retrying loading incomplete pages until all elements have been returned. It directly returns a list of all elements. The PaginatedList given as parameter does not internally store these elements, which means that using the iterator of the PaginatedList after using this workaround method will still have the faulty behavior. (Note that in my source I use a custom retry on rate limit exceeded logic wrapping the list.get_page call, i.e., that line is in my case `elements = retry_on_rate_limit(lambda: list.get_page(-1 if page == 0 else page))`).","createdAt":"2022-02-10T23:50:55Z","includesCreatedEdit":true,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"HEART","users":{"totalCount":1}}],"url":"https://github.com/PyGithub/PyGithub/issues/2166#issuecomment-1035653236","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs5Bmigw","author":{"login":"stale"},"authorAssociation":"NONE","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","createdAt":"2022-04-16T09:39:35Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/2166#issuecomment-1100621872","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs5h0EP_","author":{"login":"smonsef"},"authorAssociation":"NONE","body":"I have recently faced this issue too. \r\nHas anyone been working on a fix? ","createdAt":"2023-07-18T21:48:51Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/2166#issuecomment-1641038847","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs5h2H6b","author":{"login":"EnricoMi"},"authorAssociation":"COLLABORATOR","body":"With `2.0.0rc1`, rate limit errors are retried by PyGithub, and thus while iterating over the paginated list. So your second point should be resolved.\r\n\r\nReloading a page that seems incomplete until a complete page is retrieved sounds like a bad idea, trying to fix undesired behaviour of the Github API. If a page is never completely returned, that will turn into an infinite loop.\r\n\r\nThe paginated list relies on Github API indicating the next page nor not. If a page is retrieved without an exception, it is considered complete. If there is a next page indicated, the iteration continues.\r\n\r\nGithub Support always claims that search is an expensive API to call and they try to provide best effort only. The result is not guaranteed to be complete or consistent, so that list of results returned by PyGithub should be taken with the same guarantees: as good as it gets.","createdAt":"2023-07-19T07:38:45Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/2166#issuecomment-1641578139","viewerDidAuthor":false}],"createdAt":"2022-01-28T16:15:20Z","number":2166,"state":"OPEN","title":"Non deterministic behavior when iterating over paginatedList after calling search_code","url":"https://github.com/PyGithub/PyGithub/issues/2166"},{"author":{"id":"MDQ6VXNlcjMyMzc5MzY=","is_bot":false,"login":"mriedem","name":"Matt Riedemann"},"body":"Looks like the same root issue as #1399 but that was closed and I can't re-open it (not sure why it was closed).\r\n\r\nThis is with pygithub 1.55:\r\n\r\n```\r\n  File \"/home/travis/virtualenv/python3.8.1/lib/python3.8/site-packages/github/MainClass.py\", line 256, in get_user\r\n    headers, data = self.__requester.requestJsonAndCheck(\r\n  File \"/home/travis/virtualenv/python3.8.1/lib/python3.8/site-packages/github/Requester.py\", line 353, in requestJsonAndCheck\r\n    return self.__check(\r\n  File \"/home/travis/virtualenv/python3.8.1/lib/python3.8/site-packages/github/Requester.py\", line 378, in __check\r\n    raise self.__createException(status, responseHeaders, output)\r\n  File \"/home/travis/virtualenv/python3.8.1/lib/python3.8/site-packages/github/Requester.py\", line 418, in __createException\r\n    elif status == 403 and output.get(\"message\").startswith(\r\nAttributeError: 'NoneType' object has no attribute 'startswith'\r\n```","comments":[{"id":"IC_kwDOADYVqs48VoM_","author":{"login":"EnricoMi"},"authorAssociation":"COLLABORATOR","body":"@mriedem I have sketched out a fix for this and more possible situations where `__createException` may fail. Adds tests.","createdAt":"2022-01-13T16:32:04Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/2158#issuecomment-1012302655","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs5Bmihi","author":{"login":"stale"},"authorAssociation":"NONE","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","createdAt":"2022-04-16T09:39:47Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/2158#issuecomment-1100621922","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs5Wb7b4","author":{"login":"mriedem"},"authorAssociation":"NONE","body":"Still hitting this with 1.58.","createdAt":"2023-03-01T13:33:35Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/2158#issuecomment-1450161912","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs5qojKe","author":{"login":"suncle1993"},"authorAssociation":"NONE","body":"hitting this with 1.54.","createdAt":"2023-11-01T14:03:55Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/2158#issuecomment-1789014686","viewerDidAuthor":false}],"createdAt":"2022-01-13T15:32:14Z","number":2158,"state":"OPEN","title":"AttributeError: 'NoneType' object has no attribute 'startswith' from get_user with 403 response","url":"https://github.com/PyGithub/PyGithub/issues/2158"},{"author":{"id":"MDQ6VXNlcjQ4NTQ5MjU2","is_bot":false,"login":"kumar10725","name":"Kumar Shivam"},"body":"This an amazing project for interacting with GitHub using python.\r\nIs there any plans to integrate Projects(Beta) support in near future?","comments":[{"id":"IC_kwDOADYVqs49G5d1","author":{"login":"wmacmillan"},"authorAssociation":"NONE","body":"I second this question.","createdAt":"2022-01-30T19:56:25Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/2140#issuecomment-1025218421","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs49pv2I","author":{"login":"alexanderkainsky"},"authorAssociation":"NONE","body":"Third","createdAt":"2022-02-10T00:30:23Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/2140#issuecomment-1034354056","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs5BdDzW","author":{"login":"snaow"},"authorAssociation":"NONE","body":"Forth","createdAt":"2022-04-13T14:42:16Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/2140#issuecomment-1098136790","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs5BdRlN","author":{"login":"kumar10725"},"authorAssociation":"NONE","body":"I see there is quite a interest on this topic. I worked up a code based on graphql. I'll clean it up and create a repo to share with everyone by this weekend. Hope, I can find some contributors in future too.","createdAt":"2022-04-13T15:29:39Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"HEART","users":{"totalCount":1}}],"url":"https://github.com/PyGithub/PyGithub/issues/2140#issuecomment-1098193229","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs5Klv8q","author":{"login":"alexanderkainsky"},"authorAssociation":"NONE","body":"Any progress on this?","createdAt":"2022-09-19T18:46:06Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/2140#issuecomment-1251409706","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs5Ss19V","author":{"login":"benfarahmand"},"authorAssociation":"NONE","body":"I'm also interested in this as my org uses the projects beta. Has there been any progress on this?","createdAt":"2023-01-18T18:00:13Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/2140#issuecomment-1387487061","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs5Xp4zY","author":{"login":"festavillo"},"authorAssociation":"NONE","body":"I'm also really interested in creating issues, and assign them to GH Projects.\r\nThanks for your commitment.!!","createdAt":"2023-03-15T18:51:29Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":2}}],"url":"https://github.com/PyGithub/PyGithub/issues/2140#issuecomment-1470598360","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs5Yb_Ht","author":{"login":"nexus1203"},"authorAssociation":"NONE","body":"I am working on a similar project. Its still in its basic form and can only read from projects but I have plans for implementing the more functions in the future as I find more time to work on this project. Contributions are also welcome. \r\n\r\nhttps://github.com/nexus1203/pygithub_gql","createdAt":"2023-03-25T05:37:35Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/2140#issuecomment-1483731437","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs5ZvxfO","author":{"login":"vavalomi"},"authorAssociation":"NONE","body":"[Here's](https://github.com/vavalomi/pygithubclient) one working solution that I came up with, There are examples of how to add or modify project cards, and all GraphQL queries can be easily implemented following those examples.","createdAt":"2023-04-12T17:52:44Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/2140#issuecomment-1505695694","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs5hJFLp","author":{"login":"Miou-zora"},"authorAssociation":"NONE","body":"Currently there is no way to create a github project because there is only the \"beta\" version of it. Can someone integrate github project beta ?","createdAt":"2023-07-10T21:42:36Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/2140#issuecomment-1629770473","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs5hv8a8","author":{"login":"EnricoMi"},"authorAssociation":"COLLABORATOR","body":"Is there a REST API for Projects? Please share a link to the Github docs.","createdAt":"2023-07-18T10:27:06Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/2140#issuecomment-1639958204","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs5qyz5R","author":{"login":"aeturrell"},"authorAssociation":"NONE","body":"Also interested in this!","createdAt":"2023-11-02T23:34:55Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/2140#issuecomment-1791704657","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs5t2XO5","author":{"login":"EnricoMi"},"authorAssociation":"COLLABORATOR","body":"Looks like this is a GraphQL API. Luckily, PyGithub now has its first GraphQL call, see https://github.com/PyGithub/PyGithub/commit/232df79a2947dc96363bdc6f51a6f446ff2b241f#diff-90017b18548bd848900b7cffd7fe86a610dc20e5d228663dfb429a47cdf65a20R767-R772 for reference.","createdAt":"2023-12-06T14:12:24Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"HOORAY","users":{"totalCount":2}}],"url":"https://github.com/PyGithub/PyGithub/issues/2140#issuecomment-1842967481","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs5-QeJS","author":{"login":"HaoLiangPao"},"authorAssociation":"NONE","body":"Would like to have this feature enabled. I am wondering if it can be tricky as the GraphQL endpoints may have its own configurations for enterprise github service? (How are we going to deal with the extra authentication that way then?)","createdAt":"2024-05-17T19:28:17Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/2140#issuecomment-2118246994","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs5_Glrc","author":{"login":"adambuttrick"},"authorAssociation":"NONE","body":"GitHub Projects (classic), which are the only version supported in PyGithub, now have a sunset notice:\r\n\r\nhttps://github.blog/changelog/2024-05-23-sunset-notice-projects-classic/\r\n\r\nCreating of new classic projects has been disabled, with full removal of all classic project functionality planned for November 19, 2024. It would be great to have the calls from [Project class](https://pygithub.readthedocs.io/en/latest/github_objects/Project.html) implemented using the new GraphQL API before this occurs.\r\n","createdAt":"2024-05-26T23:35:21Z","includesCreatedEdit":true,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/2140#issuecomment-2132433628","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs6Q1zIy","author":{"login":"zbrown001"},"authorAssociation":"NONE","body":"Is there any update on this? I have having to write my GraphQL queries by hand to access projects. Are there plans to get the Project class switched over to ProjectsV2?","createdAt":"2024-10-22T18:58:32Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/2140#issuecomment-2430022194","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs6RcPnw","author":{"login":"EnricoMi"},"authorAssociation":"COLLABORATOR","body":"Haven't seen any pull request for this, any volunteers?","createdAt":"2024-10-27T17:02:49Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/2140#issuecomment-2440100336","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs6sKcCG","author":{"login":"alexis-belmonte"},"authorAssociation":"NONE","body":"I am currently attempting to implement the support for Projects V2 which relies on the GraphQL API endpoint. I need it for a long-term group project, so I might as well contribute to something that everyone can also benefit from once it's done :]\n\nNot promising anything, but progress can be seen on [my fork repo](https://github.com/alexis-belmonte/PyGithub) if you're curious.","createdAt":"2025-05-17T14:08:33Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/2140#issuecomment-2888417414","viewerDidAuthor":false}],"createdAt":"2022-01-06T02:47:50Z","number":2140,"state":"OPEN","title":"Support for projects(Beta)","url":"https://github.com/PyGithub/PyGithub/issues/2140"},{"author":{"id":"MDQ6VXNlcjMzMTgyMjM=","is_bot":false,"login":"Bluscream","name":"Bluscream"},"body":"Using https://pygithub.readthedocs.io/en/latest/examples/Webhook.html i get the following error:\r\n\r\n```\r\nS:\\Projects\\Python\\github-bot\\venv\\Scripts\\python.exe S:/Projects/Python/github-bot/main.py\r\nTraceback (most recent call last):\r\n  File \"S:\\Projects\\Python\\github-bot\\main.py\", line 73, in <module>\r\n    create_webhook()\r\n  File \"S:\\Projects\\Python\\github-bot\\main.py\", line 66, in create_webhook\r\n    repo = g.get_repo(\"{owner}/{repo_name}\".format(owner=OWNER, repo_name=REPO_NAME))\r\n  File \"S:\\Projects\\Python\\github-bot\\venv\\lib\\site-packages\\github\\MainClass.py\", line 330, in get_repo\r\n    headers, data = self.__requester.requestJsonAndCheck(\"GET\", url)\r\n  File \"S:\\Projects\\Python\\github-bot\\venv\\lib\\site-packages\\github\\Requester.py\", line 353, in requestJsonAndCheck\r\n    return self.__check(\r\n  File \"S:\\Projects\\Python\\github-bot\\venv\\lib\\site-packages\\github\\Requester.py\", line 378, in __check\r\n    raise self.__createException(status, responseHeaders, output)\r\ngithub.GithubException.UnknownObjectException: 404 {\"message\": \"Not Found\", \"documentation_url\": \"https://docs.github.com/rest/reference/repos#get-a-repository\"}\r\n```","comments":[{"id":"IC_kwDOADYVqs4-BGff","author":{"login":"0jk6"},"authorAssociation":"NONE","body":"hey, did you fix this error? I'm getting the same error when updating a  file on my git repository.","createdAt":"2022-02-15T16:18:16Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/2126#issuecomment-1040476127","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs4-CxdT","author":{"login":"Bluscream"},"authorAssociation":"NONE","body":"I didn't. Sorry, i gave up\n","createdAt":"2022-02-15T23:48:52Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/2126#issuecomment-1040914259","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs4_OLOq","author":{"login":"spralja"},"authorAssociation":"NONE","body":"I hade the same issue:\r\n* enabling the `write:web_hook` scope on the GitHub API token fixed the issue","createdAt":"2022-03-07T13:21:12Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/2126#issuecomment-1060680618","viewerDidAuthor":false}],"createdAt":"2021-12-11T22:10:24Z","number":2126,"state":"OPEN","title":"Webhook: github.GithubException.UnknownObjectException: 404","url":"https://github.com/PyGithub/PyGithub/issues/2126"},{"author":{"id":"MDQ6VXNlcjQ1MjQ4NzQ=","is_bot":false,"login":"jeremyd2019","name":""},"body":"I ran into a few methods that I needed that are not yet present.\r\n\r\n```python\r\ndef get_org_installation(self, org):\r\n    \"\"\"\r\n    :calls: `GET /orgs/{org}/installation <https://docs.github.com/en/rest/reference/apps#get-an-organization-installation-for-the-authenticated-app>`_\r\n    :param org: str\r\n    :rtype: :class:`github.Installation.Installation`\r\n    \"\"\"\r\n    headers = {\r\n        \"Authorization\": f\"Bearer {self.create_jwt()}\",\r\n        \"Accept\": Consts.mediaTypeIntegrationPreview,\r\n        \"User-Agent\": \"PyGithub/Python\",\r\n    }\r\n\r\n    response = requests.get(\r\n        f\"{self.base_url}/orgs/{org}/installation\",\r\n        headers=headers,\r\n    )\r\n    response_dict = response.json()\r\n    return Installation.Installation(None, headers, response_dict, True)\r\n\r\nGithubIntegration.get_org_installation = get_org_installation\r\n\r\nclass RunnerToken(github.GithubObject.NonCompletableGithubObject):\r\n    def __repr__(self):\r\n        return self.get__repr__({\"expires_at\": self._expires_at.value})\r\n\r\n    @property\r\n    def token(self):\r\n        \"\"\"\r\n        :type: string\r\n        \"\"\"\r\n        return self._token.value\r\n\r\n    @property\r\n    def expires_at(self):\r\n        \"\"\"\r\n        :type: datetime\r\n        \"\"\"\r\n        return self._expires_at.value\r\n\r\n    def _initAttributes(self):\r\n        self._token = github.GithubObject.NotSet\r\n        self._expires_at = github.GithubObject.NotSet\r\n\r\n    def _useAttributes(self, attributes):\r\n        if \"token\" in attributes:  # pragma no branch\r\n            self._token = self._makeStringAttribute(attributes[\"token\"])\r\n        if \"expires_at\" in attributes:  # pragma no branch\r\n            self._expires_at = self._makeDatetimeAttribute(\r\n                re.sub(r'\\.\\d{3}Z$', 'Z', attributes[\"expires_at\"])\r\n            )\r\n\r\n\r\ndef get_self_hosted_runner_registration_token(self):\r\n    \"\"\"\r\n    :calls: `POST /orgs/{owner}/actions/runners/registration-token <https://docs.github.com/en/rest/reference/actions#create-a-registration-token-for-an-organization>`_\r\n    :rtype: :class:`RunnerToken`\r\n    \"\"\"\r\n    headers, data = self._requester.requestJsonAndCheck(\r\n        \"POST\", f\"{self.url}/actions/runners/registration-token\"\r\n    )\r\n    return RunnerToken(None, headers, data, True)\r\n\r\ndef get_self_hosted_runner_remove_token(self):\r\n    \"\"\"\r\n    :calls: `POST /orgs/{owner}/actions/runners/remove-token <https://docs.github.com/en/rest/reference/actions#create-a-remove-token-for-an-organization>`_\r\n    :rtype: :class:`RunnerToken`\r\n    \"\"\"\r\n    headers, data = self._requester.requestJsonAndCheck(\r\n        \"POST\", f\"{self.url}/actions/runners/remove-token\"\r\n    )\r\n    return RunnerToken(None, headers, data, True)\r\n\r\ngithub.Organization.Organization.get_self_hosted_runner_registration_token = get_self_hosted_runner_registration_token\r\ngithub.Organization.Organization.get_self_hosted_runner_remove_token = get_self_hosted_runner_remove_token\r\n\r\n```","comments":[{"id":"IC_kwDOADYVqs5Bmiic","author":{"login":"stale"},"authorAssociation":"NONE","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","createdAt":"2022-04-16T09:40:00Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/2117#issuecomment-1100621980","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs5hjbnJ","author":{"login":"jeremyd2019"},"authorAssociation":"NONE","body":"It looks like `get_org_installation` was added in #1986.  The ability to get organization-scoped runner tokens does not yet seem to be added though.","createdAt":"2023-07-15T06:02:47Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/2117#issuecomment-1636678089","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs5hoI2i","author":{"login":"EnricoMi"},"authorAssociation":"COLLABORATOR","body":"Looks like there is repo-scoped runners, but they lack support for tokens as well.","createdAt":"2023-07-17T11:10:54Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/2117#issuecomment-1637911970","viewerDidAuthor":false}],"createdAt":"2021-11-29T05:28:25Z","number":2117,"state":"OPEN","title":"Organization self-hosted runner registration missing","url":"https://github.com/PyGithub/PyGithub/issues/2117"},{"author":{"id":"MDQ6VXNlcjQzNzQ3MQ==","is_bot":false,"login":"jake-nz","name":"Jake Crosby"},"body":"From my reading of the code, it seems that posting a Reaction to an Issue Comment results in two unnecessary get requests. I haven't been able to watch the actual network traffic to verify this though.\r\n\r\nIn the following example it looks like the two get requests will be mabe but are not needed.\r\n```py\r\n# No API call because of lazy=True\r\nrepo = github.get_repo(repo_name, lazy=True)\r\n# GET: /repos/{owner}/{repo}/issues/{id}\r\nissue = repo.get_issue(number=issue_id)\r\n# GET: /repos/{owner}/{repo}/issues/comments/{id}\r\ncomment = issue.get_comment(comment_id)\r\n# POST: /repos/{owner}/{repo}/issues/comments/{id}/reactions\r\nreaction = comment.create_reaction(reaction_type)\r\n```\r\n\r\nIs this right?\r\nCan we add `lazy` to all get methods?","comments":[{"id":"IC_kwDOADYVqs46SNOQ","author":{"login":"xmo-odoo"},"authorAssociation":"CONTRIBUTOR","body":">  Can we add lazy to all get methods?\r\n\r\nA possible alternative would be to provide easier ways to create child objects directly e.g. here the entire traversal is useless what you really want is to create an `IssueComment` directly from the bare minimum metadata because you're assuming / asserting the existence of the issue and comment id (because you got the information from somewhere else e.g. a webhook).","createdAt":"2021-11-24T12:53:54Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"HEART","users":{"totalCount":2}}],"url":"https://github.com/PyGithub/PyGithub/issues/2094#issuecomment-977851280","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs5BmoV6","author":{"login":"stale"},"authorAssociation":"NONE","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","createdAt":"2022-04-16T11:38:37Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/2094#issuecomment-1100645754","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs5BwuNZ","author":{"login":"jake-nz"},"authorAssociation":"NONE","body":"I like @xmo-odoo's idea too!\r\n\r\nIf I can get feedback from the maintainers on this aproach and an indication that the project is still active.\r\nIf I submit a PR for this, is it likely to get reviewed and accepted?","createdAt":"2022-04-20T00:22:58Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/2094#issuecomment-1103291225","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs5fLKua","author":{"login":"EnricoMi"},"authorAssociation":"COLLABORATOR","body":"I'd go for adding `lazy` to `get_issue` and `get_comment`. Because that way, many more methods on `Issue` and `IssueComment` can be used without firing API requests.\r\n\r\nIt's worth creating a PR.","createdAt":"2023-06-19T08:43:17Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/2094#issuecomment-1596763034","viewerDidAuthor":false}],"createdAt":"2021-10-28T03:35:01Z","number":2094,"state":"OPEN","title":"Unnecessary API requests","url":"https://github.com/PyGithub/PyGithub/issues/2094"},{"author":{"id":"MDQ6VXNlcjEyNDUwMzgx","is_bot":false,"login":"carlescufi","name":"Carles Cufí"},"body":"It looks like there is an [API for Security Advisories](https://docs.github.com/en/graphql/reference/objects#securityadvisory) available from GitHub. Would it be possible to extend the excellent PyGithub to support these?\r\nI realize those seem only available in GraphQL and not in standard REST.","comments":[{"id":"IC_kwDOADYVqs44dtf3","author":{"login":"s-t-e-v-e-n-k"},"authorAssociation":"COLLABORATOR","body":"We only support the REST API, and not the GraphQL API, so we can't make use of that API, sorry.","createdAt":"2021-10-20T04:11:39Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":1}}],"url":"https://github.com/PyGithub/PyGithub/issues/2082#issuecomment-947312631","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs5t2YaK","author":{"login":"EnricoMi"},"authorAssociation":"COLLABORATOR","body":"PyGithub now has its first GraphQL call, see https://github.com/PyGithub/PyGithub/commit/232df79a2947dc96363bdc6f51a6f446ff2b241f#diff-90017b18548bd848900b7cffd7fe86a610dc20e5d228663dfb429a47cdf65a20R767-R772 for reference.","createdAt":"2023-12-06T14:15:01Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/2082#issuecomment-1842972298","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs5t2ZEN","author":{"login":"EnricoMi"},"authorAssociation":"COLLABORATOR","body":"Plus, have you checked out recently added repository and global advisory (REST API)?","createdAt":"2023-12-06T14:16:38Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/2082#issuecomment-1842974989","viewerDidAuthor":false}],"createdAt":"2021-10-19T12:04:05Z","number":2082,"state":"OPEN","title":"Support for listing Security Advisories","url":"https://github.com/PyGithub/PyGithub/issues/2082"},{"author":{"id":"MDQ6VXNlcjQ0MDYy","is_bot":false,"login":"codyaray","name":"Cody A. Ray"},"body":"We'd like to enable Secret Scanning programmatically in our repos. This is available via the API already: \r\nhttps://docs.github.com/en/rest/reference/repos#update-a-repository\r\n\r\nCan you update this to support enable/disable of secret scanning? Thanks!","comments":[{"id":"IC_kwDOADYVqs43-hU_","author":{"login":"zkoppert"},"authorAssociation":"COLLABORATOR","body":"Looks like this is being worked on here: https://github.com/PyGithub/PyGithub/pull/2063","createdAt":"2021-10-08T21:54:18Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"HOORAY","users":{"totalCount":1}}],"url":"https://github.com/PyGithub/PyGithub/issues/2070#issuecomment-939136319","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs44AO5D","author":{"login":"codyaray"},"authorAssociation":"NONE","body":"@zkoppert I'm not sure this PR gives us what we want. This is read code scanning alerts. But that's different than ability to opt-in to GitHub Secret Scanning, which seems like a different configuration option","createdAt":"2021-10-11T00:31:25Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/2070#issuecomment-939585091","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs44CoRh","author":{"login":"zkoppert"},"authorAssociation":"COLLABORATOR","body":"oh! Thanks for making the difference clear to me. I think I was reading through them too quickly!","createdAt":"2021-10-11T17:22:09Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/2070#issuecomment-940213345","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs5ArU2c","author":{"login":"codyaray"},"authorAssociation":"NONE","body":"Any chance that we'll pick up the ability to opt-in to Github Secret Scanning? 🤞 Thanks!","createdAt":"2022-03-31T20:52:08Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/2070#issuecomment-1085099420","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs5AwI7A","author":{"login":"zkoppert"},"authorAssociation":"COLLABORATOR","body":"I don't see any maintainers picking this up but pull request would be welcome if you have the capacity to open one.","createdAt":"2022-04-01T21:55:27Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/2070#issuecomment-1086361280","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs5oiaRG","author":{"login":"Cr0n1c"},"authorAssociation":"NONE","body":"+1 to adding the secret scanning alerts","createdAt":"2023-10-09T20:57:13Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/2070#issuecomment-1753850950","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs51JriF","author":{"login":"darron-haworth"},"authorAssociation":"NONE","body":"+1 to adding secrets scanning\r\n","createdAt":"2024-02-26T22:51:16Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/2070#issuecomment-1965471877","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs6Z1vHP","author":{"login":"pbtest-admin"},"authorAssociation":"NONE","body":"+1 to adding secrets scanning\r\n- To cover [List secret scanning alerts for a repository](https://github.com/github/rest-api-docs-md/blob/main/repos/%7Bowner%7D/%7Brepo%7D/secret-scanning/alerts/get.md#list-secret-scanning-alerts-for-a-repository)\r\n\r\n","createdAt":"2025-01-09T18:33:52Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/2070#issuecomment-2581000655","viewerDidAuthor":false}],"createdAt":"2021-10-05T20:37:03Z","number":2070,"state":"OPEN","title":"Support for secret scanning","url":"https://github.com/PyGithub/PyGithub/issues/2070"},{"author":{"id":"MDQ6VXNlcjQyOTc5MA==","is_bot":false,"login":"michaelmcguire","name":"Michael McGuire"},"body":"The [Issues Event API](https://docs.github.com/en/rest/reference/issues#events) and [Timeline Event API](https://docs.github.com/en/rest/reference/issues#timeline) for issues both return similar data [according to the \"Issue event types\" documentation](https://docs.github.com/en/developers/webhooks-and-events/events/issue-event-types). \r\n\r\nUnder [Issue event object common properties](https://docs.github.com/en/developers/webhooks-and-events/events/issue-event-types#issue-event-object-common-properties), it's specifically mentioned:\r\n\r\n> Issue events all have the same object structure, except events that are only available in the Timeline Events API. Some events also include additional properties that provide more context about the event resources. Refer to the specific event to for details about any properties that differ from this object format.\r\n\r\nThe properties listed in the table below this are all part of the [`TimelineEvent`](https://pygithub.readthedocs.io/en/latest/github_objects/TimelineEvent.html) class. However, has mentioned above, there are several event types specific to the Timeline Events API that have additional properties that aren't shared. In fact, the `TimelineEvent` class in PyGitHub includes additional `author_association` and `body` attributes which are in the `commented` and `reviewed` event types and the `source` attribute which is in the `cross-referenced` event. \r\n\r\nHowever, there are plenty of other event types that have additional properties that are not on `TimelineEvent` and I'm wondering how I can access them. As an example, I'd like to be able to access the `sha` property for the [committed](https://docs.github.com/en/developers/webhooks-and-events/events/issue-event-types#committed) event. Is there an \"escape hatch\" in the API for accessing these additional attributes? If not, would a PR be accepted that adds these attributes to `TimelineEvent`? It does seem that if one was to try to keep the strong-typing, you'd need to express some sort of sum type that would allow you to properly model the disjointed properties that come from the timeline events API.\r\n\r\nThanks for any help you can provide. I'd be willing to open a PR if necessary to move the library in the right direction.\r\n\r\n","comments":[{"id":"IC_kwDOADYVqs43qQdI","author":{"login":"michaelmcguire"},"authorAssociation":"NONE","body":"> Is there an \"escape hatch\" in the API for accessing these additional attributes? \r\n\r\nTo answer my own question, I just discovered [`raw_data`](https://pygithub.readthedocs.io/en/latest/github_objects.html#github.GithubObject.GithubObject.raw_data) which provides the escape hatch I need. I don't know why I didn't think to check for a base class for types.\r\n\r\n> If not, would a PR be accepted that adds these attributes to `TimelineEvent`? It does seem that if one was to try to keep the strong-typing, you'd need to express some sort of sum type that would allow you to properly model the disjointed properties that come from the timeline events API.\r\n\r\nThis is still my outstanding question: would PRs that add more fields be accepted? Would that be the way to go or is there any hunger for trying to represent the disjointed values one can get back for different `event` types?\r\n\r\n","createdAt":"2021-10-04T20:19:29Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/2069#issuecomment-933824328","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs44eE4c","author":{"login":"s-t-e-v-e-n-k"},"authorAssociation":"COLLABORATOR","body":"I would welcome PR that add more fields to TimelineEvent.","createdAt":"2021-10-20T07:38:36Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/2069#issuecomment-947408412","viewerDidAuthor":false}],"createdAt":"2021-10-01T22:49:31Z","number":2069,"state":"OPEN","title":"Issue Events / Timeline Events API question","url":"https://github.com/PyGithub/PyGithub/issues/2069"},{"author":{"id":"MDQ6VXNlcjI0ODEzMzYw","is_bot":false,"login":"gerryfletch","name":"Gerry Fletcher"},"body":"Under `/repos/{owner}/{repo}/pages`, the source (branch and directory) can be configured. My use case is that my documentation exists in `/docs` on branch `main`,  which requires a manual step to configure a new project.\r\n\r\n```sh\r\ncurl \\\r\n  -X POST \\\r\n  -H \"Accept: application/vnd.github.switcheroo-preview+json\" \\\r\n  https://api.github.com/repos/octocat/hello-world/pages \\\r\n  -d '{\"source\":{\"branch\":\"branch\",\"path\":\"path\"}}'\r\n```","comments":[{"id":"IC_kwDOADYVqs44WRfs","author":{"login":"s-t-e-v-e-n-k"},"authorAssociation":"COLLABORATOR","body":"https://docs.github.com/en/rest/reference/repos#pages are the relevant API docs","createdAt":"2021-10-18T04:51:09Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":5}}],"url":"https://github.com/PyGithub/PyGithub/issues/2037#issuecomment-945362924","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs6bJsQi","author":{"login":"heitorPB"},"authorAssociation":"CONTRIBUTOR","body":"Where can I find examples/docs on how to configure GH Pages via PyGitHub? @gerryfletch, where was this implemented?","createdAt":"2025-01-20T18:04:55Z","includesCreatedEdit":true,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/2037#issuecomment-2603009058","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs6cea9T","author":{"login":"gerryfletch"},"authorAssociation":"NONE","body":"Whoops, I was mass closing issues and didn't mean to close this public one. Apologies - still relevant :)","createdAt":"2025-01-30T18:07:28Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/2037#issuecomment-2625220435","viewerDidAuthor":false}],"createdAt":"2021-08-23T21:13:45Z","number":2037,"state":"OPEN","title":"Support GitHub Pages Configuration API","url":"https://github.com/PyGithub/PyGithub/issues/2037"},{"author":{"id":"MDQ6VXNlcjI3OTc5NzE=","is_bot":false,"login":"schlitzered","name":"Ed Schlitzer"},"body":"Hi there,\r\n\r\nthe github web ui allow to enable/disable github action on a per repository base, as well as some other github actions related limitations.\r\n\r\nit seems like pygithub has no support to do the same, or am i missing something?\r\n\r\nKind Regards","comments":[{"id":"IC_kwDOADYVqs43-lTE","author":{"login":"zkoppert"},"authorAssociation":"COLLABORATOR","body":"related [API endpoint](https://docs.github.com/en/rest/reference/actions#enable-a-selected-repository-for-github-actions-in-an-organization)","createdAt":"2021-10-08T22:41:08Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/2034#issuecomment-939152580","viewerDidAuthor":false}],"createdAt":"2021-08-19T11:57:05Z","number":2034,"state":"OPEN","title":"how to disable/enable github actions on repo","url":"https://github.com/PyGithub/PyGithub/issues/2034"},{"author":{"id":"MDQ6VXNlcjQ0NzAwMjY5","is_bot":false,"login":"EnricoMi","name":"Enrico Minack"},"body":"GitHub API responses indicate rate limits via HTTP headers:\r\n\r\n    x-ratelimit-limit: 5000\r\n    x-ratelimit-remaining: 4992\r\n    x-ratelimit-reset: 1625481641\r\n    x-ratelimit-used: 8\r\n    x-ratelimit-resource: core\r\n\r\nThe `limit` and `remaining` are store in `Requester.rate_limiting`.\r\n\r\nDifferent requests count to different limits, searches for instance do not count to the `core` resource:\r\n\r\n    x-ratelimit-limit: 30\r\n    x-ratelimit-remaining: 29\r\n    x-ratelimit-reset: 1625478450\r\n    x-ratelimit-used: 1\r\n    x-ratelimit-resource: search\r\n\r\nThis limit will overwrite earlier `core` limits.\r\n\r\nIt is unexpected that the resource that `MainClass.rate_limiting` refers to depends on the most recent API call. It should always be `core` or there should be calls for different resources.\r\n\r\nEven better would be if `rate_limiting` returns an instance of `RateLimit`, which is updated from those headers or when `MainClass.get_rate_limit` is called.","comments":[{"id":"IC_kwDOADYVqs48GLUJ","author":{"login":"stale"},"authorAssociation":"NONE","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","createdAt":"2022-01-09T08:20:35Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1988#issuecomment-1008252169","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs48GTOu","author":{"login":"EnricoMi"},"authorAssociation":"COLLABORATOR","body":"@s-t-e-v-e-n-k what are your thoughts on this?","createdAt":"2022-01-09T12:03:13Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1988#issuecomment-1008284590","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs5Bmihx","author":{"login":"stale"},"authorAssociation":"NONE","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","createdAt":"2022-04-16T09:39:49Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1988#issuecomment-1100621937","viewerDidAuthor":false}],"createdAt":"2021-07-05T09:58:17Z","number":1988,"state":"OPEN","title":"Requester.rate_limiting mixes limits of different resources","url":"https://github.com/PyGithub/PyGithub/issues/1988"},{"author":{"id":"MDQ6VXNlcjQ0OTg5MQ==","is_bot":false,"login":"dregad","name":"Damien Regad"},"body":"I do not understand why _oauth_scopes_ is not set when the object is created. It only gets populated after some method or property is called.\r\n\r\n```python\r\nfrom github import Github\r\ntoken = 'xxx'  # Some Github token with at least 1 scope\r\ngh = Github(token);\r\nprint(gh.oauth_scopes)  # None\r\ngh.rate_limiting\r\nprint(gh.oauth_scopes)  # ['public_repo']\r\n```\r\n\r\nPython 3.8.5, PyGithub 1.55","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDgzMzk1MzcwNw==","author":{"login":"s-t-e-v-e-n-k"},"authorAssociation":"COLLABORATOR","body":"Because we don't make a request until you call a property or a method.","createdAt":"2021-05-06T23:53:57Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1943#issuecomment-833953707","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDgzNDEyMDM2Mw==","author":{"login":"dregad"},"authorAssociation":"NONE","body":"Hi Steve, thanks for the fast reply. That makes sense. \r\n\r\nWhat confused me, was that when debugging, PyCharm is showing me the protected _requester.oauth_scopes having a value:\r\n\r\n![image](https://user-images.githubusercontent.com/449891/117408672-8e7fa680-af10-11eb-947a-47bc421561b8.png)\r\n\r\nI guess it is PyCharm's debugger itself that triggers a request when getting the *rate_limiting* property. DBP does not show this behavior until *gh.rate_limiting* is queried.\r\n\r\n```\r\n> /tmp/test.py(4)<module>()->None\r\n-> breakpoint()\r\n(Pdb) p gh.oauth_scopes\r\nNone\r\n(Pdb) p gh._Github__requester.oauth_scopes\r\nNone\r\n(Pdb) p gh.rate_limiting\r\n(4985, 5000)\r\n(Pdb) p gh.oauth_scopes\r\n['admin:org', 'public_repo']\r\n```\r\n","createdAt":"2021-05-07T07:02:49Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1943#issuecomment-834120363","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs5eV-Ba","author":{"login":"mkenigs"},"authorAssociation":"NONE","body":"I ran into a bug because of this, because the docstring says it's a list of string: https://github.com/PyGithub/PyGithub/blob/84912a675cc09a57e947766674c462ddb0b45dbf/github/MainClass.py#L234\r\n\r\nI think it either needs to be an empty list or the docstring should be updated.","createdAt":"2023-06-08T15:25:44Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1943#issuecomment-1582817370","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs5eWG2s","author":{"login":"mkenigs"},"authorAssociation":"NONE","body":"It's also pretty confusing what will cause `oauth_scopes` to become something other than `None`, particularly when comparing between a token that has readonly access to a repo:\r\n```\r\n> cat reproducer.py\r\nfrom github import Github\r\n\r\ngh_with_write = Github(\"redacted\")\r\ngh_with_write.get_user()\r\nprint(gh_with_write.oauth_scopes)\r\ngh_with_write.rate_limiting\r\nprint(gh_with_write.oauth_scopes)\r\n\r\ngh_readonly = Github(\"redacted\")\r\ngh_readonly.get_user()\r\nprint(gh_readonly.oauth_scopes)\r\ngh_readonly.rate_limiting\r\nprint(gh_readonly.oauth_scopes)\r\n```\r\n\r\n```\r\n> python3 reproducer.py\r\nNone\r\n['gist', 'read:org', 'repo', 'workflow']\r\nNone\r\nNone\r\n```","createdAt":"2023-06-08T15:44:19Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1943#issuecomment-1582853548","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs5ebPZO","author":{"login":"EnricoMi"},"authorAssociation":"COLLABORATOR","body":"> I ran into a bug because of this, because the docstring says it's a list of string:\r\n> \r\n> https://github.com/PyGithub/PyGithub/blob/84912a675cc09a57e947766674c462ddb0b45dbf/github/MainClass.py#L234\r\n> \r\n> I think it either needs to be an empty list or the docstring should be updated.\r\n\r\nYou are right, the returned value is a string with comma-separated scopes. Would you mind creating a pull request to fix the doc string?","createdAt":"2023-06-09T08:42:55Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1943#issuecomment-1584199246","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs5ebRJe","author":{"login":"EnricoMi"},"authorAssociation":"COLLABORATOR","body":"> It's also pretty confusing what will cause `oauth_scopes` to become something other than `None`, particularly when comparing between a token that has readonly access to a repo\r\n\r\nYou are right, this is confusing and unexpected. Would you like to investigate this issue and sketch a fix?\r\n\r\nMaybe accessing `gh.oauth_scopes` should trigger a simple API call to fetch the current oauth scopes and populate this field. Maybe there is even a specific API endpoint for that.","createdAt":"2023-06-09T08:47:06Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1943#issuecomment-1584206430","viewerDidAuthor":false}],"createdAt":"2021-05-06T16:47:50Z","number":1943,"state":"OPEN","title":"Github.oauth_scopes property is None initially","url":"https://github.com/PyGithub/PyGithub/issues/1943"},{"author":{"id":"MDQ6VXNlcjI1OTY4MDU0","is_bot":false,"login":"stevenpitts","name":"Steven Pitts"},"body":"I can't find any documentation, in the docs or in comments, explaining the difference between `Commit` and `GitCommit`.\r\n\r\nThis is an issue because it seems that the return value of some functions arbitrarily use and require one of the two; for example, `Branch.commit` returns a `Commit`, but the commits passed as parent commits to `Repository.create_git_commit` expect a `GitCommit`.","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDgyNjQ5MzM3Nw==","author":{"login":"s-t-e-v-e-n-k"},"authorAssociation":"COLLABORATOR","body":"This is going to require some investigation. I think both classes pre-date my involvement, but I've always been curious too.","createdAt":"2021-04-26T04:33:41Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1917#issuecomment-826493377","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDgyNjkxOTIwOA==","author":{"login":"stevenpitts"},"authorAssociation":"NONE","body":"> This is going to require some investigation. I think both classes pre-date my involvement, but I've always been curious too.\r\n\r\nAfter some work, I actually figured it out; `github.GitCommit` represents a low-level Git commit, and isn't tied to GitHub. `github.Commit` is a commit with all the additional niceties that GitHub adds, such as URLs, committer names, and more methods.\r\n\r\nYou can call `.commit` on a `github.Commit` object to get a `github.GitCommit`, but I personally think `github.Commit` should extend `github.GitCommit`, so that we don't have to worry as much about turning `github.Commit` objects into `github.GitCommit` objects before we call a function that requires a `github.GitCommit`. Thoughts?","createdAt":"2021-04-26T15:12:37Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1917#issuecomment-826919208","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDgyNzI5MjE1NA==","author":{"login":"s-t-e-v-e-n-k"},"authorAssociation":"COLLABORATOR","body":"In that case, I like the current parent-child relationship as it's expressed. I'd very much welcome a pull request to change the docstrings for GitCommit and Commit to explain your first paragraph.","createdAt":"2021-04-27T03:47:42Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1917#issuecomment-827292154","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDgyODY3MTA1OA==","author":{"login":"bagashvilit"},"authorAssociation":"CONTRIBUTOR","body":"Hello,\r\nI am part of the student developer group. We've been following this issue and what was mentioned here about the difference between Commit and Gitcommit is in line with what we've been thinking. Would it be okay that we document it?","createdAt":"2021-04-28T18:12:43Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1917#issuecomment-828671058","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDgyODc1NTc2Mw==","author":{"login":"stevenpitts"},"authorAssociation":"NONE","body":"> Hello,\r\n> I am part of the student developer group. We've been following this issue and what was mentioned here about the difference between Commit and Gitcommit is in line with what we've been thinking. Would it be okay that we document it?\r\n\r\nI'd love to see a PR for that, and it looks like @s-t-e-v-e-n-k is encouraging it too. Thanks!","createdAt":"2021-04-28T20:28:08Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":1}}],"url":"https://github.com/PyGithub/PyGithub/issues/1917#issuecomment-828755763","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs48GNZk","author":{"login":"stale"},"authorAssociation":"NONE","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","createdAt":"2022-01-09T09:20:19Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1917#issuecomment-1008260708","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs48GmbI","author":{"login":"stevenpitts"},"authorAssociation":"NONE","body":"Unmarking stale","createdAt":"2022-01-09T19:56:00Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1917#issuecomment-1008363208","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs48KKrD","author":{"login":"treee111"},"authorAssociation":"CONTRIBUTOR","body":"I proposed the changes in another PR. Ready for review","createdAt":"2022-01-10T20:05:55Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1917#issuecomment-1009298115","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs5Bmihn","author":{"login":"stale"},"authorAssociation":"NONE","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","createdAt":"2022-04-16T09:39:47Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1917#issuecomment-1100621927","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs5Bm5OD","author":{"login":"stevenpitts"},"authorAssociation":"NONE","body":"Not stale, the PR is still open and waiting for a review","createdAt":"2022-04-16T17:32:46Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1917#issuecomment-1100714883","viewerDidAuthor":false}],"createdAt":"2021-04-15T17:03:25Z","number":1917,"state":"OPEN","title":"Clarify `github.Commit` vs `github.GitCommit`","url":"https://github.com/PyGithub/PyGithub/issues/1917"},{"author":{"id":"MDQ6VXNlcjI4NzM2MDY4","is_bot":false,"login":"kenzliang","name":"Ken Liang"},"body":"https://github.com/PyGithub/PyGithub/blob/34d097ce473601624722b90fc5d0396011dd3acb/github/Organization.py#L585-L631\r\n\r\nhttps://docs.github.com/en/rest/reference/teams#create-a-team\r\n\r\nIt appears that the organization team creation method is missing a new parameter `parent_team_id`. \r\n\r\nhttps://github.com/PyGithub/PyGithub/pull/1840","comments":[{"id":"IC_kwDOADYVqs48GNaV","author":{"login":"stale"},"authorAssociation":"NONE","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","createdAt":"2022-01-09T09:20:35Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1839#issuecomment-1008260757","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs48rFcs","author":{"login":""},"authorAssociation":"NONE","body":"Would appreciate this as well. Can't meaningfully create teams if we don't have this option. ","createdAt":"2022-01-20T21:06:00Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1839#issuecomment-1017927468","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs4__7EW","author":{"login":"piranna"},"authorAssociation":"NONE","body":"Any update on this? I can see there's three PRs for this functionality:\r\n\r\n- https://github.com/PyGithub/PyGithub/pull/996\r\n- https://github.com/PyGithub/PyGithub/pull/1669\r\n- https://github.com/PyGithub/PyGithub/pull/1840","createdAt":"2022-03-21T10:18:18Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1839#issuecomment-1073721622","viewerDidAuthor":false}],"createdAt":"2021-02-05T16:27:58Z","number":1839,"state":"OPEN","title":"Create team is missing parent_team_id parameter","url":"https://github.com/PyGithub/PyGithub/issues/1839"},{"author":{"id":"MDQ6VXNlcjQzNjkxODcz","is_bot":false,"login":"kaustubhgupta","name":"Kaustubh Gupta"},"body":"Twitter username support was added this year. It would be great if you could add its access method in the AuthenticatedUser object as I checked that all other relevant access methods such as bio, avatar URL, blog link lie in this class. Also, as the twitter_username is returned in api.github.com/user/{username}, it makes sense to get this value here.\r\n\r\nCan I contribute to this issue?","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDczNTcxMzQ5Nw==","author":{"login":"s-t-e-v-e-n-k"},"authorAssociation":"COLLABORATOR","body":"Absolutely, we would welcome a PR about this issue.","createdAt":"2020-11-30T10:57:28Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"ROCKET","users":{"totalCount":1}}],"url":"https://github.com/PyGithub/PyGithub/issues/1768#issuecomment-735713497","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDg1MTE3MDkwNw==","author":{"login":"kaustubhgupta"},"authorAssociation":"NONE","body":"I am not working on this issue anymore.","createdAt":"2021-05-31T04:54:45Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1768#issuecomment-851170907","viewerDidAuthor":false}],"createdAt":"2020-11-30T09:00:38Z","number":1768,"state":"OPEN","title":"Add 'twitter_username' ","url":"https://github.com/PyGithub/PyGithub/issues/1768"},{"author":{"id":"MDQ6VXNlcjEwMzQzNDcw","is_bot":false,"login":"NoahCardoza","name":"Noah Cardoza"},"body":"As far as I could see in the documentation, there is no way to add or list comments...\r\n\r\nI'd like support for discussion comments as per https://developer.github.com/v3/teams/discussions/#update-a-discussion.\r\n\r\nI'll be implementing this myself for a personal project, and I'd be happy to port it natively to the project if this is something people would like to see!\r\n\r\n","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDcyNTgxMzk5OQ==","author":{"login":"s-t-e-v-e-n-k"},"authorAssociation":"COLLABORATOR","body":"We support Team Discussions as an entity, a contribution to add or list comments sounds very welcome!","createdAt":"2020-11-12T03:56:57Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1750#issuecomment-725813999","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDcyNTgzNjc5MQ==","author":{"login":"NoahCardoza"},"authorAssociation":"NONE","body":"Great! I'll get to work on this ASAP!","createdAt":"2020-11-12T04:55:42Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1750#issuecomment-725836791","viewerDidAuthor":false}],"createdAt":"2020-11-10T23:57:40Z","number":1750,"state":"OPEN","title":"[FEAT] support discussion comments","url":"https://github.com/PyGithub/PyGithub/issues/1750"},{"author":{"id":"MDQ6VXNlcjIwMjA2NzQ4","is_bot":false,"login":"vrichmond499","name":"Valerie Richmond"},"body":"I created an PyGithub OAuth application using the client ID and client secret issued by GitHub. Unfortunately, upon calling `get_access_token` on that app (with the callback code from GitHub's callback), I do not get a usable access_token. See below:\r\n\r\n```\r\ngithub_app = github.Github().get_oauth_application(CLIENT_ID, CLIENT_SECRET)\r\nresponse = github_app.get_access_token(CALLBACK_CODE)\r\n# r.token, r.scope, and r.type are all `None`, and r._token is `NotSet`\r\n```\r\n\r\nMy PyGithub version is 1.53. Please advise; I have so far looked at #1021 .","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDcwNjI3MzgzOA==","author":{"login":"vrichmond499"},"authorAssociation":"NONE","body":"Update: In fact GitHub was returning an error response, specifically: `{'error': 'incorrect_client_credentials', 'error_description': 'The client_id and/or client_secret passed are incorrect.', 'error_uri': 'https://docs.github.com/apps/managing-oauth-apps/troubleshooting-oauth-app-access-token-request-errors/#incorrect-client-credentials’}`. The issue is merely that the error is masked, as opposed to be re-raised or otherwise shared with the user. \r\n\r\nI believe you should check [here](https://github.com/PyGithub/PyGithub/blob/master/github/ApplicationOAuth.py#L107) whether the `data` response contains the `'error'` key and if so, appropriately respond. \r\n\r\nThanks!","createdAt":"2020-10-09T16:17:55Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1718#issuecomment-706273838","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDcxODI4MDQxNA==","author":{"login":"s-t-e-v-e-n-k"},"authorAssociation":"COLLABORATOR","body":"We should probably do so in Requester.requestJson, not in the method. I'm going to reflect on this.","createdAt":"2020-10-29T00:16:07Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":1}}],"url":"https://github.com/PyGithub/PyGithub/issues/1718#issuecomment-718280414","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs5BmoWV","author":{"login":"stale"},"authorAssociation":"NONE","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","createdAt":"2022-04-16T11:38:46Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1718#issuecomment-1100645781","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs5By-1R","author":{"login":"lindycoder"},"authorAssociation":"NONE","body":"This is still an inconvenience :)","createdAt":"2022-04-20T12:38:10Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1718#issuecomment-1103883601","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs5B019X","author":{"login":"lindycoder"},"authorAssociation":"NONE","body":"Just a note that `\"https://github.com/login/oauth/access_token\"` is hardcoded in the function, making it very hard to test with http test doubles (wiremock for example).\r\nI know it can't use the base_url from the requester as this endpoint is not on api.github.com but making it configurable would be great :)","createdAt":"2022-04-20T19:23:48Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1718#issuecomment-1104371543","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs5jtK0s","author":{"login":"EnricoMi"},"authorAssociation":"COLLABORATOR","body":"Have you tried https://pygithub.readthedocs.io/en/latest/examples/Authentication.html#app-user-authentication? Is error reporting better when using this way?\r\n\r\nThe hardcoded url is mentioned in issue #2485. Would you like to contribute a fix?","createdAt":"2023-08-10T08:25:54Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1718#issuecomment-1672785196","viewerDidAuthor":false}],"createdAt":"2020-10-09T14:38:17Z","number":1718,"state":"OPEN","title":"OAuth access token Failure Errors are Masked","url":"https://github.com/PyGithub/PyGithub/issues/1718"},{"author":{"id":"MDQ6VXNlcjIwMjA2NzQ4","is_bot":false,"login":"vrichmond499","name":"Valerie Richmond"},"body":"A scope parameter (to correspond to Github's scope parameter described [here](https://developer.github.com/apps/building-oauth-apps/authorizing-oauth-apps/#1-request-a-users-github-identity)) would be great! I believe you can simply add it here: https://github.com/PyGithub/PyGithub/blob/master/github/ApplicationOAuth.py#L58","comments":[],"createdAt":"2020-10-09T14:25:40Z","number":1717,"state":"OPEN","title":"`get_login_url` to support the scope parameter","url":"https://github.com/PyGithub/PyGithub/issues/1717"},{"author":{"id":"MDQ6VXNlcjM5MTk2MTky","is_bot":false,"login":"AlexandreODelisle","name":"Alexandre Delisle"},"body":"Using the Enterprise Team Organization it is possible to use the team synchronization feature.\r\n\r\nhttps://developer.github.com/v3/teams/team_sync/#list-idp-groups-for-a-team\r\n\r\nMaking it possible to list the groups for an organization or a team.\r\n\r\nAlso adding, removing a synched group from a Team.","comments":[],"createdAt":"2020-09-23T01:17:51Z","number":1702,"state":"OPEN","title":"Adding the team-sync endpoints","url":"https://github.com/PyGithub/PyGithub/issues/1702"},{"author":{"id":"MDQ6VXNlcjI5NzAzODY=","is_bot":false,"login":"TheDutchDevil","name":"Nathan Cassee"},"body":"Heya!\r\n\r\nI'm a PhD student that regularly uses PyGithub to gather data for research projects (for instance we used PyGithub to analyze the code review usage and CI usage of ~700 open-source projects, [see this paper for instance](https://cassee.dev/files/CI-silent.pdf)). When using PyGithub to make millions of GET requests over the period  of a few months we often pool the tokens of several researchers involved in the project, and use a scraper that dynamically switches tokens based on actual rate limits. \r\n\r\nHowever, writing this code is often a pain, as it requires messing with the internals of PyGithub. Recently, I started working on an update to PyGithub that allows you to pass in a list of tokens instead of a single token. Internally, PyGithub then does the switching of tokens, abstracting it away. \r\n\r\nHowever, I'm not sure if this feature is of interest to more users of PyGithub. If so, I'm open to discussing on how I could get these changes integrated into the mainline. \r\n\r\nP.S. Currently we're also running a study to help improve the sustainability of open-source communities, if you're open to performing in a single 60 minute interview on how you experience emotions when developing open-source software please let me know!","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDcyMzUwMDc1NQ==","author":{"login":"stale"},"authorAssociation":"NONE","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","createdAt":"2020-11-07T22:03:07Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1687#issuecomment-723500755","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDg2NDA2OTgzNw==","author":{"login":"theresa-lim"},"authorAssociation":"NONE","body":"I'm also working with Prof. Vasilescu and using PyGithub to make GET requests. I'd love to see this feature implemented!","createdAt":"2021-06-18T14:13:56Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1687#issuecomment-864069837","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDg2NTA3MTY2Mw==","author":{"login":"TheDutchDevil"},"authorAssociation":"NONE","body":"If you're interested in the code I have please let me know. I should be able to share it quite easily!","createdAt":"2021-06-21T14:19:13Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1687#issuecomment-865071663","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs6HCLbC","author":{"login":"AutoScrape123TX"},"authorAssociation":"NONE","body":"Hello, would like to know if you finally build it ? I'm really interested getting this code. Please tell me if we can schedule a meet or something.","createdAt":"2024-08-02T14:16:11Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1687#issuecomment-2265495234","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs6HC2Bk","author":{"login":"EnricoMi"},"authorAssociation":"COLLABORATOR","body":"I think implementing this feature should be much easier now that we have [github.Auth.Auth](https://github.com/PyGithub/PyGithub/blob/main/github/Auth.py#L51).\r\n\r\nSee [github.Auth.AppInstallationAuth](https://github.com/PyGithub/PyGithub/blob/main/github/Auth.py#L285) for an example on how to get access to the `Requester` to get rate limit updates.","createdAt":"2024-08-02T15:40:22Z","includesCreatedEdit":true,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1687#issuecomment-2265669732","viewerDidAuthor":false}],"createdAt":"2020-09-08T14:55:10Z","number":1687,"state":"OPEN","title":"Expanding the PyGithub authorization to support multiple tokens","url":"https://github.com/PyGithub/PyGithub/issues/1687"},{"author":{"id":"MDQ6VXNlcjM5MTk2MTky","is_bot":false,"login":"AlexandreODelisle","name":"Alexandre Delisle"},"body":"Adding two functions to handle to rest endpoint of GitHub:\r\nhttps://docs.github.com/en/rest/reference/orgs#list-saml-sso-authorizations-for-an-organization\r\nhttps://docs.github.com/en/rest/reference/orgs#remove-a-saml-sso-authorization-for-an-organization\r\n\r\n#1676  \r\nIn order to control the current authorize credentials permitted under the organisation and delete a credentia_ id if required.","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDY3OTIyOTkyNg==","author":{"login":"AlexandreODelisle"},"authorAssociation":"NONE","body":"Hi @s-t-e-v-e-n-k , \r\n\r\nSo I have been looking at the implementation, and I was wondering if PyGitHub actually had an Organization with SAML identity on it.. Unfortunately, it is a feature only available under the payed Organization.. I can not build the test with that Organization that I have access to, or can I redact the organization name on the TestReplay? \r\n\r\nI was also wondering about the Authorization object, there is the _Authorization.py_ defined, but there is only the Attributes  seen from the user stand-point and not the Organization.. So I would create a new _AuthorizationsOrganization.py_ as an example, to represent it.. \r\n\r\nThe return payload is not paginated, so I would return a List of AuthorizationOrganization.. \r\n\r\n```\r\n>>> org.get_credential_authorizations()\r\n[AuthorizationOrganization(token_last_eight=\"e1acdb82\", scopes=['admin:enterprise', 'admin:gpg_key', 'admin:org', 'admin:org_hook', 'admin:public_key', 'admin:repo_hook', 'delete:packages', 'delete_repo', 'gist', 'notifications', 'read:packages', 'repo', 'user', 'workflow', 'write:discussion', 'write:packages'], login=\"AlexandreODelisle\", credential_type=\"personal access token\", credential_id=4324214, credential_authorized_at=2020-08-17 23:53:20, credential_accessed_at=2020-08-17 23:58:20)]\r\n ","createdAt":"2020-08-24T16:23:40Z","includesCreatedEdit":true,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1655#issuecomment-679229926","viewerDidAuthor":false}],"createdAt":"2020-08-14T20:25:37Z","number":1655,"state":"OPEN","title":"Adding authorize credentials listing and delete in a organisation","url":"https://github.com/PyGithub/PyGithub/issues/1655"},{"author":{"id":"MDQ6VXNlcjgwODgzODI=","is_bot":false,"login":"OlegYurchik","name":"Oleg Yurchik"},"body":"What do you think about PyGithub async support? If I do async support for PyGithub - do you accept it?","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDYzMzMyOTU4Mw==","author":{"login":"s-t-e-v-e-n-k"},"authorAssociation":"COLLABORATOR","body":"In what way would you add in async support? Given most operations are done remotely on GitHub and our code is waiting for a response or a JSON blob back, how would it help?","createdAt":"2020-05-25T01:05:04Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1538#issuecomment-633329583","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDYzMzM5ODI0OA==","author":{"login":"victorgveloso"},"authorAssociation":"NONE","body":"> Given most operations are done remotely on GitHub and our code is waiting for a response\r\n\r\nThat's a good reason for async introduction! I mean... PyGithub should handle API access as coroutines, otherwise most of the time it's waiting for server's reponse instead of doing something useful. It's a common concept on nodejs and it's currently supported on @octokit/rest.js\r\nI'm surprised nobody asked this feature before...\r\n\r\nObs: maybe I misunderstood how PyGithub currently works, but I think sequential and synchronous API wrappers are less efficient than an async one.","createdAt":"2020-05-25T06:18:13Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":1}}],"url":"https://github.com/PyGithub/PyGithub/issues/1538#issuecomment-633398248","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDYzMzQwMzQ5OQ==","author":{"login":"OlegYurchik"},"authorAssociation":"NONE","body":"I could add a new AsyncRequester class and make in all other classes asynchronous methods for interacting with it, while preserving the logic.\r\n\r\nAsynchronous code could help in tasks where you need to produce a large number of queries, for example, in a search. It would also allow you to quickly work with multiple accounts on Github","createdAt":"2020-05-25T06:33:55Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1538#issuecomment-633403499","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDYzMzQwNDU0Nw==","author":{"login":"s-t-e-v-e-n-k"},"authorAssociation":"COLLABORATOR","body":"Which sounds like a complete redesign, along with adding support for utilising multiple accounts. I love your enthusiasm, but I think it's an awful lot of work for not enough gain.","createdAt":"2020-05-25T06:36:54Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":1}}],"url":"https://github.com/PyGithub/PyGithub/issues/1538#issuecomment-633404547","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDYzMzQwODg2MQ==","author":{"login":"victorgveloso"},"authorAssociation":"NONE","body":"It might involve a lot of work, but I'd love to see it implemented. Currently I'm stuck with JS on my research because of @octokit/rest.js performance overcomes PyGithub's. If some help is wanted I would be glad to work on this too.\r\n\r\nBtw I think multiple accounts support would be too much! Isn't just async a tremenduous first step towards performance gains?","createdAt":"2020-05-25T06:49:21Z","includesCreatedEdit":true,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":8}}],"url":"https://github.com/PyGithub/PyGithub/issues/1538#issuecomment-633408861","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDYzMzQxMjQ1OQ==","author":{"login":"OlegYurchik"},"authorAssociation":"NONE","body":"Maybe, I can do any editions and show it in pull request? For test","createdAt":"2020-05-25T06:59:21Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1538#issuecomment-633412459","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDY0MDA0MTE3NQ==","author":{"login":"abhn"},"authorAssociation":"NONE","body":"Asyncio sounds like a good idea given my usecase. I am trying to read all files in a repository recursively, and synchronous requests are just too slow (I might be missing something like rate limiting on github's api but we could definitely make such operations faster). ","createdAt":"2020-06-06T11:13:27Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":1}}],"url":"https://github.com/PyGithub/PyGithub/issues/1538#issuecomment-640041175","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDY0MDA0NTcwMw==","author":{"login":"s-t-e-v-e-n-k"},"authorAssociation":"COLLABORATOR","body":"I would strongly suggest using something like GitPython for that rather than requesting everything via the GitHub API.","createdAt":"2020-06-06T11:42:19Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":1}}],"url":"https://github.com/PyGithub/PyGithub/issues/1538#issuecomment-640045703","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDY0MDA0ODMxMw==","author":{"login":"abhn"},"authorAssociation":"NONE","body":"Thanks for the interesting suggestion, I'll give it a try as it does make sense to do it that way. ","createdAt":"2020-06-06T11:58:45Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1538#issuecomment-640048313","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDY1NzIwNzE4MA==","author":{"login":"basnijholt"},"authorAssociation":"NONE","body":"I don't think this issue should be closed. Using `asyncio` for IO-bound operations is the perfect use-case.\r\n","createdAt":"2020-07-12T11:08:32Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":37}}],"url":"https://github.com/PyGithub/PyGithub/issues/1538#issuecomment-657207180","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDg2OTIyMzYxMA==","author":{"login":"victorgveloso"},"authorAssociation":"NONE","body":"This short YouTube video demonstrate how asyncio could enhance http requests performance in python programs: https://youtu.be/m_a0fN48Alw\n\nPlease @OlegYurchik, reopen this issue!","createdAt":"2021-06-27T21:05:37Z","includesCreatedEdit":true,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":2}}],"url":"https://github.com/PyGithub/PyGithub/issues/1538#issuecomment-869223610","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs428xSx","author":{"login":"Hyperx837"},"authorAssociation":"NONE","body":"for my use case, I'm creating a discord bot that has a few commands that interact with Github. discord.py has an event-based aio system. so any library that doesn't support async-await is not usable. asyncio without this kind of use case doesn't make the advantage any lesser. for example, if getting the content of the first comment of an issue takes 1 sec, it would take 100s to process the whole thing. with asyncio 100 such requests would take 2-3s. which is 98s faster than the current implementation with no extra resource bottleneck. I would say I really don't have that much of a problem with performance with my case though. it's the fact that we can't use blocking implementations of packages in async frameworks like discord.py and fastapi. because at a higher scale, doing such might lead the program to miss some events when it's in the blocked state","createdAt":"2021-09-17T15:47:43Z","includesCreatedEdit":true,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1538#issuecomment-921900209","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs46lRE7","author":{"login":"dineshr93"},"authorAssociation":"NONE","body":"Especially all the PaginatedList of various objects(issue, pullrequests etc) can be made faster with HTTPx and asyncio\r\n\r\n> This short YouTube video demonstrate how asyncio could enhance http requests performance in python programs: https://youtu.be/m_a0fN48Alw\r\n> \r\n> Please @OlegYurchik, reopen this issue!\r\n\r\n","createdAt":"2021-11-30T17:18:02Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1538#issuecomment-982847803","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs46oN47","author":{"login":"victorgveloso"},"authorAssociation":"NONE","body":"> Especially all the PaginatedList\r\n\r\nAren't PaginatedLists necessarily sequential? I mean, the point of paginated lists is querying only pages whose data you intend to use. How would you implement async PaginatedLists? What do you do when the pages you will need aren't known ahead of time? And what about situations where you want to iterate in a specific order?\r\n\r\nIn my opinion, methods returning PaginatedLists could have an optional parameter which describes a number of pages to be pre-fetched asynchronously. The returned object could be of another type (let's say it'll be named AsyncList) that implements PaginatedLists' interface, hence could be used interchangeably. This solves the aforementioned problem by letting the user decide between performance and previsibility.","createdAt":"2021-12-01T13:05:17Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1538#issuecomment-983621179","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs46oSIa","author":{"login":"dineshr93"},"authorAssociation":"NONE","body":"> > Especially all the PaginatedList\n> \n> Aren't PaginatedLists necessarily sequential? I mean, the point of paginated lists is querying only pages whose data you intend to use. How would you implement async PaginatedLists? What do you do when the pages you will need aren't known ahead of time? And what about situations where you want to iterate in a specific order?\n> \n> In my opinion, methods returning PaginatedLists could have an optional parameter which describes a number of pages to be pre-fetched asynchronously. The returned object could be of another type (let's say it'll be named AsyncList) that implements PaginatedLists' interface, hence could be used interchangeably. This solves the aforementioned problem by letting the user decide between performance and previsibility.\n\nYes. That's a good Idea. Since this lib is slow for big GitHub projects in addition I am using ghapi where we can query issues and commits using page= & per_page= parameter . Just In case if it helps anyone..","createdAt":"2021-12-01T13:24:52Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1538#issuecomment-983638554","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs5CKS3z","author":{"login":"ahonnecke"},"authorAssociation":"NONE","body":"I'd like to see this implemented and would be interested in helping.","createdAt":"2022-04-26T16:20:41Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1538#issuecomment-1109994995","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs5ZvvW_","author":{"login":"basnijholt"},"authorAssociation":"NONE","body":"There seem to be some alternatives now for async:\r\n- https://github.com/brettcannon/gidgethub\r\n- https://github.com/fastai/ghapi\r\n- https://github.com/ludeeus/aiogithubapi","createdAt":"2023-04-12T17:45:09Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":3}},{"content":"CONFUSED","users":{"totalCount":2}},{"content":"ROCKET","users":{"totalCount":1}}],"url":"https://github.com/PyGithub/PyGithub/issues/1538#issuecomment-1505686975","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs5kbbhn","author":{"login":"sambhav"},"authorAssociation":"NONE","body":"I have been relying on https://github.com/yanyongyu/githubkit which is the most featured for python github libraries. It has a fully typed api using pydantic and supports both sync and async requests using httpx. Works wonderfully with something like fastapi. ","createdAt":"2023-08-19T10:18:41Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":6}}],"url":"https://github.com/PyGithub/PyGithub/issues/1538#issuecomment-1684912231","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs59SaDW","author":{"login":"Ousret"},"authorAssociation":"NONE","body":"Hello!\r\n\r\nThere's an opportunity that can be considered.\r\nAs this project is tied to Requests, you may look at [Niquests](https://github.com/jawah/niquests). \r\n\r\nWhy?\r\n\r\n- Drop-in & faster replacement for Requests\r\n- Both synchronous and asynchronous interfaces, perfectly synchronized\r\n- HTTP/2 by default with proper multiplexing\r\n\r\nYou could generate the async code from your existing sync code, thus avoiding the \"extra\" maintenance burden.\r\nI am willing to help.\r\n","createdAt":"2024-05-09T05:40:55Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1538#issuecomment-2101977302","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs6lveUP","author":{"login":"Bassem-Akrout"},"authorAssociation":"NONE","body":"Hi everyone 👋\n\nI'm a Master's student looking to contribute to PyGithub, and I'm interested in exploring async support.\n\nMy current idea is to start by implementing an `AsyncRequester` using `aiohttp`, then progressively wrap key PyGithub classes (like `Github`, `Repository`, etc.) into async equivalents (`AsyncGithub`, `AsyncRepository`, etc.) in a separate module (e.g., `pygithub.async_`) to avoid breaking backward compatibility.\n\nHas anyone already started on this, or would it be helpful if I draft a small prototype to get feedback?\n\nThanks in advance!\n","createdAt":"2025-04-05T12:02:57Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"HEART","users":{"totalCount":3}}],"url":"https://github.com/PyGithub/PyGithub/issues/1538#issuecomment-2780685583","viewerDidAuthor":false}],"createdAt":"2020-05-24T21:59:38Z","number":1538,"state":"OPEN","title":"Async support","url":"https://github.com/PyGithub/PyGithub/issues/1538"},{"author":{"id":"MDQ6VXNlcjE0MjQyMDg4","is_bot":false,"login":"modernNeo","name":"Jace Manshadi"},"body":"I am trying to make a script that is both capable of determining the current owners of an org and setting them. I started by trying to just read who the current owners are but am having issues with that.\r\n\r\nI've tried to do\r\n\r\n```\r\ngit = Github(access_token)\r\nself.org = self.git.get_organization('ORG')\r\nfor user in self.org.get_members(role=\"admin\"):\r\n   print(f\"user = {user}, user.permissions = {user.permissions}, user.role = {user.role}, user.site_admin = {user.site_admin}, user.type = {user.type}\")\r\n```\r\n\r\nBut when it comes across a member that is an admin, it prints out \r\n```\r\n2020-04-20 21:14:43 = INFO - user = NamedUser(login=\"userX\"), user.permissions = None, user.role = None, user.site_admin = False, user.type = User\r\n```\r\n\r\nWhat am I doing wrong?","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDYxOTQ3MDk1NQ==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"What is the role of the current user? I suspect you need admin permission to view and set admin of organization.","createdAt":"2020-04-26T02:40:01Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1477#issuecomment-619470955","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDYxOTQ3NDM3Ng==","author":{"login":"modernNeo"},"authorAssociation":"NONE","body":"@sfdye by \"current user\". I assume you mean the user that the access token was being used. In which case the access token was generated from the \"Personal access tokens\" for a user who is the owner for that organization.","createdAt":"2020-04-26T03:19:52Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1477#issuecomment-619474376","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDYxOTQ3NDcwNQ==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"I can reproduce this in my own org, marking it as a `bug`","createdAt":"2020-04-26T03:23:38Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1477#issuecomment-619474705","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDY0OTk1MTkyOQ==","author":{"login":"stale"},"authorAssociation":"NONE","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","createdAt":"2020-06-26T04:17:03Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1477#issuecomment-649951929","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDY0OTk1MjkzMQ==","author":{"login":"modernNeo"},"authorAssociation":"NONE","body":"this is still a relevant bug.","createdAt":"2020-06-26T04:19:55Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1477#issuecomment-649952931","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDY4MzI2MDcwNA==","author":{"login":"stale"},"authorAssociation":"NONE","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","createdAt":"2020-08-29T08:57:41Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1477#issuecomment-683260704","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDY4NDA3MTk1Ng==","author":{"login":"modernNeo"},"authorAssociation":"NONE","body":"@sfdye can the stale bot be disabled as it keeps marking this as stale even though the bug exists?","createdAt":"2020-08-31T22:18:08Z","includesCreatedEdit":true,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1477#issuecomment-684071956","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDY4OTA2ODE0Mw==","author":{"login":"modernNeo"},"authorAssociation":"NONE","body":"@sfdye can this issue please be re-opened?","createdAt":"2020-09-08T18:49:08Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1477#issuecomment-689068143","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDY4OTIyMDM5Nw==","author":{"login":"s-t-e-v-e-n-k"},"authorAssociation":"COLLABORATOR","body":"That should get the bot leaving this issue alone.","createdAt":"2020-09-09T00:29:55Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":2}}],"url":"https://github.com/PyGithub/PyGithub/issues/1477#issuecomment-689220397","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs46xRpm","author":{"login":"alchiantera-ibm"},"authorAssociation":"NONE","body":"Having same issue. Duplicate calls is annoying","createdAt":"2021-12-04T09:10:58Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1477#issuecomment-985995878","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs47q0Uf","author":{"login":"modernNeo"},"authorAssociation":"NONE","body":"@alchiantera-ibm duplicate calls is allowing you to read/set the owners for an organization? duplicate calls to what exactly?","createdAt":"2021-12-25T22:38:42Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1477#issuecomment-1001080095","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs4_nAHj","author":{"login":"salob"},"authorAssociation":"NONE","body":"How can I get the owners of an organization?\r\nI am trying:\r\n```\r\norg_owners = org_object.get_members(\"\",\"owner\")\r\n```\r\nBut I just keep getting back all the members","createdAt":"2022-03-14T19:11:21Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1477#issuecomment-1067188707","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs4_nCWF","author":{"login":"salob"},"authorAssociation":"NONE","body":"Figured it out, this will return the owners:\r\n\r\n```\r\norg_owners = org_object.get_members(\"all\",\"admin\")\r\n```","createdAt":"2022-03-14T19:20:55Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1477#issuecomment-1067197829","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs4_pr02","author":{"login":"alchiantera-ibm"},"authorAssociation":"NONE","body":"@salob yes right... I also did in the following way\r\n`get_members(role=\"admin\")`\r\n\r\n@modernNeo duplicate call because if I want to get all the users and then filter them by role I have to perform two calls:\r\n`admin_users = org_object.get_members(role=\"admin\")\r\ngeneric_users = org_object.get_members(role=\"member\")`\r\n\r\nThis must be done because if I get all the users without specifying role or setting \"all\"\r\n`users = org_object.get_members()`\r\nor\r\n`users = org_object.get_members(role=\"all\")` \r\n\r\nI cannot filter them by role then. Every user in the list will have None as role","createdAt":"2022-03-15T11:42:32Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1477#issuecomment-1067892022","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs4_qA7C","author":{"login":"salob"},"authorAssociation":"NONE","body":"@alchiantera-ibm how are you retrieving your org object, I found issues when using the user instead of the org name in this call:\r\nuse\r\n```\r\ng.get_organization(org)\r\n```\r\nas opposed to:\r\n```\r\ng.get_organization(g.get_user())\r\n```\r\n\r\nAlso I only get back the filtered list of owners for the organizatiosn I myself was an owner of","createdAt":"2022-03-15T13:18:19Z","includesCreatedEdit":true,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1477#issuecomment-1067978434","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs5Aw1d8","author":{"login":"modernNeo"},"authorAssociation":"NONE","body":"have yall been able to set the owners for an organization or these are just ways to read the owners for an organization?","createdAt":"2022-04-02T04:31:24Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1477#issuecomment-1086543740","viewerDidAuthor":false}],"createdAt":"2020-04-21T04:39:28Z","number":1477,"state":"OPEN","title":"unable to read or set the owners for an organization","url":"https://github.com/PyGithub/PyGithub/issues/1477"},{"author":{"id":"MDQ6VXNlcjQ2NjMyNDA0","is_bot":false,"login":"xtuchyna","name":"Dominik Tuchyna"},"body":"By doing so a user could access both projects that the repository is dependant on and projects that are dependant on repository.\r\n\r\nThoughts?","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDYwODQzMDc5MQ==","author":{"login":"s-t-e-v-e-n-k"},"authorAssociation":"COLLABORATOR","body":"https://help.github.com/en/github/visualizing-repository-data-with-graphs/listing-the-packages-that-a-repository-depends-on shows that it is something accessed via the website, and is not exported via the REST API. Sadly, since it doesn't have a API endpoint, we can not add support for it.","createdAt":"2020-04-03T13:23:25Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1453#issuecomment-608430791","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDYwODU2NDcxOQ==","author":{"login":"xtuchyna"},"authorAssociation":"NONE","body":"it seems like they are stuck on just a preview on its API since April 2018\r\nhttps://developer.github.com/changes/2018-04-24-preview-dependency-graph-and-vulnerability-hooks/","createdAt":"2020-04-03T17:26:25Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1453#issuecomment-608564719","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDYwODcyMzQzOA==","author":{"login":"s-t-e-v-e-n-k"},"authorAssociation":"COLLABORATOR","body":"GraphQL is the v4 API, which we don't support either, I'm afraid.","createdAt":"2020-04-03T22:23:15Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1453#issuecomment-608723438","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs5t2ZTv","author":{"login":"EnricoMi"},"authorAssociation":"COLLABORATOR","body":"PyGithub now has its first GraphQL call, see https://github.com/PyGithub/PyGithub/commit/232df79a2947dc96363bdc6f51a6f446ff2b241f#diff-90017b18548bd848900b7cffd7fe86a610dc20e5d228663dfb429a47cdf65a20R767-R772 for reference.","createdAt":"2023-12-06T14:17:16Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1453#issuecomment-1842975983","viewerDidAuthor":false}],"createdAt":"2020-04-03T12:17:42Z","number":1453,"state":"OPEN","title":"Add get_dependency_graph feature for repository","url":"https://github.com/PyGithub/PyGithub/issues/1453"},{"author":{"id":"MDQ6VXNlcjU5NzQxMjM0","is_bot":false,"login":"ncl-kd","name":"Kevin Dixon"},"body":"We would like to be able to make use of the SCIM API (https://developer.github.com/v3/scim/) within the pyGithub package. This would enable us to search users in our organisation by their SCIM attributes, such as the idp provided email address, nameID. These attributes cannot be changed by the organisation members, unlike their personal github account details, so would provide an immutable set of search criteria for us. ","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDY5MDM0NzQ0Nw==","author":{"login":"fl-max"},"authorAssociation":"NONE","body":"Just a note, this won't work if SSO is set at the Enterprise level. You'll instead need to use a GraphQL query. An example can be found [here](https://github.com/github/platform-samples/blob/master/graphql/queries/enterprise-sso-member-details.graphql).\r\n\r\nUsing a session with the proper auth headers, you'd send this query like so:\r\n```python\r\nres = session.post(\"https://api.github.com/graphql\", json={'query': query})\r\n```\r\n\r\nWhere query is the GraphQL query. Loading the query from a file and using Jinja2 to template it helps. This does require admin:Org and admin:Enterprise permissions to work.\r\n","createdAt":"2020-09-10T14:58:32Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1448#issuecomment-690347447","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs5t2X0k","author":{"login":"EnricoMi"},"authorAssociation":"COLLABORATOR","body":"PyGithub now has its first GraphQL call, see https://github.com/PyGithub/PyGithub/commit/232df79a2947dc96363bdc6f51a6f446ff2b241f#diff-90017b18548bd848900b7cffd7fe86a610dc20e5d228663dfb429a47cdf65a20R767-R772 for reference.","createdAt":"2023-12-06T14:13:48Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1448#issuecomment-1842969892","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs6nu2NT","author":{"login":"anotherbhav"},"authorAssociation":"NONE","body":"I had a little trouble gluing all the information out there together, but this works for me to get a list of mapping dicts with 2 values: the sso email (in most cases) and the GitHub handle.  This is is the only way I could figure out how. \n\nThe SCIM documentation does not provide the GitHub handle or unique identifier that is also on the Org User list.  Hope it helps!\n\nThe PyGitHub had the functionality for graphql queries, but there wasn't much documentation on how to use it (that I could find), but it was laid out in an understandable way (Thanks team!).\n\n```python\nfrom github import Github\nfrom github import Auth\nimport json\n\napi_token = \"ghp_secrett0ken234\"\nauth = Auth.Token(api_token)\ngh_conn = Github(auth=auth)\n\norg_name = \"MyOrg\"\nend_cursor = None  # First end_cursor must be null to get the first page\nusers = []\n\nwhile [True]:\n    resp = gh_conn.requester.graphql_query(\"\"\"\n    query ($orgName: String!, $ssoCursor: String) {\n        organization(login: $orgName) {\n            samlIdentityProvider {\n                ssoUrl\n                externalIdentities(after: $ssoCursor, first: 100) {\n                    totalCount\n                    pageInfo {\n                        hasNextPage\n                        endCursor\n                    }\n                    edges {\n                        node {\n                            user {\n                                login\n                            }\n                            scimIdentity {\n                                username\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n                                    \"\"\", variables={\"orgName\": org_name, \"ssoCursor\" : end_cursor})\n\n    data = resp[1] # the data is in the second position of the list\n    users += data['data']['organization']['samlIdentityProvider']['externalIdentities']['edges']\n    \n    page_info = data['data']['organization']['samlIdentityProvider']['externalIdentities']['pageInfo']\n    if 'hasNextPage' in page_info and page_info['hasNextPage']:\n        end_cursor = page_info['endCursor']\n    else:\n        break # No end cursor found, end loop\n    \ngh_conn.close()\n```\n\n## references\n- https://github.com/github/platform-samples/issues/168\n- https://stackoverflow.com/questions/50589221/access-linked-saml-identity-via-the-github-api","createdAt":"2025-04-17T21:40:06Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1448#issuecomment-2814075731","viewerDidAuthor":false}],"createdAt":"2020-03-27T22:43:02Z","number":1448,"state":"OPEN","title":"SCIM API for SAML linked accounts","url":"https://github.com/PyGithub/PyGithub/issues/1448"},{"author":{"id":"MDQ6VXNlcjExNDE4MjAz","is_bot":false,"login":"gschaffner","name":"Ganden Schaffner"},"body":"Docs here: https://developer.github.com/v3/actions/\r\n\r\nAre there plans to add support for GitHub Actions? The API is still in beta, but I would suspect that it won't change much in the future.","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDU4MjU4NjM5OA==","author":{"login":"parzhitsky"},"authorAssociation":"NONE","body":"Isn't Actions still in beta?","createdAt":"2020-02-05T20:02:27Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1373#issuecomment-582586398","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDU4MjY5NTcyMg==","author":{"login":"gschaffner"},"authorAssociation":"NONE","body":"Looks like the beta ended in November [[source](https://github.blog/2019-08-08-github-actions-now-supports-ci-cd/)]. The API is definitely still in beta though.","createdAt":"2020-02-06T01:40:45Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1373#issuecomment-582695722","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDYwMjkyOTI1MQ==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"https://developer.github.com/changes/2020-03-23-ActionsGA/","createdAt":"2020-03-24T00:18:15Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1373#issuecomment-602929251","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDYwMjkyOTM0Mg==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"Pin this issue to get more attention","createdAt":"2020-03-24T00:18:34Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1373#issuecomment-602929342","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDYwOTQxMjgzNg==","author":{"login":"s-t-e-v-e-n-k"},"authorAssociation":"COLLABORATOR","body":"I won't split this issue up into six, but documenting progress as I get to them.\r\n\r\n- [ ] Artifacts\r\n- [x] Secrets\r\n- [x] Org secrets\r\n- [x] Self-hosted runners\r\n- [x] Workflows\r\n- [ ] Workflow jobs\r\n- [x] Workflow runs","createdAt":"2020-04-05T13:01:01Z","includesCreatedEdit":true,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":8}}],"url":"https://github.com/PyGithub/PyGithub/issues/1373#issuecomment-609412836","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDYxMDQ1MTYyOQ==","author":{"login":"cclauss"},"authorAssociation":"CONTRIBUTOR","body":"#1456 and #1457","createdAt":"2020-04-07T15:23:35Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1373#issuecomment-610451629","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDYyMTcxNDk5MQ==","author":{"login":"marns93"},"authorAssociation":"NONE","body":"Are there any plans, when the Actions API will be supported?","createdAt":"2020-04-30T09:15:39Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1373#issuecomment-621714991","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDYyMTcxNjM1NA==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"Not yet, but we are open to any granular PR to implement the checklist items ^ ","createdAt":"2020-04-30T09:18:20Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1373#issuecomment-621716354","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDYyMTcyMDk0OQ==","author":{"login":"s-t-e-v-e-n-k"},"authorAssociation":"COLLABORATOR","body":"I have a local branch for Workflows, it requires some polish, tests and more importantly some free time.","createdAt":"2020-04-30T09:27:54Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"HOORAY","users":{"totalCount":1}}],"url":"https://github.com/PyGithub/PyGithub/issues/1373#issuecomment-621720949","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDYyNjQxODk4Ng==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"I can take `Secrets` when I have some time.","createdAt":"2020-05-11T00:57:53Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1373#issuecomment-626418986","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDYyODQ4NDgxNg==","author":{"login":"3wnbr1"},"authorAssociation":"NONE","body":"Is somebody already working on Artifacts ? Otherwise I can take it","createdAt":"2020-05-14T08:37:29Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1373#issuecomment-628484816","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDYyODQ5NjI3Nw==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"@3wnbr1 Feel free","createdAt":"2020-05-14T08:56:43Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1373#issuecomment-628496277","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDYyODUxMTIyMw==","author":{"login":"s-t-e-v-e-n-k"},"authorAssociation":"COLLABORATOR","body":"I have a local branch that needs some more love for ``Workflow Runs``.","createdAt":"2020-05-14T09:21:50Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1373#issuecomment-628511223","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDY0Mjg4Mzg0Mw==","author":{"login":"JacekPliszka"},"authorAssociation":"NONE","body":"@3wnbr1 what is the status of your artifacts?\r\n\r\nI have list of artifacts and downloading artifact working but I have no tests and also my implementation need modification.\r\n","createdAt":"2020-06-11T19:27:19Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"HEART","users":{"totalCount":2}}],"url":"https://github.com/PyGithub/PyGithub/issues/1373#issuecomment-642883843","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDY4MDc5MDc3Nw==","author":{"login":"salomvary"},"authorAssociation":"NONE","body":"@s-t-e-v-e-n-k [`WorkflowRun`](https://github.com/PyGithub/PyGithub/blob/master/github/WorkflowRun.py) seems to be missing `workflow_id` attribute: https://docs.github.com/en/rest/reference/actions#list-workflow-runs-for-a-repository","createdAt":"2020-08-26T10:14:11Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1373#issuecomment-680790777","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDY4MDgwNjYyOQ==","author":{"login":"salomvary"},"authorAssociation":"NONE","body":"Another small thing: `repo.get_workflow(id_or_name)` fails if the id is `int`:\r\n\r\n```\r\n    \"GET\", self.url + \"/actions/workflows/\" + id_or_name\r\nTypeError: can only concatenate str (not \"int\") to str\r\n```","createdAt":"2020-08-26T10:51:23Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1373#issuecomment-680806629","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDY4ODUyNjAxMQ==","author":{"login":"zacker150"},"authorAssociation":"CONTRIBUTOR","body":"I've added support for `repo.get_workflow_runs` parameters in PR #1682 and limited support for runners in #1684","createdAt":"2020-09-07T22:16:48Z","includesCreatedEdit":true,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1373#issuecomment-688526011","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDcxNDUzOTA2NA==","author":{"login":"YannickJadoul"},"authorAssociation":"CONTRIBUTOR","body":"@JacekPliszka & @3wnbr1 What's the status of the artifacts API? I'd be happy to help out, if there's something I can do to push this forward :-)","createdAt":"2020-10-22T14:36:21Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1373#issuecomment-714539064","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDcxNDU5MDQyMA==","author":{"login":"JacekPliszka"},"authorAssociation":"NONE","body":"@YannickJadoul  I've proposed some reduction of boilerplatte and I pushed it to my branch https://github.com/JacekPliszka/PyGithub/tree/meta_artifacts but discussion was slow and I got involved in other work and the project I need it for was put on hold.\r\n\r\nSo you may want to use something from my branch or write it in the current style anew.","createdAt":"2020-10-22T15:55:33Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1373#issuecomment-714590420","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDcxNDc2MDE0OQ==","author":{"login":"YannickJadoul"},"authorAssociation":"CONTRIBUTOR","body":"@JacekPliszka, OK, great, thanks! :-) Where's this discussion you mention? Was that a public one, or just internally?","createdAt":"2020-10-22T21:01:56Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1373#issuecomment-714760149","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDc4MzYyNjUwMg==","author":{"login":"plocket"},"authorAssociation":"NONE","body":"Are repo or org secrets being handled in here or elsewhere?","createdAt":"2021-02-22T19:44:20Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1373#issuecomment-783626502","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDc5MjM3MTI1MQ==","author":{"login":"calebstewart"},"authorAssociation":"NONE","body":"Is secret deletion on the road map? I see that creating/updating secrets is already added (and I think it was being tracked here from what I can tell), but I don't see any interface to the delete API (as seen [here](https://docs.github.com/en/rest/reference/actions#delete-a-repository-secret) )","createdAt":"2021-03-07T23:08:27Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1373#issuecomment-792371251","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDc5MzA0Njg2MQ==","author":{"login":"JacekPliszka"},"authorAssociation":"NONE","body":"@YannickJadoul  here https://github.com/PyGithub/PyGithub/issues/1556  - the project I needed that for was put on hold so I lost motivation for rewriting what I did","createdAt":"2021-03-08T20:18:24Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1373#issuecomment-793046861","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDc5MzA1MzgwNg==","author":{"login":"YannickJadoul"},"authorAssociation":"CONTRIBUTOR","body":"@JacekPliszka, thanks. I had actually found it, back then, and created #1734, recycling part of your original work on this.","createdAt":"2021-03-08T20:29:06Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1373#issuecomment-793053806","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDg1NjYxNjY1Mg==","author":{"login":""},"authorAssociation":"NONE","body":"not exactly a python developer, but it looks like org-scope and enterprise-scope self-hosted runner endpoints are missing too","createdAt":"2021-06-08T09:32:06Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":2}},{"content":"EYES","users":{"totalCount":1}}],"url":"https://github.com/PyGithub/PyGithub/issues/1373#issuecomment-856616652","viewerDidAuthor":false}],"createdAt":"2020-01-29T02:39:30Z","number":1373,"state":"OPEN","title":"GitHub Actions support","url":"https://github.com/PyGithub/PyGithub/issues/1373"},{"author":{"id":"MDQ6VXNlcjI4NTcwMzI1","is_bot":false,"login":"dleach02","name":"David Leach"},"body":"The paginated list returned from a search_issues() will report a totalCount that maxes out to 1000 when a search query results in more than 1000 items. The totalCount() method in PaginatedList() will get headers and data from result of a requester.requestJsonAndCheck() using the first URL. The logic then tests to see if 'link' is not in headers which in my case there is a 'link' so it falls to the else side and parses the lastUrl line for 'page' which is 1000.\r\n\r\nProblem though is that in my search, the original 'data' structure has a valid 'total_count' field of 3041 so I'm not sure why the logic tries to derive something from the lastUrl which is generating an incorrect value?\r\n\r\nAnd if I iterate through the PaginatedList returned I count only 1020 items so I'm not able to iterate through all 3041 items. Note that I put rate limiting code in the iteration loop to sleep checking on get_rate_limit().search.remaining to go nonzero.\r\n","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDU2MjQxNzM5NA==","author":{"login":"dleach02"},"authorAssociation":"NONE","body":"this may be some limit in number of pages the search will support... pretty much most of my test runs return 1000 where there are 10 pages of 1000 entries.","createdAt":"2019-12-06T03:29:08Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1309#issuecomment-562417394","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDU3OTkyNzM0MA==","author":{"login":"djwgit"},"authorAssociation":"NONE","body":"possible to set this high priority, thanks.","createdAt":"2020-01-29T19:44:38Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1309#issuecomment-579927340","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDU3OTk0MTAxNQ==","author":{"login":"dleach02"},"authorAssociation":"NONE","body":"> possible to set this high priority, thanks.\r\n\r\n@djwgit, Not sure I'm following what you are saying? Are you wanting this issue made a high priority issue or are you suggesting there is something I could do in my code to make my search request high priority?","createdAt":"2020-01-29T20:19:24Z","includesCreatedEdit":true,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1309#issuecomment-579941015","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDYwNTcxMDMwNg==","author":{"login":"stale"},"authorAssociation":"NONE","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","createdAt":"2020-03-29T22:16:09Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1309#issuecomment-605710306","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDYwNjA0NTU1MQ==","author":{"login":"dleach02"},"authorAssociation":"NONE","body":"I guess I had an open question to @djwgit. Wasn't sure if this person wanted me to mark this issue as high?","createdAt":"2020-03-30T14:48:04Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1309#issuecomment-606045551","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDYyNDc3OTgyNQ==","author":{"login":"djwgit"},"authorAssociation":"NONE","body":"@dleach02  \r\nsorry for the late reply, and thanks for opening this issue.\r\ncurrently, I am doing a workaround, to query several times by time ranges, then put results together... \r\nit will be nice to have this solved in a nicer way without using the time-slicing workaround.\r\nyes,  it is nice if this issue (#1309) could be marked as high-priority \r\n(oh, @sfdye already did :-) )\r\nthanks again for this awesome package !","createdAt":"2020-05-06T17:20:33Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1309#issuecomment-624779825","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDYyNDgxOTM3NQ==","author":{"login":"dleach02"},"authorAssociation":"NONE","body":"@djwgit \r\n\r\nYes, my work around is doing the same thing. Time slice the search request. Time permitting, I was also going to investigate the v4 API to see if that would be easier... but would like a nice python wrapper ;-)\r\n","createdAt":"2020-05-06T18:38:02Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1309#issuecomment-624819375","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDcxMjQ5NDgzMw==","author":{"login":"janeklb"},"authorAssociation":"NONE","body":"Just bumped into this too - thought it was an issue w/ the PyGithub library, but it looks like it's just a github api limitation\r\n> To satisfy that need, the GitHub Search API provides **up to 1,000 results for each search**.\r\n\r\nhttps://docs.github.com/en/free-pro-team@latest/rest/reference/search","createdAt":"2020-10-19T23:23:13Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":1}}],"url":"https://github.com/PyGithub/PyGithub/issues/1309#issuecomment-712494833","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDg3MTAwMDQwOQ==","author":{"login":"psybers"},"authorAssociation":"NONE","body":"So just fyi, if I am understanding the bug correctly, I think there is a simple workaround:\r\n\r\n````python\r\nresults = g.search_repositories('test')\r\nresults.get_page(0)\r\nprint('total: ' + str(results.totalCount))\r\n````\r\n\r\nBasically if you call `get_page(0)` before requesting the total count, then it shows the actual number (e.g., 50k) as opposed to how many results they will actually let you access (1k). At least that seems to work for me.","createdAt":"2021-06-30T00:09:50Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":3}}],"url":"https://github.com/PyGithub/PyGithub/issues/1309#issuecomment-871000409","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDg3MTAwMTQ2Nw==","author":{"login":"psybers"},"authorAssociation":"NONE","body":"What I would recommend the library author do is to store the `data[\"total_count\"]` value in maybe another field and then allow accessing that value. That is the number of matching items for the search query. This can be useful to people searching!\r\n\r\nIf the search results in less than 1k results, then that value matches the `totalCount` value. So it is mostly useful when there are more than 1k results.","createdAt":"2021-06-30T00:12:04Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":1}}],"url":"https://github.com/PyGithub/PyGithub/issues/1309#issuecomment-871001467","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs47u3LK","author":{"login":"vladimirtelepov"},"authorAssociation":"NONE","body":"any updates?","createdAt":"2021-12-28T14:48:39Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1309#issuecomment-1002140362","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs5NbJEC","author":{"login":"SaashaJoshi"},"authorAssociation":"NONE","body":"Hey, \r\nThe totalCount method for paginated lists still max outs to 1000. It might be weird but when I do the following, I encounter a bug.\r\n\r\n```\r\n>>> repos = g.search_repositories(query = \"language:python\")\r\n>>> print(repos.totalCount)\r\n1000\r\n>>> print(repos[1].totalCount)\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\nAttributeError: 'Repository' object has no attribute 'totalCount'\r\n>>> print(repos.totalCount)\r\n7924416\r\n```\r\nI am not sure what happens! The number on the third try might be the correct value, but there is no way to verify that.\r\n","createdAt":"2022-11-01T18:47:46Z","includesCreatedEdit":true,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1309#issuecomment-1298960642","viewerDidAuthor":false}],"createdAt":"2019-12-05T23:13:11Z","number":1309,"state":"OPEN","title":"search_issues() result has totalCount maxed out to 1000","url":"https://github.com/PyGithub/PyGithub/issues/1309"},{"author":{"id":"MDQ6VXNlcjc0NjA3OA==","is_bot":false,"login":"mortenlj","name":"Morten Lied Johansen"},"body":"When doing a source import, there are a number of additional operations available once the import has been started. It would be nice if support for these could be implemented. For me personally, mapping authors is the most needed, but it would also be useful to support getting large files, and being able to cancel an import.\r\n","comments":[],"createdAt":"2019-11-24T22:37:06Z","number":1298,"state":"OPEN","title":"Support all features of SourceImport","url":"https://github.com/PyGithub/PyGithub/issues/1298"},{"author":{"id":"MDQ6VXNlcjI1MTg1MDUz","is_bot":false,"login":"sk193","name":""},"body":"Hello PyGithub Community - First off, thank you for supporting this tool you folks are the best! \r\n\r\nIssue: I am attempting to authenticate to github enterprise using client_id and client_secret. I need to leverage PyGithub to post issues. Please let me know if there is a better route I should take, below are the errors I am hitting. \r\n\r\nCode: \r\n```\r\nfrom github import Github\r\n\r\nclient_id=<xyz>\r\nclient_secret=<abc>\r\ng = Github(base_url=\"https://<enterprise>/api/v3\", client_id=client_id, client_secret=client_secret)\r\n\r\nfor repo in g.get_user().get_repos():\r\n    print(repo.name)\r\n\r\nrepo = g.get_repo(\"<repo>\")\r\nrepo.create_issue(title=\"This is a new issue\", body=\"This is the issue body\" \r\n```\r\nError: \r\n```\r\nTraceback (most recent call last):\r\n    File \"script.py\", line 7, in <module>\r\n      for repo in g.get_user().get_repos():\r\n    File \"/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/github/PaginatedList.py\", line 64, in __iter__\r\n      newElements = self._grow()\r\n    File \"/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/github/PaginatedList.py\", line 76, in _grow\r\n      newElements = self._fetchNextPage()\r\n    File \"/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/github/PaginatedList.py\", line 201, in _fetchNextPage\r\n      headers=self.__headers\r\n    File \"/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/github/Requester.py\", line 275, in requestJsonAndCheck\r\n      return self.__check(*self.requestJson(verb, url, parameters, headers, input, self.__customConnection(url)))\r\n    File \"/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/github/Requester.py\", line 286, in __check\r\n      raise self.__createException(status, responseHeaders, output)\r\n  github.GithubException.GithubException: 401 {'message': 'Requires authentication', 'documentation_url': 'https://developer.github.com/enterprise/2.16/v3/repos/#list-your-repositories'}\r\n```\r\n\r\nThanks again for all the help!","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDUxMTIyOTUyNQ==","author":{"login":"stale"},"authorAssociation":"NONE","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","createdAt":"2019-07-14T19:38:04Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1119#issuecomment-511229525","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDc4NzAxNzUyOQ==","author":{"login":"mudit-mhjn"},"authorAssociation":"NONE","body":"Hey, I'm facing the same issue. Did you resolve it or any method you used to get around it?","createdAt":"2021-02-27T06:58:59Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1119#issuecomment-787017529","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDc4OTQ0NDcwNw==","author":{"login":"kbenzle"},"authorAssociation":"NONE","body":"> Hey, I'm facing the same issue. Did you resolve it or any method you used to get around it?\r\n\r\nLOL, from 2019 to 4 days ago :) I'm having the same problem. You find anything?","createdAt":"2021-03-03T05:31:10Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"LAUGH","users":{"totalCount":5}}],"url":"https://github.com/PyGithub/PyGithub/issues/1119#issuecomment-789444707","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDc5MDEwODA1NA==","author":{"login":"scottdangelo"},"authorAssociation":"NONE","body":"I'm having a similar issue. My scripts used to work, now I get this 401:\r\n```  File \"/usr/local/lib/python3.9/site-packages/github/MainClass.py\", line 345, in get_repo\r\n    headers, data = self.__requester.requestJsonAndCheck(\r\n  File \"/usr/local/lib/python3.9/site-packages/github/Requester.py\", line 315, in requestJsonAndCheck\r\n    return self.__check(\r\n  File \"/usr/local/lib/python3.9/site-packages/github/Requester.py\", line 340, in __check\r\n    raise self.__createException(status, responseHeaders, output)\r\ngithub.GithubException.GithubException: 401 {\"message\": \"Must authenticate to access this API.\", \"documentation_url\": \"https://developer.github.com/enterprise/2.21/v3\"}\r\n```","createdAt":"2021-03-03T22:09:25Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1119#issuecomment-790108054","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDc5MDExODQ5Mw==","author":{"login":"scottdangelo"},"authorAssociation":"NONE","body":"@kbenzle @mudit-mhjn FYI, I opened a new issue:\r\nhttps://github.com/PyGithub/PyGithub/issues/1865\r\n","createdAt":"2021-03-03T22:28:53Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1119#issuecomment-790118493","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDg0MTc0MzUyMQ==","author":{"login":"sekmani123"},"authorAssociation":"NONE","body":"same problem here \r\n","createdAt":"2021-05-16T00:16:46Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1119#issuecomment-841743521","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDg0ODQxMzI5MQ==","author":{"login":"iwangliguo"},"authorAssociation":"NONE","body":"I have the same problem now, is there any solutions？ thanks.","createdAt":"2021-05-26T02:45:04Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1119#issuecomment-848413291","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDg2NDQxMDkxMQ==","author":{"login":"varchasa"},"authorAssociation":"NONE","body":"I have the same problem. Any solutions ?","createdAt":"2021-06-19T14:05:20Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1119#issuecomment-864410911","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs45JB88","author":{"login":"satyam-nykaa"},"authorAssociation":"NONE","body":"any solution ?","createdAt":"2021-11-03T05:40:25Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1119#issuecomment-958668604","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs45JHNz","author":{"login":"iwangliguo"},"authorAssociation":"NONE","body":"I gave up it and changed to another lib called git,so you can run your code in Python just like in git bash.(maybe pip install git, sorry if it's wrong)\r\n\r\n\r\n\r\n---Original---\r\nFrom: ***@***.***&gt;\r\nDate: Wed, Nov 3, 2021 13:40 PM\r\nTo: ***@***.***&gt;;\r\nCc: ***@***.******@***.***&gt;;\r\nSubject: Re: [PyGithub/PyGithub] github.GithubException.GithubException: 401 {'message': 'Requires authentication', (#1119)\r\n\r\n\r\n\r\n\r\n \r\nany solution ?\r\n \r\n—\r\nYou are receiving this because you commented.\r\nReply to this email directly, view it on GitHub, or unsubscribe.","createdAt":"2021-11-03T06:48:45Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1119#issuecomment-958690163","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs52bLpI","author":{"login":"MengFanjun020906"},"authorAssociation":"NONE","body":"any solution?It is 2024 now😭","createdAt":"2024-03-09T12:00:41Z","includesCreatedEdit":true,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":2}}],"url":"https://github.com/PyGithub/PyGithub/issues/1119#issuecomment-1986837064","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs52bPrc","author":{"login":"sk193"},"authorAssociation":"NONE","body":"Hello everyone, sorry I thought I replied to this post. I was able to fix this issue by doing the following. \r\n\r\nBasically you need to generate access token and pass that through (look at what I am doing for rez and g in this sample code). Once authenticated you should be able to make a call to create an issue. This token will be alive for 10mins but you can alter that if needed. \r\n\r\nSorry it took 5 years to post but hope this helps! \r\n\r\n```\r\n#! /usr/bin/python3.7\r\n\r\nimport jwt \r\nimport time\r\nimport requests\r\nimport json\r\nfrom github import Github\r\n\r\nkeyFile = open(\"./123.pem\", \"r\")\r\nkeyFileLines = keyFile.readlines()\r\n\r\nkeyString = ''.join(keyFileLines)\r\n\r\n#print(keyString)\r\n\r\npayload = {\r\n    # issued at time\r\n    'iat': time.time(),\r\n    # JWT expiration time (10 minute maximum)\r\n    'exp': int(time.time()) + (10 * 60),\r\n    # GitHub App's identifier\r\n    'iss': '14'\r\n}\r\n\r\nencodedJWT = jwt.encode(payload, keyString, algorithm=\"RS256\")\r\n\r\nheader = {\"Authorization\": \"Bearer {}\".format(encodedJWT.decode()),\r\n               \"Accept\": \"application/vnd.github.machine-man-preview+json\"}\r\n    \r\n#resp = requests.get('https://api.git.<domain>.net/app', headers=header)\r\n\r\n#print(resp.status_code)\r\n#print(resp.content.decode())\r\n#print (encodedJWT)\r\n###END AUTH###\r\n\r\nrez = requests.post('https://git.<domain>.net/api/v3/installations/29/access_tokens', headers=header)\r\nresponse = rez.json()\r\ntoken = response['token']\r\n\r\ng = Github(base_url=\"https://git.<domain>.net/api/v3\", login_or_token=token)\r\n\r\nrepo = g.get_repo(\"Sysops/sk193-dev\")\r\nrepo.create_issue(title=\"This is a new issue\", body=\"Brah\")\r\n\r\n```","createdAt":"2024-03-09T13:11:06Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":1}}],"url":"https://github.com/PyGithub/PyGithub/issues/1119#issuecomment-1986853596","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs52bjtG","author":{"login":"EnricoMi"},"authorAssociation":"COLLABORATOR","body":"Are you trying to authenticate an app installation as the user? The current way to do this is show in [this example](https://github.com/PyGithub/PyGithub/blob/main/doc/examples/Authentication.rst#app-user-authentication).\r\n\r\nHowever, looks like this does not support Github Enterprise: #2766, #2485.\r\nGood news: a fix is available: #2780\r\n\r\nCan you please test if #2780 works for you?","createdAt":"2024-03-09T18:05:42Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1119#issuecomment-1986935622","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs52b4Hq","author":{"login":"MengFanjun020906"},"authorAssociation":"NONE","body":"I will try, thanks","createdAt":"2024-03-10T00:11:14Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1119#issuecomment-1987019242","viewerDidAuthor":false}],"createdAt":"2019-05-15T18:55:37Z","number":1119,"state":"OPEN","title":"github.GithubException.GithubException: 401 {'message': 'Requires authentication',","url":"https://github.com/PyGithub/PyGithub/issues/1119"},{"author":{"id":"MDQ6VXNlcjEzOTI1Mg==","is_bot":false,"login":"Twitch","name":""},"body":"When using get_repo().totalCount on a small result set (only my own repositories) totalCount returns the repository count correctly. When querying my enterprise Github for a complete list of repositories, the following error occurs:\r\n\r\n```bash\r\nTraceback (most recent call last):\r\n  File \"./test-repo-list.py\", line 9, in <module>\r\n    print(\"Found %s repositories.\" % full_repo_list.totalCount)\r\n  File \"/usr/local/lib/python3.7/dist-packages/github/PaginatedList.py\", line 175, in totalCount\r\n    self.__totalCount = int(parse_qs(lastUrl)['page'][0])\r\nKeyError: 'page'\r\n````\r\n\r\nI am using Python 3.7.1 and the pip-installed version 1.43.4 of PyGithub with a Github Enterprise version 2.14.7.\r\n\r\nThis is the code I have used to test this:\r\n\r\n```python\r\n#!/usr/bin/env python3.7\r\nfrom github import Github\r\nimport os\r\n\r\napi_token = os.getenv('GITHUB_TOKEN', None)\r\ng = Github(base_url=\"https://mygithubhost.lads\", login_or_token=api_token)\r\n\r\nfull_repo_list = g.get_repos()\r\nprint(\"Found %s repositories.\" % full_repo_list.totalCount)\r\n```\r\n\r\nI did notice, after some skimming of PaginatedList.py, that the Link headers differ between the two tests. When collecting just my own repositories, I see the \"last\" link returned in the link header, but when querying for all repositories I only see \"next\" and \"first\" links returned.\r\n\r\ng.get_user().get_repos():\r\n```json\r\n'link':'<https://mygithubhost.lads/api/v3/user/repos?per_page=1&page=2>; rel=\"next\", <https://mygithubhost.lads/api/v3/user/repos?per_page=1& \r\npage=10>; rel=\"last\"'`\r\n```\r\n\r\ng.get_repos():\r\n```json\r\n'link':'<https://mygithubhost.lads/api/v3/repositories?per_page=1&since=112>; rel=\"next\", <https://mygithubhost.lads/api/v3/repositories{?since}>; rel=\"first\"'\r\n```\r\n\r\nI don't know what's causing this difference in behavior, though.\r\n\r\nIf I don't try to get totalCount from the object, it works as expected, but totalCount specifically seems to fail.","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDQ1Mzk3MjUzOQ==","author":{"login":"Hanaasagi"},"authorAssociation":"CONTRIBUTOR","body":"Maybe, From the [list-all-public-repositories API](https://developer.github.com/v3/repos/#list-all-public-repositories) doc.\r\n\r\n> Note: Pagination is powered **exclusively** by the since parameter. Use the Link header to get the URL for the next page of repositories.\r\n\r\nIt not support `per_page` parameter, so the pagination strategy is not working. But I don't know why there is no last` link returned in the link header.","createdAt":"2019-01-14T11:21:05Z","includesCreatedEdit":true,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1006#issuecomment-453972539","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDUzMTA4NzQ0Mw==","author":{"login":"stale"},"authorAssociation":"NONE","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","createdAt":"2019-09-13T03:48:29Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1006#issuecomment-531087443","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDU2NzY5NTQwMg==","author":{"login":"stoiev"},"authorAssociation":"NONE","body":"This issue could be related to the way that [PaginatedList.py](https://github.com/PyGithub/PyGithub/blob/master/github/PaginatedList.py#L170) parses `links` urls from headers.\r\n\r\nparse_qs is executed using a full url. It fails parsing first parameter (rigth after `?`)\r\n\r\n```python\r\n>>> from urllib.parse import parse_qs\r\n>>> parse_qs(\"https://github.com/Cobliteam/?page=11\")\r\n{'https://github.com/Cobliteam/?page': ['11']}\r\n>>> parse_qs(\"https://github.com/Cobliteam/?per_page=3&page=11\")\r\n{'https://github.com/Cobliteam/?per_page': ['3'], 'page': ['11']}\r\n```\r\n\r\nCould this bug be reopened? Or should I open a new issue?","createdAt":"2019-12-19T22:04:10Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1006#issuecomment-567695402","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs5myUlg","author":{"login":"SlapDrone"},"authorAssociation":"NONE","body":"Hey, just got stung by this. Anyone since managed to find a solution?","createdAt":"2023-09-18T21:19:07Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1006#issuecomment-1724467552","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs5m4iwR","author":{"login":"EnricoMi"},"authorAssociation":"COLLABORATOR","body":"Never seen this, reopening this issue for tracking.","createdAt":"2023-09-19T17:03:35Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1006#issuecomment-1726098449","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs5oHFi6","author":{"login":"sag1sh-rezilion"},"authorAssociation":"NONE","body":"I've had a few tackles with this issue, it reappears more when using the lazy=True when creating the repo object (as an example -  r = g.get_repo('docker/docker', lazy=True); c = r.get_contributors(anon='true'); c.totalCount\r\n\r\nAn easy fix could be in the function totalCount in the line self.__totalCount = int(parse_qs(lastUrl)[\"page\"][0])\r\ninstead there should be - \r\nurlQuery = urlparse(lastUrl).query\r\nself.__totalCount = int(parse_qs(urlQuery)[\"page\"][0])","createdAt":"2023-10-04T11:31:53Z","includesCreatedEdit":true,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/1006#issuecomment-1746688186","viewerDidAuthor":false}],"createdAt":"2019-01-03T23:46:22Z","number":1006,"state":"OPEN","title":"PaginatedList.totalCount KeyError: 'page' with large results","url":"https://github.com/PyGithub/PyGithub/issues/1006"},{"author":{"id":"MDQ6VXNlcjQ0MTc2MjYw","is_bot":false,"login":"aelent-scalyr","name":"Alex Elent"},"body":"As documented here: https://developer.github.com/v3/media/#commits-commit-comparison-and-pull-requests. \r\n\r\nRequired for determining position for creating a review comment.","comments":[],"createdAt":"2018-12-05T22:52:37Z","number":983,"state":"OPEN","title":"Support  application/vnd.github.VERSION.diff","url":"https://github.com/PyGithub/PyGithub/issues/983"},{"author":{"id":"MDQ6VXNlcjEwMTYzOTA=","is_bot":false,"login":"sfdye","name":"Liuyang Wan"},"body":"Motivation:\r\n#862 #456 #321 #584 #762 \r\n\r\nPyGithub is a great library, however it may not be intuitive to use at the beginning. Not everyone is a Github API expert, so I am trying to provide some working examples (recipes) that will hopefully help you get started.\r\n\r\nThe skeleton has been setup [here](https://github.com/PyGithub/PyGithub/tree/master/doc/examples) and the example docs is already live on readthedocs as usual:\r\n\r\nhttps://pygithub.readthedocs.io/en/latest/examples.html\r\n\r\nNote that the list will expand and **any PR to add more examples is extremely welcome** 😄 \r\n\r\nIf you want to see any examples not covered here, just leave a comment.","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDQxNDYxNTMzNQ==","author":{"login":"Abdur-rahmaanJ"},"authorAssociation":"NONE","body":"@sfdye readd the login example please ^^_","createdAt":"2018-08-21T09:40:31Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/874#issuecomment-414615335","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQyOTA3NTY5NQ==","author":{"login":"mscheper"},"authorAssociation":"NONE","body":"I just started with PyGithub, and [found some examples](https://pygithub.readthedocs.io/en/latest/examples.html), so obviously some work has been done—thanks, people!\r\n\r\nBut I don't see any examples for how to listen for events, e.g. [pushevent](https://developer.github.com/v3/activity/events/types/#pushevent) and [pullrequestevent](https://developer.github.com/v3/activity/events/types/#pullrequestevent). Could examples for those be added?","createdAt":"2018-10-11T18:48:20Z","includesCreatedEdit":true,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/874#issuecomment-429075695","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQyOTk3MjQ2Ng==","author":{"login":"mscheper"},"authorAssociation":"NONE","body":"Thanks, @LeviMatus!","createdAt":"2018-10-15T18:54:18Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/874#issuecomment-429972466","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQ0NzQzMTY1NQ==","author":{"login":"stale"},"authorAssociation":"NONE","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","createdAt":"2018-12-14T19:35:37Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/874#issuecomment-447431655","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQ0ODgzOTc0MA==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"this is not stale","createdAt":"2018-12-20T02:49:53Z","includesCreatedEdit":true,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/874#issuecomment-448839740","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQ2MDAwNTEyMQ==","author":{"login":"goodship1"},"authorAssociation":"NONE","body":"I am Writing Organization examples now ","createdAt":"2019-02-02T22:33:46Z","includesCreatedEdit":true,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":2}}],"url":"https://github.com/PyGithub/PyGithub/issues/874#issuecomment-460005121","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQ3OTY4Mzc3MQ==","author":{"login":"stale"},"authorAssociation":"NONE","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","createdAt":"2019-04-03T22:37:28Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/874#issuecomment-479683771","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQ5NjUxNTg1OA==","author":{"login":"yks0000"},"authorAssociation":"NONE","body":"I am new to PyGithub SDK and trying to do below operations. However, having difficulty going through documents to know the usage.\r\n\r\n1. get a file content from a specific branch \r\n\r\ncommand line equivalent: \r\n\r\n`git checkout <<branch>> and then get file content`\r\n\r\n**Issue:**\r\n\r\n**I am able to get file content from master branch using this sdk but not from specific branch**\r\n\r\n2. repo tags and its details \r\n\r\ncommand line equivalent: \r\n\r\n`git tag -v <<tag_id>>`\r\n\r\n3. Update that file\r\n\r\nI see here the docs `https://pygithub.readthedocs.io/en/latest/examples/Repository.html#update-a-file-in-the-repository`\r\n\r\n4. Update user details for commit \r\n\r\n```\r\ngit config user.email \"cicd@example.com\"\r\ngit config user.name \"cicd\"\r\ngit commit --amend --reset-author --no-edit\r\n```\r\n\r\n5. Git pull that branch before commit  as other automation might have committed some other file.\r\n6. git commit in the branch\r\n\r\n```\r\ngit pull --no-edit\r\ngit add $FILE_NAME\r\ngit commit -m \"updating $FILE_NAME\"\r\ngit pull --no-edit && git push origin\r\n```\r\n\r\nI am also trying to find the method/api of this sdk to do that, but if someone have it ready, please help with the same.","createdAt":"2019-05-28T13:27:05Z","includesCreatedEdit":true,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/874#issuecomment-496515858","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDUxNTY4ODI2OQ==","author":{"login":"stale"},"authorAssociation":"NONE","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","createdAt":"2019-07-27T14:28:19Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/874#issuecomment-515688269","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDU0NzM0NjIzOA==","author":{"login":"mancuss"},"authorAssociation":"NONE","body":"Hello, I'm a relatively new developer and this is helping a lot. Is any one planning to do examples for github app? Thanks!","createdAt":"2019-10-29T10:06:14Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/874#issuecomment-547346238","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDU2MTU3MjE2Mw==","author":{"login":"estagumor"},"authorAssociation":"NONE","body":"> I am new to PyGithub SDK and trying to do below operations. However, having difficulty going through documents to know the usage.\r\n> \r\n> 1. get a file content from a specific branch\r\n> \r\n> command line equivalent:\r\n> \r\n> `git checkout <<branch>> and then get file content`\r\n> \r\n> **Issue:**\r\n> \r\n> **I am able to get file content from master branch using this sdk but not from specific branch**\r\n> \r\n> 1. repo tags and its details\r\n> \r\n> command line equivalent:\r\n> \r\n> `git tag -v <<tag_id>>`\r\n> \r\n> 1. Update that file\r\n> \r\n> I see here the docs `https://pygithub.readthedocs.io/en/latest/examples/Repository.html#update-a-file-in-the-repository`\r\n> \r\n> 1. Update user details for commit\r\n> \r\n> ```\r\n> git config user.email \"cicd@example.com\"\r\n> git config user.name \"cicd\"\r\n> git commit --amend --reset-author --no-edit\r\n> ```\r\n> \r\n> 1. Git pull that branch before commit  as other automation might have committed some other file.\r\n> 2. git commit in the branch\r\n> \r\n> ```\r\n> git pull --no-edit\r\n> git add $FILE_NAME\r\n> git commit -m \"updating $FILE_NAME\"\r\n> git pull --no-edit && git push origin\r\n> ```\r\n> \r\n> I am also trying to find the method/api of this sdk to do that, but if someone have it ready, please help with the same.\r\n\r\nhi! I'm trying to get the content of an specific branch too. Did you get it? Thanks!","createdAt":"2019-12-04T10:17:22Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/874#issuecomment-561572163","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDYyMzA2NDg2MQ==","author":{"login":"gfleetwood"},"authorAssociation":"NONE","body":"@estagumor If you still need this answer the key is the [ref parameter](https://developer.github.com/v3/repos/contents/#get-contents) in the `get_contents` function. The default is \"master\". Here's an example getting the contents of the \"0.6.X\" branch of the scikit-learn repo.\r\n\r\n```\r\nfrom github import Github\r\n\r\ng = Github(\"USERNAME\", \"PASSWORD\")\r\nrepo = g.get_repo(\"scikit-learn/scikit-learn\")\r\nrepo.get_contents(\"\", ref = \"0.6.X\")\r\n```","createdAt":"2020-05-03T06:58:56Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/874#issuecomment-623064861","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDY0NTk4MjU2Ng==","author":{"login":"qbits-rwx"},"authorAssociation":"NONE","body":"@sfdye I just started working with PyGithub and it works great.  However even if i'am familiar with the git api, it would be great if you can provide a working example of how to set create / set branch protection rules.\r\n\r\nI tried for example:\r\ng.get_repo('SECRET/SECRET').get_branch('master').add_required_signatures()","createdAt":"2020-06-18T12:21:12Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/874#issuecomment-645982566","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDY0NTk4NDMyNQ==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"@qbits-rwx I think the method you need is:\r\nhttps://pygithub.readthedocs.io/en/latest/github_objects/Branch.html#github.Branch.Branch.edit_protection\r\n\r\nhttps://developer.github.com/v3/repos/branches/#update-branch-protection","createdAt":"2020-06-18T12:24:43Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":1}}],"url":"https://github.com/PyGithub/PyGithub/issues/874#issuecomment-645984325","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDY0NjA0NzAyNQ==","author":{"login":"qbits-rwx"},"authorAssociation":"NONE","body":"Yes this did the trick. Unfortunately, require signed commits, is not implemented. Would be nice to have, as it is a policy we need to set on every branch. ","createdAt":"2020-06-18T14:15:11Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/874#issuecomment-646047025","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDY0NjM2NTg3OQ==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"Feel free to send a FR or PR","createdAt":"2020-06-19T00:11:14Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/874#issuecomment-646365879","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDY3MTI5MjAyMw==","author":{"login":"xpdable"},"authorAssociation":"NONE","body":"#1628 A full example to upload multipe files in one commit","createdAt":"2020-08-10T11:05:38Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/874#issuecomment-671292023","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDY3ODYyNzMzOA==","author":{"login":"shriaas2898"},"authorAssociation":"NONE","body":"Hey, I was going through Pull Requests examples, is there any way to get a pull request by its `HTML`? Or is there any function available to convert HTML URL to Github API query?\r\n","createdAt":"2020-08-22T11:09:02Z","includesCreatedEdit":true,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/874#issuecomment-678627338","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDc5Njc3MjEyNg==","author":{"login":"NicoWeio"},"authorAssociation":"CONTRIBUTOR","body":"Thanks a lot for these examples! What I'm missing is an example for exception handling. For instance, it wasn't immediately clear to me how to catch a `github.GithubException.UnknownObjectException`.","createdAt":"2021-03-11T14:22:23Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/874#issuecomment-796772126","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs44vjt-","author":{"login":"wsjohnso007"},"authorAssociation":"NONE","body":"Test show the test result","createdAt":"2021-10-26T14:20:29Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"CONFUSED","users":{"totalCount":2}}],"url":"https://github.com/PyGithub/PyGithub/issues/874#issuecomment-951991166","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs46yIuc","author":{"login":"nitishagar"},"authorAssociation":"NONE","body":"> Yes this did the trick. Unfortunately, require signed commits, is not implemented. Would be nice to have, as it is a policy we need to set on every branch.\r\n\r\n@qbits-rwx Following should help with \"require signed commit\" setting on a branch: https://pygithub.readthedocs.io/en/latest/github_objects/Branch.html#github.Branch.Branch.add_required_signatures","createdAt":"2021-12-05T12:27:54Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/874#issuecomment-986221468","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs49vfTH","author":{"login":"wangzelin007"},"authorAssociation":"NONE","body":"Hi [sfdye](https://github.com/sfdye),\r\nCan you add a example about add comment in pull request and update comment in pull request, many thanks.","createdAt":"2022-02-11T03:48:25Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/874#issuecomment-1035859143","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs4-_n-R","author":{"login":"VarnaX"},"authorAssociation":"NONE","body":"How to download a repo ?? ","createdAt":"2022-03-02T12:18:50Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/874#issuecomment-1056866193","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs5CbeJr","author":{"login":"sortalost"},"authorAssociation":"NONE","body":"@VarnaX \r\ngit clone it or recursively download its files using a for loop","createdAt":"2022-05-02T04:58:58Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/874#issuecomment-1114497643","viewerDidAuthor":false}],"createdAt":"2018-08-21T08:24:38Z","number":874,"state":"OPEN","title":"PyGithub example usage","url":"https://github.com/PyGithub/PyGithub/issues/874"},{"author":{"id":"MDQ6VXNlcjIwNTg3NzAy","is_bot":false,"login":"Ermenymw","name":"Minwu Yu"},"body":"For Github Enterprise usage, if we need to suspend an inactive user, can we have a suspend_user function call implemented?\r\nThe only solution currently is directly making a API call? https://developer.github.com/v3/users/administration/","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDQwOTc5MjU0MQ==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"As it is not currently implemented, PR are welcome","createdAt":"2018-08-02T03:16:24Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/852#issuecomment-409792541","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs5hg7TR","author":{"login":"AdrianDsg"},"authorAssociation":"NONE","body":"Hi,  \r\nI'm still pretty knew to PyGitHub and therefore not sure how to integrate the code:\r\n\r\n```python\r\ndef suspend(self):\r\n    \"\"\"\r\n    :calls: `PUT /users/{user}/suspended <https://docs.github.com/en/enterprise-server/rest/enterprise-admin/users#suspend-a-user>`_\r\n    :rtype: bool\r\n    \"\"\"\r\n    status, headers, data = self._requester.requestJson(\"PUT\", f\"{self.login}/suspended\")\r\n    return status == 204\r\n\r\n\r\ndef unsuspend(self):\r\n    \"\"\"\r\n    :calls: `DELETE /users/{user}/suspended <https://docs.github.com/en/enterprise-server/rest/enterprise-admin/users#unsuspend-a-user>`_\r\n    :rtype: bool\r\n    \"\"\"\r\n    status, headers, data = self._requester.requestJson(\"DELETE\", f\"{self.login}/suspended\")\r\n    return status == 204\r\n```\r\n\r\nI understand that this would be added to [`NamedUser.py`](https://github.com/PyGithub/PyGithub/blob/13e178a3abcdc1acfb3dd63aecc2f5e22b7772ae/github/NamedUser.py).\r\n\r\nI'd be very grateful if someone having more experience with the code could step in to provide guidance.","createdAt":"2023-07-14T15:25:27Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/852#issuecomment-1636021457","viewerDidAuthor":false}],"createdAt":"2018-07-31T20:22:50Z","number":852,"state":"OPEN","title":"usage of suspend a github enterprise user","url":"https://github.com/PyGithub/PyGithub/issues/852"},{"author":{"id":"MDQ6VXNlcjMxMDk5MTk3","is_bot":false,"login":"AdyaAbhra","name":"Abhra Dey"},"body":"I am trying to perform oauth using my github app and then read authenticated users repository and organization. However for queries related to \"list installations for user\", \"list repositories accessible to the user for installation\" and many other endpoints, I am not able to get the pygithub apis for the same.\r\n\r\nref link : http://pygithub.readthedocs.io/en/latest/apis.html\r\n\r\nPS. Previously I was using oauth app and was able to perform the flow, now since I also require to listen to events for which I needed to subscribe to webhooks, so I switched to github app.","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDQyMTE0NDUwOA==","author":{"login":"singh811"},"authorAssociation":"CONTRIBUTOR","body":"Would like to work on it.","createdAt":"2018-09-13T20:36:22Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":6}}],"url":"https://github.com/PyGithub/PyGithub/issues/828#issuecomment-421144508","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQ1MjEwODg3MA==","author":{"login":"xmnlab"},"authorAssociation":"NONE","body":"this feature would be very helpful :+1: ","createdAt":"2019-01-07T22:44:18Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/828#issuecomment-452108870","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQ4MzI1MTg5NA==","author":{"login":"eosman-tibco"},"authorAssociation":"NONE","body":"This is covered in #1021 but is awaiting approval/merge, @sfdye can we get eyes on it?","createdAt":"2019-04-15T13:29:54Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/828#issuecomment-483251894","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDUzNzEyMzgzMw==","author":{"login":"xor2003"},"authorAssociation":"NONE","body":"To get auth_token:\r\n\r\n`\r\n    installations_url = \"https://github.com/api/v3/app/installations\"\r\n    installations_response = requests.get(installations_url, headers=headers, auth=CustomJWTAuth())\r\n    installations_response.raise_for_status()\r\n\r\n    for item in installations_response.json():\r\n        installation_id = item['id']\r\n        #print (installation_id)\r\n        access_tokens_url = \"https://github.com/api/v3/app/installations/{installation_id}/access_tokens\".format(\r\n            installation_id=installation_id)\r\n        access_tokens_response = requests.post(access_tokens_url, headers=headers, auth=CustomJWTAuth())\r\n        access_tokens_response.raise_for_status()\r\n        #print (access_tokens_response.json())\r\n\r\n\r\n        token = access_tokens_response.json()['token']\r\n        #print (token)\r\n        #return github3.login(token=token)\r\n        return token\r\n\r\n    raise Exception(\"No app installations\")\r\n`","createdAt":"2019-10-01T16:45:55Z","includesCreatedEdit":true,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/828#issuecomment-537123833","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDczNDIxMzMwOA==","author":{"login":"NiklasRosenstein"},"authorAssociation":"NONE","body":"Check out https://pypi.org/project/github-bot-api/, it uses provides you with a PyGithub client for the GitHub app and its installations. (Disclaimer: I am the author of that package)","createdAt":"2020-11-26T10:26:20Z","includesCreatedEdit":true,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/828#issuecomment-734213308","viewerDidAuthor":false}],"createdAt":"2018-06-26T10:29:49Z","number":828,"state":"OPEN","title":"Support for github apps","url":"https://github.com/PyGithub/PyGithub/issues/828"},{"author":{"id":"MDQ6VXNlcjUxMTk0ODI=","is_bot":false,"login":"kevin-y","name":"Kevin"},"body":"Does this lib support github enterprise, especially the pre-receive-hook apis?\r\n\r\n- https://developer.github.com/v3/repos/pre_receive_hooks\r\n- https://developer.github.com/v3/orgs/pre_receive_hooks/\r\n- https://developer.github.com/v3/enterprise-admin/pre_receive_hooks/\r\n\r\n\r\n","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDM4MTMyODE4MQ==","author":{"login":"sfdye"},"authorAssociation":"MEMBER","body":"AFAIK `pre-receive-hooks` is not supported currently.","createdAt":"2018-04-14T13:10:48Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/739#issuecomment-381328181","viewerDidAuthor":false}],"createdAt":"2018-03-29T09:27:46Z","number":739,"state":"OPEN","title":"Support for github enterprise pre-receive-hooks","url":"https://github.com/PyGithub/PyGithub/issues/739"},{"author":{"id":"MDQ6VXNlcjEwNDk0MjM5","is_bot":false,"login":"gfreivasc","name":"Gabriel Freitas Vasconcelos"},"body":"It would be nice to have the class `GithubIntegration` coming with calls like `get_installations()`, `get_installation(:installation_id).get_repos()`, etc. Currently it only serves as a credential fetching helper class, while it is still necessary to manually make app installation specific requests.","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDM3NDI1NDkyNQ==","author":{"login":"webknjaz"},"authorAssociation":"CONTRIBUTOR","body":"M/b do this through CM?\r\n```python\r\nwith GithubIntegration(...).get_installation(...) as github_client:\r\n    github_client.get_repos()\r\n```","createdAt":"2018-03-19T15:33:02Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/725#issuecomment-374254925","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDM5NTcxMTg5Mw==","author":{"login":"webknjaz"},"authorAssociation":"CONTRIBUTOR","body":"FTR\r\nI've made a CLI for GitHub Checks API recently (https://pypi.org/p/check-in) and here's how I handle this:\r\nhttps://github.com/webknjaz/check-in/blob/master/check_in/github_api.py#L18","createdAt":"2018-06-08T09:52:53Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/725#issuecomment-395711893","viewerDidAuthor":false}],"createdAt":"2018-03-07T22:32:57Z","number":725,"state":"OPEN","title":"GithubIntegration with APP specific APIs","url":"https://github.com/PyGithub/PyGithub/issues/725"},{"author":{"id":"MDQ6VXNlcjY4ODgyOTQ=","is_bot":false,"login":"NicoHood","name":"NicoHood"},"body":"As we all know, today more than ever before, it is crucial to be able to trust our computing environments. One of the main difficulties that package maintainers of GNU/Linux distributions face, is the difficulty to verify the authenticity and the integrity of the source code. With GPG signatures it is possible for packagers to verify source code releases quickly and easily.\r\n\r\nIn order to securely package your software I am kindly requesting GPG signatures for the source tarballs. If you are not yet familiar with secure source code signing I recommend using [GPGit](https://github.com/NicoHood/gpgit) which automates the process of secure source code signing and also has a quick start guide on GPG for learning how to use it manually.\r\n\r\nThanks in advance.","comments":[],"createdAt":"2018-03-04T11:15:09Z","number":721,"state":"OPEN","title":"GPG signatures for source validation","url":"https://github.com/PyGithub/PyGithub/issues/721"},{"author":{"id":"MDQ6VXNlcjEyMDM5NzI=","is_bot":false,"login":"rexshihaoren","name":"Rex Ren"},"body":"the 'last-modified' of a file should be when the file was last updated not when the whole repo was updated","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDMzMTE4MzkwNg==","author":{"login":"peterkline"},"authorAssociation":"NONE","body":"Can you provide a code of what you are running.  How are you accessing a file object?","createdAt":"2017-09-21T15:00:29Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/629#issuecomment-331183906","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQ1OTU5ODUxOA==","author":{"login":"rgerkin"},"authorAssociation":"NONE","body":"@peterkline Could you reopen this?  Still a bug; here is example code:  \r\n```\r\nfrom github import Github\r\ng = Github(\"rgerkin\", XXXX)\r\nrepo = g.get_repo('scidash/sciunit')\r\nfile = repo.get_file_contents('MANIFEST.in')\r\nprint(file.last_modified)\r\n```\r\nThis will print \"Fri, 01 Feb 2019 04:01:05 GMT\" but the [file](https://github.com/scidash/sciunit/blob/master/MANIFEST.in) hasn't been updated in 9 months.  \r\n\r\n","createdAt":"2019-02-01T04:05:40Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/629#issuecomment-459598518","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQ1OTYwMTQzOA==","author":{"login":"rgerkin"},"authorAssociation":"NONE","body":"Proposed fix in #1032.","createdAt":"2019-02-01T04:25:50Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/629#issuecomment-459601438","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQ3OTEyNDU4MQ==","author":{"login":"rgerkin"},"authorAssociation":"NONE","body":"@sfdye if you want to reopen this, the fix in #1032 works and all tests should pass if the build is restarted.  The only failing tests (after the second commit) were not relevant to this PR and have since been fixed in master.","createdAt":"2019-04-02T18:04:57Z","includesCreatedEdit":true,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":2}}],"url":"https://github.com/PyGithub/PyGithub/issues/629#issuecomment-479124581","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDY2ODQ4NTkwNQ==","author":{"login":""},"authorAssociation":"NONE","body":"This issue is still present in version 1.52. ","createdAt":"2020-08-04T09:20:26Z","includesCreatedEdit":true,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/629#issuecomment-668485905","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDY2ODc0ODk3Nw==","author":{"login":"rgerkin"},"authorAssociation":"NONE","body":"Yes, I fixed it last year in #1032 but it has not yet been merged.","createdAt":"2020-08-04T18:14:50Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/629#issuecomment-668748977","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDY2OTAzMDcyNQ==","author":{"login":""},"authorAssociation":"NONE","body":"Can we then reopen the issue until it is merged?","createdAt":"2020-08-05T07:28:35Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/629#issuecomment-669030725","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDcwNjc4NTczNg==","author":{"login":"stale"},"authorAssociation":"NONE","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","createdAt":"2020-10-11T23:33:38Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/629#issuecomment-706785736","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDc3NDQ2NDI2NQ==","author":{"login":"klaudworks"},"authorAssociation":"NONE","body":"still not working...","createdAt":"2021-02-06T12:01:51Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/629#issuecomment-774464265","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDc3NDQ3OTAzNg==","author":{"login":"peterkline-es"},"authorAssociation":"NONE","body":"It looks like the fix was never merged as the PR didn't pass tests .  Closed as stale not fixed.  ","createdAt":"2021-02-06T13:39:14Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/629#issuecomment-774479036","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDc3NTI5MDAyNg==","author":{"login":"rgerkin"},"authorAssociation":"NONE","body":"It was always working.  The problem was always in the unit tests.  Many users are now just using my commit as a hotfix since they want dates to work.","createdAt":"2021-02-08T16:58:17Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/629#issuecomment-775290026","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs426tNF","author":{"login":"yigangzhang"},"authorAssociation":"NONE","body":"Can we please reopen this issue? Or open a new issue to fix it? Still NOT working in 1.55. \r\nWe use this library on prod to retrieve files and sort them by last modified time. Took us hours to troubleshoot that last modified time is the same for all files because it's the repo time.\r\nNow we have to append modify time to filename or file content. \r\nIt's a good library but it's bit painful because of this bug.","createdAt":"2021-09-17T00:35:03Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/629#issuecomment-921359173","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs4_dtvp","author":{"login":"AntonOfTheWoods"},"authorAssociation":"NONE","body":"@rgerkin , can you expand on what you mean by \"The problem was always in the unit tests.\". You mean that the repo unit tests are broken, or that you don't care that the tests for your fix don't work?","createdAt":"2022-03-11T04:12:32Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/629#issuecomment-1064754153","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs4_fpae","author":{"login":"rgerkin"},"authorAssociation":"NONE","body":"I mean that the unit tests are broken.  I would definitely care if my fix was responsible for making good tests fail.","createdAt":"2022-03-11T16:11:59Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":1}}],"url":"https://github.com/PyGithub/PyGithub/issues/629#issuecomment-1065260702","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs5zTJ4p","author":{"login":"EnricoMi"},"authorAssociation":"COLLABORATOR","body":"That `last-modified` attribute is a property of all github objects and is coming from the HTTP response. You are here referring to the last-modified timestamp of a git file. I think, that should be a different property like `file_last_modified`, to avoid conflicting expectations. Happy to review a PR.","createdAt":"2024-02-08T15:43:15Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/629#issuecomment-1934401065","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs5zTMwo","author":{"login":"EnricoMi"},"authorAssociation":"COLLABORATOR","body":"Looks like the proposed fix\r\n```\r\n        commits = self.repository.get_commits(path=self.path)\r\n        if commits.totalCount:\r\n            self._last_modified = self._makeStringAttribute(\r\n                str(commits[0].commit.author.date)\r\n            )\r\n        else:\r\n            self._last_modified = github.GithubObject.NotSet\r\n        return self._last_modified.value\r\n```\r\nis more of a convenience method rather than something Github supports.","createdAt":"2024-02-08T15:48:56Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/629#issuecomment-1934412840","viewerDidAuthor":false}],"createdAt":"2017-09-15T10:54:10Z","number":629,"state":"OPEN","title":"wrong 'last-modified'","url":"https://github.com/PyGithub/PyGithub/issues/629"},{"author":{"id":"MDQ6VXNlcjI1NjQ4MTY2","is_bot":false,"login":"instructure-analytics","name":""},"body":"I notice that the GitHubObject has an `eTag` attribute, but I don't see the ability to pass this in to any of the different api calls.  Am I missing something or is this a missing feature?  I notice it's mentioned in the v2 API docs.","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDQwMjYzMDE1Mw==","author":{"login":"stale"},"authorAssociation":"NONE","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","createdAt":"2018-07-05T07:26:27Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/536#issuecomment-402630153","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQxOTg2ODUxNg==","author":{"login":"stale"},"authorAssociation":"NONE","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","createdAt":"2018-09-10T10:38:20Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/536#issuecomment-419868516","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDQyMTAwMTg1Nw==","author":{"login":"raphaelyancey"},"authorAssociation":"NONE","body":"I also would very much like this to be implemented in PyGithub.","createdAt":"2018-09-13T13:12:42Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":3}}],"url":"https://github.com/PyGithub/PyGithub/issues/536#issuecomment-421001857","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs4_9w4t","author":{"login":"jovezhong"},"authorAssociation":"NONE","body":"+1 If this lib can keep tracking the ETag and sending `If-None-Match: last_etag` in header, this will make us much easier to keep calling the GitHub REST API without being throttled or getting duplicated events\r\n\r\nExample on https://docs.github.com/en/rest/reference/activity\r\n\r\n> $ curl -I https://api.github.com/users/tater/events\r\n> > HTTP/2 200\r\n> > X-Poll-Interval: 60\r\n> > ETag: \"a18c3bded88eb5dbb5c849a489412bf3\"\r\n> \r\n> The quotes around the ETag value are important\r\n> $ curl -I https://api.github.com/users/tater/events \\\r\n> $    -H 'If-None-Match: \"a18c3bded88eb5dbb5c849a489412bf3\"'\r\n> > HTTP/2 304\r\n> > X-Poll-Interval: 60","createdAt":"2022-03-20T03:03:09Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":2}}],"url":"https://github.com/PyGithub/PyGithub/issues/536#issuecomment-1073155629","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs5RyaiE","author":{"login":"michaelwooley"},"authorAssociation":"NONE","body":"I think that this can be achieved (to greater and lesser degrees) by making it easy for users to leverage [`requests-cache`](https://requests-cache.readthedocs.io/en/stable/index.html). (That is, I don't think that PyGithub needs to get into the business of cache management.)\r\n\r\nIn fact, `requests-cache` has a [sample script that demonstrates use with the PyGithub specifically](https://github.com/requests-cache/requests-cache/blob/53134ef0e99d713fed62515dfb7bcfaac5f63f9d/examples/pygithub.py). I like that it works but I'm not crazy about the fact that it clobbers the entire `requests` package in order to do so. [The docs also mention some other issues](https://requests-cache.readthedocs.io/en/stable/modules/requests_cache.patcher.html).\r\n\r\nI have a draft branch implementing a second approach to this: https://github.com/PyGithub/PyGithub/compare/master...michaelwooley:PyGithub:michaelwooley/add-custom-session . Basically, this allows someone to pass in a custom `requests.Session` similar to what happens in  [`python-gitlab`](https://python-gitlab.readthedocs.io/en/stable/api-usage-advanced.html#using-a-custom-session).\r\n\r\nThis [**colab notebook**](https://colab.research.google.com/drive/1p-qf4lf-YdQSIegJAkNDzQFHZKrai8Lc?usp=sharing) demos my progress so far.\r\n\r\nI'm encountering issues with insuring that the headers are handled correctly, though. In particular:\r\n\r\n- _rate limit updates._ (I actually am less concerned about this currently.) Don't want to pull stale rate limit info from a cached response.\r\n- _etag parsing_ This is something I need to look into more.\r\n\r\n_If there is still interest in this, I could add further tests and open up an MR._","createdAt":"2023-01-05T12:45:23Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":2}}],"url":"https://github.com/PyGithub/PyGithub/issues/536#issuecomment-1372170372","viewerDidAuthor":false}],"createdAt":"2017-03-15T22:38:49Z","number":536,"state":"OPEN","title":"ETag not supported to make conditional requests through API?","url":"https://github.com/PyGithub/PyGithub/issues/536"},{"author":{"id":"MDQ6VXNlcjMxMTIxODg=","is_bot":false,"login":"meneal","name":"Matthew Neal"},"body":"When recording a test and using a `GithubCredentials.py` like:\r\n\r\n```\r\nlogin = \"meneal\"\r\npassword = \"\"\r\noauth_token = \"REDACTED\"\r\n```\r\n\r\nthe test recorder places the string `token private_token_removed` in the recorded file.  When the test is run after the recording is made, the following stack trace is produced:\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"github/tests/OrganizationHasInMembers.py\", line 32, in setUp\r\n    self.user = self.g.get_user(\"meneal\")\r\n  File \"github/MainClass.py\", line 159, in get_user\r\n    \"/users/\" + login\r\n  File \"github/Requester.py\", line 172, in requestJsonAndCheck\r\n    return self.__check(*self.requestJson(verb, url, parameters, headers, input, cnx))\r\n  File \"github/Requester.py\", line 213, in requestJson\r\n    return self.__requestEncode(cnx, verb, url, parameters, headers, input, encode)\r\n  File \"github/Requester.py\", line 252, in __requestEncode\r\n    status, responseHeaders, output = self.__requestRaw(cnx, verb, url, requestHeaders, encoded_input)\r\n  File \"github/Requester.py\", line 277, in __requestRaw\r\n    requestHeaders\r\n  File \"github/tests/Framework.py\", line 151, in request\r\n    self.__testCase.assertEqual(headers, eval(readLine(self.__file)))\r\nAssertionError: {'Authorization': 'Basic login_and_password_removed', 'User-Agent': 'PyGithub/Py [truncated]... != {'Authorization': 'token private_token_removed', 'User-Agent': 'PyGithub/Python' [truncated]...\r\n- {'Authorization': 'Basic login_and_password_removed',\r\n+ {'Authorization': 'token private_token_removed',\r\n   'User-Agent': 'PyGithub/Python'}\r\n```\r\n\r\nI manually changed the string in the recorded file to be `Basic login_and_password_removed` and the test passed with no error. I believe there are two options for this:\r\n\r\n- Make the test in `Framework.py` in some way accept the `token_private_token_removed`\r\n- Change something(not sure what this is offhand) in the recorder to make it use `Basic login_and_password_removed` regardless of whether a token or basic login is used.","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDY1MDExNTkwNQ==","author":{"login":"s-t-e-v-e-n-k"},"authorAssociation":"COLLABORATOR","body":"I keep getting bitten by this, so I may get sufficiently annoyed to fix it.","createdAt":"2020-06-26T10:49:20Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/516#issuecomment-650115905","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs5yiIA1","author":{"login":"treee111"},"authorAssociation":"CONTRIBUTOR","body":"I had that trouble as well.\r\nFor reference: One needs to replace the string **two times** in the recorded file - at upper and lower position.","createdAt":"2024-02-01T15:08:11Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/516#issuecomment-1921548341","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs5yik4Y","author":{"login":"EnricoMi"},"authorAssociation":"COLLABORATOR","body":"Is this still a problem? Unless you run `pytest --record` with `--auth_with_token`, it should prefer the login / basic auth method.","createdAt":"2024-02-01T16:05:38Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/516#issuecomment-1921666584","viewerDidAuthor":false},{"id":"IC_kwDOADYVqs5yj6s-","author":{"login":"treee111"},"authorAssociation":"CONTRIBUTOR","body":"I only got it running with `--auth_with_token`, thought that is needed die to 2 factor authentication. Is this not correct and I could recors in another way?","createdAt":"2024-02-01T18:56:50Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/PyGithub/PyGithub/issues/516#issuecomment-1922018110","viewerDidAuthor":false}],"createdAt":"2017-01-19T02:31:33Z","number":516,"state":"OPEN","title":"Test recorder adds wrong string for token authorization","url":"https://github.com/PyGithub/PyGithub/issues/516"},{"author":{"id":"MDQ6VXNlcjMwMTk2NjU=","is_bot":false,"login":"jakirkham","name":""},"body":"GitHub added some support to pick up some new Milestone and Label events. Would be great if these were supported/tested by PyGithub.\r\n\r\nref: https://developer.github.com/changes/2016-10-27-new-label-and-milestone-webhooks","comments":[],"createdAt":"2016-12-09T17:46:32Z","number":503,"state":"OPEN","title":"Handling new milestone and label events","url":"https://github.com/PyGithub/PyGithub/issues/503"}]
